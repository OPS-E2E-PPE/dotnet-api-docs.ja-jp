<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="efd77186502e685587c46b18be970ce61d0a528d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75156633" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d3fbe-101">ユーザー定義型 (UDT) およびユーザー定義集計のシリアル化と逆シリアル化に対し、カスタム実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fbe-102">ストレージ形式を定義するには、ユーザー定義型 (Udt) とユーザー定義集計を使用する必要があります。 <xref:Microsoft.SqlServer.Server.Format>できます。`Native`</span><span class="sxs-lookup"><span data-stu-id="d3fbe-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="d3fbe-103">または <xref:Microsoft.SqlServer.Server.Format>。`UserDefined`。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="d3fbe-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="d3fbe-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="d3fbe-105">SQL Server によるシリアル化と逆シリアル化の自動的な処理を可能にします。ただし、形式には、処理できる型の種類に関する制限があります。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="d3fbe-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="d3fbe-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="d3fbe-107">ユーザー定義型および集計が独自のシリアル化を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="d3fbe-108">ユーザー定義型および集計は、<xref:Microsoft.SqlServer.Server.Format>でマークする必要があります。`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="d3fbe-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="d3fbe-109">`SqlUserDefinedType` または `SqlUserDefinedAggregate` 属性で、とは <xref:Microsoft.SqlServer.Server.IBinarySerialize> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="d3fbe-110">カスタムシリアル化を使用している場合でも、各インスタンスの合計サイズは、最大許容制限 (現在は8000バイト) 未満である必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="d3fbe-111">オブジェクトの逆シリアル化元である <see cref="T:System.IO.BinaryReader" /> ストリーム。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="d3fbe-112">ユーザー定義型 (UDT) またはユーザー定義集計をバイナリ形式から生成します。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fbe-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> メソッドは、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> メソッドによって記述された情報を使用してオブジェクトを再構築する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fbe-114">次の例は、<xref:System.IO.BinaryReader> を使用して以前に保存された UDT を逆シリアル化する UDT の <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> メソッドの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="d3fbe-115">この例では、UDT に `StringValue` と `DoubleValue`という2つのデータプロパティがあることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="d3fbe-116">シリアル化した UDT またはユーザー定義集計を格納する <see cref="T:System.IO.BinaryWriter" /> ストリーム。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span></span></param>
        <summary><span data-ttu-id="d3fbe-117">ユーザー定義型 (UDT) またはユーザー定義集計を永続化できるように、バイナリ形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fbe-118"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> メソッドで UDT またはユーザー定義集計を再構築できるように、バイナリストリームに十分な情報を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fbe-119">次の例は、UDT の <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> メソッドの実装を示しています。これは、<xref:System.IO.BinaryWriter> を使用して、ユーザー定義のバイナリ形式で UDT をシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="d3fbe-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="d3fbe-120">Null 文字の埋め込みの目的は、文字列値が double 値と完全に分離されるようにすることです。これにより、1つの UDT が Transact-sql コード内の別の UDT と比較され、文字列バイトが文字列バイトと比較され、double バイトが double と比較されます。メモリ.</span><span class="sxs-lookup"><span data-stu-id="d3fbe-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
