<Type Name="IOrderedEnumerable&lt;TElement&gt;" FullName="System.Linq.IOrderedEnumerable&lt;TElement&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="470bc5acb4d3cad9522ef4939749f61ab960e90c" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73387116" /></Metadata><TypeSignature Language="C#" Value="public interface IOrderedEnumerable&lt;TElement&gt; : System.Collections.Generic.IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOrderedEnumerable`1&lt;TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IOrderedEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOrderedEnumerable(Of TElement)&#xA;Implements IEnumerable(Of TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TElement&gt;&#xA;public interface class IOrderedEnumerable : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="F#" Value="type IOrderedEnumerable&lt;'Element&gt; = interface&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TElement">シーケンスの要素の型。</typeparam>
    <summary>並べ替えられたシーケンスを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この型は <xref:System.Collections.Generic.IEnumerable%601>から継承するため、列挙可能です。  
  
 拡張メソッド <xref:System.Linq.Enumerable.ThenBy%2A> および <xref:System.Linq.Enumerable.ThenByDescending%2A> は <xref:System.Linq.IOrderedEnumerable%601>型のオブジェクトに対して動作します。 <xref:System.Linq.IOrderedEnumerable%601> 型のオブジェクトは、<xref:System.Linq.Enumerable.OrderBy%2A> または <xref:System.Linq.Enumerable.OrderByDescending%2A>のいずれか1つを呼び出すことによって取得できます。このメソッドは <xref:System.Linq.IOrderedEnumerable%601>を返します。 <xref:System.Linq.Enumerable.ThenBy%2A> と <xref:System.Linq.Enumerable.ThenByDescending%2A>では、下位の並べ替えメソッドも <xref:System.Linq.IOrderedEnumerable%601>型のオブジェクトを返します。 この設計では、<xref:System.Linq.Enumerable.ThenBy%2A> または <xref:System.Linq.Enumerable.ThenByDescending%2A>に対して任意の数の連続した呼び出しを行うことができます。各呼び出しでは、前の呼び出しで返された並べ替えられたデータに対して下位の順序が実行されます。  
  
   
  
## Examples  
 次の例は、文字列の配列でプライマリとセカンダリの順序付けを実行する方法を示しています。 また、結果として得られる <xref:System.Linq.IOrderedEnumerable%601> が列挙可能であることも示します。  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#1)]
 [!code-vb[System.Linq.IOrderedEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateOrderedEnumerable&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedEnumerable&lt;TElement&gt; CreateOrderedEnumerable&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer, bool descending);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedEnumerable`1&lt;!TElement&gt; CreateOrderedEnumerable&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, bool descending) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOrderedEnumerable(Of TKey) (keySelector As Func(Of TElement, TKey), comparer As IComparer(Of TKey), descending As Boolean) As IOrderedEnumerable(Of TElement)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA; System::Linq::IOrderedEnumerable&lt;TElement&gt; ^ CreateOrderedEnumerable(Func&lt;TElement, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer, bool descending);" />
      <MemberSignature Language="F#" Value="abstract member CreateOrderedEnumerable : Func&lt;'Element, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * bool -&gt; System.Linq.IOrderedEnumerable&lt;'Element&gt;" Usage="iOrderedEnumerable.CreateOrderedEnumerable (keySelector, comparer, descending)" />
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedEnumerable&lt;out TElement&gt; CreateOrderedEnumerable&lt;TKey&gt; (Func&lt;out TElement,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer, bool descending);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.6;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOrderedEnumerable(Of TKey) (keySelector As Func(Of Out TElement, TKey), comparer As IComparer(Of TKey), descending As Boolean) As IOrderedEnumerable(Of Out TElement)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.6;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><paramref name="keySelector" /> によって生成されるキーの型。</typeparam>
        <param name="keySelector">各要素のキーの抽出に使用される <see cref="T:System.Func`2" />。</param>
        <param name="comparer">返されたシーケンスでの配置用のキーの比較に使用される <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
        <param name="descending">要素を降順に並べ替える <see langword="true" />、要素を昇順に並べ替える <see langword="false" />。</param>
        <summary>キーに従って <see cref="T:System.Linq.IOrderedEnumerable`1" /> の要素に対して後続の並べ替えを実行します。</summary>
        <returns>要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって提供される機能は、`descending` が `true` か `false`かによって <xref:System.Linq.Enumerable.ThenBy%2A> または <xref:System.Linq.Enumerable.ThenByDescending%2A>によって提供される機能と似ています。 これらはどちらも、既に並べ替えられた型 <xref:System.Linq.IOrderedEnumerable%601>のシーケンスの下位順序を実行します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable*> を使用して、<xref:System.Linq.IOrderedEnumerable%601>に対してセカンダリ順序を実行する方法を示します。  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#2)]
 [!code-vb[System.Linq.IOrderedEnumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
