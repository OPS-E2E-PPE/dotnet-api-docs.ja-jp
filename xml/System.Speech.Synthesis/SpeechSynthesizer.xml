<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf1c30b65215edc94db71ce68335c822a8e1680" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78786564" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>インストール済みの音声合成エンジン機能へのアクセスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトを作成すると、既定のシステム音声が使用されます。 インストールされている音声合成 (音声合成) のいずれかを使用するように <xref:System.Speech.Synthesis.SpeechSynthesizer> を構成するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドを使用します。 インストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用します。  
  
 このクラスは、音声合成の次の側面を制御することもできます。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトの出力を構成するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> の各メソッドを使用します。  
  
-   音声を生成するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドを使用します。 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、テキスト、<xref:System.Speech.Synthesis.Prompt> または <xref:System.Speech.Synthesis.PromptBuilder> オブジェクト、または[音声合成マークアップ言語 (SSML) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)から音声を生成することができます。  
  
-   音声合成を一時停止および再開するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> メソッドと <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> メソッドを使用します。  
  
-   辞書を追加または削除するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> メソッドと <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> メソッドを使用します。 <xref:System.Speech.Synthesis.SpeechSynthesizer> では、1つまたは複数の辞書を使用して単語の発音をガイドできます。  
  
-   音声出力の配信を変更するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> プロパティと <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> プロパティを使用します。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、プロンプトで特定の機能 (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>、<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>、<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>) が発生したときにイベントを発生させます。 また、読み上げ操作の開始 (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) と終了 (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) について報告するイベントや、話し方の声の変化 (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>) も発生します。  
  
> [!NOTE]
>  <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A>への最後の参照を解放する前に、必ず<xref:System.Speech.Synthesis.SpeechSynthesizer>を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトの <xref:System.Object.Finalize%2A> メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
   
  
## Examples  
 次の例は、<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトを初期化して文字列を読み上げるコンソールアプリケーションの一部です。  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)">音声合成</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい <xref:System.Speech.Synthesis.SpeechSynthesizer> インスタンスを初期化すると、既定のシステム音声が使用されます。 インストールされている音声合成 (音声合成) のいずれかを使用するように <xref:System.Speech.Synthesis.SpeechSynthesizer> を構成するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドを使用します。 インストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLexicon (uri As Uri, mediaType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">辞書情報の場所。</param>
        <param name="mediaType">辞書のメディア タイプ。 メディアの種類の値では大文字と小文字は区別されません。</param>
        <summary>用語集を <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発音辞書とは、サポートされている発音記号の文字と文字で構成される単語または語句とその発音をまとめたものです。 辞書を使用して、アプリケーションで特殊な語彙のカスタム発音を指定することができます。  
  
 外部辞書ファイルに指定された発音は、音声シンセサイザーの内部辞書または辞書の発音よりも優先されます。 ただし、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>、または <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> メソッドを使用して作成されたプロンプトでインラインで指定された発音は、どの辞書に指定されている発音よりも優先されます。 インライン発音は、単語が1回出現する場合にのみ適用されます。 詳細については[、「辞書と発音のアルファベット](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14))」を参照してください。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトに複数の辞書を追加できます。`mediaType` パラメーターでは、次の2つの値がサポートされています。  
  
-   `application/pls+xml` 値は、辞書が[発音辞書仕様 (てい) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201766)に準拠していることを示します。 この形式を使用することをお勧めします。  
  
-   `application/vdn.ms-sapi-lex` 値は、辞書形式が非圧縮辞書であることを示します。これは、Microsoft 独自の形式です。 これは従来の形式であり、上記のてい形式を使用することをお勧めします。  
  
   
  
## Examples  
 次の例は、"blue" という単語のカスタム発音を含む辞書を追加および削除した場合の効果を示しています。 辞書では、"bleep" のように音を鳴らす "青" の発音を定義しています。 辞書が読み込まれている間、音声シンセサイザーは辞書に定義されている発音を使用します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 次に、用語集ファイル Blue. ていの内容を示します。  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> がプロンプトのブックマークを検出したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> のメソッドの処理中にこのイベントを発生させます。 イベントに関連付けられているデータの詳細については、「<xref:System.Speech.Synthesis.BookmarkReachedEventArgs>」を参照してください。  
  
 <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> メソッドを使用して、ブックマークを追加できます。  
  
   
  
## Examples  
 次の例では、2つのブックマークを含むプロンプトを作成し、再生用の WAV ファイルに出力を送信します。 イベントがコンソールに発生したときに、<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> イベントのハンドラーによって、ブックマークの名前とその位置がオーディオストリームに書き込まれます。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを破棄し、セッション中に使用するリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> メソッドが呼び出されなかった場合にリソースをクリーンアップするための安全装置として動作します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> が読み上げているプロンプトを取得します。</summary>
        <returns>現在読み上げられているプロンプト オブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在システムにインストールされている音声合成 (音声変換) の音声のコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリ内で検出された各ボイス (音声合成エンジン) が特定の最小条件を満たしていることを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インストール済みの音声合成 (音声変換) の音声を返します。</summary>
        <returns>システムに現在インストールされている、音声の読み取り専用のコレクションを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 音声は、システムにインストールされている音声合成 (音声合成または TTS) のエンジンです。  
  
   
  
## Examples  
 次の例は、<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトを初期化し、インストールされている音声の一覧 (音声合成用エンジン) をコンソールに出力し、各音声に使用できる情報を示すコンソールアプリケーションの一部です。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">音声がサポートする必要があるロケール。</param>
        <summary>特定のロケールをサポートする、インストール済みの音声合成 (音声変換) の音声を返します。</summary>
        <returns>指定のロケールをサポートするシステムに現在インストールされている、音声の読み取り専用のコレクションを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インストールされているどの音声も指定されたロケールをサポートしていない場合、このメソッドは空のコレクションを返します。  
  
 Microsoft Windows とシステム。 Speech API 有効な国コードをすべて受け入れます。 カルチャプロパティで指定された言語を使用して音声合成エンジンを実行するには、その言語の国コードをサポートする音声合成エンジンがインストールされている必要があります。 Microsoft Windows 7 に付属している音声合成エンジンは、次の言語の国コードで動作します。  
  
-   en-US. 英語 (U.S.)  
  
-   zh-CN. 中国語 (中国)  
  
-   zh-TW. 中国語 (台湾)  
  
 "En" など、2文字の言語コードも許可されます。  
  
   
  
## Examples  
 次の例は、<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトを初期化し、en-us ロケールをサポートするインストール済みの音声のリストをコンソールに出力するコンソールアプリケーションの一部です。  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを一時停止します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音素に到達したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 音素は、記述された言語の基本コンポーネントです。通常は、1つまたは複数の個別のサウンドを表すアルファベットの文字 (または2文字の組み合わせ) です。 たとえば、"c" という文字は、"cinder" の "s" のように聞こえる可能性のある音素、または "catch" の "k" のようなものです。 書かれた単語は、音素の集合体です。 単語内の音素を変更すると、そのスペルが変更されます。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> インスタンスは、音素を構成する単語の各部分に対して <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> イベントを生成します。 たとえば、"theme" という語の場合、3つの <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> イベントが生成されます。1つは "th" サウンド、もう1つは "e" サウンド、もう1つは "m" サウンド (me) 用です。  
  
 イベントに関連付けられているデータの例と情報については、「<xref:System.Speech.Synthesis.PhonemeReachedEventArgs>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの読み上げ速度を取得または設定します。</summary>
        <value><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの読み上げ速度を -10 ～ 10 の範囲で返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、読み上げ速度が-2 に設定された文字列を示しています。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveLexicon (uri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">辞書文書の場所。</param>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトから辞書を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例については、「<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止した後、<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを再開します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">選択する音声の名前。</param>
        <summary>特定の音声を名前で選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前を取得します。このテキストは選択できます。 音声を選択するには、<xref:System.Speech.Synthesis.VoiceInfo.Name%2A> プロパティの内容全体を、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドの引数として渡します。 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、音声の <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> プロパティに `name` が含まれている最初にインストールされた音声を選択します。 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、大文字と小文字を区別し、部分文字列の比較を実行して、音声が `name`と一致するかどうかを判断します。  
  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 性別、年齢、またはロケールで音声を選択するには、いずれかの <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法を使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の特徴を持つ音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前を取得します。このテキストは選択できます。 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、指定した特性に一致する最初にインストールされた音声を選択します。  
  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 名前で音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <summary>特定の性別の音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前を取得します。このテキストは選択できます。 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> プロパティが `gender` パラメーターと一致する最初にインストールされた音声を選択します。  
  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 他の特性に基づいて音声を選択する方法については、「その他の <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法」を参照してください。  
  
 名前で音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <param name="age">選択する音声の期間。</param>
        <summary>特定の性別と年齢の音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前を取得します。このテキストは選択できます。 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、インストールされている最初の音声を選択し、その <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> と <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> プロパティが `gender` パラメーターと `age` パラメーターと一致します。  
  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 他の特性に基づいて音声を選択する方法については、「その他の <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法」を参照してください。  
  
 名前で音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <param name="age">選択する音声の期間。</param>
        <param name="voiceAlternate">選択する音声の場所。</param>
        <summary>音声が並べられる位置に基づき、特定の性別や年齢の音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前を取得します。このテキストは選択できます。 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> と <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> プロパティが `gender` および `age` パラメーターと一致する、インストールされている音声を検索します。 <xref:System.Speech.Synthesis.SpeechSynthesizer> によって検出された一致がカウントされ、カウントが `voiceAlternate` パラメーターと等しい場合は音声が返されます。  
  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 他の特性に基づいて音声を選択するには、他の <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> のオーバーロードを参照してください。  
  
 名前で音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <param name="age">選択する音声の期間。</param>
        <param name="voiceAlternate">選択する音声の場所。</param>
        <param name="culture">選択する音声のロケール。</param>
        <summary>音声が並べられる位置に基づき、特定の性別、年齢、ロケールの音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>、<xref:System.Speech.Synthesis.VoiceInfo.Age%2A>、および <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> プロパティが `gender`、`age`、および `culture` パラメーターと一致する音声を検索します。 <xref:System.Speech.Synthesis.SpeechSynthesizer> によって検出された一致がカウントされ、カウントが `voiceAlternate` パラメーターと等しい場合は音声が返されます。  
  
 Microsoft Windows とシステム。 Speech API 有効な国コードをすべて受け入れます。 `culture` パラメーターに指定された言語を使用して音声合成エンジンを実行するには、その言語の国コードをサポートする音声合成エンジンがインストールされている必要があります。 Microsoft Windows 7 に付属している音声合成エンジンは、次の言語の国コードで動作します。  
  
-   en-US. 英語 (U.S.)  
  
-   zh-CN. 中国語 (中国)  
  
-   zh-TW. 中国語 (台湾)  
  
 "En" など、2文字の言語コードも許可されます。  
  
 アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。 検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。 アプリケーションでは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声を選択できません。 通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。  
  
 他の特性に基づいて音声を選択するには、他の <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> のオーバーロードを参照してください。  
  
 名前で音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination">合成出力を追加するストリーム。</param>
        <param name="formatInfo">合成出力に使用する形式。</param>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを、オーディオ ストリームへの出力を追加するように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> を呼び出して、ストリームへの <xref:System.Speech.Synthesis.SpeechSynthesizer>の参照を解放します。  
  
 その他の出力構成オプションについては、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> の各メソッドを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを、既定のオーディオ デバイスへの出力を送信するように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンピューターの既定のオーディオデバイスを構成するには、Windows の**コントロールパネル**の **[サウンド]** ウィンドウを使用します。  
  
 その他の出力構成オプションについては、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> の各メソッドを参照してください。  
  
   
  
## Examples  
 次の例では、シンセサイザーを使用して、既定のオーディオ出力に対して語句を読み上げます。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを、合成操作からの出力をデバイス、ファイル、またはストリームに送信しないように設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、ファイルまたはストリームへの <xref:System.Speech.Synthesis.SpeechSynthesizer>の参照を解放します。 例については、「<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>」を参照してください。  
  
 その他の出力構成オプションについては、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> の各メソッドを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを、WAVE 形式のオーディオ形式ファイルに出力を追加するように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルへの <xref:System.Speech.Synthesis.SpeechSynthesizer>の参照を解放するには、たとえば <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>を呼び出すことによって、<xref:System.Speech.Synthesis.SpeechSynthesizer>の出力を再構成します。  
  
 その他の出力構成オプションについては、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> の各メソッドを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのパス。</param>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを、WAVE 形式のオーディオを含むファイルに出力を追加するように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出力を構成し、オーディオ形式を指定するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> メソッドを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Media.SoundPlayer> のインスタンスを使用して、.wav ファイルに出力されたプロンプトを再生します。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> の呼び出しは非同期であるため、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントのハンドラーで <xref:System.Media.SoundPlayer> インスタンス (および <xref:System.Media.SoundPlayer.Play%2A> メソッドが呼び出されます) が作成されます。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのパス。</param>
        <param name="formatInfo">オーディオ形式の情報。</param>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> のオブジェクトを、指定された形式で WAVE 形式のオーディオ形式ファイルに出力を追加するように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、音声合成の出力形式を指定し、WAV ファイルに送信します。  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination">合成出力を追加するストリーム。</param>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトを、WAVE 形式のオーディオを含むストリームに出力を追加するように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ストリームへの <xref:System.Speech.Synthesis.SpeechSynthesizer>の参照を解放するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>を呼び出すなどして、シンセサイザーの出力を再構成します。  
  
 その他の出力構成オプションについては、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> の各メソッドを参照してください。  
  
   
  
## Examples  
 次の例では、WAV ストリームに語句を出力します。  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列、<see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクト、または <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから同期で出力される音声を生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドは、音声を同期的に生成します。 メソッドは、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> インスタンスの内容が完全に話されるまでは戻りません。 これは、音声を生成する最も簡単な方法です。 ただし、アプリケーションで読み上げ中にタスクを実行する必要がある場合は (テキストの強調表示、アニメーションの表示、コントロールの監視などのタスク)、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドまたは <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドを使用して、音声を非同期に生成します。  
  
 このメソッドの呼び出し中に、<xref:System.Speech.Synthesis.SpeechSynthesizer> は次のイベントを発生させることができます。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>) シンセサイザーの読み上げの状態が変化したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) シンセサイザーが音声の生成を開始するときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>) シンセサイザーが1つの文字または文字の組み合わせに到達するたびに発生し、言語の音声を個別に発音します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>) シンセサイザーが単語の読み上げを完了するたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>) 音声の生成に使用される口の位置または顔の筋肉を変更する必要があるたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>) シンセサイザーがプロンプトでブックマークを検出したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>) シンセサイザーの読み上げ音声が変化したときに発生します。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドの処理中に <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントを発生させません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (prompt As Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">話すコンテンツ。</param>
        <summary>非同期的に <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクトのコンテンツを指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.Prompt> オブジェクトの内容を非同期に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>を使用します。  
  
   
  
## Examples  
 次の例では、文字列から <xref:System.Speech.Synthesis.Prompt> オブジェクトを作成し、そのオブジェクトを引数として <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドに渡します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (promptBuilder As PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">話すコンテンツ。</param>
        <summary>非同期的に <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのコンテンツを指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトの内容を非同期に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>を使用します。  
  
   
  
## Examples  
 次の例では、文字列から <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、そのオブジェクトを引数として <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドに渡します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキスト。</param>
        <summary>同期的に文字列のコンテンツを指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SSML マークアップを含む文字列を同期的に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドを使用します。 文字列の内容を非同期に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドを使用します。  
  
   
  
## Examples  
 次の例に示すように、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドは、音声出力を同期的に生成する最も簡単な方法を提供します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列、<see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクト、または <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから非同期で出力される音声を生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドは、音声を非同期的に生成します。 メソッドは、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> オブジェクトの内容が読み上げを完了するのを待たずに直ちに戻ります。 アプリケーションで読み上げ中にタスクを実行する必要がある場合は <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> を使用します。たとえば、強調表示テキスト、ペイントアニメーション、モニターコントロールなどのタスクを実行する必要があります。  
  
 このメソッドの呼び出し中に、<xref:System.Speech.Synthesis.SpeechSynthesizer> は次のイベントを発生させることができます。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>) シンセサイザーの読み上げの状態が変化したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) シンセサイザーが音声の生成を開始するときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>) シンセサイザーが1つの文字または文字の組み合わせに到達するたびに発生し、言語の音声を個別に発音します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>) シンセサイザーが単語の読み上げを完了するたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>) 音声の生成に使用される口の位置または顔の筋肉を変更する必要があるたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>) シンセサイザーがプロンプトでブックマークを検出したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>) シンセサイザーの読み上げ音声が変化したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) シンセサイザーが <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 操作を終了したときに発生します。  
  
 アプリケーションで読み上げ中にタスクを実行する必要がない場合は、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドまたは <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドを使用して、同期的に音声を生成することができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsync (prompt As Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">話すコンテンツ。</param>
        <summary>非同期的に <see cref="T:System.Speech.Synthesis.Prompt" /> のオブジェクトのコンテンツを指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> メソッドを使用して、プロンプトの非同期の読み上げを取り消すことができます。  
  
 <xref:System.Speech.Synthesis.Prompt> オブジェクトの内容を同期的に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>を使用します。  
  
   
  
## Examples  
 次の例では、文字列から <xref:System.Speech.Synthesis.Prompt> オブジェクトを作成し、そのオブジェクトを引数として <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドに渡します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (promptBuilder As PromptBuilder) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">話すコンテンツ。</param>
        <summary>非同期的に <see cref="T:System.Speech.Synthesis.PromptBuilder" /> のオブジェクトのコンテンツを指示します。</summary>
        <returns>発話するコンテンツを格納するオブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトの内容を同期的に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>を使用します。  
  
   
  
## Examples  
 次の例では、文字列から <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、そのオブジェクトを引数として <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドに渡します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキスト。</param>
        <summary>非同期的に文字列のコンテンツを指示します。</summary>
        <returns>発話するコンテンツを格納するオブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SSML マークアップを含む文字列を非同期に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドを使用します。 文字列の内容を同期的に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドを使用します。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> メソッドを使用して、プロンプトの非同期の読み上げを取り消すことができます。  
  
   
  
## Examples  
 次の例に示すように、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドは、音声出力を非同期に生成する最も簡単な方法を提供します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancel (prompt As Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">読み上げ操作を取り消すコンテンツ。</param>
        <summary>キューに挿入されたプロンプトの非同期合成操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、このメソッドを使用して、次のような非同期の読み上げ操作をキャンセルすることもできます。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> メソッドによって指定された <xref:System.String> の内容。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> メソッドによって指定された <xref:System.Speech.Synthesis.PromptBuilder> の内容。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドによって指定された SSML を含む <xref:System.String> の内容。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>を呼び出すと、Speech は <xref:System.Speech.Synthesis.Prompt> オブジェクトを作成し、メソッドのパラメーターの内容をそのオブジェクトに設定し、<xref:System.Speech.Synthesis.Prompt> オブジェクトを返します。 返された <xref:System.Speech.Synthesis.Prompt>のコピーを保持している場合は、それを <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> に渡して、<xref:System.String> または <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトで指定された読み上げコンテンツを取り消すことができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのキュー操作、非同期操作、音声合成操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、新しいプロンプトを読み上げることができるように、プロンプトの非同期読み上げをキャンセルするために <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> を使用する方法を示します。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 操作が取り消されると、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントが発生することに注意してください。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> がプロンプトの読み上げを完了するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドの完了時に <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントを発生させます。  
  
 <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> クラスにはプロパティがなく、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントからのデータは返されません。 これは、アプリケーションの作成者が <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントのイベントハンドラーを作成できるようにするために用意されています。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> がプロンプトの個々の各単語を読み上げた後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> の各メソッドを使用してプロンプトで読み上げる新しい単語ごとにこのイベントを発生させます。 イベントに関連付けられているデータの例と詳細については、「<xref:System.Speech.Synthesis.SpeakProgressEventArgs>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げる SSML 文字列。</param>
        <summary>同期的に SSML マークアップを含む <see cref="T:System.String" /> を指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `textToSpeak` パラメーターの内容には `speak` 要素が含まれている必要があり、 [Speech 合成マークアップ言語 (SSML) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)に準拠している必要があります。 詳細については、「 [Speech 合成マークアップ言語のリファレンス](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)」を参照してください。  
  
 SSML マークアップを含む文字列を非同期に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドを使用します。 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> を使用すると、SSML マークアップを含まない文字列の同期を開始できます。  
  
 このメソッドの呼び出し中に、<xref:System.Speech.Synthesis.SpeechSynthesizer> は次のイベントを発生させることができます。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>) シンセサイザーの読み上げの状態が変化したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) シンセサイザーが音声の生成を開始するときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>) シンセサイザーが1つの文字または文字の組み合わせに到達するたびに発生し、言語の音声を個別に発音します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>) シンセサイザーが単語の読み上げを完了するたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>) 音声の生成に使用される口の位置または顔の筋肉を変更する必要があるたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>) シンセサイザーがプロンプトでブックマークを検出したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>) シンセサイザーの読み上げ音声が変化したときに発生します。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドの処理中に <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントを発生させません。  
  
   
  
## Examples  
 次の例では、日付1/29/2009 を月、日、年の順に日付として表示します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるための SMML のマークアップ。</param>
        <summary>非同期的に SSML マークアップを含む <see cref="T:System.String" /> を指示します。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `textToSpeak` パラメーターの内容には `speak` 要素が含まれている必要があり、 [Speech 合成マークアップ言語 (SSML) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)に準拠している必要があります。 詳細については、「 [Speech 合成マークアップ言語のリファレンス](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)」を参照してください。  
  
 SSML マークアップを含む文字列を同期的に読み上げるには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドを使用します。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> を使用すると、SSML マークアップを含まない文字列の非同期の発音を開始できます。  
  
 このメソッドの呼び出し中に、<xref:System.Speech.Synthesis.SpeechSynthesizer> は次のイベントを発生させることができます。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>) シンセサイザーの読み上げの状態が変化したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) シンセサイザーが音声の生成を開始するときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>) シンセサイザーが1つの文字または文字の組み合わせに到達するたびに発生し、言語の音声を個別に発音します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>) シンセサイザーが単語の読み上げを完了するたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>) 音声の生成に使用される口の位置または顔の筋肉を変更する必要があるたびに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>) シンセサイザーがプロンプトでブックマークを検出したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>) シンセサイザーの読み上げ音声が変化したときに発生します。  
  
-   [https://login.microsoftonline.com/consumers/](<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) シンセサイザーが <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 操作の処理を終了したときに発生します。  
  
 アプリケーションが対話中にタスクを実行する必要がない場合は、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドを使用して同期的に音声を生成することができます。  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> がプロンプトの読み上げを開始するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> のいずれかのメソッドを使用してプロンプトの処理を開始するときに、このイベントを発生させます。  
  
 <xref:System.Speech.Synthesis.SpeakStartedEventArgs> クラスにはプロパティがなく、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> イベントからのデータは返されません。 これは、アプリケーションの作成者が <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> イベントのイベントハンドラーを作成できるようにするために用意されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの現在の音声読み上げの状態を取得します。</summary>
        <value><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの現在の音声読み上げの状態を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変更後に <xref:System.Speech.Synthesis.SpeechSynthesizer> の新しい状態を取得するには、<xref:System.Speech.Synthesis.StateChangedEventArgs> クラスの <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> プロパティを使用します。  
  
   
  
## Examples  
 次の例は、プロンプトを表示する前、途中、および後の <xref:System.Speech.Synthesis.SpeechSynthesizer> の状態を示しています。  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> の状態が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は、その対話 <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> が変更されたときにこのイベントを発生させます。 イベントに関連付けられているデータの例と詳細については、「<xref:System.Speech.Synthesis.StateChangedEventArgs>」を参照してください。  
  
 音声合成を一時停止および再開するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> メソッドと <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>viseme に到達したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Viseme は、音素の pronouncing 時の口と顔の基本的な位置です。 Visemes は、音素の視覚的表現です。  
  
 Speech は米国英語の21の音素をサポートしており、それぞれが1つ以上のに対応しています。  <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> イベントは、新しい音素に達したときに、前の音素と一致した viseme が異なる場合に発生します。 いくつかの visemes は複数の音素を表しているため、次の音素に到達した場合は、前の音素と同じ viseme に到達すると、<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> イベントは生成されません。 たとえば、読み上げられた単語 "this zone" については、"this" の "s" と "zone" の "z" に対して <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> イベントが発生します。 ただし、"viseme" の "s" と同じに対応しているため、"zone" の "z" に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> イベントは発生しません。  
  
 米国英語の viseme に対応する 21 SAPI 音素グループと音素グループの一覧を次に示します。  
  
|Viseme|音素 (s)|  
|------------|------------------|  
|0|無音|  
|1|ae、ax、ah|  
|2|aa|  
|3|ao|  
|4|いいね、eh、|  
|5|er|  
|6|y、iy、ih、ix|  
|7|w、uw|  
|8|o|  
|9|aw|  
|10|oy|  
|11|ライブラリ|  
|12|h|  
|13|r|  
|14|l|  
|15|s、z|  
|16|sh、ch、jh、zh-tw|  
|17|th、dh|  
|18|f、v|  
|19|d、t、n|  
|20|k、g、ng|  
|21|p、b、m|  
  
 `VisemeReached` イベントに関連付けられているデータの詳細については、「<xref:System.Speech.Synthesis.VisemeReachedEventArgs>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの現在の音声に関する情報を取得します。</summary>
        <value><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの現在の音声に関する情報を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい <xref:System.Speech.Synthesis.SpeechSynthesizer>を初期化すると、既定のシステム音声が使用されます。 インストールされている音声合成の音声のいずれかを使用するように <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトを構成するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドを使用します。 インストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Synthesis.SpeechSynthesizer> のインスタンスを初期化し、現在の音声に関する情報を取得します。  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> の音声が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントに関連付けられているデータの例と情報については、「<xref:System.Speech.Synthesis.VoiceChangeEventArgs>」を参照してください。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> が使用する音声は、<xref:System.Speech.Synthesis.PromptBuilder>の <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> メソッド、または <xref:System.Speech.Synthesis.SpeechSynthesizer>の <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドまたは <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドで変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトの出力ボリュームを取得または設定します。</summary>
        <value><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> の音量を 0 から 100 までの値で返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、合成音声と WAV ファイルの <xref:System.Speech.Synthesis.SpeechSynthesizer>のオーディオ出力のボリュームを設定します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
