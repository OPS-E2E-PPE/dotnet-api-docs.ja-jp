<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8ac9527f1d8390729cbce5c6e880473b70ec941" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78738190" /></Metadata><TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5c190-101">空の <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクトを作成し、内容の追加、音声の選択、音声の属性の制御、および読み上げられる単語の発音の制御を行うメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="5c190-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-102"><xref:System.Speech.Synthesis.PromptBuilder>では、プレーンテキスト、SSML マークアップ (文字列またはファイルとして)、録音されたオーディオ、または別の <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトなど、さまざまなコンテンツの種類をプロンプトに追加できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="5c190-103"><xref:System.Speech.Synthesis.PromptBuilder> オブジェクトにテキストを追加し、必要に応じて強調、レート、ボリュームなどの音声属性を制御するには、いずれかの <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> 方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="5c190-104">また、<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> および <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> メソッドを使用して、音声属性をグループとして制御することもできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="5c190-105"><xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>、または <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> の各メソッドを使用して、テキストを追加したり、音声の読み上げや発音を制御したりできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="5c190-106">オーバーロードされた <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> メソッドのいずれかを使用して、プロンプトで現在選択されている音声通話を変更します。特定の音声に名前を付けたり、年齢や性別などの必要な音声特性を指定したりします。</span><span class="sxs-lookup"><span data-stu-id="5c190-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="5c190-107"><xref:System.Speech.Synthesis.PromptBuilder> オブジェクトから音声を生成するには、それを引数として <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5c190-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="5c190-108">詳細については、「[複雑なプロンプトの構築](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c190-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-109"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="5c190-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-110"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="5c190-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5c190-111">次の例では、新しい <xref:System.Speech.Synthesis.PromptBuilder> インスタンスを作成し、そのインスタンスにテキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="5c190-112">次のマークアップは、Speech 合成マークアップ言語 (SSML) と同等のものを示しています (`xml:lang` は `speak` 要素の必須の属性です)。</span><span class="sxs-lookup"><span data-stu-id="5c190-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="5c190-113">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span><span class="sxs-lookup"><span data-stu-id="5c190-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="5c190-114"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成し、カルチャを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-115">このコンストラクターは、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="5c190-116"><xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、プロンプトを処理するために `culture` パラメーターで指定された言語をサポートする、インストールされている音声を選択しようとします。</span><span class="sxs-lookup"><span data-stu-id="5c190-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="5c190-117">指定したカルチャを持つ音声が見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="5c190-118">指定したカルチャを持つ音声が見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="5c190-119">`culture` パラメーターで指定した言語で単語を正しく発音するには、その言語をサポートする音声合成 (音声合成または TTS) エンジンがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="5c190-120">インストールされている TTS エンジンは、"音声" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c190-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="5c190-121">特定のカルチャに対してインストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="5c190-122">Microsoft Windows とシステム。 Speech API `culture`の値として、すべての有効な言語の国コードを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="5c190-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="5c190-123">Windows 7 に同梱されている TTS エンジンは、次の言語の国コードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="5c190-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5c190-124">en-US.</span><span class="sxs-lookup"><span data-stu-id="5c190-124">en-US.</span></span> <span data-ttu-id="5c190-125">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="5c190-125">English (United States)</span></span>  
  
-   <span data-ttu-id="5c190-126">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="5c190-126">zh-CN.</span></span> <span data-ttu-id="5c190-127">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="5c190-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5c190-128">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="5c190-128">zh-TW.</span></span> <span data-ttu-id="5c190-129">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="5c190-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5c190-130">"En" など、2文字の言語コードも許可されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-131">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> インスタンスを作成し、その <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="5c190-132">次のマークアップは、同等の SSML を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c190-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-133"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに指定されたオーディオ ファイルを追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5c190-134">オーディオ ファイルへの絶対パス。</span><span class="sxs-lookup"><span data-stu-id="5c190-134">A fully qualified path to the audio file.</span></span></param>
        <summary><span data-ttu-id="5c190-135">指定されたオーディオ ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="5c190-136">オーディオ ファイルの URI。</span><span class="sxs-lookup"><span data-stu-id="5c190-136">URI for the audio file.</span></span></param>
        <summary><span data-ttu-id="5c190-137">指定した URI のオーディオ ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5c190-138">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> クラスの新しいインスタンスを初期化してから、テキストを追加し、その後にオーディオファイルを追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="5c190-139">次のマークアップは、同等の SSML マークアップを示しています。</span><span class="sxs-lookup"><span data-stu-id="5c190-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="5c190-140">オーディオ ファイルの URI。</span><span class="sxs-lookup"><span data-stu-id="5c190-140">URI for the audio file.</span></span></param>
        <param name="alternateText"><span data-ttu-id="5c190-141">オーディオを表す代替テキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-141">A string containing alternate text representing the audio.</span></span></param>
        <summary><span data-ttu-id="5c190-142">指定されたオーディオ ファイルと代替テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-143">音声合成エンジンは、オーディオファイルを再生できない場合に代替テキストを読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-144">次の例では、オーディオファイルを <xref:System.Speech.Synthesis.PromptBuilder> インスタンスに追加し、オーディオファイルを再生できない場合に読み上げるテキストを指定しています。</span><span class="sxs-lookup"><span data-stu-id="5c190-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="5c190-145">次のマークアップは、同等の SSML マークアップを示しています。</span><span class="sxs-lookup"><span data-stu-id="5c190-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName"><span data-ttu-id="5c190-146">追加されるブックマークの名前を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-146">A string containing the name of the appended bookmark.</span></span></param>
        <summary><span data-ttu-id="5c190-147"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトにブックマークを追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-148">音声合成エンジンは、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> のいずれかのメソッドを使用してプロンプトを読み上げながら、ブックマークが検出された場合に <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> イベントを生成します。</span><span class="sxs-lookup"><span data-stu-id="5c190-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-149">次の例では、2つのブックマークを含むプロンプトを作成し、再生用の WAV ファイルに出力を送信します。</span><span class="sxs-lookup"><span data-stu-id="5c190-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="5c190-150">イベントがコンソールに発生したときに、<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> イベントのハンドラーによって、ブックマークの名前とその位置がオーディオストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="5c190-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-151"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのコンテンツに中断 (一時停止) を入れます。</span><span class="sxs-lookup"><span data-stu-id="5c190-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-152"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに中断を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-153">このメソッドでは、中断期間は指定されていません。</span><span class="sxs-lookup"><span data-stu-id="5c190-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="5c190-154"><xref:System.Speech.Synthesis.SpeechSynthesizer> によって、言語のコンテキストに基づいて duration 値が決定されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-155">次の例では、改行で区切られた2つの文を含むプロンプトを構築し、コンピューター上の既定のオーディオデバイスにプロンプトを読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength"><span data-ttu-id="5c190-156">中断の期間と次の増加する値を示します:</span><span class="sxs-lookup"><span data-stu-id="5c190-156">Indicates the duration of the break, with the following increasing values:</span></span></param>
        <summary><span data-ttu-id="5c190-157"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに中断を追加し、強度 (継続時間) を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-158"><xref:System.Speech.Synthesis.PromptBreak> 列挙体の値は、単語の境界間の間隔 (一時停止) の範囲を表します。</span><span class="sxs-lookup"><span data-stu-id="5c190-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="5c190-159">音声合成エンジンは、間隔の正確な期間を決定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="5c190-160">中断が要求されると、これらの値のいずれかが音声合成 (TTS) エンジンに渡されます。このエンジンには、これらの値と、対応するミリ秒のブレーク値の間のマッピングが含まれています。</span><span class="sxs-lookup"><span data-stu-id="5c190-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-161">次の例では、改行で区切られた2つの文を含むプロンプトをビルドし、再生のために WAV ファイルに出力を送信します。</span><span class="sxs-lookup"><span data-stu-id="5c190-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration"><span data-ttu-id="5c190-162">ティック単位の時間 (1 ティックは 100 ナノ秒)。</span><span class="sxs-lookup"><span data-stu-id="5c190-162">The time in ticks, where one tick equals 100 nanoseconds.</span></span></param>
        <summary><span data-ttu-id="5c190-163">指定された継続時間の中断を <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-164">中断は、単語間の一時停止または他の韻律の境界を制御するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="5c190-165">Break は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="5c190-165">A break is optional.</span></span> <span data-ttu-id="5c190-166">改行が存在しない場合は、言語コンテキストに応じて、シンセサイザーによって単語間の改行が決定されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-167">次の例では、2つの文を含むプロンプトを、1500万ティック (1.5 秒) の休憩で区切って作成し、コンピューター上の既定のオーディオデバイスに対してプロンプトを読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendPromptBuilder (promptBuilder As PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="5c190-168">追加するコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="5c190-168">The content to append.</span></span></param>
        <summary><span data-ttu-id="5c190-169"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトを別の <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5c190-170">次の例では、2つの <xref:System.Speech.Synthesis.PromptBuilder> インスタンスを作成し、3番目の <xref:System.Speech.Synthesis.PromptBuilder>に追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-171">SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5c190-172">追加する SSML ファイルへの完全修飾パス。</span><span class="sxs-lookup"><span data-stu-id="5c190-172">A fully qualified path to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="5c190-173">指定したパスの SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-174">SSML ファイルは、 [Speech 合成マークアップ言語 (SSML) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)仕様に準拠した XML 形式のファイルである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="5c190-175"><xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>を使用して、SSML マークアップを文字列として追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-176">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> メソッドを使用して SSML ファイルの内容を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="5c190-177">前の例で参照されている SSML ファイルを次に示します。</span><span class="sxs-lookup"><span data-stu-id="5c190-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="5c190-178">追加する SSML ファイルの完全修飾 URI。</span><span class="sxs-lookup"><span data-stu-id="5c190-178">A fully qualified URI to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="5c190-179">指定した URI の SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-180">SSML ファイルは、 [Speech 合成マークアップ言語 (SSML) バージョン 1.0](https://www.w3.org/TR/speech-synthesis/)仕様に準拠した XML 形式のファイルである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="5c190-181"><xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>を使用して、SSML マークアップを文字列として追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-182">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> メソッドを使用して SSML ファイルの内容を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="5c190-183">前の例で参照されている SSML ファイルを次に示します。</span><span class="sxs-lookup"><span data-stu-id="5c190-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="5c190-184">追加する XML ファイルの完全修飾名。</span><span class="sxs-lookup"><span data-stu-id="5c190-184">A fully qualified name to the XML file to append.</span></span></param>
        <summary><span data-ttu-id="5c190-185">SSML プロンプトを参照する <c>XMLReader</c> オブジェクトを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-186">SSML ファイルは、 [Speech 合成マークアップ言語 (SSML) バージョン 1.0](https://www.w3.org/TR/speech-synthesis/)仕様に準拠した XML 形式のファイルである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="5c190-187"><xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>を使用して、SSML マークアップを文字列として追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-188">次の例では、音声合成マークアップ言語 (SSML) マークアップを含むファイルを参照する <xref:System.Xml.XmlReader> オブジェクトから <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="5c190-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup"><span data-ttu-id="5c190-189">SSML マークアップを格納している文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-189">A string containing SSML markup.</span></span></param>
        <summary><span data-ttu-id="5c190-190">SSML マークアップを含む指定された文字列を <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-191">SSML マークアップを追加するときは、適切なエスケープ文字を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="5c190-192">次の例では、`interpret-as` 属性の値を囲む引用符の前に円記号が付いています。</span><span class="sxs-lookup"><span data-stu-id="5c190-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="5c190-193"><xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> の引数として使用される文字列に `speak` 要素を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="5c190-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="5c190-194"><xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> を使用して `phoneme` 要素にインライン発音を指定する場合、現在の音声エンジンでサポートされていれば、次のいずれかの発音アルファベットの電話を使用できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="5c190-195">国際音声記号 (IPA)</span><span class="sxs-lookup"><span data-stu-id="5c190-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="5c190-196">ユニバーサル電話セット (UPS)</span><span class="sxs-lookup"><span data-stu-id="5c190-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="5c190-197">SAPI Phone セット</span><span class="sxs-lookup"><span data-stu-id="5c190-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="5c190-198">SSML に準拠している音声エンジンでは、IPA からの電話を話すことができます。</span><span class="sxs-lookup"><span data-stu-id="5c190-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="5c190-199">また、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> メソッドのいずれかを使用して、SSML マークアップを含むファイルを追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="5c190-200">マークアップ言語で書式設定されていないテキストを追加するには、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>、または <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> メソッドのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-201">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-202">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-202">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="5c190-203"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加されるテキストを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-204">SSML マークアップ言語として書式設定されたテキストを追加するには、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-205">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> メソッドを使用してテキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-206">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-206">A string containing the text to be spoken.</span></span></param>
        <param name="emphasis"><span data-ttu-id="5c190-207">テキストに適用する強調またはストレスの値。</span><span class="sxs-lookup"><span data-stu-id="5c190-207">The value for the emphasis or stress to apply to the text.</span></span></param>
        <summary><span data-ttu-id="5c190-208">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの強調の度合いを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-209">Windows の音声合成エンジンでは、この時点では強調パラメーターがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5c190-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="5c190-210">強調パラメーターの値を設定すると、合成された音声の出力で音が変化することはありません。</span><span class="sxs-lookup"><span data-stu-id="5c190-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-211">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-211">A string containing the text to be spoken.</span></span></param>
        <param name="rate"><span data-ttu-id="5c190-212">テキストに適用する話し速度の値。</span><span class="sxs-lookup"><span data-stu-id="5c190-212">The value for the speaking rate to apply to the text.</span></span></param>
        <summary><span data-ttu-id="5c190-213">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの読み上げ速度を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5c190-214">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、テキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="5c190-215">この例では、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> メソッドを使用して、追加される文字列に対して、注文の内容を列挙する低速な読み上げ速度を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-216">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-216">A string containing the text to be spoken.</span></span></param>
        <param name="volume"><span data-ttu-id="5c190-217">テキストに適用する音量の値。</span><span class="sxs-lookup"><span data-stu-id="5c190-217">The value for the speaking volume (loudness) to apply to the text.</span></span></param>
        <summary><span data-ttu-id="5c190-218">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの音量を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-219"><xref:System.Speech.Synthesis.PromptVolume> の <xref:System.Speech.Synthesis.PromptVolume.Default> 設定はフルボリュームであり、<xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>と同じです。</span><span class="sxs-lookup"><span data-stu-id="5c190-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="5c190-220">その他の設定により、完全ボリュームに対する音声出力の音量が低下します。</span><span class="sxs-lookup"><span data-stu-id="5c190-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-221">次の例では、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> メソッドを使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer> が音声出力に適用するボリューム設定を指定しています。</span><span class="sxs-lookup"><span data-stu-id="5c190-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-222">テキスト表現を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-222">A string containing the text representation.</span></span></param>
        <param name="substitute"><span data-ttu-id="5c190-223">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-223">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="5c190-224">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、追加したテキストの代わりに読み上げられるエイリアスのテキストを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-225">これにより、ドキュメントには、音声入力されたフォームと、プロンプト用に記述されたフォームの両方を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="5c190-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="5c190-226">たとえば、記述されたフォームは、SAPI などの頭字語であり、読み上げられたフォームは頭字語の拡張テキスト (この場合は Speech アプリケーションプログラミングインターフェイス) である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-227">次の例では、テキスト文字列 ("Speech 合成マークアップ言語") とそのエイリアス ("SSML") を <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="5c190-228">シンセサイザーは、"S S M L" を発音します。</span><span class="sxs-lookup"><span data-stu-id="5c190-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-229">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストのコンテンツ タイプを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-230">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-230">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="5c190-231">テキストのコンテンツ タイプ。</span><span class="sxs-lookup"><span data-stu-id="5c190-231">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="5c190-232">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、<see cref="T:System.Speech.Synthesis.SayAs" /> 列挙型のメンバーを使用してコンテンツ タイプを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-233">`sayAs` によって指定されたコンテンツタイプは、`textToSpeak`の内容を発音する方法について、音声合成エンジンにガイダンスを提供できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-234">読み上げるテキストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-234">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="5c190-235">テキストのコンテンツ タイプ。</span><span class="sxs-lookup"><span data-stu-id="5c190-235">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="5c190-236">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストのコンテンツ タイプを指定する <see cref="T:System.String" /> を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-237">このメソッドを使用して、<xref:System.Speech.Synthesis.SayAs> 列挙に含まれていないコンテンツタイプを指定できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="5c190-238">ただし、TTS エンジンでは、指定したパラメーターがサポートされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5c190-239">言語の従来のアルファベットを使用した単語の記述形式を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-239">A string containing the written form of the word using the conventional alphabet for a language.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="5c190-240">国際音声記号 (IPA) の音素を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="5c190-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span></span></param>
        <summary><span data-ttu-id="5c190-241">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの発音を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-242">シンセサイザーは、`textToSpeak` パラメーターの内容ではなく、`pronunciation` パラメーターの内容を読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="5c190-243">プロンプトでインラインで指定された発音は、単語の個々の出現箇所にのみ適用され、音声エンジンまたは現在アクティブな辞書の発音を上書きします。</span><span class="sxs-lookup"><span data-stu-id="5c190-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="5c190-244">通常、既存の単語のカスタム発音には、インライン発音を使用します。また、適切な名前など、一般的ではない単語の発音を使用します。これは、音声合成エンジンによって発音されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="5c190-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="5c190-245">インライン発音は、国際音声記号 (IPA) からの電話を使用して指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="5c190-246">電話は、音声の音を個別に表す文字または文字です。</span><span class="sxs-lookup"><span data-stu-id="5c190-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="5c190-247">[Speech 合成マークアップ言語 (SSML) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)仕様に準拠している音声エンジンは、IPA の電話を発音します。</span><span class="sxs-lookup"><span data-stu-id="5c190-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="5c190-248">他の発音アルファベットを使用してインライン発音を指定する場合は、「<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c190-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="5c190-249">IPA は、電話を一覧表示し、それを Unicode 番号にマップする[グラフ](https://go.microsoft.com/fwlink/?LinkId=58362)を公開します。</span><span class="sxs-lookup"><span data-stu-id="5c190-249">The IPA publishes a [chart](https://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="5c190-250">IPA アルファベットの一部の電話は、ラテンアルファベットでは文字と同じ表現になります。</span><span class="sxs-lookup"><span data-stu-id="5c190-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="5c190-251">そのような場合は、ラテン文字を入力して、電話に対して適切な表現を付けることができます。</span><span class="sxs-lookup"><span data-stu-id="5c190-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="5c190-252">テキストでよく使用されるラテン文字は、IPA phone セットの複数の電話を表す場合があるため、ラテン文字を入力するだけでは正確な IPA 電話が必要になるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="5c190-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="5c190-253">IPA の他の電話は、アンパサンド (&)、番号記号 (#)、および目的の電話の Unicode 番号 (16 進数または10進数) で構成される文字参照としてコード内で表現する必要があります。その後にセミコロン (;) が続きます。</span><span class="sxs-lookup"><span data-stu-id="5c190-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="5c190-254">例としては、(&\#x0259;) などがあります。は `&#x0259;`で表されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="5c190-255">複数の単語の新規またはカスタムの発音を追加するには (地域の方言を表現したり、教育機関または医療分野に固有の名前またはボキャブラリを追加したりする場合など) は、語彙を作成し、<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>を使用して <xref:System.Speech.Synthesis.SpeechSynthesizer> に追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-256">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c190-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="5c190-257">次に、テキスト文字列 "My name is" をインスタンスに追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="5c190-258">最後に、適切な名前 "DuBois" を含む文字列を追加し、名前の発音を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="5c190-259">次のマークアップは、この <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトが生成する SSML を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c190-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://www.internationalphoneticassociation.org/content/ipa-chart"><span data-ttu-id="5c190-260">国際音声の関連付け</span><span class="sxs-lookup"><span data-stu-id="5c190-260">International Phonetic Association</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-261"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから内容を削除します。</span><span class="sxs-lookup"><span data-stu-id="5c190-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c190-262"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのカルチャ情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-263"><xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトは、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティによって指定された言語をサポートするインストール済みの音声を選択して、プロンプトを処理しようとします。</span><span class="sxs-lookup"><span data-stu-id="5c190-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="5c190-264">指定したカルチャを持つ音声が見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="5c190-265">指定したカルチャを持つ音声が見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="5c190-266">カルチャは、<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>、<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>、および <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> メソッドを使用して、コンテンツのセクションを個別に指定するためのプロンプト内で指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="5c190-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="5c190-267">上記のいずれかの方法を使用してコンテンツの一部に対して指定されたカルチャでは、有効になっている間に <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティがオーバーライドされ、<xref:System.Speech.Synthesis.SpeechSynthesizer> は、メソッドの `culture` パラメーターで指定された言語をサポートするインストール済みの音声を選択しようとします。</span><span class="sxs-lookup"><span data-stu-id="5c190-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="5c190-268"><xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティによって指定された言語で単語を正しく発音するには、言語をサポートする音声合成 (音声合成または TTS) エンジンがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="5c190-269">インストールされている TTS エンジンは、"音声" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c190-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="5c190-270">特定のカルチャに対してインストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="5c190-271">Microsoft Windows とシステム。 Speech API `culture`の値として、すべての有効な言語の国コードを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="5c190-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="5c190-272">Windows 7 に同梱されている TTS エンジンは、次の言語の国コードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="5c190-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5c190-273">en-US.</span><span class="sxs-lookup"><span data-stu-id="5c190-273">en-US.</span></span> <span data-ttu-id="5c190-274">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="5c190-274">English (United States)</span></span>  
  
-   <span data-ttu-id="5c190-275">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="5c190-275">zh-CN.</span></span> <span data-ttu-id="5c190-276">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="5c190-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5c190-277">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="5c190-277">zh-TW.</span></span> <span data-ttu-id="5c190-278">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="5c190-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5c190-279">"En" など、2文字の言語コードも許可されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="5c190-280">言語コードの包括的な一覧については、「[言語識別子の定数と文字列](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c190-280">See [Language Identifier Constants and Strings](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-281"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の終わりを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-282">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="5c190-283">例については、「<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c190-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-284"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の終わりを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-285">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="5c190-286">例については、「<xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c190-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-287"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのスタイルの終わりを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-288"><xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> メソッドは、現在の読み上げスタイルを停止します。</span><span class="sxs-lookup"><span data-stu-id="5c190-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="5c190-289">読み上げスタイルは、<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> メソッドが新しい話し方のスタイルを開始する前に有効だった設定に戻ります。</span><span class="sxs-lookup"><span data-stu-id="5c190-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="5c190-290">例については、「<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c190-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-291"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声使用の終わりを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-292"><xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> メソッドは、音声出力の現在の音声の使用を停止します。</span><span class="sxs-lookup"><span data-stu-id="5c190-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="5c190-293">音声は、<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> メソッドが新しい音声を開始する前に有効だった設定に戻ります。</span><span class="sxs-lookup"><span data-stu-id="5c190-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c190-294"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> が空かどうかを取得します。</span><span class="sxs-lookup"><span data-stu-id="5c190-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-295"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の開始を指定し、オプションで言語を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-296">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-297"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の開始を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-298">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-299">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、コンテンツを追加して、コンテンツを段落と文に整理します。</span><span class="sxs-lookup"><span data-stu-id="5c190-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="5c190-300">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span><span class="sxs-lookup"><span data-stu-id="5c190-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="5c190-301"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの指定されたカルチャの段落の開始を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-302">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="5c190-303">段落の `culture` パラメーターは、それを含む <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトの <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティとは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="5c190-304">実際には、`culture` パラメーターの値によって <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティがオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="5c190-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="5c190-305"><xref:System.Speech.Synthesis.SpeechSynthesizer> は、`culture` パラメーターで指定された言語をサポートする、インストールされている音声を選択して段落を読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="5c190-306">指定したカルチャを持つ音声が見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="5c190-307">指定したカルチャを持つ音声が見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="5c190-308"><xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>で指定された音声の使用を停止するには、<xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="5c190-309">`culture` パラメーターで指定した言語で単語を正しく発音するには、その言語をサポートする音声合成 (音声合成または TTS) エンジンがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="5c190-310">インストールされている TTS エンジンは、"音声" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c190-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="5c190-311">特定のカルチャに対してインストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="5c190-312">Microsoft Windows とシステム。 Speech API `culture`の値として、すべての有効な言語の国コードを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="5c190-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="5c190-313">Windows 7 に同梱されている TTS エンジンは、次の言語の国コードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="5c190-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5c190-314">en-US.</span><span class="sxs-lookup"><span data-stu-id="5c190-314">en-US.</span></span> <span data-ttu-id="5c190-315">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="5c190-315">English (United States)</span></span>  
  
-   <span data-ttu-id="5c190-316">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="5c190-316">zh-CN.</span></span> <span data-ttu-id="5c190-317">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="5c190-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5c190-318">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="5c190-318">zh-TW.</span></span> <span data-ttu-id="5c190-319">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="5c190-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5c190-320">"En" など、2文字の言語コードも許可されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-321"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の開始を指定し、オプションで言語を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-322">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-323"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の開始を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-324">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-325">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、コンテンツを追加して、コンテンツを段落と文に整理します。</span><span class="sxs-lookup"><span data-stu-id="5c190-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="5c190-326">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span><span class="sxs-lookup"><span data-stu-id="5c190-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="5c190-327"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの指定されたカルチャの文の開始を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-328">長いプロンプトは、文や段落に分割されている場合に、人間の音声のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5c190-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="5c190-329">文の `culture` パラメーターは、文が含まれている段落の `culture` パラメーター、またはその文を含む <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトの <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティとは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="5c190-330">実際には、`culture` パラメーターの値は、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティと、その文を含む段落の `culture` パラメーターよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="5c190-331"><xref:System.Speech.Synthesis.SpeechSynthesizer> は、`culture` パラメーターで指定された言語をサポートするインストール済みの音声を選択して、文を読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="5c190-332">指定したカルチャを持つ音声が見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="5c190-333">指定したカルチャを持つ音声が見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="5c190-334"><xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>で指定された音声の使用を停止するには、<xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="5c190-335">`culture` パラメーターで指定した言語で単語を正しく発音するには、その言語をサポートする音声合成 (音声合成または TTS) エンジンがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="5c190-336">インストールされている TTS エンジンは、"音声" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c190-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="5c190-337">特定のカルチャに対してインストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="5c190-338">Microsoft Windows とシステム。 Speech API `culture`の値として、すべての有効な言語の国コードを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="5c190-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="5c190-339">Windows 7 に同梱されている TTS エンジンは、次の言語の国コードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="5c190-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5c190-340">en-US.</span><span class="sxs-lookup"><span data-stu-id="5c190-340">en-US.</span></span> <span data-ttu-id="5c190-341">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="5c190-341">English (United States)</span></span>  
  
-   <span data-ttu-id="5c190-342">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="5c190-342">zh-CN.</span></span> <span data-ttu-id="5c190-343">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="5c190-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5c190-344">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="5c190-344">zh-TW.</span></span> <span data-ttu-id="5c190-345">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="5c190-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5c190-346">"En" など、2文字の言語コードも許可されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style"><span data-ttu-id="5c190-347">開始するスタイル。</span><span class="sxs-lookup"><span data-stu-id="5c190-347">The style to start.</span></span></param>
        <summary><span data-ttu-id="5c190-348"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのスタイルの開始を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-349"><xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> メソッドは、引数として <xref:System.Speech.Synthesis.PromptStyle> オブジェクトを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="5c190-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="5c190-350"><xref:System.Speech.Synthesis.PromptStyle> オブジェクトのプロパティを使用して、スタイルが有効なときに音声出力に適用する強調、読み上げ速度、音量 (ラウドネス) を設定できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="5c190-351">現在のスタイルの使用を停止するには、<xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
> -   <span data-ttu-id="5c190-352">Windows の音声合成エンジンでは、この時点では強調パラメーターがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5c190-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="5c190-353">強調パラメーターの値を設定すると、合成された音声の出力で音が変化することはありません。</span><span class="sxs-lookup"><span data-stu-id="5c190-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="5c190-354"><xref:System.Speech.Synthesis.PromptVolume> の <xref:System.Speech.Synthesis.PromptVolume.Default> 設定はフルボリュームであり、<xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>と同じです。</span><span class="sxs-lookup"><span data-stu-id="5c190-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="5c190-355">その他の設定により、完全ボリュームに対する音声出力の音量が低下します。</span><span class="sxs-lookup"><span data-stu-id="5c190-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-356">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、テキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="5c190-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="5c190-357">この例では、<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> メソッドを使用して、追加される文字列に対して、注文の内容を列挙する低速な読み上げ速度を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c190-358">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するように指示します。</span><span class="sxs-lookup"><span data-stu-id="5c190-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-359">音声は、インストールされている TTS エンジンを表します。</span><span class="sxs-lookup"><span data-stu-id="5c190-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="5c190-360"><xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> のメソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前と属性を取得します。この音声は選択できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="5c190-361">アプリケーションが <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を呼び出すと、メソッドは、レジストリで見つかった各音声が特定の最小条件を満たしているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="5c190-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5c190-362">検証に失敗した音声に対しては、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5c190-363">アプリケーションは、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティが `False`音声に対して <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> メソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="5c190-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5c190-364">通常、アプリケーションは音声の <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを設定しません。</span><span class="sxs-lookup"><span data-stu-id="5c190-364">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="5c190-365">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span><span class="sxs-lookup"><span data-stu-id="5c190-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="5c190-366">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声のカルチャを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-367"><xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> の `culture` パラメーターは、それを含む <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトの <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティとは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="5c190-368">実際には、`culture` パラメーターの値によって <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティがオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="5c190-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="5c190-369"><xref:System.Speech.Synthesis.SpeechSynthesizer> は、`culture` パラメーターで指定された言語をサポートするインストール済みの音声を選択して、<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> と <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>で囲まれたコンテンツを読み上げます。</span><span class="sxs-lookup"><span data-stu-id="5c190-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="5c190-370">指定したカルチャを持つ音声が見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="5c190-371">指定したカルチャを持つ音声が見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="5c190-372"><xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>で指定された音声の使用を停止するには、<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="5c190-373">`culture` パラメーターで指定した言語で単語を正しく発音するには、その言語をサポートする音声合成 (音声合成または TTS) エンジンがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c190-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="5c190-374">インストールされている TTS エンジンは、"音声" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c190-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="5c190-375">特定のカルチャに対してインストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="5c190-376">Microsoft Windows とシステム。 Speech API `culture`の値として、すべての有効な言語の国コードを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="5c190-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="5c190-377">Windows 7 に同梱されている TTS エンジンは、次の言語の国コードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="5c190-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5c190-378">en-US.</span><span class="sxs-lookup"><span data-stu-id="5c190-378">en-US.</span></span> <span data-ttu-id="5c190-379">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="5c190-379">English (United States)</span></span>  
  
-   <span data-ttu-id="5c190-380">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="5c190-380">zh-CN.</span></span> <span data-ttu-id="5c190-381">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="5c190-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5c190-382">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="5c190-382">zh-TW.</span></span> <span data-ttu-id="5c190-383">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="5c190-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5c190-384">"En" など、2文字の言語コードも許可されます。</span><span class="sxs-lookup"><span data-stu-id="5c190-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5c190-385">使用する音声の性別。</span><span class="sxs-lookup"><span data-stu-id="5c190-385">The gender of the voice to use.</span></span></param>
        <summary><span data-ttu-id="5c190-386">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声の性別を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-387"><xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> のメソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前と属性を取得します。この音声は選択できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="5c190-388">によって指定された音声の使用を停止するには <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice"><span data-ttu-id="5c190-389">使用する音声の条件。</span><span class="sxs-lookup"><span data-stu-id="5c190-389">The criteria for the voice to use.</span></span></param>
        <summary><span data-ttu-id="5c190-390">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、新しい音声の条件を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-391"><xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> のメソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前と属性を取得します。この音声は選択できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="5c190-392">によって指定された音声の使用を停止するには <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="5c190-393">使用する音声の名前。</span><span class="sxs-lookup"><span data-stu-id="5c190-393">The name of the voice to use.</span></span></param>
        <summary><span data-ttu-id="5c190-394">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声の名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-395">インストールされている音声に関する情報を取得するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> の方法のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c190-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="5c190-396">によって指定された音声の使用を停止するには <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5c190-397">使用する新しい音声の性別。</span><span class="sxs-lookup"><span data-stu-id="5c190-397">The gender of the new voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="5c190-398">使用する音声の期間。</span><span class="sxs-lookup"><span data-stu-id="5c190-398">The age of the voice to use.</span></span></param>
        <summary><span data-ttu-id="5c190-399">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、新しい音声の性別と年齢を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-400"><xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> のメソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前と属性を取得します。この音声は選択できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="5c190-401">によって指定された音声の使用を停止するには <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5c190-402">使用する音声の性別。</span><span class="sxs-lookup"><span data-stu-id="5c190-402">The gender of the voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="5c190-403">使用する音声の年齢。</span><span class="sxs-lookup"><span data-stu-id="5c190-403">The age of the voice to use.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="5c190-404">複数の音声が <paramref name="gender" /> と <paramref name="age" /> のパラメーターに一致するときに、望ましい音声を指定する整数。</span><span class="sxs-lookup"><span data-stu-id="5c190-404">An integer that specifies a preferred voice when more than one voice matches the <paramref name="gender" /> and <paramref name="age" /> parameters.</span></span></param>
        <summary><span data-ttu-id="5c190-405">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、性別、年齢、および指定した性別と年齢に一致する適切な音声を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c190-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-406">音声合成エンジンは、指定されたパラメーターに対して見つかった一致項目をカウントし、カウントが `voiceAlternate` パラメーターと等しい場合は音声を返します。</span><span class="sxs-lookup"><span data-stu-id="5c190-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="5c190-407"><xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> のメソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスを使用して、インストールされている音声合成 (TTS) 音声の名前と属性を取得します。この音声は選択できます。</span><span class="sxs-lookup"><span data-stu-id="5c190-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="5c190-408">によって指定された音声の使用を停止するには <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5c190-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c190-409"><see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから生成される SSML を返します。</span><span class="sxs-lookup"><span data-stu-id="5c190-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="5c190-410">単一行として <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから生成される SSML を返します。</span><span class="sxs-lookup"><span data-stu-id="5c190-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c190-411"><xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> メソッドでは、返された SSML を任意の方法で書式設定する操作は行われません。</span><span class="sxs-lookup"><span data-stu-id="5c190-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c190-412">次の例では、<xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを作成し、テキストを追加した後、プロンプトの内容を話す前に、そのプロンプトに相当する SSML をコンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="5c190-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
