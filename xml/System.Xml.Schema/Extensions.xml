<Type Name="Extensions" FullName="System.Xml.Schema.Extensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ad86734bd43001a054ba5c3e43fe87e5a41baaf" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78730659" /></Metadata><TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="43343-101">このクラスには、XSD 検証のための LINQ to XML 拡張メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="43343-101">This class contains the LINQ to XML extension methods for XSD validation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-102">このクラスには、検証済み XML ノードのスキーマ検証後の infoset (PSVI) を取得するメソッドも含まれています。</span><span class="sxs-lookup"><span data-stu-id="43343-102">This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.</span></span>  
  
 <span data-ttu-id="43343-103"><xref:System.Xml.Linq.XDocument>、<xref:System.Xml.Linq.XElement>、または <xref:System.Xml.Linq.XAttribute>を検証するときに、必要に応じて、スキーマ検証後の infoset を XML ツリーに設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="43343-103">When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset.</span></span> <span data-ttu-id="43343-104">PSVI 情報は <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>型の注釈として追加されます。</span><span class="sxs-lookup"><span data-stu-id="43343-104">PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43343-105">[サンプル Xsd ファイルの xsd: customers および orders](https://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687)には、サンプル xml ファイル内の xml ドキュメントを検証するために使用できるスキーマが含まれています。[顧客と注文 (LINQ to XML)](https://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92)。</span><span class="sxs-lookup"><span data-stu-id="43343-105">The XSD in [Sample XSD File: Customers and Orders](https://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](https://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span></span> <span data-ttu-id="43343-106">次の例では、スキーマとドキュメントを読み込み、ドキュメントを検証し、`xs:key` と `xs:keyref` のリレーションシップが無効になるようにドキュメントを変更してから、もう一度検証を試みます。</span><span class="sxs-lookup"><span data-stu-id="43343-106">The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.</span></span>  
  
```csharp  
  
                XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", "CustomersOrders.xsd");  
  
XDocument custOrd = XDocument.Load("CustomersOrders.xml");  
  
Console.WriteLine("Validating custOrd");  
bool errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
  
// Modify the custOrd tree so that it is no longer valid.  
custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA";  
  
Console.WriteLine();  
Console.WriteLine("Validating custOrd");  
errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", "CustomersOrders.xsd")  
  
    Console.WriteLine("Validating custOrd")  
    Dim custOrd As XDocument = XDocument.Load("CustomersOrders.xml")  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating custOrd")  
    ' Modify the source document so that it will not validate.  
    custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA"  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="43343-107">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-107">This example produces the following output:</span></span>  
  
```  
Validating custOrd  
custOrd validated  
  
Validating custOrd  
The key sequence 'AAAAA' in Keyref fails to refer to some key.  
custOrd did not validate  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetSchemaInfo">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43343-108">検証済みノードのスキーマ検証後の infoset (PSVI) を取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-108">Gets the post-schema-validation infoset (PSVI) of a validated node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-109"><xref:System.Xml.Linq.XDocument>を検証した後、ドキュメントに含まれている <xref:System.Xml.Linq.XElement> または <xref:System.Xml.Linq.XAttribute> のスキーマ検証後の infoset を取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-109">After you have validated an <xref:System.Xml.Linq.XDocument>, you can retrieve the post-schema-validation infoset for an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> that is contained in the document.</span></span>  
  
 <span data-ttu-id="43343-110"><xref:System.Xml.Schema.IXmlSchemaInfo> オブジェクトを取得した後、<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> または <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> のプロパティを使用して、部分検証の種類 (<xref:System.Xml.Schema.XmlSchemaElement> または <xref:System.Xml.Schema.XmlSchemaAttribute>) を取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-110">After retrieving the <xref:System.Xml.Schema.IXmlSchemaInfo> object, you can use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> or <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> properties to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement> or <xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="43343-111">部分検証型を使用して、属性またはサブツリーを検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-111">You can use the partial validation types to validate an attribute or a sub-tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XAttribute source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XAttribute) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XAttribute ^ source);" />
      <MemberSignature Language="F#" Value="static member GetSchemaInfo : System.Xml.Linq.XAttribute -&gt; System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.Schema.Extensions.GetSchemaInfo source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-112">検証済みの <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="43343-112">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="43343-113">検証済み属性のスキーマ検証後の infoset (PSVI) を取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-113">Gets the post-schema-validation infoset (PSVI) of a validated attribute.</span></span></summary>
        <returns><span data-ttu-id="43343-114"><see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> のスキーマ検証後の infoset を含む <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="43343-114">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-115">このメソッドによって返される <xref:System.Xml.Schema.IXmlSchemaInfo> を使用すると、検証された属性の特定の特性を確認できます。</span><span class="sxs-lookup"><span data-stu-id="43343-115">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute.</span></span> <span data-ttu-id="43343-116">たとえば、属性が XSD の既定の属性値からのものかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="43343-116">For example, you can determine if the attribute came from a default attribute value in an XSD.</span></span>  
  
 <span data-ttu-id="43343-117">部分検証型 (<xref:System.Xml.Schema.XmlSchemaAttribute>) を取得するには、<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-117">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="43343-118">これを使用すると、ドキュメント全体を検証することなく、属性を再検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-118">You can use it to revalidate an attribute without validating an entire document.</span></span>  
  
 <span data-ttu-id="43343-119">このプロパティの例については、「<xref:System.Xml.Schema.Extensions.Validate%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43343-119">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XElement source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XElement) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XElement ^ source);" />
      <MemberSignature Language="F#" Value="static member GetSchemaInfo : System.Xml.Linq.XElement -&gt; System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.Schema.Extensions.GetSchemaInfo source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-120">検証済みの <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="43343-120">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="43343-121">検証済み要素のスキーマ検証後の infoset (PSVI) を取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-121">Gets the post-schema-validation infoset (PSVI) of a validated element.</span></span></summary>
        <returns><span data-ttu-id="43343-122"><see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> のスキーマ検証後の infoset (PSVI) を含む <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="43343-122">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-123">このメソッドによって返される <xref:System.Xml.Schema.IXmlSchemaInfo> を使用すると、検証された要素の特定の特性を確認できます。</span><span class="sxs-lookup"><span data-stu-id="43343-123">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element.</span></span> <span data-ttu-id="43343-124">たとえば、要素の動的スキーマ型を特定できます。</span><span class="sxs-lookup"><span data-stu-id="43343-124">For example, you can determine the dynamic schema type of the element.</span></span>  
  
 <span data-ttu-id="43343-125">部分検証型 (<xref:System.Xml.Schema.XmlSchemaElement>) を取得するには、<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-125">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>).</span></span> <span data-ttu-id="43343-126">これを使用すると、ドキュメント全体を検証せずに、ルートに要素があるサブツリーを再検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-126">You can use it to revalidate a sub-tree with an element at its root without validating an entire document.</span></span>  
  
 <span data-ttu-id="43343-127">このプロパティの例については、「<xref:System.Xml.Schema.Extensions.Validate%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43343-127">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43343-128">次の例では、PSVI を使用してツリーを設定します。</span><span class="sxs-lookup"><span data-stu-id="43343-128">The following example populates the tree with a PSVI.</span></span> <span data-ttu-id="43343-129">検証後は、PSVI に従って無効なすべての要素と属性がツリーに出力されます。</span><span class="sxs-lookup"><span data-stu-id="43343-129">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
         @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
   <xsd:simpleType name='GCType'>  
    <xsd:restriction base='xsd:token'>  
     <xsd:enumeration value='AAA'/>  
     <xsd:enumeration value='BBB'/>  
    </xsd:restriction>  
   </xsd:simpleType>  
   <xsd:element name='Root'>  
    <xsd:complexType>  
     <xsd:sequence>  
      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
       <xsd:complexType>  
        <xsd:sequence>  
         <xsd:element name='GrandChild1' type='GCType'/>  
         <xsd:element name='GrandChild2' type='GCType'/>  
         <xsd:element name='GrandChild3' type='GCType'/>  
        </xsd:sequence>  
       </xsd:complexType>  
      </xsd:element>  
     </xsd:sequence>  
    </xsd:complexType>  
   </xsd:element>  
  </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
                <xsd:enumeration value='AAA'/>  
                <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
        </xsd:simpleType>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:sequence>  
                                <xsd:element name='GrandChild1' type='GCType'/>  
                                <xsd:element name='GrandChild2' type='GCType'/>  
                                <xsd:element name='GrandChild3' type='GCType'/>  
                            </xsd:sequence>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>  
            <GrandChild1>AAA</GrandChild1>  
            <GrandChild2>ZZZ</GrandChild2>  
            <GrandChild3>ZZZ</GrandChild3>  
        </Child1>  
    </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="43343-130">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-130">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43343-131"><see cref="T:System.Xml.Linq.XDocument" />、<see cref="T:System.Xml.Linq.XElement" />、または <see cref="T:System.Xml.Linq.XAttribute" /> が、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD に準拠しているかどうかを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-131">Validates that an <see cref="T:System.Xml.Linq.XDocument" />, an <see cref="T:System.Xml.Linq.XElement" />, or an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-132">これらのメソッドは、基になる <xref:System.Xml.XmlReader> を使用して、XML ツリーを XSD に対して検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-132">These methods use an underlying <xref:System.Xml.XmlReader> to validate the XML tree against an XSD.</span></span>  
  
 <span data-ttu-id="43343-133">検証エラーと警告メッセージは、<xref:System.Xml.Schema.ValidationEventHandler> デリゲートを使用して処理されます。</span><span class="sxs-lookup"><span data-stu-id="43343-133">Validation error and warning messages are handled using the <xref:System.Xml.Schema.ValidationEventHandler> delegate.</span></span> <span data-ttu-id="43343-134">これらのメソッドにイベントハンドラーが提供されていない場合、検証エラーは <xref:System.Xml.Schema.XmlSchemaValidationException>として公開されます。</span><span class="sxs-lookup"><span data-stu-id="43343-134">If no event handler is provided to these methods, validation errors are exposed as an <xref:System.Xml.Schema.XmlSchemaValidationException>.</span></span> <span data-ttu-id="43343-135">検証の警告によって <xref:System.Xml.Schema.XmlSchemaValidationException> がスローされることはありません。</span><span class="sxs-lookup"><span data-stu-id="43343-135">Validation warnings do not cause an <xref:System.Xml.Schema.XmlSchemaValidationException> to be thrown.</span></span>  
  
 <span data-ttu-id="43343-136">これらの拡張メソッドの一部では、必要に応じて、スキーマ検証後の infoset (PSVI) の作成を許可します。</span><span class="sxs-lookup"><span data-stu-id="43343-136">Some of these extension methods optionally allow population of the post-schema-validation infoset (PSVI).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XDocument, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XDocument * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-137">検証対象の <see cref="T:System.Xml.Linq.XDocument" />。</span><span class="sxs-lookup"><span data-stu-id="43343-137">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="43343-138">検証時に照合する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span><span class="sxs-lookup"><span data-stu-id="43343-138">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="43343-139">リーダーが検証エラーを検出した場合に発生するイベントの <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="43343-139">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="43343-140"><see langword="null" /> の場合、検証エラーに基づいて例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-140">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="43343-141">このメソッドは、<see cref="T:System.Xml.Linq.XDocument" /> が <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD に準拠しているかどうかを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-141">This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-142">この拡張メソッドは、<xref:System.Xml.Linq.XDocument> が <xref:System.Xml.Schema.XmlSchemaSet>のスキーマコンテンツモデルに準拠しているかどうかを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-142">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43343-143">次の例では、<xref:System.Xml.Schema.XmlSchemaSet> を作成し、このスキーマ セットに対して 2 つの <xref:System.Xml.Linq.XDocument> オブジェクトを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-143">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set.</span></span> <span data-ttu-id="43343-144">ドキュメントの 1 つは有効ですが、その他のドキュメントは無効です。</span><span class="sxs-lookup"><span data-stu-id="43343-144">One of the documents is valid, the other is not.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child2", "content1")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child2>content2</Child2>  
    </Root>  
  
    Dim doc2 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child3>content1</Child3>  
    </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="43343-145">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-145">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="43343-146">XML スキーマ定義言語 (XSD) の検証エラーが原因でスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-146">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XAttribute, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XAttribute * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-147">検証対象の <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="43343-147">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="43343-148">検証対象のサブツリーを指定する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</span><span class="sxs-lookup"><span data-stu-id="43343-148">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="43343-149">検証時に照合する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span><span class="sxs-lookup"><span data-stu-id="43343-149">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="43343-150">リーダーが検証エラーを検出した場合に発生するイベントの <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="43343-150">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="43343-151"><see langword="null" /> の場合、検証エラーに基づいて例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-151">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="43343-152">このメソッドは、<see cref="T:System.Xml.Linq.XAttribute" /> が指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> および <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に準拠しているかどうかを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-152">This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-153">このメソッドを使用すると、<xref:System.Xml.Linq.XAttribute> がスキーマに準拠しているかどうかを検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-153">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="43343-154">通常、このメソッドは、属性を変更し、スキーマに準拠しているかどうかを確認するときに使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-154">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="43343-155">ドキュメント全体を検証することもできますが、属性だけを検証する処理時間は短くなります。</span><span class="sxs-lookup"><span data-stu-id="43343-155">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="43343-156">`validationEventHandler`に `null` を渡した場合、このメソッドは検証エラーの発生時に例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="43343-156">If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors.</span></span> <span data-ttu-id="43343-157">検証の警告によって例外が発生することはありません。</span><span class="sxs-lookup"><span data-stu-id="43343-157">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="43343-158">属性を検証するには、<xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-158">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="43343-159">このインスタンスは、さまざまな方法で取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-159">You can obtain this instance in various ways.</span></span> <span data-ttu-id="43343-160">簡単な方法は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43343-160">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="43343-161">ドキュメントがスキーマに準拠していることを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-161">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="43343-162"><xref:System.Xml.Schema.Extensions.Validate%2A> 拡張メソッドを呼び出して、スキーマ検証後の infoset (PSVI) を追加します。</span><span class="sxs-lookup"><span data-stu-id="43343-162">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="43343-163"><xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 拡張メソッドを呼び出して、<xref:System.Xml.Schema.IXmlSchemaInfo>を実装するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-163">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="43343-164">取得したオブジェクトから、<xref:System.Xml.Schema.XmlSchemaObject>を取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-164">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="43343-165"><xref:System.Xml.Linq.XElement>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaElement>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-165">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="43343-166"><xref:System.Xml.Linq.XAttribute>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaAttribute>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-166">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="43343-167"><xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを作成したら、このメソッドを使用して属性を検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-167">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XAttribute("Lang", "C#")  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
XAttribute lang = doc1.Root.Attribute("Lang");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Lang attribute invalid according to the schema  
lang.Value = "VC";  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
      <?xml version='1.0'?>  
      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
          <xsd:element name='Root'>  
              <xsd:complexType>  
                  <xsd:simpleContent>  
                      <xsd:extension base='xsd:string'>  
                          <xsd:attribute name='Lang' use='required'>  
                              <xsd:simpleType>  
                                  <xsd:restriction base='xsd:token'>  
                                      <xsd:enumeration value='C#'/>  
                                      <xsd:enumeration value='VB'/>  
                                  </xsd:restriction>  
                              </xsd:simpleType>  
                          </xsd:attribute>  
                      </xsd:extension>  
                  </xsd:simpleContent>  
              </xsd:complexType>  
          </xsd:element>  
      </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Root.Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="43343-168">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-168">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="43343-169">XML スキーマ定義言語 (XSD) の検証エラーが原因でスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-169">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XDocument, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler, addSchemaInfo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XDocument * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-170">検証対象の <see cref="T:System.Xml.Linq.XDocument" />。</span><span class="sxs-lookup"><span data-stu-id="43343-170">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="43343-171">検証時に照合する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span><span class="sxs-lookup"><span data-stu-id="43343-171">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="43343-172">リーダーが検証エラーを検出した場合に発生するイベントの <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="43343-172">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="43343-173"><see langword="null" /> の場合、検証エラーに基づいて例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-173">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="43343-174">スキーマ検証後の infoset (PSVI) を設定するかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="43343-174">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="43343-175"><see cref="T:System.Xml.Linq.XDocument" /> が <see cref="T:System.Xml.Schema.XmlSchemaSet" /> の XSD に準拠しているかどうかを検証します。オプションで、スキーマ検証後の infoset (PSVI) を XML ツリーに設定できます。</span><span class="sxs-lookup"><span data-stu-id="43343-175">Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-176">この拡張メソッドは、<xref:System.Xml.Linq.XDocument> が <xref:System.Xml.Schema.XmlSchemaSet>のスキーマコンテンツモデルに準拠しているかどうかを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-176">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
 <span data-ttu-id="43343-177">`addSchemaInfo` が `true`場合、このメソッドはスキーマ検証後の infoset (PSVI) を XML ツリーに追加します。</span><span class="sxs-lookup"><span data-stu-id="43343-177">If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="43343-178">XML ツリーに PSVI を設定するには、次の2つの手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="43343-178">There are two steps to populating the XML tree with the PSVI.</span></span>  
  
1.  <span data-ttu-id="43343-179">最初に、ツリー内のすべてのノードに注釈を追加して、ツリー内の要素または属性に対して <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> または <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> を呼び出すことができるようにします。</span><span class="sxs-lookup"><span data-stu-id="43343-179">First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on an element or attribute in the tree.</span></span>  
  
2.  <span data-ttu-id="43343-180">次に、XSD で定義されている既定の要素と属性が XML ツリーに追加されます。</span><span class="sxs-lookup"><span data-stu-id="43343-180">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="43343-181"><xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> メソッドの1つを呼び出すことにより、特定の要素または属性が XSD から既定の要素または属性として追加されたかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="43343-181">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43343-182">次の例には、既定値を持つ `Att1` 属性を持つ `Child2` 要素を定義する XSD が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43343-182">The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value.</span></span> <span data-ttu-id="43343-183">ドキュメントが正常に検証されると、既定値の属性が XML ツリーに追加されます。</span><span class="sxs-lookup"><span data-stu-id="43343-183">After successfully validating the document, the attribute with the default value is added to the XML tree.</span></span> <span data-ttu-id="43343-184">既定の属性は `doc2`に追加されないことに注意してください。これは、スキーマに対して検証されません。</span><span class="sxs-lookup"><span data-stu-id="43343-184">Note that the default attribute is not added to `doc2`, which does not validate against the schema.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                           {  
                               Console.WriteLine("{0}", e.Message);  
                               errors = true;  
                           }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:simpleContent>  
                                <xsd:extension base='xsd:string'>  
                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                </xsd:extension>  
                            </xsd:simpleContent>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>c1</Child1>  
                                <Child2>c2</Child2>  
                            </Root>  
    Dim doc2 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>content1</Child1>  
                                <Child3>content1</Child3>  
                            </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="43343-185">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-185">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 <span data-ttu-id="43343-186">次の例では、ツリーに PSVI を設定します。</span><span class="sxs-lookup"><span data-stu-id="43343-186">The following example populates the tree with PSVI.</span></span> <span data-ttu-id="43343-187">検証後は、PSVI に従って無効なすべての要素と属性がツリーに出力されます。</span><span class="sxs-lookup"><span data-stu-id="43343-187">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
   string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
           <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
             <xsd:enumeration value='AAA'/>  
             <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
           </xsd:simpleType>  
           <xsd:element name='Root'>  
            <xsd:complexType>  
             <xsd:sequence>  
              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
               <xsd:complexType>  
                <xsd:sequence>  
                 <xsd:element name='GrandChild1' type='GCType'/>  
                 <xsd:element name='GrandChild2' type='GCType'/>  
                 <xsd:element name='GrandChild3' type='GCType'/>  
                </xsd:sequence>  
               </xsd:complexType>  
              </xsd:element>  
             </xsd:sequence>  
            </xsd:complexType>  
           </xsd:element>  
          </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
        {  
            Console.WriteLine(e.Message);  
            errors = true;  
        }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:simpleType name='GCType'>  
                <xsd:restriction base='xsd:token'>  
                    <xsd:enumeration value='AAA'/>  
                    <xsd:enumeration value='BBB'/>  
                </xsd:restriction>  
            </xsd:simpleType>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' type='GCType'/>  
                                    <xsd:element name='GrandChild2' type='GCType'/>  
                                    <xsd:element name='GrandChild3' type='GCType'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>AAA</GrandChild1>  
                <GrandChild2>ZZZ</GrandChild2>  
                <GrandChild3>ZZZ</GrandChild3>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="43343-188">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-188">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="43343-189">XML スキーマ定義言語 (XSD) の検証エラーが原因でスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-189">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XElement, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XElement * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-190">検証対象の <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="43343-190">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="43343-191">検証対象のサブツリーを指定する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</span><span class="sxs-lookup"><span data-stu-id="43343-191">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="43343-192">検証時に照合する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span><span class="sxs-lookup"><span data-stu-id="43343-192">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="43343-193">リーダーが検証エラーを検出した場合に発生するイベントの <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="43343-193">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="43343-194"><see langword="null" /> の場合、検証エラーに基づいて例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-194">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="43343-195">このメソッドは、<see cref="T:System.Xml.Linq.XElement" /> サブツリーが指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> および <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に準拠しているかどうかを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-195">This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-196">このメソッドを使用すると、サブツリー (ルートに <xref:System.Xml.Linq.XElement> がある) がスキーマに準拠しているかどうかを検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-196">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema.</span></span> <span data-ttu-id="43343-197">通常、この方法は、サブツリーを変更し、その後もスキーマに準拠していることを確認する場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-197">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="43343-198">ドキュメント全体を検証することもできますが、サブツリーだけを検証する処理時間は短くなります。</span><span class="sxs-lookup"><span data-stu-id="43343-198">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="43343-199">`validationEventHandler`に `null` を渡した場合、このメソッドは検証エラーの発生時に例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="43343-199">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="43343-200">検証の警告によって例外が発生することはありません。</span><span class="sxs-lookup"><span data-stu-id="43343-200">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="43343-201">サブツリーを検証するには、<xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-201">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="43343-202">このインスタンスは、さまざまな方法で取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-202">You can obtain this instance in various ways.</span></span> <span data-ttu-id="43343-203">簡単な方法は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43343-203">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="43343-204">ドキュメントがスキーマに準拠していることを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-204">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="43343-205"><xref:System.Xml.Schema.Extensions.Validate%2A> 拡張メソッドを呼び出して、スキーマ検証後の infoset (PSVI) を追加します。</span><span class="sxs-lookup"><span data-stu-id="43343-205">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="43343-206"><xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 拡張メソッドを呼び出して、<xref:System.Xml.Schema.IXmlSchemaInfo>を実装するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-206">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="43343-207">取得したオブジェクトから、<xref:System.Xml.Schema.XmlSchemaObject>を取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-207">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="43343-208"><xref:System.Xml.Linq.XElement>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaElement>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-208">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="43343-209"><xref:System.Xml.Linq.XAttribute>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaAttribute>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-209">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="43343-210"><xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを作成したら、このメソッドを使用してサブツリーを検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-210">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:sequence>  
             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
            </xsd:sequence>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1",  
            new XElement("GrandChild1", "gc"),  
            new XElement("GrandChild2", "gc")  
        )  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after first edit ...");  
XElement child1 = doc1.Element("Root").Element("Child1");  
child1.Add(new XElement("GrandChild2", "gc"));  
errors = false;  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Child1 element invalid according to the schema  
child1.Add(new XElement("GrandChild3", "gc"));  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after second edit ...");  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>gc</GrandChild1>  
                <GrandChild2>gc</GrandChild2>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after first edit ...")  
    Dim child1 As XElement = doc1.Element("Root").Element("Child1")  
    child1.Add(<GrandChild2>gc</GrandChild2>)  
    errors = False  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Child1 element invalid according to the schema  
    child1.Add(<GrandChild3>gc</GrandChild3>)  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after second edit ...")  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="43343-211">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-211">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Child1 after first edit ...  
child1 validated  
  
Validating Child1 after second edit ...  
The element 'Child1' has invalid child element 'GrandChild3'.  
child1 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="43343-212">XML スキーマ定義言語 (XSD) の検証エラーが原因でスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-212">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XAttribute, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler, addSchemaInfo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XAttribute * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-213">検証対象の <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="43343-213">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="43343-214">検証対象のサブツリーを指定する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</span><span class="sxs-lookup"><span data-stu-id="43343-214">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="43343-215">検証時に照合する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span><span class="sxs-lookup"><span data-stu-id="43343-215">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="43343-216">リーダーが検証エラーを検出した場合に発生するイベントの <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="43343-216">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="43343-217"><see langword="null" /> の場合、検証エラーに基づいて例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-217">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="43343-218">スキーマ検証後の infoset (PSVI) を設定するかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="43343-218">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="43343-219"><see cref="T:System.Xml.Linq.XAttribute" /> が、指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> および <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に準拠しているかどうかを検証します。必要に応じて、スキーマ検証後の infoset (PSVI) を XML ツリーに設定できます。</span><span class="sxs-lookup"><span data-stu-id="43343-219">Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-220">このメソッドを使用すると、<xref:System.Xml.Linq.XAttribute> がスキーマに準拠しているかどうかを検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-220">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="43343-221">通常、このメソッドは、属性を変更し、スキーマに準拠しているかどうかを確認するときに使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-221">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="43343-222">ドキュメント全体を検証することもできますが、属性だけを検証する処理時間は短くなります。</span><span class="sxs-lookup"><span data-stu-id="43343-222">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="43343-223">`addSchemaInfo` が `true`場合、このメソッドはスキーマ検証後の infoset (PSVI) を属性に設定します。</span><span class="sxs-lookup"><span data-stu-id="43343-223">If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI).</span></span> <span data-ttu-id="43343-224">XML ツリーに PSVI を設定した後、検証された属性に対して <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="43343-224">After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on the validated attribute.</span></span> <span data-ttu-id="43343-225">これは、<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>によって返されたデータに依存するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="43343-225">This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</span></span>  
  
 <span data-ttu-id="43343-226">`validationEventHandler`に `null` を渡した場合、このメソッドは検証エラーの発生時に例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="43343-226">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="43343-227">検証の警告によって例外が発生することはありません。</span><span class="sxs-lookup"><span data-stu-id="43343-227">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="43343-228">属性を検証するには、<xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-228">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="43343-229">このインスタンスは、さまざまな方法で取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-229">You can obtain this instance in various ways.</span></span> <span data-ttu-id="43343-230">簡単な方法は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43343-230">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="43343-231">ドキュメントがスキーマに準拠していることを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-231">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="43343-232"><xref:System.Xml.Schema.Extensions.Validate%2A> 拡張メソッドを呼び出して、スキーマ検証後の infoset (PSVI) を追加します。</span><span class="sxs-lookup"><span data-stu-id="43343-232">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="43343-233"><xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 拡張メソッドを呼び出して、<xref:System.Xml.Schema.IXmlSchemaInfo>を実装するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-233">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="43343-234">取得したオブジェクトから、<xref:System.Xml.Schema.XmlSchemaObject>を取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-234">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="43343-235"><xref:System.Xml.Linq.XElement>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaElement>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-235">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="43343-236"><xref:System.Xml.Linq.XAttribute>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaAttribute>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-236">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="43343-237"><xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを作成したら、このメソッドを使用して属性を検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-237">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XAttribute("Lang", "C#")  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
    XAttribute lang = doc1.Element("Root").Attribute("Lang");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    // the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC";  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:simpleContent>  
                        <xsd:extension base='xsd:string'>  
                            <xsd:attribute name='Lang' use='required'>  
                                <xsd:simpleType>  
                                    <xsd:restriction base='xsd:token'>  
                                        <xsd:enumeration value='C#'/>  
                                        <xsd:enumeration value='VB'/>  
                                    </xsd:restriction>  
                                </xsd:simpleType>  
                            </xsd:attribute>  
                        </xsd:extension>  
                    </xsd:simpleContent>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Element("Root").Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="43343-238">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-238">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
Invalid Attribute /Root/@Lang  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="43343-239">XML スキーマ定義言語 (XSD) の検証エラーが原因でスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-239">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XElement, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler, addSchemaInfo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XElement * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="43343-240">検証対象の <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="43343-240">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="43343-241">検証対象のサブツリーを指定する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</span><span class="sxs-lookup"><span data-stu-id="43343-241">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="43343-242">検証時に照合する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span><span class="sxs-lookup"><span data-stu-id="43343-242">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="43343-243">リーダーが検証エラーを検出した場合に発生するイベントの <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="43343-243">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="43343-244"><see langword="null" /> の場合、検証エラーに基づいて例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-244">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="43343-245">スキーマ検証後の infoset (PSVI) を設定するかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="43343-245">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="43343-246"><see cref="T:System.Xml.Linq.XElement" /> サブツリーが、指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> および <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に準拠しているかどうかを検証します。必要に応じて、スキーマ検証後の infoset (PSVI) を XML ツリーに設定できます。</span><span class="sxs-lookup"><span data-stu-id="43343-246">Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43343-247">このメソッドを使用すると、サブツリー (サブツリーのルートにある <xref:System.Xml.Linq.XElement>) がスキーマに準拠しているかどうかを検証できます。</span><span class="sxs-lookup"><span data-stu-id="43343-247">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema.</span></span> <span data-ttu-id="43343-248">通常、この方法は、サブツリーを変更し、その後もスキーマに準拠していることを確認する場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-248">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="43343-249">ドキュメント全体を検証することもできますが、サブツリーだけを検証する処理時間は短くなります。</span><span class="sxs-lookup"><span data-stu-id="43343-249">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="43343-250">`addSchemaInfo` が `true`の場合、このメソッドはスキーマ検証後の infoset (PSVI) を XML ツリーに設定します。</span><span class="sxs-lookup"><span data-stu-id="43343-250">If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="43343-251">XML ツリーに PSVI を設定することには、2つの側面があります。</span><span class="sxs-lookup"><span data-stu-id="43343-251">There are two aspects of populating the XML tree with the PSVI.</span></span>  
  
 <span data-ttu-id="43343-252">最初に、ツリー内のすべてのノードに注釈が追加されます。これにより、ツリー内の要素または属性に対して <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> を呼び出すことができるようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-252">First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.</span></span>  
  
 <span data-ttu-id="43343-253">次に、XSD で定義されている既定の要素と属性が XML ツリーに追加されます。</span><span class="sxs-lookup"><span data-stu-id="43343-253">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="43343-254"><xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> メソッドの1つを呼び出すことにより、特定の要素または属性が XSD から既定の要素または属性として追加されたかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="43343-254">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
 <span data-ttu-id="43343-255">`validationEventHandler`に `null` を渡した場合、このメソッドは検証エラーの発生時に例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="43343-255">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="43343-256">検証の警告によって例外が発生することはありません。</span><span class="sxs-lookup"><span data-stu-id="43343-256">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="43343-257">サブツリーを検証するには、<xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="43343-257">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="43343-258">このインスタンスは、さまざまな方法で取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-258">You can obtain this instance in various ways.</span></span> <span data-ttu-id="43343-259">簡単な方法は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43343-259">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="43343-260">ドキュメントがスキーマに準拠していることを検証します。</span><span class="sxs-lookup"><span data-stu-id="43343-260">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="43343-261"><xref:System.Xml.Schema.Extensions.Validate%2A> 拡張メソッドを呼び出して、スキーマ検証後の infoset (PSVI) を追加します。</span><span class="sxs-lookup"><span data-stu-id="43343-261">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="43343-262"><xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 拡張メソッドを呼び出して、<xref:System.Xml.Schema.IXmlSchemaInfo>を実装するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="43343-262">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="43343-263">取得したオブジェクトから、<xref:System.Xml.Schema.XmlSchemaObject>を取得できます。</span><span class="sxs-lookup"><span data-stu-id="43343-263">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="43343-264"><xref:System.Xml.Linq.XElement>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaElement>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-264">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="43343-265"><xref:System.Xml.Linq.XAttribute>の <xref:System.Xml.Schema.XmlSchemaObject> を取得した場合、型は <xref:System.Xml.Schema.XmlSchemaAttribute>されます。</span><span class="sxs-lookup"><span data-stu-id="43343-265">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="43343-266"><xref:System.Xml.Schema.XmlSchemaObject>のインスタンスを作成した後は、このメソッドを使用してサブツリーを検証できます。「」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43343-266">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:simpleContent>  
                                    <xsd:extension base='xsd:string'>  
                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                    </xsd:extension>  
                                </xsd:simpleContent>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>c1</Child1>  
            <Child2>c2</Child2>  
        </Root>  
  
    Dim doc2 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>content1</Child1>  
            <Child3>content1</Child3>  
        </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="43343-267">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="43343-267">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="43343-268">XML スキーマ定義言語 (XSD) の検証エラーが原因でスローされます。</span><span class="sxs-lookup"><span data-stu-id="43343-268">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
