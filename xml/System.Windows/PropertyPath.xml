<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d3571d9b87411eb666d31afe4e7718aaaf9a20e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968479" /></Metadata><TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="53fa6-101">別のプロパティの下、または所有している型の下のパスとして、プロパティを記述するためのデータ構造を実装します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-101">Implements a data structure for describing a property as a path below another property, or below an owning type.</span></span> <span data-ttu-id="53fa6-102">プロパティ パスは、オブジェクトへのデータ バインディングと、アニメーションのストーリーボードおよびタイムラインに使用されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-102">Property paths are used in data binding to objects, and in storyboards and timelines for animations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53fa6-103">このクラスには、文字列 <xref:System.Windows.PropertyPath.Path%2A>、および文字列 <xref:System.Windows.PropertyPath.Path%2A>に <xref:System.Windows.PropertyPath.PathParameters%2A> する依存関係プロパティの一覧が含まれています。</span><span class="sxs-lookup"><span data-stu-id="53fa6-103">This class contains a string <xref:System.Windows.PropertyPath.Path%2A>, and list of dependency properties that are the <xref:System.Windows.PropertyPath.PathParameters%2A> into the string <xref:System.Windows.PropertyPath.Path%2A>.</span></span>  
  
 <span data-ttu-id="53fa6-104"><xref:System.Windows.PropertyPath> は、次の2つの動作モードをサポートします。</span><span class="sxs-lookup"><span data-stu-id="53fa6-104"><xref:System.Windows.PropertyPath> supports two modes of behavior:</span></span>  
  
 <span data-ttu-id="53fa6-105">**ソースモード**は、他の操作のソースとして使用されるプロパティへのパスを表します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-105">**Source mode** describes a path to a property that is used as a source for some other operation.</span></span> <span data-ttu-id="53fa6-106">このモードは、データバインディングをサポートするために <xref:System.Windows.Data.Binding> クラスによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-106">This mode is used by the <xref:System.Windows.Data.Binding> class to support data binding.</span></span>  
  
 <span data-ttu-id="53fa6-107">**ターゲットモード**ターゲットプロパティとして設定されるプロパティへのパスを記述します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-107">**Target mode** describes a path to a property that will be set as a target property.</span></span> <span data-ttu-id="53fa6-108">このモードは、ストーリーボードとタイムラインセッターのサポートでアニメーションによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-108">This mode is used by animation in support of storyboard and timeline setters.</span></span>  
  
 <span data-ttu-id="53fa6-109">たとえば、`Background.Opacity` は2段階のパスです。</span><span class="sxs-lookup"><span data-stu-id="53fa6-109">For instance, `Background.Opacity` is a two-step path.</span></span> <span data-ttu-id="53fa6-110">このパスは、最初にオブジェクトの `Background` プロパティを検索し、`Background` プロパティに設定されている value オブジェクトを取得して、そのオブジェクトの `Opacity` プロパティの値を取得することを意味します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-110">This path implies: first, find the `Background` property of an object, get the value object that the `Background` property is set to, and then get the value of the `Opacity` property on that object.</span></span>  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="53fa6-111">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="53fa6-111">XAML Attribute Usage</span></span>  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a><span data-ttu-id="53fa6-112">XAML の値</span><span class="sxs-lookup"><span data-stu-id="53fa6-112">XAML Values</span></span>  
 <span data-ttu-id="53fa6-113">*propertyPath*</span><span class="sxs-lookup"><span data-stu-id="53fa6-113">*propertyPath*</span></span>  
 <span data-ttu-id="53fa6-114">単純または複雑なプロパティパスとして評価される文字列。</span><span class="sxs-lookup"><span data-stu-id="53fa6-114">A string that is evaluated to be either a simple or complex property path.</span></span> <span data-ttu-id="53fa6-115">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] で <xref:System.Windows.PropertyPath> を設定するための構文は汎用性がありますが複雑です。詳細については、「 [PROPERTYPATH XAML 構文](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-115">The syntax for setting a <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is versatile but complex, and is described in the separate topic [PropertyPath XAML Syntax](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/056aee79-7cdd-434f-8174-dfc856cad343"><span data-ttu-id="53fa6-116">x:Static のマークアップ拡張機能</span><span class="sxs-lookup"><span data-stu-id="53fa6-116">x:Static Markup Extension</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53fa6-117"><see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-117">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="53fa6-118">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] プロパティまたは単一の依存関係プロパティへのパスを記述するプロパティ パス。</span><span class="sxs-lookup"><span data-stu-id="53fa6-118">A property path that either describes a path to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property, or a single dependency property.</span></span></param>
        <summary><span data-ttu-id="53fa6-119"><see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-119">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53fa6-120">このコンストラクターは、バインディングのソースモードプロパティパスとして使用されているか、またはストーリーボードターゲットのターゲットモードのシングルステッププロパティパスで使用されているかによって、まったく異なる2つの使用方法を持ちます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-120">This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</span></span>  
  
 <span data-ttu-id="53fa6-121">バインディングのソースモードでこの <xref:System.Windows.PropertyPath> を使用する場合、`parameter` はプロパティ名を表す文字列であるか、またはバインディングのソースとして使用されているオブジェクトの [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] オブジェクトモデルのプロパティへの "ステップスルー" パスを記述する文字列にすることができます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-121">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, `parameter` is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="53fa6-122">バインドプロパティのパスの場合、"step" を識別する文字はドット (.) です。</span><span class="sxs-lookup"><span data-stu-id="53fa6-122">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="53fa6-123">インデクサー参照 (複数のインデクサーと型の区別も含む) もサポートされています。</span><span class="sxs-lookup"><span data-stu-id="53fa6-123">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="53fa6-124"><xref:System.Windows.Data.Binding> オブジェクトによって明示的に使用される文字列の構文の詳細については、「<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-124">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="53fa6-125">バインディングソースとして使用されるプロパティは、依存関係プロパティである必要はありません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-125">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="53fa6-126">バインディングが双方向に更新される場合、参照されるプロパティは読み取り/書き込み可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="53fa6-126">If the binding updates two-way, the property referenced must be read-write.</span></span> <span data-ttu-id="53fa6-127">また、バインディングターゲットは依存関係プロパティである必要があることにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-127">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="53fa6-128">詳細については、「[データバインディングの概要](/dotnet/framework/wpf/data/data-binding-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-128">For details, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
 <span data-ttu-id="53fa6-129">この <xref:System.Windows.PropertyPath> をターゲットモードで使用してストーリーボードターゲットのシングルステップパスを指定した場合、`parameter` は一般に <xref:System.Windows.DependencyProperty>型として提供されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-129">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, `parameter` is generally provided as type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="53fa6-130"><xref:System.Windows.DependencyProperty.Name%2A>である文字列を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-130">You can also specify a string that is the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span> <span data-ttu-id="53fa6-131">これらはいずれも、内部的に文字列として格納されるため、同じ結果に評価されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-131">Either of these evaluate to the same result, because it is stored internally as a string.</span></span> <span data-ttu-id="53fa6-132">指定された <xref:System.Windows.DependencyProperty> は、<xref:System.Windows.Markup.DependencyPropertyConverter>によって文字列に変換されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-132">A provided <xref:System.Windows.DependencyProperty> is converted to a string through <xref:System.Windows.Markup.DependencyPropertyConverter>.</span></span> <span data-ttu-id="53fa6-133"><xref:System.Windows.Markup.DependencyPropertyConverter> は、依存関係プロパティの修飾された名前付け形式をサポートしているため、 *typeName*を指定できます。*propertyName*修飾依存関係プロパティ名文字列をコード内の <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> コンストラクターに指定します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-133">The <xref:System.Windows.Markup.DependencyPropertyConverter> supports a qualified naming format for dependency properties, so you can specify a *typeName*.*propertyName* qualified dependency property name string to the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor in code.</span></span> <span data-ttu-id="53fa6-134">依存関係プロパティの識別子への修飾パスは、複雑なパスとは異なる概念です。</span><span class="sxs-lookup"><span data-stu-id="53fa6-134">The qualified path to the dependency property identifier is a different concept than a complex path.</span></span> <span data-ttu-id="53fa6-135">代わりに、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> コンストラクターを使用して、複雑なパスの <xref:System.Windows.PropertyPath> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="53fa6-135">A complex-path <xref:System.Windows.PropertyPath> should instead be created with the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="53fa6-136"><see cref="P:System.Windows.PropertyPath.Path" /> をトークン化された形式で指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="53fa6-136">A string that specifies the <see cref="P:System.Windows.PropertyPath.Path" />, in a tokenized format.</span></span></param>
        <param name="pathParameters"><span data-ttu-id="53fa6-137"><see cref="P:System.Windows.PropertyPath.PathParameters" /> を設定するオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="53fa6-137">An array of objects that sets the <see cref="P:System.Windows.PropertyPath.PathParameters" />.</span></span></param>
        <summary><span data-ttu-id="53fa6-138">指定したパスのトークン文字列とパラメーターを使用して、<see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-138">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class, with the provided pathing token string and parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53fa6-139">この署名は、通常、複雑なパスを使用してターゲットモード <xref:System.Windows.PropertyPath> 使用する場合にのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-139">This signature is generally only used for target-mode <xref:System.Windows.PropertyPath> usages with complex paths.</span></span>  
  
 <span data-ttu-id="53fa6-140">このコンストラクターは、`pathParameters` コンストラクター引数の `params` をサポートします。</span><span class="sxs-lookup"><span data-stu-id="53fa6-140">This constructor supports `params` for the `pathParameters` constructor argument.</span></span> <span data-ttu-id="53fa6-141">したがって、`pathParameters` の内容を一連のコンマ区切りのコンストラクター引数として指定することで、配列の次元を設定し、`pathParameters` の項目を設定する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="53fa6-141">Therefore you can specify the contents of `pathParameters` as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the `pathParameters` items.</span></span> <span data-ttu-id="53fa6-142">指定する各項目は、次のいずれかの種類である必要があります: <xref:System.Windows.DependencyProperty>、<xref:System.Reflection.PropertyInfo>、<xref:System.ComponentModel.PropertyDescriptor>。</span><span class="sxs-lookup"><span data-stu-id="53fa6-142">Each item you specify must be one of the following types: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo>, <xref:System.ComponentModel.PropertyDescriptor>.</span></span>  
  
 <span data-ttu-id="53fa6-143">パラメーターの要件の詳細については、「<xref:System.Windows.PropertyPath.Path%2A>」および「<xref:System.Windows.PropertyPath.PathParameters%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-143">For more information on the requirements of the parameters, see <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53fa6-144">パスを説明する文字列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-144">Gets or sets the string that describes the path.</span></span></summary>
        <value><span data-ttu-id="53fa6-145">パスを説明する文字列。</span><span class="sxs-lookup"><span data-stu-id="53fa6-145">The string that describes the path.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53fa6-146">このプロパティに含まれる文字列には、バインディングのソースモードプロパティパスに <xref:System.Windows.PropertyPath> が使用されているかどうか、ストーリーボードターゲットのターゲットモードのシングルステッププロパティパス、またはストーリーボードターゲットの複雑なパスに対して、まったく異なる3つの意味があります。</span><span class="sxs-lookup"><span data-stu-id="53fa6-146">The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.</span></span>  
  
 <span data-ttu-id="53fa6-147">バインディングのソースモードでこの <xref:System.Windows.PropertyPath> を使用する場合、<xref:System.Windows.PropertyPath.Path%2A> はプロパティ名を表す文字列であるか、またはバインディングのソースとして使用されているオブジェクトの [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] オブジェクトモデルのプロパティへの "ステップスルー" パスを記述する文字列にすることができます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-147">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, <xref:System.Windows.PropertyPath.Path%2A> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="53fa6-148">バインドプロパティのパスの場合、"step" を識別する文字はドット (.) です。</span><span class="sxs-lookup"><span data-stu-id="53fa6-148">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="53fa6-149">インデクサー参照 (複数のインデクサーと型の区別も含む) もサポートされています。</span><span class="sxs-lookup"><span data-stu-id="53fa6-149">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="53fa6-150"><xref:System.Windows.Data.Binding> オブジェクトによって明示的に使用される文字列の構文の詳細については、「<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-150">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="53fa6-151">バインディングソースとして使用されるプロパティは、依存関係プロパティである必要はありません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-151">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="53fa6-152">バインディングが双方向に更新される場合、プロパティソースは読み取り/書き込み可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="53fa6-152">If the binding updates two-way, the property source must be read-write.</span></span> <span data-ttu-id="53fa6-153">また、バインディングターゲットは依存関係プロパティである必要があることにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-153">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="53fa6-154">詳細については、「[データバインディングの概要](/dotnet/framework/wpf/data/data-binding-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-154">For details, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
 <span data-ttu-id="53fa6-155">この <xref:System.Windows.PropertyPath> をターゲットモードで使用して、ストーリーボードターゲットのシングルステップパスの場合、<xref:System.Windows.PropertyPath> は*typeName*である文字列です。*propertyName*修飾依存関係プロパティ名の文字列。</span><span class="sxs-lookup"><span data-stu-id="53fa6-155">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.</span></span>  
  
 <span data-ttu-id="53fa6-156">この <xref:System.Windows.PropertyPath> をストーリーボードターゲットの複雑なパスに使用する場合、<xref:System.Windows.PropertyPath.Path%2A> は <xref:System.Windows.PropertyPath.PathParameters%2A>で指定されたさまざまなオブジェクトの関係を表すトークン化された文字列形式です。</span><span class="sxs-lookup"><span data-stu-id="53fa6-156">If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, <xref:System.Windows.PropertyPath.Path%2A> is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
-   <span data-ttu-id="53fa6-157">配列内の各項目は、かっこで囲まれた項目の配列インデックスによって、この形式で指定されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-157">Each item in the array is specified in this format by the array index for the item enclosed in parentheses.</span></span> <span data-ttu-id="53fa6-158">たとえば、配列内の最初の項目を指定する場合、文字列トークンは `(0)`ます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-158">For example, to specify the first item in the array, the string token is `(0)`.</span></span>  
  
-   <span data-ttu-id="53fa6-159">項目間のリレーションシップ (パス内の "ステップ") は、ドット (.) によって指定されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-159">Relationships between items ("steps" in the path) are specified by a dot (.).</span></span> <span data-ttu-id="53fa6-160">ドットの前のプロパティは、パスの最初のステップであり、の後のプロパティは2番目のステップになります (2 つ以上のステップを指定できます)。</span><span class="sxs-lookup"><span data-stu-id="53fa6-160">The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two).</span></span> <span data-ttu-id="53fa6-161">チェーンの最後のステップは、アニメーション化されているプロパティを常に表します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-161">The last step in the chain always represents the property being animated.</span></span>  
  
-   <span data-ttu-id="53fa6-162">コレクションプロパティ内の項目は、インデクサー構文を使用してアクセスされます。インデックスは角かっこ ([および]) で囲みます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-162">Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]).</span></span> <span data-ttu-id="53fa6-163">インデクサーは、プロパティを表すトークンに加算されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-163">The indexer is additive to the token representing the property.</span></span> <span data-ttu-id="53fa6-164">たとえば、次の例では、2段階のパスを使用します。最初のステップでは、2つ目の項目を、`(0)[1].(1)` のコレクション内で指定します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-164">For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` .</span></span> <span data-ttu-id="53fa6-165">チェーンの最後のプロパティでインデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません。そのオブジェクトのプロパティをアニメーション化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="53fa6-165">You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.</span></span>  
  
 <span data-ttu-id="53fa6-166"><xref:System.Windows.PropertyPath> のパス文字列は、通常、コンストラクターを使用して確立されます。バインディングの場合は <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> 署名、1段階のストーリーボードターゲットの場合は <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> シグネチャ (複数ステップのストーリーボードターゲットの場合) です。</span><span class="sxs-lookup"><span data-stu-id="53fa6-166">The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> signature for multi-step storyboard targets.</span></span>  
  
 <span data-ttu-id="53fa6-167">**XAML:**<xref:System.Windows.PropertyPath> を使用して [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]内のプロパティ参照を属性値として記述すると、指定した文字列が最初に型コンバーター (<xref:System.Windows.PropertyPathConverter>) によって処理されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-167">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="53fa6-168">その後、この型コンバーターは文字列を処理し、その構文に基づいて、<xref:System.Windows.PropertyPath> コンストラクターシグネチャの1つを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-168">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="53fa6-169">属性値を処理する型コンバーターを使用したこの間接参照は、通常、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]で <xref:System.Windows.PropertyPath> を使用する方法です。 <xref:System.Windows.PropertyPath> オブジェクト要素を宣言し、<xref:System.Windows.PropertyPath.Path%2A> や <xref:System.Windows.PropertyPath.PathParameters%2A>などの属性に特定の値を適用することではありません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-169">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="53fa6-170">詳細については、「 [PROPERTYPATH XAML 構文](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-170">For more information, see [PropertyPath XAML Syntax](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax).</span></span>  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="53fa6-171">XAML テキストの使用</span><span class="sxs-lookup"><span data-stu-id="53fa6-171">XAML Text Usage</span></span>  
 <span data-ttu-id="53fa6-172"><xref:System.Windows.PropertyPath> 型のメンバーは、通常、直接 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文では設定されません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-172">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="53fa6-173">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-173">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53fa6-174">パスがインデックス付きパラメーターを参照するときに使用するパラメーターのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-174">Gets the list of parameters to use when the path refers to indexed parameters.</span></span></summary>
        <value><span data-ttu-id="53fa6-175">パラメーターのリスト。</span><span class="sxs-lookup"><span data-stu-id="53fa6-175">The parameter list.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53fa6-176"><xref:System.Windows.PropertyPath> のプロパティは、通常、コンストラクターを使用して確立されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-176">The properties for a <xref:System.Windows.PropertyPath> are typically established through the constructors.</span></span> <span data-ttu-id="53fa6-177"><xref:System.Windows.PropertyPath.PathParameters%2A>を設定する場合、<xref:System.Windows.PropertyPath.%23ctor%2A> コンストラクターは特に便利です。 `pathParameters` コンストラクター引数が `params`として指定されているためです。つまり、構築用の配列を作成したり、次元にしたりする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-177">For setting <xref:System.Windows.PropertyPath.PathParameters%2A>, the <xref:System.Windows.PropertyPath.%23ctor%2A> constructor is particularly convenient because the `pathParameters` constructor argument is designated as `params`, meaning that you do not need to create or dimension an array for construction.</span></span> <span data-ttu-id="53fa6-178">配列の各メンバーを追加のパラメーターとして指定するだけです。</span><span class="sxs-lookup"><span data-stu-id="53fa6-178">You simply specify each member of the array as an additional parameter.</span></span>  
  
 <span data-ttu-id="53fa6-179">ターゲットである最終的なプロパティが <xref:System.Windows.Freezable> 型である場合、その値は複製されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-179">If the final property that is the target is a <xref:System.Windows.Freezable> type, that value will be cloned.</span></span> <span data-ttu-id="53fa6-180">詳細については、「[ストーリーボードの概要](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-180">For details, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 <span data-ttu-id="53fa6-181">プロパティチェーンの実際の評価は、ストーリーボードアニメーション機構によって実行されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-181">The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</span></span> <span data-ttu-id="53fa6-182"><xref:System.Windows.PropertyPath> レベルでは、パスのステップが確実に接続されるように検証は実行されません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-182">At the <xref:System.Windows.PropertyPath> level, no validation is performed to make sure that the steps of the path connect at all.</span></span> <span data-ttu-id="53fa6-183">たとえば、最初の手順として <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> を持つプロパティパスを構築し、2番目の手順として <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> することができます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-183">For instance, you can construct a property path that has <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> as the first step, and <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> as the second step.</span></span> <span data-ttu-id="53fa6-184">ただし、このようなプロパティパスは、実際にターゲットとして適用された場合に失敗します。これは、<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> に塗りつぶすブラシの種類に <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> プロパティがないためです。</span><span class="sxs-lookup"><span data-stu-id="53fa6-184">But such a property path would fail if actually applied as a target, because the Brush type that fills <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> does not have a <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="53fa6-185">無効なプロパティパスは、警告なしで失敗します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-185">Invalid property paths fail silently.</span></span> <span data-ttu-id="53fa6-186">詳細については、「[ストーリーボードの概要](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-186">For more information, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 <span data-ttu-id="53fa6-187">**XAML:**<xref:System.Windows.PropertyPath> を使用して [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]内のプロパティ参照を属性値として記述すると、指定した文字列が最初に型コンバーター (<xref:System.Windows.PropertyPathConverter>) によって処理されます。</span><span class="sxs-lookup"><span data-stu-id="53fa6-187">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="53fa6-188">その後、この型コンバーターは文字列を処理し、その構文に基づいて、<xref:System.Windows.PropertyPath> コンストラクターシグネチャの1つを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="53fa6-188">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="53fa6-189">属性値を処理する型コンバーターを使用したこの間接参照は、通常、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]で <xref:System.Windows.PropertyPath> を使用する方法です。 <xref:System.Windows.PropertyPath> オブジェクト要素を宣言し、<xref:System.Windows.PropertyPath.Path%2A> や <xref:System.Windows.PropertyPath.PathParameters%2A>などの属性に特定の値を適用することではありません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-189">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="53fa6-190">詳細については、「 [PROPERTYPATH XAML 構文](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-190">For more information, see [PropertyPath XAML Syntax](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax).</span></span>  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="53fa6-191">XAML テキストの使用</span><span class="sxs-lookup"><span data-stu-id="53fa6-191">XAML Text Usage</span></span>  
 <span data-ttu-id="53fa6-192"><xref:System.Windows.PropertyPath> 型のメンバーは、通常、直接 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文では設定されません。</span><span class="sxs-lookup"><span data-stu-id="53fa6-192">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="53fa6-193">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53fa6-193">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
