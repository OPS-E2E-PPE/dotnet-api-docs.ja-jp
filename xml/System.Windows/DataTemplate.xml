<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="17f38338849f6ff0262dffd26252234e0b68e247" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75179864" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type DataTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ オブジェクトのビジュアル構造を記述します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データオブジェクトの視覚化を指定するには、<xref:System.Windows.DataTemplate> を使用します。 <xref:System.Windows.DataTemplate> オブジェクトは、<xref:System.Windows.Controls.ListBox> などの <xref:System.Windows.Controls.ItemsControl> をコレクション全体にバインドする場合に特に便利です。 特定の指示がないと、<xref:System.Windows.Controls.ListBox> によって、コレクション内のオブジェクトの文字列表現が表示されます。 その場合は、<xref:System.Windows.DataTemplate> を使用して、データオブジェクトの外観を定義できます。 <xref:System.Windows.DataTemplate> の内容は、データオブジェクトの視覚的な構造になります。  
  
 詳細については、「[データテンプレートの概要](~/docs/framework/wpf/data/data-templating-overview.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.DataTemplate> をインラインで作成する方法を示しています。 <xref:System.Windows.DataTemplate> は、各データ項目が <xref:System.Windows.Controls.StackPanel>内の3つの <xref:System.Windows.Controls.TextBlock> 要素として表示されることを指定します。 この例では、データオブジェクトは `Task`という名前のクラスです。 このテンプレートの各 <xref:System.Windows.Controls.TextBlock> 要素は、`Task` クラスのプロパティにバインドされていることに注意してください。  
  
 [!code-xaml[DataTemplatingIntro_snip#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 次の例に示すように、リソースセクションで <xref:System.Windows.DataTemplate> を定義する方が一般的であるため、再利用可能なオブジェクトにすることができます。  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 これで、次の例のように、`myTaskTemplate` をリソースとして使用できるようになります。  
  
 [!code-xaml[DataTemplatingIntro_snip#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 完全なサンプルについては、「[Introduction to Data Templating Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/DataTemplatingIntro)」(データ テンプレート サンプルの概要) をご覧ください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=163703">データバインディングのデモ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate(System::Object ^ dataType);" />
      <MemberSignature Language="F#" Value="new System.Windows.DataTemplate : obj -&gt; System.Windows.DataTemplate" Usage="new System.Windows.DataTemplate dataType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">テンプレートがオブジェクト データ用である場合、これはデータ オブジェクトの Type 名です。</param>
        <summary>指定した <see cref="T:System.Windows.DataTemplate" /> プロパティを使用して、<see cref="P:System.Windows.DataTemplate.DataType" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスの型名を参照するには、 [X:Type マークアップ拡張機能](~/docs/framework/xaml-services/x-type-markup-extension.md)を使用します。 テンプレートがデータの [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] を目的としている場合、これはデータのタグ名を表す文字列です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataTemplateKey As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataTemplateKey { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataTemplateKey : obj" Usage="System.Windows.DataTemplate.DataTemplateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.DataTemplate" /> の既定のキーを取得します。</summary>
        <value><see cref="T:System.Windows.DataTemplate" /> の既定のキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ResourceDictionary>内の <xref:System.Windows.DataTemplate> に[X:Key ディレクティブ](~/docs/framework/xaml-services/x-key-directive.md)を設定しなかった場合は、キーとして <xref:System.Windows.DataTemplate.DataTemplateKey%2A> が使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataType { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : obj with get, set" Usage="System.Windows.DataTemplate.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.DataTemplate" /> が対象としている型を取得または設定します。</summary>
        <value>既定値は <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.Windows.Style> クラスの <xref:System.Windows.Style.TargetType%2A> プロパティとよく似ています。 `x:Key`を指定せずにこのプロパティをデータ型に設定すると、<xref:System.Windows.DataTemplate> はその型のデータオブジェクトに自動的に適用されます。 この操作を行うと、`x:Key` が暗黙的に設定されることに注意してください。 したがって、この <xref:System.Windows.DataTemplate> `x:Key` 値に割り当てた場合、暗黙的な `x:Key` はオーバーライドされ、<xref:System.Windows.DataTemplate> は自動的には適用されません。  
  
 また、<xref:System.Windows.Controls.ContentControl> を `Task` オブジェクトのコレクションにバインドする場合、<xref:System.Windows.Controls.ContentControl> は <xref:System.Windows.DataTemplate> を自動的には使用しないことに注意してください。 これは、<xref:System.Windows.Controls.ContentControl> のバインドでは、コレクション全体にバインドするか、個々のオブジェクトにバインドするかを区別するために、より多くの情報が必要になるためです。 <xref:System.Windows.Controls.ContentControl> が <xref:System.Windows.Controls.ItemsControl> の種類の選択を追跡している場合は、<xref:System.Windows.Controls.ContentControl> binding の <xref:System.Windows.Data.Binding.Path%2A> プロパティを "`/`" に設定して、現在のアイテムに関心があることを示すことができます。 例については、「[方法: コレクションにバインドし、選択内容に基づいて情報を表示する](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)」を参照してください。 それ以外の場合は、<xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> プロパティを設定して、<xref:System.Windows.DataTemplate> を明示的に指定する必要があります。  
  
 <xref:System.Windows.DataTemplate.DataType%2A> プロパティは、さまざまな種類のデータオブジェクトの <xref:System.Windows.Data.CompositeCollection> がある場合に特に便利です。  
  
 このプロパティが既定の名前空間に含まれていない XML 要素を対象としている場合は、要素名の前に名前空間または名前空間指定子を指定する必要があります。 LINQ for XML によって公開されている XML の場合、名前空間は中かっこで囲まれ、前に中かっこのエスケープシーケンスが使用されます。  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 XPath を通じて公開される XML の場合、要素名の前には <xref:System.Windows.Data.XmlNamespaceMapping>のインスタンスによって確立された名前空間の指定子が付きます。  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## <a name="xaml-values"></a>XAML の値  
 *typeName*  
 テンプレートがオブジェクトデータを対象としている場合、このプロパティには、(文字列としての) データオブジェクトの型名が含まれます。 クラスの型名を参照するには、 [X:Type マークアップ拡張機能](~/docs/framework/xaml-services/x-type-markup-extension.md)を使用します。 テンプレートが [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] データを対象としている場合、このプロパティには XML 要素名が格納されます。 XML 要素に既定以外の名前空間を指定する方法の詳細については、ドキュメントの解説を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">データテンプレートサンプルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.DataTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロパティ値を適用するトリガー、または 1 つ以上の条件に基づいてアクションを実行するトリガーのコレクションを取得します。</summary>
        <value>トリガー オブジェクトのコレクション。 既定値は <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データテンプレート内でトリガーを作成する場合、トリガーの setter は、データテンプレートのスコープ内にあるプロパティを設定する必要があります。 それ以外の場合は、データを格納する型を対象とするスタイルを使用してトリガーを作成する方が適している可能性があります。 たとえば、<xref:System.Windows.Controls.ListBox> コントロールをバインドする場合、コンテナーはオブジェクト <xref:System.Windows.Controls.ListBoxItem> ます。 トリガーを使用して <xref:System.Windows.DataTemplate>のスコープ内にないプロパティを設定する場合は、<xref:System.Windows.Controls.ListBoxItem> スタイルを作成し、そのスタイル内でトリガーを作成する方が適切な場合があります。 詳細については、「System.windows.datatemplate> に属しているもの」を参照してください。[データテンプレートの概要](~/docs/framework/wpf/data/data-templating-overview.md)を説明します。  
  
> [!NOTE]
>  このプロパティを設定できるのは、表示されているコレクション構文を使用するか、コレクションオブジェクトにアクセスし、Add などのさまざまなメソッドを使用して [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] だけです。 コレクションオブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込み可能です。  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML の値  
 *OneOrMoreTriggers*  
 0個以上の <xref:System.Windows.TriggerBase> オブジェクト。  
  
   
  
## Examples  
 次の <xref:System.Windows.DataTemplate> は、<xref:System.Windows.DataTemplate.Triggers%2A> プロパティの使用方法を示しています。  
  
 [!code-xaml[DataBindingLab#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 完全なサンプルについては、「[データバインディングのデモ](https://go.microsoft.com/fwlink/?LinkID=163703)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">データテンプレートサンプルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="dataTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">このテンプレートが適用される要素。</param>
        <summary>規則のセットに対してテンプレートが適用される親をチェックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドは、次の規則を使用します。  
  
-   `templatedParent` は null 以外の <xref:System.Windows.FrameworkElement>である必要があります。  
  
-   <xref:System.Windows.DataTemplate> は <xref:System.Windows.Controls.ContentPresenter>に適用する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
