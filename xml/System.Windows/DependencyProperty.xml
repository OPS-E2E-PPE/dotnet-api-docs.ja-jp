<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e8b4f7f2f3f0b8eb63a769d1bf66c4b3e3f1936" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75051489" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3206f-101">スタイル設定、データ バインディング、アニメーション、および継承などの方法によって設定できるプロパティを表します。</span><span class="sxs-lookup"><span data-stu-id="3206f-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-102"><xref:System.Windows.DependencyProperty> は、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]の次の機能をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="3206f-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="3206f-103">プロパティは、スタイルで設定できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-103">The property can be set in a style.</span></span> <span data-ttu-id="3206f-104">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="3206f-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="3206f-105">プロパティは、データバインディングを使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-105">The property can be set through data binding.</span></span> <span data-ttu-id="3206f-106">データバインディングの依存関係プロパティの詳細については、「[方法: 2 つのコントロールのプロパティをバインド](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="3206f-107">プロパティは、動的リソース参照を使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="3206f-108">詳細については、「[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="3206f-109">プロパティは、要素ツリー内の親要素から自動的に値を継承できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="3206f-110">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="3206f-111">プロパティはアニメーション化できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-111">The property can be animated.</span></span> <span data-ttu-id="3206f-112">詳しくは、「 [アニメーションの概要](~/docs/framework/wpf/graphics-multimedia/animation-overview.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="3206f-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="3206f-113">プロパティは、プロパティの前の値が変更されたときに報告でき、プロパティ値を強制的に変更できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="3206f-114">詳しくは、「[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="3206f-115">プロパティは [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]に情報を報告します。たとえば、プロパティ値を変更する場合は、レイアウトシステムが要素のビジュアルを再構成する必要があるかどうかなどです。</span><span class="sxs-lookup"><span data-stu-id="3206f-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="3206f-116">プロパティは、[!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)]でサポートを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="3206f-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="3206f-117">たとえば、プロパティは **[プロパティ]** ウィンドウで編集できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="3206f-118">依存関係プロパティの詳細については、「[依存関係プロパティの概要](~/docs/framework/wpf/advanced/dependency-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="3206f-119">カスタム型のプロパティで前の一覧の機能をサポートするには、依存関係プロパティを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="3206f-120">カスタム依存関係プロパティを作成する方法については、「[カスタム依存関係プロパティ](~/docs/framework/wpf/advanced/custom-dependency-properties.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="3206f-121">添付プロパティは、任意のオブジェクトが添付プロパティを定義する型に情報を報告できるようにするプロパティです。</span><span class="sxs-lookup"><span data-stu-id="3206f-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="3206f-122">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、型がプロパティを定義する型から継承するかどうかに関係なく、<xref:System.Windows.DependencyObject> から継承されるすべての型で、添付プロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="3206f-123">添付プロパティは、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 言語の機能です。</span><span class="sxs-lookup"><span data-stu-id="3206f-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="3206f-124">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]で添付プロパティを設定するには、 *ownerType*を使用します。*propertyName*構文。</span><span class="sxs-lookup"><span data-stu-id="3206f-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="3206f-125">添付プロパティの例としては、<xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="3206f-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3206f-126">すべての <xref:System.Windows.DependencyObject> 型で使用できるプロパティを作成する場合は、添付プロパティを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="3206f-127">添付プロパティの作成方法など、添付プロパティの詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="3206f-128">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="3206f-128">XAML Attribute Usage</span></span>  
  
```xaml 
<object property="dependencyPropertyName"/>  
```

<span data-ttu-id="3206f-129">または</span><span class="sxs-lookup"><span data-stu-id="3206f-129">-or-</span></span>

```xaml
<object property="ownerType.dependencyPropertyName"/>  
```

<span data-ttu-id="3206f-130">または</span><span class="sxs-lookup"><span data-stu-id="3206f-130">-or-</span></span>

```xaml
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="3206f-131">XAML 値</span><span class="sxs-lookup"><span data-stu-id="3206f-131">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="3206f-132">目的の依存関係プロパティの <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="3206f-132">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="3206f-133">このプロパティが既定の XML 名前空間にない場合は、前に XML 名前空間プレフィックスを付けることができます (詳細については、「 [WPF xaml の Xaml 名前空間と名前空間のマッピング](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="3206f-133">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="3206f-134">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="3206f-134">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="3206f-135">依存関係プロパティの所有者の種類、ドット (.)、<xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="3206f-135">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3206f-136">`ownerType` の前に XML 名前空間プレフィックスを付けることもできます。</span><span class="sxs-lookup"><span data-stu-id="3206f-136">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="3206f-137">この使用法は、遅延バインディングされたスタイルとテンプレートに固有のものであり、`TargetType` がまだ知られていないため、コンテキストを解析するために依存関係プロパティの所有者を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-137">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="3206f-138">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="3206f-138">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="3206f-139">`attachedPropertyOwnerType` *のハッシュ コードを返します。*</span><span class="sxs-lookup"><span data-stu-id="3206f-139">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="3206f-140">添付プロパティの所有者、ドット (.)、添付プロパティ名を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="3206f-140">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="3206f-141">`attachedPropertyOwnerType` の前に XML 名前空間プレフィックスを付けることもできます。</span><span class="sxs-lookup"><span data-stu-id="3206f-141">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-142">既に登録済みの依存関係プロパティの所有者として、ある型に別の型を追加します。</span><span class="sxs-lookup"><span data-stu-id="3206f-142">Adds another type as an owner of a dependency property that has already been registered to a type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="3206f-143">この依存関係プロパティの所有者として追加する型。</span><span class="sxs-lookup"><span data-stu-id="3206f-143">The type to add as an owner of this dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-144">登録済みの依存関係プロパティの所有者として、別の型を追加します。</span><span class="sxs-lookup"><span data-stu-id="3206f-144">Adds another type as an owner of a dependency property that has already been registered.</span></span></summary>
        <returns><span data-ttu-id="3206f-145">依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。</span><span class="sxs-lookup"><span data-stu-id="3206f-145">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="3206f-146">この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-146">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-147">このメソッドを使用すると、プロパティシステムは、特定の依存関係プロパティを最初に登録しなかった型の依存関係プロパティを認識できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-147">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="3206f-148">通常、<xref:System.Windows.DependencyProperty.AddOwner%2A> は、マネージクラスの継承によってその依存関係プロパティを公開していないクラスに依存関係プロパティを追加するために使用されます (クラスの継承によって、派生クラスによってラッパープロパティが継承されます。そのため、既存の依存関係プロパティに対する汎用メンバーテーブルのアクセスが可能になります)。</span><span class="sxs-lookup"><span data-stu-id="3206f-148">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="3206f-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> を使用すると、プロパティシステムは、その依存関係プロパティを最初に登録しなかった型の依存関係プロパティを認識できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="3206f-150">この署名では、メタデータを指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="3206f-150">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="3206f-151">このメソッドを使用すると、新しい <xref:System.Windows.DependencyProperty> とその所有者の種類に対してメタデータが自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-151">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="3206f-152">自動生成されるメタデータは、このプロパティが定義されているすべての基本型からのマージされたメタデータの結果です。</span><span class="sxs-lookup"><span data-stu-id="3206f-152">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="3206f-153">結合されたメタデータが使用できない場合は、プロパティの既定のメタデータが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-153">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="3206f-154"><xref:System.Windows.DependencyProperty.RegisterAttached%2A> メソッドを使用してプロパティが登録されている場合、既定のメタデータは <xref:System.Windows.DependencyProperty.RegisterAttached%2A> が呼び出されたときに作成されたメタデータと同じになります。</span><span class="sxs-lookup"><span data-stu-id="3206f-154">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="3206f-155">それ以外の場合、<xref:System.Windows.PropertyMetadata> オブジェクトは、プロパティ型の default に設定された <xref:System.Windows.PropertyMetadata.DefaultValue%2A> プロパティを使用して作成され、<xref:System.Windows.PropertyMetadata> の他のすべてのプロパティは `null`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-155">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="3206f-156">指定された型に追加された依存関係プロパティのバージョンにメタデータを提供する場合は、<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> シグネチャを使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-156">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="3206f-157">通常、このメソッドの戻り値は、依存関係プロパティの識別子を格納することによって、依存関係プロパティを宣言および公開するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-157">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="3206f-158">この識別子は、依存関係プロパティに対してプロパティシステム Api を呼び出す場合 (特に、追加所有者クラスに存在する場合) に、依存関係プロパティへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="3206f-158">The identifier provides access to the dependency property if you want to call property system APIs against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="3206f-159">同様の機能を示すには、元の所有者と追加された所有者の両方に同じプロパティ名を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-159">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="3206f-160"><xref:System.Windows.DependencyProperty.AddOwner%2A> メソッドの <xref:System.Windows.DependencyProperty> 戻り値を使用して依存関係プロパティ識別子を定義し、<xref:System.Windows.DependencyProperty.AddOwner%2A>を使用して型に追加される依存関係プロパティの [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] プロパティラッパーを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-160">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="3206f-161">前述の <xref:System.Windows.DependencyProperty.AddOwner%2A> 方法は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]内で宣言された依存関係プロパティを作成するときに使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-161">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="3206f-162">たとえば、<xref:System.Windows.Controls.Border> と <xref:System.Windows.Controls.Control> の両方で、類似した機能を持つ `BorderBrush` 依存関係プロパティが定義されています。</span><span class="sxs-lookup"><span data-stu-id="3206f-162">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="3206f-163"><xref:System.Windows.Controls.Control> は、元の所有者 <xref:System.Windows.Controls.Border> および登録されている <xref:System.Windows.Controls.Border.BorderBrushProperty> 依存関係プロパティの識別子に基づいて <xref:System.Windows.DependencyProperty.AddOwner%2A> を呼び出すことによって、`BorderBrush` プロパティをプロパティシステムに定義します。</span><span class="sxs-lookup"><span data-stu-id="3206f-163"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="3206f-164">その後 <xref:System.Windows.DependencyProperty.AddOwner%2A> 戻り値を使用して、追加された所有者のそのプロパティに対して新しい静的な <xref:System.Windows.DependencyProperty> フィールド (<xref:System.Windows.Controls.Control.BorderBrushProperty>) が確立され、`BorderBrush` プロパティラッパーも宣言されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-164">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="3206f-165">この依存関係プロパティの所有者として追加する型。</span><span class="sxs-lookup"><span data-stu-id="3206f-165">The type to add as owner of this dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-166">提供される型に存在する依存関係プロパティを修飾するメタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-166">The metadata that qualifies the dependency property as it exists on the provided type.</span></span></param>
        <summary><span data-ttu-id="3206f-167">既に登録済みの依存関係プロパティの所有者として別の型を追加します。その際、提供される所有者の型に存在する依存関係プロパティに依存関係プロパティのメタデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="3206f-167">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="3206f-168">依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。</span><span class="sxs-lookup"><span data-stu-id="3206f-168">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="3206f-169">この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-169">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-170">このメソッドを使用すると、プロパティシステムは、特定の依存関係プロパティを最初に登録しなかった型の依存関係プロパティを認識できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-170">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="3206f-171">このメソッドの戻り値は、依存関係プロパティを宣言および公開するために使用されます。これは、特に、追加する所有者クラスに存在するためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-171">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="3206f-172">通常は、元の所有者と追加された所有者の両方に同じプロパティ名を使用して、同様の機能を示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-172">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="3206f-173"><xref:System.Windows.DependencyProperty.AddOwner%2A>を使用して型に追加される依存関係プロパティについては、新しい [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] プロパティラッパーと同様に、識別子を公開することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-173">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="3206f-174">前述の <xref:System.Windows.DependencyProperty.AddOwner%2A> 方法は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]内で宣言された Api を作成するときに使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-174">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating APIs declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="3206f-175">たとえば、<xref:System.Windows.Controls.Border> と <xref:System.Windows.Controls.Control> の両方で、類似した機能を持つ `BorderBrush` 依存関係プロパティが定義されています。</span><span class="sxs-lookup"><span data-stu-id="3206f-175">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="3206f-176"><xref:System.Windows.Controls.Control> は、元の所有者 <xref:System.Windows.Controls.Border> および登録されている <xref:System.Windows.Controls.Border.BorderBrushProperty> 依存関係プロパティの識別子に <xref:System.Windows.DependencyProperty.AddOwner%2A> を呼び出すことによって、`BorderBrush` プロパティをプロパティシステムに定義します。</span><span class="sxs-lookup"><span data-stu-id="3206f-176"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="3206f-177">次に、<xref:System.Windows.DependencyProperty.AddOwner%2A> 戻り値を使用して、追加された所有者のプロパティに対して静的な <xref:System.Windows.DependencyProperty> フィールド (<xref:System.Windows.Controls.Control.BorderBrushProperty>) が確立され、`BorderBrush` プロパティラッパーも宣言されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-177">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="3206f-178">追加された所有者の依存関係プロパティ識別子は、<xref:System.Windows.DependencyObject.GetValue%2A>などの操作に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-178">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="3206f-179">ただし、異なるメタデータを持つ所有者として追加されたクラスの型またはインスタンスに関係する型固有の操作では、<xref:System.Windows.DependencyObject.GetValue%2A> や <xref:System.Windows.DependencyProperty.GetMetadata%2A>などのメソッドの呼び出しで元の (追加された所有者ではない) 依存関係プロパティ識別子が指定されている場合でも、予期した結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-179">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="3206f-180">追加された所有者のメタデータは <xref:System.Windows.DependencyProperty.AddOwner%2A> 呼び出し自体によってこれらされ、必ずしも [所有者クラス識別子の追加] フィールドによって排他的に参照されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="3206f-180">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="3206f-181">ただし、<xref:System.Windows.DependencyProperty.AddOwner%2A>を使用して型に追加される依存関係プロパティについては、識別子と新しい [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] プロパティラッパーを公開することをお勧めします。そうしないと、プロパティの [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] と [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 表現の間に不一致が生じます。</span><span class="sxs-lookup"><span data-stu-id="3206f-181">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="3206f-182">指定されたメタデータは、基本所有者に存在する依存関係プロパティのプロパティメタデータとマージされます。</span><span class="sxs-lookup"><span data-stu-id="3206f-182">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="3206f-183">元の基本メタデータで指定されたすべての特性が保持されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-183">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="3206f-184">新しいメタデータで特に変更された特性だけが、基本メタデータの特性を上書きします。</span><span class="sxs-lookup"><span data-stu-id="3206f-184">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="3206f-185"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>などの一部の特性は、新しいメタデータで指定されている場合に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="3206f-185">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="3206f-186">その他 (<xref:System.Windows.PropertyChangedCallback>など) は結合されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-186">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="3206f-187">最終的には、マージ動作はオーバーライドに使用されているプロパティメタデータ型によって異なるため、ここで説明する動作は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 依存関係プロパティで使用される既存のプロパティメタデータクラスに関するものです。</span><span class="sxs-lookup"><span data-stu-id="3206f-187">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="3206f-188">詳細については、「[依存関係プロパティのメタ](~/docs/framework/wpf/advanced/dependency-property-metadata.md)データ」および「[フレームワークプロパティメタデータ](~/docs/framework/wpf/advanced/framework-property-metadata.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-188">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-189">依存関係プロパティの既定のメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-189">Gets the default metadata of the dependency property.</span></span></summary>
        <value><span data-ttu-id="3206f-190">依存関係プロパティの既定のメタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-190">The default metadata of the dependency property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-191">既定のメタデータは、明示的な <xref:System.Windows.DependencyProperty.Register%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 呼び出しによって代替メタデータが指定されていない場合に、その特定のオブジェクトまたは派生型のオブジェクトで使用できるプロパティメタデータです。</span><span class="sxs-lookup"><span data-stu-id="3206f-191">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="3206f-192">元の所有者が、依存関係プロパティを確立した最初の <xref:System.Windows.DependencyProperty.Register%2A> 呼び出しにメタデータを適用した場合、そのメタデータは <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>として返されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-192">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="3206f-193">元の <xref:System.Windows.DependencyProperty.Register%2A> の呼び出しでメタデータが適用されていない場合は、<xref:System.Windows.DependencyProperty.Register%2A> 呼び出し内から既定のメタデータが生成され、この値が <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>として返されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-193">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="3206f-194"><xref:System.Windows.DependencyProperty> に既定のメタデータを関連付ける主な目的は、<xref:System.Windows.DependencyObject> または派生型のこのプロパティに既定値を指定することです。</span><span class="sxs-lookup"><span data-stu-id="3206f-194">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="3206f-195">非添付プロパティの場合、このプロパティによって返されるメタデータ型を <xref:System.Windows.PropertyMetadata> 型の派生型にキャストすることはできません。これは、プロパティが最初に派生メタデータ型に登録されていた場合でも同様です。</span><span class="sxs-lookup"><span data-stu-id="3206f-195">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="3206f-196">最初に登録されたメタデータを元のメタデータ型として使用する場合は、代わりに <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> を呼び出し、元の登録型をパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="3206f-196">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="3206f-197">添付プロパティの場合、このプロパティによって返されるメタデータの型は、元の <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 登録方法で指定された型と一致します。</span><span class="sxs-lookup"><span data-stu-id="3206f-197">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3206f-198">この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-198">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <returns><span data-ttu-id="3206f-199">この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="3206f-199">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-200">プロパティシステムは独自の一意の識別子 <xref:System.Windows.DependencyProperty.GlobalIndex%2A>を使用し、そのプロパティの値は <xref:System.Windows.DependencyProperty.GetHashCode%2A>によって返されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-200">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-201">特定の型のメタデータが存在する場合、この依存関係プロパティに関連付けられているメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-201">Returns the metadata associated with this dependency property as it exists for a particular type.</span></span> <span data-ttu-id="3206f-202">依存関係プロパティが最初に登録された型、その後で依存関係プロパティが追加された型、または継承を通じて依存関係プロパティが取得され、そのメタデータが明確にオーバーライドされた型を指定できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-202">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="3206f-203">依存関係プロパティのメタデータを取得する対象の特定の型。</span><span class="sxs-lookup"><span data-stu-id="3206f-203">The specific type from which to retrieve the dependency property metadata.</span></span></param>
        <summary><span data-ttu-id="3206f-204">指定した既存の型に存在する場合の、この依存関係プロパティのメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-204">Returns the metadata for this dependency property as it exists on a specified existing type.</span></span></summary>
        <returns><span data-ttu-id="3206f-205">プロパティ メタデータ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3206f-205">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-206">型として使用する型またはオブジェクト参照のいずれかを指定する必要があります。これは、型に存在する依存関係プロパティのメタデータを変更する <xref:System.Windows.DependencyProperty.AddOwner%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 呼び出しが原因で、メタデータが元の登録と異なる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-206">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-207">次の例では、型に基づいて依存関係プロパティのメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-207">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="3206f-208">型を取得するには、`typeof` 演算子を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-208">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="3206f-209">メタデータの取得元となる依存関係プロパティの型固有のバージョンを確認するために型をチェックするときの、対象となる依存関係オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3206f-209">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span></span></param>
        <summary><span data-ttu-id="3206f-210">この依存関係プロパティのメタデータが指定したオブジェクト インスタンスに存在する場合に、このメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-210">Returns the metadata for this dependency property as it exists on the specified object instance.</span></span></summary>
        <returns><span data-ttu-id="3206f-211">プロパティ メタデータ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3206f-211">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-212">特定の依存関係プロパティのメタデータは、型に存在するときにプロパティメタデータを調整できる <xref:System.Windows.DependencyProperty.AddOwner%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 呼び出しによって、元の登録と異なる可能性があるため、型またはオブジェクト参照のいずれかを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-212">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="3206f-213">インスタンスに基づいてプロパティメタデータを要求する場合は、その型を内部で評価できるようにインスタンスを渡すだけです。</span><span class="sxs-lookup"><span data-stu-id="3206f-213">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="3206f-214">依存関係プロパティのメタデータは、インスタンスごとに異なります。任意の型プロパティの組み合わせに対して常に一貫しています。</span><span class="sxs-lookup"><span data-stu-id="3206f-214">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-215">次の例では、特定の <xref:System.Windows.DependencyObject> インスタンスに基づいて、依存関係プロパティのメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-215">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType"><span data-ttu-id="3206f-216">依存関係プロパティ メタデータの取得元となる依存関係オブジェクト型を記録する特定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3206f-216">A specific object that records the dependency object type from which the dependency property metadata is desired.</span></span></param>
        <summary><span data-ttu-id="3206f-217">指定した型に存在する場合の、この依存関係プロパティのメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-217">Returns the metadata for this dependency property as it exists on a specified type.</span></span></summary>
        <returns><span data-ttu-id="3206f-218">プロパティ メタデータ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3206f-218">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-219">特定の依存関係プロパティのメタデータは、型に存在するときにプロパティメタデータを調整できる <xref:System.Windows.DependencyProperty.AddOwner%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 呼び出しによって、元の登録と異なる可能性があるため、型またはオブジェクト参照のいずれかを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-219">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-220">次の例では、<xref:System.Windows.DependencyObjectType>に基づいて依存関係プロパティのメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-220">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-221">依存関係プロパティを一意に識別する内部的に生成された値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-221">Gets an internally generated value that uniquely identifies the dependency property.</span></span></summary>
        <value><span data-ttu-id="3206f-222">一意の数値識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-222">A unique numeric identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-223">この値は整数であり、グローバル一意識別子 (GUID) ではありません。</span><span class="sxs-lookup"><span data-stu-id="3206f-223">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="3206f-224">一般に、このインデックス値の使用は必須ではなく、すべての依存関係プロパティのテーブルへのインデックスアクセスはありません。</span><span class="sxs-lookup"><span data-stu-id="3206f-224">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="3206f-225">依存関係プロパティは、その識別子フィールドによって参照される必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-225">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="3206f-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> は、<xref:System.Windows.DependencyProperty.GlobalIndex%2A> を0から始まる配列インデックスとして使用するデータ構造に高速にアクセスするために、内部的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="3206f-227">同様の使用方法には、デザイナーまたはツールのアプリケーションが含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-227">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3206f-228">確認する値。</span><span class="sxs-lookup"><span data-stu-id="3206f-228">The value to check.</span></span></param>
        <summary><span data-ttu-id="3206f-229">指定した値がこの依存関係プロパティの型で受け入れ可能かどうかを、依存関係プロパティの最初の登録で指定されたプロパティの型と照合することによって判断します。</span><span class="sxs-lookup"><span data-stu-id="3206f-229">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span></span></summary>
        <returns><span data-ttu-id="3206f-230">指定した値が登録済みのプロパティ型であるか、または受け入れ可能な派生型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3206f-230"><see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-231">`null` の値は参照型の依存関係プロパティ、または <xref:System.Nullable%601> 依存関係プロパティの有効な型であり、このような場合には `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-231">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="3206f-232">依存関係プロパティが参照でも <xref:System.Nullable%601> 型でもない場合、<xref:System.Windows.DependencyProperty.IsValidType%2A> は例外を発生させるのではなく、null 値に対して `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-232">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-233">次の例では、依存関係プロパティで <xref:System.Windows.DependencyObject.SetValue%2A> を呼び出す前に、チェックとして <xref:System.Windows.DependencyProperty.IsValidType%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-233">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3206f-234">確認する値。</span><span class="sxs-lookup"><span data-stu-id="3206f-234">The value to check.</span></span></param>
        <summary><span data-ttu-id="3206f-235">指定した値がプロパティの型で受け入れ可能かどうかを基本型チェックによって判断します。さらに、その型の有効値の範囲内にこの値があるかどうかを判断することもあります。</span><span class="sxs-lookup"><span data-stu-id="3206f-235">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span></span></summary>
        <returns><span data-ttu-id="3206f-236">値が受け入れ可能で、適切な型または派生型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3206f-236"><see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-237">依存関係プロパティの場合は、依存関係プロパティの登録で指定されている <xref:System.Windows.ValidateValueCallback> を使用して、その型の許容範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-237">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="3206f-238">このメソッドは <xref:System.Windows.DependencyProperty.IsValidType%2A> を内部的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3206f-238">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="3206f-239">対象の依存関係プロパティに <xref:System.Windows.ValidateValueCallback>がない場合、このメソッドを呼び出すことは、実質的に <xref:System.Windows.DependencyProperty.IsValidType%2A>呼び出しと同じです。</span><span class="sxs-lookup"><span data-stu-id="3206f-239">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="3206f-240">依存関係プロパティに <xref:System.Windows.ValidateValueCallback>があり、<xref:System.Windows.DependencyProperty.IsValidType%2A> が `true`を返した場合、返される値はコールバックに実装されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-240">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="3206f-241">Null 値は参照型の依存関係プロパティ、または <xref:System.Nullable%601> 依存関係プロパティの有効な値であり、このような場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-241">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="3206f-242">依存関係プロパティが参照でも <xref:System.Nullable%601> 型でもない場合、<xref:System.Windows.DependencyProperty.IsValidType%2A> は例外を発生させるのではなく、null 値に対して `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-242">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-243">次の例では、依存関係プロパティで <xref:System.Windows.DependencyObject.SetValue%2A> を呼び出す前に、チェックとして <xref:System.Windows.DependencyProperty.IsValidValue%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-243">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-244">依存関係プロパティの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-244">Gets the name of the dependency property.</span></span></summary>
        <value><span data-ttu-id="3206f-245">プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-245">The name of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-246">このプロパティは、依存関係プロパティの登録時に `name` パラメーターとして指定された名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-246">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="3206f-247">この名前は不変であり、`null` または空の文字列にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="3206f-247">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="3206f-248">同じ所有者の種類で重複する名前の登録は許可されていません。重複したを登録しようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3206f-248">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3206f-249">依存関係プロパティの <xref:System.Windows.DependencyProperty.Name%2A> は、依存関係プロパティの識別子の名前とサフィックス "Property" の組み合わせの規則に従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-249">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="3206f-250">詳細については、「[カスタム依存関係プロパティ](~/docs/framework/wpf/advanced/custom-dependency-properties.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-250">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-251">次の例では、依存関係プロパティ識別子のさまざまな特性 (<xref:System.Windows.DependencyProperty.Name%2A>を含む) をクエリします。</span><span class="sxs-lookup"><span data-stu-id="3206f-251">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-252">指定した型のインスタンスに存在する場合の代替メタデータをこの依存関係プロパティに提供します。この代替メタデータは、依存関係プロパティの最初の登録時に指定したメタデータの代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-252">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="3206f-253">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</span><span class="sxs-lookup"><span data-stu-id="3206f-253">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-254">オーバーライドする型の依存関係プロパティに適用するメタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-254">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <summary><span data-ttu-id="3206f-255">指定した型のインスタンスに存在する場合の代替メタデータをこの依存関係プロパティに提供し、基本型から継承されたときにこの依存関係プロパティに存在していたメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="3206f-255">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-256">依存関係プロパティのメタデータは、プロパティシステムが依存関係プロパティを使用する前にオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-256">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="3206f-257">これは、依存関係プロパティを登録するクラスを使用して、特定のインスタンスが作成された時刻に相当します。</span><span class="sxs-lookup"><span data-stu-id="3206f-257">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="3206f-258"><xref:System.Windows.DependencyProperty.OverrideMetadata%2A> の呼び出しは、このメソッドの `forType` パラメーターとして、または同様のインスタンス化を使用して自身を提供する型の静的コンストラクター内でのみ実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-258">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="3206f-259">所有者の型のインスタンスが存在した後にメタデータを変更しようとしても、例外は発生しませんが、プロパティシステムの動作が矛盾します。</span><span class="sxs-lookup"><span data-stu-id="3206f-259">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="3206f-260">このメソッドでは、特定の派生クラスに対するメタデータのオーバーライドが確立された後、この同じ派生クラスでメタデータをオーバーライドしようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="3206f-260">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="3206f-261">指定されたメタデータは、基本所有者に存在する依存関係プロパティのプロパティメタデータとマージされます。</span><span class="sxs-lookup"><span data-stu-id="3206f-261">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="3206f-262">元の基本メタデータで指定されたすべての特性が保持されます。新しいメタデータで特に変更された特性だけが、基本メタデータの特性を上書きします。</span><span class="sxs-lookup"><span data-stu-id="3206f-262">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="3206f-263">新しいメタデータで指定されている場合、<xref:System.Windows.PropertyMetadata.DefaultValue%2A> などの一部の特性は置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="3206f-263">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="3206f-264">その他 (<xref:System.Windows.PropertyChangedCallback>など) は結合されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-264">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="3206f-265">最終的には、マージ動作はオーバーライドに使用されているプロパティメタデータ型によって異なるため、ここで説明する動作は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 依存関係プロパティで使用される既存のプロパティメタデータクラスに関するものです。</span><span class="sxs-lookup"><span data-stu-id="3206f-265">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="3206f-266">詳細については、「[依存関係プロパティのメタ](~/docs/framework/wpf/advanced/dependency-property-metadata.md)データ」および「[フレームワークプロパティメタデータ](~/docs/framework/wpf/advanced/framework-property-metadata.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-266">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3206f-267">読み取り専用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してこの操作を行うことはできません)。</span><span class="sxs-lookup"><span data-stu-id="3206f-267">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3206f-268">指定した型に存在する場合のメタデータが、この依存関係プロパティに対して既に確立されています。</span><span class="sxs-lookup"><span data-stu-id="3206f-268">Metadata was already established for the dependency property as it exists on the provided type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="3206f-269">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</span><span class="sxs-lookup"><span data-stu-id="3206f-269">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-270">オーバーライドする型の依存関係プロパティに適用するメタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-270">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <param name="key"><span data-ttu-id="3206f-271">読み取り専用の依存関係プロパティのアクセス キー。</span><span class="sxs-lookup"><span data-stu-id="3206f-271">The access key for a read-only dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-272">指定した型のインスタンスに存在する場合に代替メタデータを読み取り専用の依存関係プロパティに提供し、依存関係プロパティの最初の登録時に指定したメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="3206f-272">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span></span> <span data-ttu-id="3206f-273">例外の発生を防ぐために、読み取り専用の依存関係プロパティに <see cref="T:System.Windows.DependencyPropertyKey" /> を渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-273">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-274">このシグネチャは、読み取り専用の依存関係プロパティ識別子 (<xref:System.Windows.DependencyPropertyKey>) メソッドの基になる実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="3206f-274">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="3206f-275">読み取り/書き込み依存関係プロパティのメタデータをオーバーライドする場合は、<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-275">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="3206f-276">依存関係プロパティのメタデータは、プロパティシステムが依存関係プロパティを使用する前にオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-276">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="3206f-277">これは、依存関係プロパティを登録するクラスに対して特定のオブジェクトが作成された時刻に相当します。</span><span class="sxs-lookup"><span data-stu-id="3206f-277">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="3206f-278"><xref:System.Windows.DependencyProperty.OverrideMetadata%2A> の呼び出しは、このメソッドの `forType` パラメーターとして、または同様のインスタンス化を使用して自身を提供する型の静的コンストラクター内でのみ実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-278">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="3206f-279">所有者の型のインスタンスが存在した後にメタデータを変更しようとしても、例外は発生しませんが、プロパティシステムの動作が矛盾します。</span><span class="sxs-lookup"><span data-stu-id="3206f-279">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="3206f-280">このメソッドでは、特定の派生クラスに対するメタデータのオーバーライドが確立された後、この同じ派生クラスでメタデータをオーバーライドしようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="3206f-280">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="3206f-281">指定されたメタデータは、基本所有者に存在する依存関係プロパティのプロパティメタデータとマージされます。</span><span class="sxs-lookup"><span data-stu-id="3206f-281">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="3206f-282">元の基本メタデータで指定されたすべての特性が保持されます。新しいメタデータで特に変更された特性だけが、基本メタデータの特性を上書きします。</span><span class="sxs-lookup"><span data-stu-id="3206f-282">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="3206f-283">新しいメタデータで指定されている場合、<xref:System.Windows.PropertyMetadata.DefaultValue%2A> などの一部の特性は置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="3206f-283">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="3206f-284">その他 (<xref:System.Windows.PropertyChangedCallback>など) は結合されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-284">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="3206f-285">マージ動作は、オーバーライドに使用されているプロパティメタデータ型によって異なります。</span><span class="sxs-lookup"><span data-stu-id="3206f-285">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="3206f-286">詳細については、「[依存関係プロパティのメタ](~/docs/framework/wpf/advanced/dependency-property-metadata.md)データ」および「[フレームワークプロパティメタデータ](~/docs/framework/wpf/advanced/framework-property-metadata.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-286">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-287">依存関係プロパティをプロパティ システムに登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型を取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-287">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span></span></summary>
        <value><span data-ttu-id="3206f-288">プロパティを登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-288">The type of the object that registered the property or added itself as owner of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-289">この値は、プロパティの登録時に指定されました。</span><span class="sxs-lookup"><span data-stu-id="3206f-289">This value was provided during property registration.</span></span> <span data-ttu-id="3206f-290">所有者は、<xref:System.Windows.DependencyProperty.Register%2A> 呼び出しから生成された <xref:System.Windows.DependencyProperty> 識別子の場合は元の登録型、<xref:System.Windows.DependencyProperty.AddOwner%2A> 呼び出しから生成された <xref:System.Windows.DependencyProperty> 識別子の場合は所有者として追加された型のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="3206f-290">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="3206f-291">特定の <xref:System.Windows.DependencyProperty> の <xref:System.Windows.DependencyProperty.OwnerType%2A> は不変であり、有効な <xref:System.Windows.DependencyProperty>で `null` することはできません。</span><span class="sxs-lookup"><span data-stu-id="3206f-291">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-292">次の例では、`dp`依存関係プロパティの識別子に基づいて所有者の種類を取得し、その同じ識別子の所有者の型でメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-292">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="3206f-293">この操作は、実際には `dp`で <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> を取得することと同じです。</span><span class="sxs-lookup"><span data-stu-id="3206f-293">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-294">依存関係プロパティの値の型を取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-294">Gets the type that the dependency property uses for its value.</span></span></summary>
        <value><span data-ttu-id="3206f-295">プロパティ値の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="3206f-295">The <see cref="T:System.Type" /> of the property value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-296">このプロパティは、`propertyType` パラメーターを使用して、元のプロパティの登録によって宣言されたプロパティの値の型を報告します。</span><span class="sxs-lookup"><span data-stu-id="3206f-296">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="3206f-297"><xref:System.Windows.DependencyProperty.Name%2A>と同様に、依存関係プロパティのプロパティの型は登録後に変更できません。</span><span class="sxs-lookup"><span data-stu-id="3206f-297">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-298">次の例では、依存関係プロパティ識別子のさまざまな特性 (<xref:System.Windows.DependencyProperty.PropertyType%2A>を含む) をクエリします。</span><span class="sxs-lookup"><span data-stu-id="3206f-298">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="3206f-299"><xref:System.Windows.DependencyProperty.PropertyType%2A> の型名の文字列は、返された <xref:System.Type>から取得されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-299">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-300">この <see cref="T:System.Windows.DependencyProperty" /> インスタンスによって識別される依存関係プロパティが読み取り専用の依存関係プロパティかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-300">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span></span></summary>
        <value><span data-ttu-id="3206f-301">依存関係プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3206f-301"><see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-302">読み取り専用の依存関係プロパティは、<xref:System.Windows.DependencyProperty.Register%2A> メソッドではなく、<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> メソッドを呼び出すことによって、プロパティシステム内に登録されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-302">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="3206f-303">添付プロパティは、読み取り専用として登録することもできます。「<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-303">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="3206f-304">読み取り専用の依存関係プロパティには、メタデータのオーバーライドや値の設定などのメタデータ操作を実行するために、<xref:System.Windows.DependencyProperty> 識別子ではなく <xref:System.Windows.DependencyPropertyKey> 識別子が必要です。</span><span class="sxs-lookup"><span data-stu-id="3206f-304">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="3206f-305"><xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> または識別子を公開する別の API を呼び出すことによって <xref:System.Windows.DependencyProperty> 識別子のコレクションを取得した場合は、<xref:System.Windows.DependencyObject.SetValue%2A> を呼び出したり、その依存関係プロパティ識別子を入力パラメーターとして使用し <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> たりする前に <xref:System.Windows.DependencyProperty.ReadOnly%2A> 値を確認して、識別子が表す依存関係プロパティが読み取り専用でないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="3206f-305">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another API that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="3206f-306"><xref:System.Windows.DependencyProperty.ReadOnly%2A> の値が依存関係プロパティで `true` 場合、その依存関係プロパティの <xref:System.Windows.DependencyPropertyKey> 識別子への参照を、メタデータまたは <xref:System.Windows.DependencyProperty> 識別子から取得するためのプログラムによる方法はありません。読み取り専用の依存関係プロパティに対して <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> を呼び出すためには、識別子を静的フィールドとして使用できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-306">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="3206f-307">カスタム依存関係プロパティを作成し、読み取り専用として登録する場合は、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] ラッパープロパティの get アクセサーのみを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-307">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="3206f-308">それ以外の場合は、バッキング依存関係プロパティへのアクセスと比較して、クラスにプロパティラッパーの混乱したオブジェクトモデルが含まれます。</span><span class="sxs-lookup"><span data-stu-id="3206f-308">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="3206f-309">詳細については、「[カスタム依存関係プロパティ](~/docs/framework/wpf/advanced/custom-dependency-properties.md)」または「読み取り専用の[依存関係プロパティ](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-309">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-310">次の例では、さまざまな依存関係プロパティのフィールドから既定のメタデータと依存関係プロパティの識別子プロパティを取得し、情報を使用してテーブルに "メタデータブラウザー" を実装します。</span><span class="sxs-lookup"><span data-stu-id="3206f-310">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-311">依存プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-311">Registers a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-312">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-312">The name of the dependency property to register.</span></span> <span data-ttu-id="3206f-313">名前は、所有者型の登録名前空間内で一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-313">The name must be unique within the registration namespace of the owner type.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-314">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-314">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-315">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-315">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-316">プロパティ名、プロパティ型、所有者型を指定して、依存関係プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-316">Registers a dependency property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="3206f-317">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-317">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="3206f-318">この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-318">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-319">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-319">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-320">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-320">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-321">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-321">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-322">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-322">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-323">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-323">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-324">プロパティ名、プロパティの型、所有者の型、プロパティ メタデータを指定して、依存関係プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-324">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="3206f-325">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-325">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="3206f-326">この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-326">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-327">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-327">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-328">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-328">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-329">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-329">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-330">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-330">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-331">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-331">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="3206f-332">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</span><span class="sxs-lookup"><span data-stu-id="3206f-332">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="3206f-333">プロパティ名、プロパティ型、所有者型、プロパティ メタデータ、およびプロパティの値検証コールバックを指定して、依存関係プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-333">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="3206f-334">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-334">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="3206f-335">この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-335">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-336">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-336">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-337">次の例では、検証コールバックを含む依存関係プロパティを登録します (コールバック定義は表示されません。コールバック定義の詳細については、「<xref:System.Windows.ValidateValueCallback>)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-337">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-338">添付プロパティをプロパティ システムに登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-338">Registers an attached property with the property system.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-339">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-339">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-340">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-340">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-341">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-341">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-342">プロパティ名、プロパティ型、および所有者型を指定して、添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-342">Registers an attached property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="3206f-343">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-343">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="3206f-344">この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-344">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-345">添付プロパティは、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]によって定義されるプロパティの概念です。</span><span class="sxs-lookup"><span data-stu-id="3206f-345">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="3206f-346">は、添付プロパティを依存関係プロパティとして実装します。</span><span class="sxs-lookup"><span data-stu-id="3206f-346">implements attached properties as dependency properties.</span></span> <span data-ttu-id="3206f-347">添付プロパティは依存関係プロパティで [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] あるため、レポートレイアウト特性などの操作のために一般的なプロパティシステムで使用できるメタデータを適用することができます。</span><span class="sxs-lookup"><span data-stu-id="3206f-347">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="3206f-348">詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-348">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="3206f-349">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-349">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-350">次の例では、この <xref:System.Windows.DependencyProperty.RegisterAttached%2A> シグネチャを使用して、抽象クラスに添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-350">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-351">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-351">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-352">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-352">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-353">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-353">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="3206f-354">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-354">Property metadata for the dependency property.</span></span> <span data-ttu-id="3206f-355">ここには、既定値などの特性を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="3206f-355">This can include the default value as well as other characteristics.</span></span></param>
        <summary><span data-ttu-id="3206f-356">プロパティ名、プロパティの型、所有者の型、およびプロパティ メタデータを指定して、アタッチされるプロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-356">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="3206f-357">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-357">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="3206f-358">この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-358">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-359">添付プロパティは、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]によって定義されるプロパティの概念です。</span><span class="sxs-lookup"><span data-stu-id="3206f-359">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="3206f-360">は、添付プロパティを依存関係プロパティとして実装します。</span><span class="sxs-lookup"><span data-stu-id="3206f-360">implements attached properties as dependency properties.</span></span> <span data-ttu-id="3206f-361">添付プロパティは依存関係プロパティで [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] あるため、レポートレイアウト特性などの操作のために一般的なプロパティシステムで使用できるメタデータを適用することができます。</span><span class="sxs-lookup"><span data-stu-id="3206f-361">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="3206f-362">詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-362">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="3206f-363">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-363">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="3206f-364">値を継承する依存関係プロパティに RegisterAttached を使用する</span><span class="sxs-lookup"><span data-stu-id="3206f-364">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="3206f-365"><xref:System.Windows.DependencyProperty.Register%2A> ではなく <xref:System.Windows.DependencyProperty.RegisterAttached%2A> に依存関係プロパティを登録する具体的なシナリオの1つは、プロパティ値の継承をサポートすることです。</span><span class="sxs-lookup"><span data-stu-id="3206f-365">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="3206f-366">依存関係プロパティを公開するプロパティラッパーアクセサーがクラスで定義されていても、Get \* および Set \* 静的メソッドを公開して true 添付プロパティのサポートアクセサーを提供する予定がない場合でも、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> で値を継承する依存関係プロパティを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-366">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="3206f-367">プロパティ値の継承は非添付依存関係プロパティに対して機能するように見えますが、ランタイムツリー内の特定の要素境界を通じて非添付プロパティの継承動作は未定義です。</span><span class="sxs-lookup"><span data-stu-id="3206f-367">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="3206f-368">プロパティをアタッチ済みとして登録すると、添付プロパティがプロパティシステムにグローバルプロパティとして適用され、プロパティ値の継承が要素ツリー内のすべての境界にわたって機能するようになります。</span><span class="sxs-lookup"><span data-stu-id="3206f-368">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="3206f-369">メタデータで <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> を指定するプロパティを登録するには、常に <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-369">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="3206f-370">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-370">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-371">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-371">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-372">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-372">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-373">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-373">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="3206f-374">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-374">Property metadata for the dependency property.</span></span> <span data-ttu-id="3206f-375">ここには、既定値などの特性を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="3206f-375">This can include the default value as well as other characteristics.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="3206f-376">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</span><span class="sxs-lookup"><span data-stu-id="3206f-376">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="3206f-377">プロパティ型、所有者型、プロパティ メタデータ、および値の検証コールバックを指定して、添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-377">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="3206f-378">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="3206f-378">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="3206f-379">この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-379">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-380">添付プロパティは、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]によって定義されるプロパティの概念です。</span><span class="sxs-lookup"><span data-stu-id="3206f-380">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="3206f-381">は、添付プロパティを依存関係プロパティとして実装します。</span><span class="sxs-lookup"><span data-stu-id="3206f-381">implements attached properties as dependency properties.</span></span> <span data-ttu-id="3206f-382">添付プロパティは依存関係プロパティで [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] あるため、レポートレイアウト特性などの操作のために一般的なプロパティシステムで使用できるメタデータを適用することができます。</span><span class="sxs-lookup"><span data-stu-id="3206f-382">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="3206f-383">詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-383">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="3206f-384">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-384">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="3206f-385">値を継承する依存関係プロパティに RegisterAttached を使用する</span><span class="sxs-lookup"><span data-stu-id="3206f-385">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="3206f-386"><xref:System.Windows.DependencyProperty.Register%2A> ではなく <xref:System.Windows.DependencyProperty.RegisterAttached%2A> に依存関係プロパティを登録する具体的なシナリオの1つは、プロパティ値の継承をサポートすることです。</span><span class="sxs-lookup"><span data-stu-id="3206f-386">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="3206f-387">依存関係プロパティを公開するプロパティラッパーアクセサーがクラスで定義されていても、Get \* および Set \* 静的メソッドを公開して true 添付プロパティのサポートアクセサーを提供する予定がない場合でも、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> で値を継承する依存関係プロパティを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-387">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="3206f-388">プロパティ値の継承は非添付依存関係プロパティに対して機能するように見えますが、ランタイムツリー内の特定の要素境界を通じて非添付プロパティの継承動作は未定義です。</span><span class="sxs-lookup"><span data-stu-id="3206f-388">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="3206f-389">プロパティをアタッチ済みとして登録すると、添付プロパティがプロパティシステムにグローバルプロパティとして適用され、プロパティ値の継承が要素ツリー内のすべての境界にわたって機能するようになります。</span><span class="sxs-lookup"><span data-stu-id="3206f-389">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="3206f-390">メタデータで <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> を指定するプロパティを登録するには、常に <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-390">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="3206f-391">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-391">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-392">次の例では、この <xref:System.Windows.DependencyProperty.RegisterAttached%2A> シグネチャを使用して、抽象クラスに添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-392">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="3206f-393">この添付プロパティは列挙型のプロパティであり、登録は検証コールバックを追加して、指定された値が列挙体の値であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="3206f-393">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-394">読み取り専用添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-394">Registers a read-only attached property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-395">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-395">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-396">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-396">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-397">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-397">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="3206f-398">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-398">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-399">プロパティ型、所有者型、およびプロパティ メタデータを指定して、読み取り専用の添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-399">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="3206f-400">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-400">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-401">このメソッドは <xref:System.Windows.DependencyPropertyKey>型を返し、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> は <xref:System.Windows.DependencyProperty>型を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-401">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="3206f-402">通常、読み取り専用プロパティを表すキーは公開されません。これは、キーを使用して <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>を呼び出すことによって依存関係プロパティの値を設定できるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-402">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="3206f-403">クラスの設計は要件に影響しますが、一般に、クラスまたはアプリケーションロジックの一部としてその依存関係プロパティを設定するために必要なコード部分のみに、<xref:System.Windows.DependencyPropertyKey> のアクセスと可視性を制限することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-403">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="3206f-404">また、<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> の値をクラスの `public static readonly` フィールドとして公開することによって、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することもお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-404">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="3206f-405">添付プロパティの主なシナリオは [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]で使用されるため、読み取り専用の添付プロパティはまれなシナリオです。</span><span class="sxs-lookup"><span data-stu-id="3206f-405">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="3206f-406">パブリック setter を使用しない場合、添付プロパティを [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文で設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="3206f-406">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="3206f-407">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-407">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="3206f-408">値を継承する依存関係プロパティに RegisterAttached を使用する</span><span class="sxs-lookup"><span data-stu-id="3206f-408">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="3206f-409">依存関係プロパティを添付として登録するための特定のシナリオの1つは、プロパティ値の継承をサポートすることです。</span><span class="sxs-lookup"><span data-stu-id="3206f-409">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="3206f-410">依存関係プロパティを公開するプロパティラッパーアクセサーがクラスで定義されていても、Get \* および Set \* 静的メソッドを公開して true 添付プロパティのサポートアクセサーを提供する予定がない場合でも、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> で値を継承する依存関係プロパティを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-410">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="3206f-411">プロパティ値の継承は非添付依存関係プロパティに対して機能するように見えますが、ランタイムツリー内の特定の要素境界を通じて非添付プロパティの継承動作は未定義です。</span><span class="sxs-lookup"><span data-stu-id="3206f-411">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="3206f-412">プロパティをアタッチ済みとして登録すると、添付プロパティがプロパティシステムにグローバルプロパティとして適用され、プロパティ値の継承が要素ツリー内のすべての境界にわたって機能するようになります。</span><span class="sxs-lookup"><span data-stu-id="3206f-412">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="3206f-413">メタデータで <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> を指定するプロパティを登録するには、常に <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-413">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="3206f-414">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-414">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-415">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-415">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-416">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-416">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-417">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-417">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="3206f-418">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-418">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="3206f-419">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</span><span class="sxs-lookup"><span data-stu-id="3206f-419">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="3206f-420">プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の添付プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-420">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="3206f-421">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要があり、依存関係プロパティの参照に使用される、依存関係プロパティのキー。</span><span class="sxs-lookup"><span data-stu-id="3206f-421">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-422">このメソッドは <xref:System.Windows.DependencyPropertyKey>型を返し、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> は <xref:System.Windows.DependencyProperty>型を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-422">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="3206f-423">通常、<xref:System.Windows.DependencyProperty>型を表すキーです。</span><span class="sxs-lookup"><span data-stu-id="3206f-423">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="3206f-424">通常、読み取り専用プロパティを表すキーは公開されません。これは、キーを使用して <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>を呼び出すことによって依存関係プロパティの値を設定できるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-424">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="3206f-425">クラスの設計は要件に影響しますが、一般に、クラスまたはアプリケーションロジックの一部としてその依存関係プロパティを設定するために必要なコード部分のみに、<xref:System.Windows.DependencyPropertyKey> のアクセスと可視性を制限することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-425">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="3206f-426">また、<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> の値をクラスの `public static readonly` フィールドとして公開することによって、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することもお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-426">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="3206f-427">添付プロパティの主なシナリオは [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]で使用されるため、読み取り専用の添付プロパティはまれなシナリオです。</span><span class="sxs-lookup"><span data-stu-id="3206f-427">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="3206f-428">パブリック setter を使用しない場合、添付プロパティを [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文で設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="3206f-428">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="3206f-429">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-429">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="3206f-430">値を継承する依存関係プロパティに RegisterAttached を使用する</span><span class="sxs-lookup"><span data-stu-id="3206f-430">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="3206f-431">依存関係プロパティを <xref:System.Windows.DependencyProperty.Register%2A> ではなくアタッチ済みとして登録する特定のシナリオでは、プロパティ値の継承をサポートします。</span><span class="sxs-lookup"><span data-stu-id="3206f-431">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="3206f-432">依存関係プロパティを公開するプロパティラッパーアクセサーがクラスで定義されていても、Get \* および Set \* 静的メソッドを公開して true 添付プロパティのサポートアクセサーを提供する予定がない場合でも、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> で値を継承する依存関係プロパティを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-432">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="3206f-433">プロパティ値の継承は非添付依存関係プロパティに対して機能するように見えますが、ランタイムツリー内の特定の要素境界を通じて非添付プロパティの継承動作は未定義です。</span><span class="sxs-lookup"><span data-stu-id="3206f-433">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="3206f-434">プロパティをアタッチ済みとして登録すると、添付プロパティがプロパティシステムにグローバルプロパティとして適用され、プロパティ値の継承が要素ツリー内のすべての境界にわたって機能するようになります。</span><span class="sxs-lookup"><span data-stu-id="3206f-434">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="3206f-435">メタデータで <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> を指定するプロパティを登録するには、常に <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-435">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="3206f-436">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-436">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3206f-437">読み取り専用の依存関係プロパティとして、依存関係プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-437">Registers a dependency property as a read-only dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-438">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-438">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-439">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-439">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-440">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-440">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-441">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-441">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="3206f-442">プロパティ型、所有者型、プロパティ メタデータを指定して、読み取り専用の依存関係プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-442">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="3206f-443">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要があり、依存関係プロパティの参照に使用される、依存関係プロパティのキー。</span><span class="sxs-lookup"><span data-stu-id="3206f-443">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-444">このメソッドは <xref:System.Windows.DependencyPropertyKey>型を返し、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> は <xref:System.Windows.DependencyProperty>型を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-444">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="3206f-445">通常、読み取り専用プロパティを表すキーは公開されません。これは、キーを使用して <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>を呼び出すことによって依存関係プロパティの値を設定できるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-445">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="3206f-446">クラスの設計は要件に影響しますが、一般に、クラスまたはアプリケーションロジックの一部としてその依存関係プロパティを設定するために必要なコード部分のみに、<xref:System.Windows.DependencyPropertyKey> のアクセスと可視性を制限することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-446">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="3206f-447">また、<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> の値をクラスの `public static readonly` フィールドとして公開することによって、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することもお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-447">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="3206f-448">読み取り専用の依存関係プロパティは、既存の API とカスタマイズシナリオの両方で、非常に一般的なシナリオです。他の [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 機能では、そのプロパティが呼び出し元によって設定されることを意図していない場合でも依存関係プロパティが必要になる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-448">Read-only dependency properties are a fairly typical scenario both in the existing API and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="3206f-449">読み取り専用の依存関係プロパティの値は、依存関係プロパティを受け取る他のプロパティシステム操作の基準として使用できます。たとえば、スタイルの依存関係プロパティの <xref:System.Windows.Trigger> に基づいています。</span><span class="sxs-lookup"><span data-stu-id="3206f-449">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="3206f-450">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-450">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3206f-451">次の例では、`AquariumSize` 依存関係プロパティを読み取り専用として登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-451">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="3206f-452">この例では、`AquariumSizeKey` を内部キーとして定義し (そのため、アセンブリ内の他のクラスがメタデータをオーバーライドする可能性があります)、そのキーに基づいて依存関係プロパティ識別子を `AquariumSizeProperty`として公開します。</span><span class="sxs-lookup"><span data-stu-id="3206f-452">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="3206f-453">また、ラッパーは get アクセサーのみを使用して `AquariumSize`用に作成されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-453">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3206f-454">登録する依存関係プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3206f-454">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="3206f-455">プロパティの型。</span><span class="sxs-lookup"><span data-stu-id="3206f-455">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="3206f-456">依存関係プロパティを登録する所有者型。</span><span class="sxs-lookup"><span data-stu-id="3206f-456">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="3206f-457">依存関係プロパティのプロパティ メタデータ。</span><span class="sxs-lookup"><span data-stu-id="3206f-457">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="3206f-458">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</span><span class="sxs-lookup"><span data-stu-id="3206f-458">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="3206f-459">プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の依存関係プロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="3206f-459">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="3206f-460">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-460">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-461">このメソッドは <xref:System.Windows.DependencyPropertyKey>型を返し、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> は <xref:System.Windows.DependencyProperty>型を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-461">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="3206f-462">通常、読み取り専用プロパティを表すキーは公開されません。これは、キーを使用して <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>を呼び出すことによって依存関係プロパティの値を設定できるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-462">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="3206f-463">クラスの設計は要件に影響しますが、一般に、クラスまたはアプリケーションロジックの一部としてその依存関係プロパティを設定するために必要なコード部分のみに、<xref:System.Windows.DependencyPropertyKey> のアクセスと可視性を制限することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-463">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="3206f-464">また、<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> の値をクラスの `public static readonly` フィールドとして公開することによって、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することもお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3206f-464">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="3206f-465">読み取り専用の依存関係プロパティは、非常に一般的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="3206f-465">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="3206f-466">読み取り専用の依存関係プロパティの値は、依存関係プロパティを受け取る他のプロパティシステム操作の基準として使用できます。たとえば、スタイルの依存関係プロパティの <xref:System.Windows.Trigger> に基づいています。</span><span class="sxs-lookup"><span data-stu-id="3206f-466">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="3206f-467">依存関係プロパティの登録の詳細については、「<xref:System.Windows.DependencyProperty>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-467">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="3206f-468">読み取り専用の依存関係プロパティでの検証は、重要度が低い場合があります。</span><span class="sxs-lookup"><span data-stu-id="3206f-468">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="3206f-469">キーに指定した非パブリックアクセスレベルにより、任意の無効な入力の可能性が減少します。</span><span class="sxs-lookup"><span data-stu-id="3206f-469">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3206f-470">依存関係プロパティの文字列表現を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-470">Returns the string representation of the dependency property.</span></span></summary>
        <returns><span data-ttu-id="3206f-471">依存関係プロパティの文字列表現。</span><span class="sxs-lookup"><span data-stu-id="3206f-471">The string representation of the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-472">この実装は、<xref:System.Windows.DependencyProperty.Name%2A> プロパティ値を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-472">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-473">プロパティは存在するが、その値がプロパティ システムによって設定されていないことを示すために、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティ システムが <see langword="null" /> の代わりに使用する静的な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3206f-473">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-474"><xref:System.Windows.DependencyProperty.UnsetValue> は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステムが、要求された <xref:System.Windows.DependencyProperty> 値を特定できない場合に使用される sentinel 値です。</span><span class="sxs-lookup"><span data-stu-id="3206f-474"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="3206f-475">`null`ではなく <xref:System.Windows.DependencyProperty.UnsetValue> が使用されます。これは、`null` が有効なプロパティ値であり、有効な (および頻繁に使用される) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>である可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="3206f-475"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="3206f-476"><xref:System.Windows.DependencyProperty.UnsetValue> が <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>から返されることはありません。</span><span class="sxs-lookup"><span data-stu-id="3206f-476"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3206f-477"><xref:System.Windows.DependencyObject> インスタンスの依存関係プロパティで <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> を呼び出すと、次のいずれかが適用されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-477">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="3206f-478">依存関係プロパティには、メタデータに既定値が設定されており、その値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-478">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="3206f-479">この値は <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>から取得できます。</span><span class="sxs-lookup"><span data-stu-id="3206f-479">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="3206f-480">他の値がプロパティシステムによって設定されており、既定値が関連していません。</span><span class="sxs-lookup"><span data-stu-id="3206f-480">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="3206f-481">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-481">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="3206f-482"><xref:System.Windows.DependencyProperty.UnsetValue> の <xref:System.Windows.PropertyMetadata.DefaultValue%2A> の設定は、特に許可されていません。</span><span class="sxs-lookup"><span data-stu-id="3206f-482">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="3206f-483">要求されたプロパティがローカルに設定されていない場合、<xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> は <xref:System.Windows.DependencyProperty.UnsetValue> を返します。</span><span class="sxs-lookup"><span data-stu-id="3206f-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="3206f-484"><xref:System.Windows.DependencyProperty.UnsetValue> は、<xref:System.Windows.CoerceValueCallback>の戻り値として使用される場合に特別な意味を持ちます。</span><span class="sxs-lookup"><span data-stu-id="3206f-484"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="3206f-485">詳細については、「[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-485">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="3206f-486">データベースにバインドしている場合、<xref:System.Windows.DependencyProperty.UnsetValue> は <xref:System.DBNull.Value>と同じではありません。これは、<xref:System.DBNull.Value> が true null と等しくない方法と似ています。</span><span class="sxs-lookup"><span data-stu-id="3206f-486">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3206f-487">依存関係プロパティの値検証コールバックを取得します。</span><span class="sxs-lookup"><span data-stu-id="3206f-487">Gets the value validation callback for the dependency property.</span></span></summary>
        <value><span data-ttu-id="3206f-488">依存関係プロパティを最初に登録するときに <paramref name="validateValueCallback" /> パラメーターで指定した、この依存関係プロパティの値検証コールバック。</span><span class="sxs-lookup"><span data-stu-id="3206f-488">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3206f-489">このプロパティには、検証コールバックが登録されていない依存関係プロパティの `null` が含まれます。</span><span class="sxs-lookup"><span data-stu-id="3206f-489">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="3206f-490">検証値のコールバックは静的な意味で動作する必要があります。 <xref:System.Windows.ValidateValueCallback> によって適用される検証では、指定された値が特定のインスタンスに対して有効かどうかを判断できません。</span><span class="sxs-lookup"><span data-stu-id="3206f-490">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="3206f-491">コールバックは、依存関係プロパティを持つすべてのオブジェクトが、指定された値を有効なものとして受け入れるかどうかを判断するだけです。</span><span class="sxs-lookup"><span data-stu-id="3206f-491">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="3206f-492">特定のインスタンスの他の依存関係プロパティの値を知ることに依存する検証を実行する必要がある場合は、代わりに <xref:System.Windows.CoerceValueCallback> を使用します。</span><span class="sxs-lookup"><span data-stu-id="3206f-492">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="3206f-493"><xref:System.Windows.CoerceValueCallback> は、依存関係プロパティの識別子内で直接ではなく、依存関係プロパティのメタデータの一部として登録されます。</span><span class="sxs-lookup"><span data-stu-id="3206f-493">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="3206f-494">詳細については、「[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3206f-494">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>
