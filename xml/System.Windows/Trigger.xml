<Type Name="Trigger" FullName="System.Windows.Trigger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="543dc8563afbea27b6446486b071f0bde1709edb" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75180033" /></Metadata><TypeSignature Language="C#" Value="public class Trigger : System.Windows.TriggerBase, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Trigger extends System.Windows.TriggerBase implements class System.ComponentModel.ISupportInitialize, class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Trigger" />
  <TypeSignature Language="VB.NET" Value="Public Class Trigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trigger : System::Windows::TriggerBase, System::ComponentModel::ISupportInitialize, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type Trigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Windows.Markup.XamlSetTypeConverter("ReceiveTypeConverter")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プロパティ値を適用するか、または条件付きでアクションを実行するトリガーを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] では、エンドユーザーの操作に対応するプロパティを定義します。たとえば、ユーザーがカーソルを <xref:System.Windows.UIElement> または <xref:System.Windows.ContentElement.IsMouseOver%2A> の対応する <xref:System.Windows.ContentElement>プロパティの上に置いたときに `true` に設定されている <xref:System.Windows.UIElement.IsMouseOver%2A> プロパティなどです。 プロパティ値のエンドユーザーアクションを <xref:System.Windows.Trigger> 要素と共に表すことで、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] スタイルで、エンドユーザーのアクションに基づいてプロパティ値を変更できるようになります。これらの操作はすべて、マークアップ内から行うことができます。  
  
 トリガーによって変更されたプロパティは、トリガーされた条件が満たされなくなると、自動的に以前の値にリセットされます。 トリガーは、変更して元の状態に戻すことが期待される一時的な状態に対して最適化されています。たとえば、<xref:System.Windows.Controls.Button> での <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> や <xref:System.Windows.Controls.ListBoxItem>での <xref:System.Windows.Controls.ListBoxItem.IsSelected%2A> です。 対象の <xref:System.Windows.Trigger.Property%2A> は依存関係プロパティである必要があります。  
  
 トリガーを意味のあるものにするには、<xref:System.Windows.Trigger> で <xref:System.Windows.Trigger.Property%2A> と <xref:System.Windows.Trigger.Value%2A> の両方のプロパティを指定する必要があることに注意してください。 プロパティの一方または両方が設定されていない場合は、例外がスローされます。  
  
 <xref:System.Windows.Trigger> オブジェクトの <xref:System.Windows.Trigger.Setters%2A> プロパティは <xref:System.Windows.Setter> オブジェクトのみで構成できます。 <xref:System.Windows.Trigger> オブジェクトに <xref:System.Windows.Setter> 子を追加すると、<xref:System.Windows.Trigger> オブジェクトの <xref:System.Windows.SetterBaseCollection> に暗黙的に追加されます。 <xref:System.Windows.EventSetter> オブジェクトはサポートされていません。<xref:System.Windows.EventSetter> オブジェクトをサポートしているのは <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> だけです。  
  
 他の種類のトリガーもあります。 <xref:System.Windows.MultiTrigger> を使用すると、複数のプロパティの状態に基づいて変更を適用できます。 <xref:System.Windows.EventTrigger> を使用すると、イベントの発生時に変更を適用できます。 <xref:System.Windows.DataTrigger> と <xref:System.Windows.MultiDataTrigger> は、データバインドプロパティを対象としています。  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.Button> コントロールで使用できる名前付き <xref:System.Windows.Style> を示しています。 <xref:System.Windows.Style> は、<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> プロパティが `true`ときにボタンの <xref:System.Windows.Controls.Control.Foreground%2A> プロパティを変更する <xref:System.Windows.Trigger> 要素を定義します。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">スタイルとテンプレートのサンプルの概要</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Trigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Trigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Trigger" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Property" />
      <MemberSignature Language="VB.NET" Value="Public Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); void set(System::Windows::DependencyProperty ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty with get, set" Usage="System.Windows.Trigger.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トリガーの <see cref="P:System.Windows.Trigger.Value" /> プロパティと比較される値を返すプロパティを取得または設定します。 この比較は参照の等価性チェックです。</summary>
        <value>要素のプロパティ値を返す <see cref="T:System.Windows.DependencyProperty" />。 既定値は <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される値は、<xref:System.Windows.Trigger.Value%2A> プロパティによって指定された値と比較されます。 実行される比較は、参照の等価性のチェックです。 2つの値が一致する場合、関連付けられている <xref:System.Windows.Setter>s は、指定されたプロパティ値を適用します。  
  
 このトリガーを含むスタイルまたはテンプレートに `TargetType` プロパティが設定されていない場合は、`ClassName.PropertyName` 構文を使用して、指定するプロパティを修飾します。  
  
 トリガーを意味のあるものにするには、<xref:System.Windows.Trigger> で <xref:System.Windows.Trigger.Property%2A> と <xref:System.Windows.Trigger.Value%2A> の両方のプロパティを指定する必要があることに注意してください。 プロパティの一方または両方が設定されていない場合は、例外がスローされます。  
  
   
  
## Examples  
 次の例には、2つのトリガーが含まれています。 最初のは、<xref:System.Windows.UIElement.IsMouseOver%2A> プロパティが `true`されている場合に、<xref:System.Windows.Controls.Button> の <xref:System.Windows.Controls.Control.Background%2A> プロパティを変更します。 2番目のプロパティは、<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> プロパティが `true`場合に、ボタンの <xref:System.Windows.Controls.Control.Foreground%2A> プロパティを変更します。 <xref:System.Windows.Style> の <xref:System.Windows.Style.TargetType%2A> は <xref:System.Windows.Controls.Button> に設定されているため、`Property` プロパティをクラス名で修飾する必要はありません。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="T:System.Windows.Style" /> に、<see cref="T:System.Windows.Trigger" /> プロパティを参照する <see cref="T:System.Windows.Style" /> を含めることはできません。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Trigger" /> は、使用中には変更できません。</exception>
        <altmember cref="P:System.Windows.Trigger.Value" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">スタイルとテンプレートのサンプルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ReceiveTypeConverter">
      <MemberSignature Language="C#" Value="public static void ReceiveTypeConverter (object targetObject, System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveTypeConverter(object targetObject, class System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.ReceiveTypeConverter(System.Object,System.Windows.Markup.XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveTypeConverter (targetObject As Object, eventArgs As XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveTypeConverter(System::Object ^ targetObject, System::Windows::Markup::XamlSetTypeConverterEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveTypeConverter : obj * System.Windows.Markup.XamlSetTypeConverterEventArgs -&gt; unit" Usage="System.Windows.Trigger.ReceiveTypeConverter (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetTypeConverterEventArgs" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="targetObject">型コンバーターによって値が設定されるオブジェクト。</param>
        <param name="eventArgs">型コンバーターの処理に関連したデータ。</param>
        <summary>型コンバーターによって <see cref="T:System.Windows.Trigger" /> オブジェクトのプロパティの値が設定された場合の処理を行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、クラスレベルで適用された <xref:System.Windows.Markup.XamlSetTypeConverterAttribute> 属性によって参照されるメソッドです。つまり、このメソッドは、型コンバーターを使用して <xref:System.Windows.Trigger> の値を設定しようとするすべての試行を処理します。 通常、このメソッドを直接呼び出すことはありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Trigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した条件が満たされたときに適用するプロパティ値を表す <see cref="T:System.Windows.Setter" /> オブジェクトのコレクションを取得します。</summary>
        <value>既定値は <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>XAML の値  
 *ZeroOrMoreSetters*  
 0個以上の <xref:System.Windows.Setter> オブジェクト。 これは <xref:System.Windows.EventSetter> オブジェクトをサポートしていません。  
  
 <xref:System.Windows.Trigger> を使用すると、要素が指定された条件を満たす場合に、<xref:System.Windows.Setter>s を使用してプロパティ値を適用できます。 たとえば、要素がフォーカスされているときに、その背景色を変更することができます。  
  
 同じプロパティが複数回設定されている場合は、最後のプロパティ値が適用されます。  
  
 <xref:System.Windows.Trigger> オブジェクトの <xref:System.Windows.Trigger.Setters%2A> プロパティは <xref:System.Windows.Setter> オブジェクトのみで構成できます。 <xref:System.Windows.Trigger> オブジェクトに <xref:System.Windows.Setter> 子を追加すると、<xref:System.Windows.Trigger> オブジェクトの <xref:System.Windows.SetterBaseCollection> に暗黙的に追加されます。 <xref:System.Windows.EventSetter> オブジェクトはサポートされていません。<xref:System.Windows.EventSetter> オブジェクトをサポートしているのは <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> だけです。  
  
   
  
## Examples  
 前述のように、<xref:System.Windows.Trigger> オブジェクトに <xref:System.Windows.Setter> 子を追加すると、そのオブジェクトが <xref:System.Windows.Trigger> オブジェクトの <xref:System.Windows.SetterBaseCollection> に暗黙的に追加されます。 次の例では、`<Trigger.Setters>` は暗黙的です。  
  
 [!code-xaml[PhotoStoreDemoStyled#TriggerSettersRef](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#triggersettersref)]   
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">スタイルとテンプレートのサンプルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.Trigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられている setter を適用するプロパティを含むオブジェクトの名前を取得または設定します。</summary>
        <value>既定のプロパティは <see langword="null" /> です。 このプロパティが <see langword="null" /> の場合、<see cref="P:System.Windows.Trigger.Property" /> プロパティは、このスタイルまたはテンプレートが適用される要素 (スタイルが設定される親またはテンプレートが適用される親) に関して評価されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、トリガーコレクション (この <xref:System.Windows.Trigger> が含まれるコレクション) が適用されるのスコープ内の任意の要素の名前に設定できます。 これは、通常、この <xref:System.Windows.Trigger>を含むテンプレート内の名前付き要素です。  
  
 オブジェクトには、 [X:Name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)構文を使用して名前を指定できます。  
  
   
  
## Examples  
 <xref:System.Windows.Trigger.SourceName%2A> プロパティを使用する場合の1つのシナリオは、次の例に示すように、対象のプロパティがテンプレート化された親のプロパティではない場合です。  
  
 [!code-xaml[ControlTemplateExamples#TriggerSourceName](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/menu.xaml#triggersourcename)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Trigger" /> は、使用中には変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初期化が開始されることをオブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Setter> のインスタンスが <xref:System.ComponentModel.ISupportInitialize> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初期化が完了したことをオブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Setter> のインスタンスが <xref:System.ComponentModel.ISupportInitialize> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">追加する子オブジェクト。</param>
        <summary>子オブジェクトを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Trigger> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">オブジェクトに追加するテキスト。</param>
        <summary>オブジェクトにノードのテキスト コンテンツを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Trigger> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.Trigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.SetterTriggerConditionValueConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Property")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("SourceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素のプロパティ値と比較する値を取得または設定します。 この比較は参照の等価性チェックです。</summary>
        <value>既定値は <see langword="null" />です。 「例外」も参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値は、<xref:System.Windows.Trigger>の <xref:System.Windows.Trigger.Property%2A> プロパティによって返されるプロパティ値と比較されます。 実行される比較は、参照の品質チェックです。 2つの値が等しい場合は、関連付けられた <xref:System.Windows.Setter>s によって、指定されたプロパティ値が適用されます。  
  
 トリガーを意味のあるものにするには、<xref:System.Windows.Trigger> で <xref:System.Windows.Trigger.Property%2A> と <xref:System.Windows.Trigger.Value%2A> の両方のプロパティを指定する必要があることに注意してください。 したがって、プロパティの一方または両方が指定されていない場合は、例外がスローされます。  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> プロパティが `true`場合に、ボタンの <xref:System.Windows.Controls.Control.Foreground%2A> プロパティを変更します。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">バインディングなどの式はサポートされていません。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Trigger" /> は、使用中には変更できません。</exception>
        <altmember cref="P:System.Windows.Trigger.Property" />
        <altmember cref="P:System.Windows.Trigger.Setters" />
      </Docs>
    </Member>
  </Members>
</Type>
