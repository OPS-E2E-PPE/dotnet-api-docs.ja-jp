<Type Name="EventRoute" FullName="System.Windows.EventRoute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6feb90c56ea0e545f2de70599da3b0e82dc9e759" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78808767" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventRoute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventRoute extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventRoute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventRoute" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventRoute sealed" />
  <TypeSignature Language="F#" Value="type EventRoute = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="24885-101">ルーティング イベントが後に続くルートのコンテナーを表します。</span><span class="sxs-lookup"><span data-stu-id="24885-101">Represents the container for the route to be followed by a routed event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24885-102">このクラスは、有効な <xref:System.Windows.RoutedEvent>に対応し、そのイベントのイベントルートを参照するターゲットオブジェクトとハンドラーリストのペアの順序付きリストを格納します。</span><span class="sxs-lookup"><span data-stu-id="24885-102">This class corresponds to a valid <xref:System.Windows.RoutedEvent>, and contains an ordered list of target object and handler list pairs that refer to the event route for that event.</span></span> <span data-ttu-id="24885-103"><xref:System.Windows.EventRoute> では、リストに新しいエントリを追加できます。また、リストのハンドラーを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="24885-103"><xref:System.Windows.EventRoute> supports adding new entries to the list and also allows for the handlers in the list to be invoked.</span></span>  
  
 <span data-ttu-id="24885-104">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] イベントのハンドラーを追加するための通常の操作では、このクラスを使用する必要はありません (たとえば、<xref:System.Windows.EventManager> メソッドを使用してクラスの処理を追加したり、イベントの既存のハンドラーを照会したりするなど)。</span><span class="sxs-lookup"><span data-stu-id="24885-104">Most normal operations for adding handlers for [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] events do not require working with this class (for instance, use <xref:System.Windows.EventManager> methods to add class handling, or query for existing handlers of an event).</span></span> <span data-ttu-id="24885-105">このクラスは、主に、要素が子要素または親要素に関する特定の知識を持つ場合に使用されます。これにより、既定の計算されたイベントルートに要素を追加したり、要素を削除したりすることが実用的になります。</span><span class="sxs-lookup"><span data-stu-id="24885-105">This class is mainly for use when elements have particular knowledge about child elements or parent elements that make it practical to either add elements to or remove elements from the default calculated event route.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventRoute (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (routedEvent As RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventRoute(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberSignature Language="F#" Value="new System.Windows.EventRoute : System.Windows.RoutedEvent -&gt; System.Windows.EventRoute" Usage="new System.Windows.EventRoute routedEvent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="24885-106">このイベント ルートに関連付ける NULL 以外のイベント識別子。</span><span class="sxs-lookup"><span data-stu-id="24885-106">The non-NULL event identifier to be associated with this event route.</span></span></param>
        <summary><span data-ttu-id="24885-107"><see cref="T:System.Windows.EventRoute" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="24885-107">Initializes an instance of the <see cref="T:System.Windows.EventRoute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object target, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object target, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (target As Object, handler As Delegate, handledEventsToo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ target, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.Add : obj * Delegate * bool -&gt; unit" Usage="eventRoute.Add (target, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="24885-108">ルートにハンドラーを追加するターゲット オブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="24885-108">Specifies the target object of which the handler is to be added to the route.</span></span></param>
        <param name="handler"><span data-ttu-id="24885-109">ルートに追加するハンドラーを指定します。</span><span class="sxs-lookup"><span data-stu-id="24885-109">Specifies the handler to be added to the route.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="24885-110">既に処理されているイベントをリスナーで検出するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="24885-110">Indicates whether or not the listener detects events that have already been handled.</span></span></param>
        <summary><span data-ttu-id="24885-111">指定したターゲットの指定したハンドラーをルートに追加します。</span><span class="sxs-lookup"><span data-stu-id="24885-111">Adds the specified handler for the specified target to the route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24885-112">特定のターゲットインスタンスのハンドラーを2回追加するのはエラーではありません。</span><span class="sxs-lookup"><span data-stu-id="24885-112">It is not an error to add a handler for a particular target instance twice.</span></span> <span data-ttu-id="24885-113">このような場合、ハンドラーは2回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="24885-113">In such a case, the handler will be called twice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekBranchNode">
      <MemberSignature Language="C#" Value="public object PeekBranchNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object PeekBranchNode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventRoute.PeekBranchNode" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekBranchNode () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ PeekBranchNode();" />
      <MemberSignature Language="F#" Value="member this.PeekBranchNode : unit -&gt; obj" Usage="eventRoute.PeekBranchNode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24885-114">2 つの論理ツリーが分岐するイベント ルート スタックの最上位要素を返します。</span><span class="sxs-lookup"><span data-stu-id="24885-114">Returns the top-most element on the event route stack at which two logical trees diverge.</span></span></summary>
        <returns><span data-ttu-id="24885-115">2 つの論理ツリーが分岐するイベント ルート スタックの最上位要素。</span><span class="sxs-lookup"><span data-stu-id="24885-115">The top-most element on the event route stack at which two logical trees diverge.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekBranchSource">
      <MemberSignature Language="C#" Value="public object PeekBranchSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object PeekBranchSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventRoute.PeekBranchSource" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekBranchSource () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ PeekBranchSource();" />
      <MemberSignature Language="F#" Value="member this.PeekBranchSource : unit -&gt; obj" Usage="eventRoute.PeekBranchSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24885-116">2 つの論理ツリーが分岐するイベント ルート スタックの最上位要素のソースを返します。</span><span class="sxs-lookup"><span data-stu-id="24885-116">Returns the source for the top-most element on the event route stack at which two logical trees diverge.</span></span></summary>
        <returns><span data-ttu-id="24885-117">2 つの論理ツリーが分岐するイベント ルート スタックの最上位要素のソース。</span><span class="sxs-lookup"><span data-stu-id="24885-117">The source for the top-most element on the event route stack at which two logical trees diverge.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopBranchNode">
      <MemberSignature Language="C#" Value="public object PopBranchNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object PopBranchNode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventRoute.PopBranchNode" />
      <MemberSignature Language="VB.NET" Value="Public Function PopBranchNode () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ PopBranchNode();" />
      <MemberSignature Language="F#" Value="member this.PopBranchNode : unit -&gt; obj" Usage="eventRoute.PopBranchNode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24885-118">2 つの論理ツリーが分岐するイベント ルート スタックの最上位ノードを返します。</span><span class="sxs-lookup"><span data-stu-id="24885-118">Returns the top-most node on the event route stack at which two logical trees diverge.</span></span></summary>
        <returns><span data-ttu-id="24885-119">2 つの論理ツリーが分岐するイベント ルート スタックの最上位ノード。</span><span class="sxs-lookup"><span data-stu-id="24885-119">The top-most node on the event route stack at which two logical trees diverge.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushBranchNode">
      <MemberSignature Language="C#" Value="public void PushBranchNode (object node, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushBranchNode(object node, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventRoute.PushBranchNode(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushBranchNode (node As Object, source As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PushBranchNode(System::Object ^ node, System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.PushBranchNode : obj * obj -&gt; unit" Usage="eventRoute.PushBranchNode (node, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node"><span data-ttu-id="24885-120">2 つの論理ツリーが分岐するイベント ルート スタックの最上位要素。</span><span class="sxs-lookup"><span data-stu-id="24885-120">The top-most element on the event route stack at which two logical trees diverge.</span></span></param>
        <param name="source"><span data-ttu-id="24885-121">2 つの論理ツリーが分岐するイベント ルート スタックの最上位要素のソース。</span><span class="sxs-lookup"><span data-stu-id="24885-121">The source for the top-most element on the event route stack at which two logical trees diverge.</span></span></param>
        <summary><span data-ttu-id="24885-122">2 つの論理ツリーが分岐するイベント ルート スタックに最上位ノードを追加します。</span><span class="sxs-lookup"><span data-stu-id="24885-122">Adds the top-most node to the event route stack at which two logical trees diverge.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
