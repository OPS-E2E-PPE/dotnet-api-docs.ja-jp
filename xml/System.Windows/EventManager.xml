<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9af1b370002031277aba01b111b81e2ddcd5ee62" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73330812" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1c399-101">クラス所有者のルーティング イベントを登録し、クラス ハンドラーを追加する、イベント関連のユーティリティ メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="1c399-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c399-102">このクラスは、新しいルーティングイベントを <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>で登録するために最もよく使用されます。</span><span class="sxs-lookup"><span data-stu-id="1c399-102">This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span>  
  
 <span data-ttu-id="1c399-103">2番目の最も一般的な API 使用方法は <xref:System.Windows.EventManager.RegisterClassHandler%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1c399-103">The second most common API usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span> <span data-ttu-id="1c399-104">このメソッドを使用して、クラスまたは添付イベントのルーティングイベントのクラス処理を有効にします。</span><span class="sxs-lookup"><span data-stu-id="1c399-104">You use this method to enable class handling of a routed event on the class, or an attached event.</span></span> <span data-ttu-id="1c399-105">詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1c399-105">For details, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c399-106">次の例は、このクラスを使用して、新しいルーティングイベントをクラスメンバーとして登録する方法を示しています。また、このクラスを使用して、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントの add および remove 実装をオーバーライドするルーティングイベント "ラッパー" の手法を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1c399-106">The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.</span></span>  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1c399-107">イベント システムに登録されたルーティング イベントの識別子を返します。</span><span class="sxs-lookup"><span data-stu-id="1c399-107">Returns identifiers for routed events that have been registered to the event system.</span></span></summary>
        <returns><span data-ttu-id="1c399-108">登録されたオブジェクトを格納している <see cref="T:System.Windows.RoutedEvent" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="1c399-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c399-109">その他の <xref:System.Windows.RoutedEvent> オブジェクトは後で登録できます。</span><span class="sxs-lookup"><span data-stu-id="1c399-109">More <xref:System.Windows.RoutedEvent> objects can be registered later.</span></span> <span data-ttu-id="1c399-110">このメソッドは、スナップショットを取得します。ルーティングイベントのコレクションは、アプリケーションの有効期間全体にわたって書き込み可能です。</span><span class="sxs-lookup"><span data-stu-id="1c399-110">This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</span></span> <span data-ttu-id="1c399-111">返されるコレクションは非常に大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1c399-111">The collection returned might be quite large.</span></span> <span data-ttu-id="1c399-112">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Api の一部であるイベントをカウントするだけでなく、コレクションの数は数百になります。</span><span class="sxs-lookup"><span data-stu-id="1c399-112">Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] APIs, the collection count is in the high hundreds.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="1c399-113">検索を開始する型。</span><span class="sxs-lookup"><span data-stu-id="1c399-113">The type to start the search with.</span></span> <span data-ttu-id="1c399-114">基本クラスは検索に含まれます。</span><span class="sxs-lookup"><span data-stu-id="1c399-114">Base classes are included in the search.</span></span></param>
        <summary><span data-ttu-id="1c399-115">指定された所有者型で登録されているイベントのルーティング イベント識別子をすべて検索します。</span><span class="sxs-lookup"><span data-stu-id="1c399-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="1c399-116">一致が見つかった場合は、一致するルーティング イベント識別子の配列。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1c399-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1c399-117">特定のルーティング イベントのクラス ハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="1c399-117">Registers a class handler for a particular routed event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType"><span data-ttu-id="1c399-118">クラスの処理を宣言するクラスの型。</span><span class="sxs-lookup"><span data-stu-id="1c399-118">The type of the class that is declaring class handling.</span></span></param>
        <param name="routedEvent"><span data-ttu-id="1c399-119">処理するイベントのルーティング イベント識別子。</span><span class="sxs-lookup"><span data-stu-id="1c399-119">The routed event identifier of the event to handle.</span></span></param>
        <param name="handler"><span data-ttu-id="1c399-120">クラス ハンドラー実装への参照。</span><span class="sxs-lookup"><span data-stu-id="1c399-120">A reference to the class handler implementation.</span></span></param>
        <summary><span data-ttu-id="1c399-121">特定のルーティング イベントのクラス ハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="1c399-121">Registers a class handler for a particular routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c399-122">クラス処理は、ルーティングイベントに対して使用できる機能です。ルーティングイベントによって実装される添付イベントも含まれます。</span><span class="sxs-lookup"><span data-stu-id="1c399-122">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="1c399-123">クラスハンドラーは、クラスのすべてのインスタンスに存在する静的ハンドラーに似ています。</span><span class="sxs-lookup"><span data-stu-id="1c399-123">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="1c399-124">ハンドラーは静的であるため、クラスハンドラーを使用してインスタンスのプロパティを直接変更することはできませんが、`sender` パラメーターやイベントデータを使用してインスタンスにアクセスすることはできます。</span><span class="sxs-lookup"><span data-stu-id="1c399-124">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="1c399-125">クラスハンドラーは、インスタンスハンドラーの前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1c399-125">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="1c399-126">イベントを処理済みとしてマークする動作を持つクラスハンドラーを実装できます。</span><span class="sxs-lookup"><span data-stu-id="1c399-126">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="1c399-127">したがって、クラスで処理されるイベントのインスタンスハンドラーは、インスタンスハンドラーが処理済みイベントに対して特別に登録しない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="1c399-127">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="1c399-128">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の基本要素イベントの多くは、仮想メソッドを処理するクラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="1c399-128">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="1c399-129">基底クラスを継承するクラスでこれらのメソッドをオーバーライドすることにより、静的コンストラクターで <xref:System.Windows.EventManager.RegisterClassHandler%2A> を呼び出さずに、クラス処理を実装できます。</span><span class="sxs-lookup"><span data-stu-id="1c399-129">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="1c399-130">これらのクラス処理メソッドは通常、入力イベントに対して存在し、名前の先頭が "On" で、終了するイベントの名前が、処理されるイベントの名前になっています。</span><span class="sxs-lookup"><span data-stu-id="1c399-130">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="1c399-131">クラス処理の詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1c399-131">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="1c399-132">このシグネチャを使用して、クラスハンドラーは未処理のイベントへの応答としてのみ呼び出されるように登録されます。</span><span class="sxs-lookup"><span data-stu-id="1c399-132">Using this signature, class handlers will be registered to invoke only in response to unhandled events.</span></span> <span data-ttu-id="1c399-133"><xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャを使用してイベント引数が処理済みとしてマークされている場合でも、`handledEventsToo` を `true`に設定して、呼び出すクラスハンドラーを登録することもできます。</span><span class="sxs-lookup"><span data-stu-id="1c399-133">You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c399-134">次の例では、<xref:System.Windows.EventManager.RegisterClassHandler%2A>を呼び出して <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>のハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="1c399-134">The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType"><span data-ttu-id="1c399-135">クラスの処理を宣言するクラスの型。</span><span class="sxs-lookup"><span data-stu-id="1c399-135">The type of the class that is declaring class handling.</span></span></param>
        <param name="routedEvent"><span data-ttu-id="1c399-136">処理するイベントのルーティング イベント識別子。</span><span class="sxs-lookup"><span data-stu-id="1c399-136">The routed event identifier of the event to handle.</span></span></param>
        <param name="handler"><span data-ttu-id="1c399-137">クラス ハンドラー実装への参照。</span><span class="sxs-lookup"><span data-stu-id="1c399-137">A reference to the class handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="1c399-138">ルーティング イベントの引数が既に処理済みとしてマークされていても、このクラス ハンドラーを呼び出す場合は <see langword="true" />。処理済みとしてマークされているイベントのハンドラーを呼び出さない、既定の動作を維持する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1c399-138"><see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span></span></param>
        <summary><span data-ttu-id="1c399-139">イベント データが既に処理済みとしてマークされているイベントを処理するオプションを使用して、特定のルーティング イベントのクラス ハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="1c399-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c399-140">クラス処理は、ルーティングイベントに対して使用できる機能です。ルーティングイベントによって実装される添付イベントも含まれます。</span><span class="sxs-lookup"><span data-stu-id="1c399-140">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="1c399-141">クラスハンドラーは、クラスのすべてのインスタンスに存在する静的ハンドラーに似ています。</span><span class="sxs-lookup"><span data-stu-id="1c399-141">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="1c399-142">ハンドラーは静的であるため、クラスハンドラーを使用してインスタンスのプロパティを直接変更することはできませんが、`sender` パラメーターやイベントデータを使用してインスタンスにアクセスすることはできます。</span><span class="sxs-lookup"><span data-stu-id="1c399-142">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="1c399-143">クラスハンドラーは、インスタンスハンドラーの前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1c399-143">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="1c399-144">イベントを処理済みとしてマークする動作を持つクラスハンドラーを実装できます。</span><span class="sxs-lookup"><span data-stu-id="1c399-144">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="1c399-145">したがって、クラスで処理されるイベントのインスタンスハンドラーは、インスタンスハンドラーが処理済みイベントに対して特別に登録しない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="1c399-145">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="1c399-146">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の基本要素イベントの多くは、仮想メソッドを処理するクラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="1c399-146">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="1c399-147">基底クラスを継承するクラスでこれらのメソッドをオーバーライドすることにより、静的コンストラクターで <xref:System.Windows.EventManager.RegisterClassHandler%2A> を呼び出さずに、クラス処理を実装できます。</span><span class="sxs-lookup"><span data-stu-id="1c399-147">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="1c399-148">これらのクラス処理メソッドは通常、入力イベントに対して存在し、名前の先頭が "On" で、終了するイベントの名前が、処理されるイベントの名前になっています。</span><span class="sxs-lookup"><span data-stu-id="1c399-148">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="1c399-149">クラス処理の詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1c399-149">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="1c399-150">このシグネチャを使用して、`handledEventsToo` を `true`に設定することによって、処理されたイベント時に呼び出されるようにクラスハンドラーを登録できます。</span><span class="sxs-lookup"><span data-stu-id="1c399-150">Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`.</span></span> <span data-ttu-id="1c399-151">通常、この操作は、マウスやキーボードイベントからの入力システム処理など、回避しようとしている既知の処理の問題がある場合にのみ行ってください。</span><span class="sxs-lookup"><span data-stu-id="1c399-151">Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="1c399-152">ルーティング イベントの名前。</span><span class="sxs-lookup"><span data-stu-id="1c399-152">The name of the routed event.</span></span> <span data-ttu-id="1c399-153">この名前は、所有者型内で一意である必要があり、<see langword="null" /> または空の文字列にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="1c399-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span></span></param>
        <param name="routingStrategy"><span data-ttu-id="1c399-154">列挙体の値としてのイベントのルーティング方法。</span><span class="sxs-lookup"><span data-stu-id="1c399-154">The routing strategy of the event as a value of the enumeration.</span></span></param>
        <param name="handlerType"><span data-ttu-id="1c399-155">イベント ハンドラーの型。</span><span class="sxs-lookup"><span data-stu-id="1c399-155">The type of the event handler.</span></span> <span data-ttu-id="1c399-156">これはデリゲートの型である必要があり、<see langword="null" /> を指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="1c399-156">This must be a delegate type and cannot be <see langword="null" />.</span></span></param>
        <param name="ownerType"><span data-ttu-id="1c399-157">ルーティング イベントの所有者のクラス型。</span><span class="sxs-lookup"><span data-stu-id="1c399-157">The owner class type of the routed event.</span></span> <span data-ttu-id="1c399-158">これは <see langword="null" /> にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="1c399-158">This cannot be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="1c399-159">新しいルーティング イベントを [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] イベント システムに登録します。</span><span class="sxs-lookup"><span data-stu-id="1c399-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span></span></summary>
        <returns><span data-ttu-id="1c399-160">新しく登録されたルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="1c399-160">The identifier for the newly registered routed event.</span></span> <span data-ttu-id="1c399-161">この識別子のオブジェクトは、クラスに静的フィールドとして格納してイベントにハンドラーをアタッチするメソッドのパラメーターとして使用できるようになりました。</span><span class="sxs-lookup"><span data-stu-id="1c399-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span></span> <span data-ttu-id="1c399-162">ルーティング イベント識別子は、その他のイベント システム API にも使用します。</span><span class="sxs-lookup"><span data-stu-id="1c399-162">The routed event identifier is also used for other event system APIs.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c399-163">このメソッドの戻り値を使用して、一意の <xref:System.Windows.RoutedEvent> 識別子フィールドの静的宣言を作成します。</span><span class="sxs-lookup"><span data-stu-id="1c399-163">Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field.</span></span> <span data-ttu-id="1c399-164">このフィールドは、所有者の種類の中に格納されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="1c399-164">This field should be stored within the owner type.</span></span>  
  
 <span data-ttu-id="1c399-165">ルーティングイベントの名前付け、登録、クラス内での公開の方法には、多くの規則とベストプラクティスがあります。</span><span class="sxs-lookup"><span data-stu-id="1c399-165">There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</span></span> <span data-ttu-id="1c399-166">詳細については、「[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1c399-166">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
