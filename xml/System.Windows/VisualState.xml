<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59734008e834438902a9aa04bb5ef565dbb28455" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83947958" /></Metadata><TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualState = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コントロールが特定の状態のときの外観を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールが特定の状態にある場合のコントロールの外観を指定 <xref:System.Windows.VisualState>。 たとえば、<xref:System.Windows.Controls.Button> が押されている場合、その境界線は通常とは異なる色になることがあります。  <xref:System.Windows.VisualState> クラスには、コントロールの外観を変更する <xref:System.Windows.VisualState.Storyboard%2A> プロパティがあります。 コントロールが <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> プロパティによって指定された状態になると、<xref:System.Windows.VisualState.Storyboard%2A> が開始されます。 コントロールが状態を終了すると、<xref:System.Windows.VisualState.Storyboard%2A> が停止します。  
  
 <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType> プロパティには <xref:System.Windows.VisualState> オブジェクトが含まれています。 <xref:System.Windows.VisualStateGroup> オブジェクトは <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> 添付プロパティに追加されます。これは <xref:System.Windows.FrameworkElement>ので定義されています。 <xref:System.Windows.VisualState> オブジェクトを任意の <xref:System.Windows.FrameworkElement>に追加できますが、通常は <xref:System.Windows.Controls.Control>の <xref:System.Windows.Controls.ControlTemplate> で使用されます。 既存のコントロールの <xref:System.Windows.Controls.ControlTemplate> と <xref:System.Windows.VisualState> オブジェクトを作成する方法の詳細については、「 [ControlTemplate を作成して既存のコントロールの外観をカスタマイズ](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)する」を参照してください。 <xref:System.Windows.Controls.ControlTemplate>の外部で <xref:System.Windows.VisualState> オブジェクトを使用する例については、<xref:System.Windows.VisualStateManager> クラスを参照してください。  
  
   
  
## Examples  
 次の例では、`CommonStates` と呼ばれる <xref:System.Windows.Controls.Button> の <xref:System.Windows.Controls.ControlTemplate> に <xref:System.Windows.VisualStateGroup> を作成し、状態、<xref:System.Windows.VisualState>、`Normal`、および `Pressed`に対して `MouseOver`オブジェクトを追加します。 <xref:System.Windows.Controls.Button> は、`CommonStates`<xref:System.Windows.VisualStateGroup>内の `Disabled` と呼ばれる状態も定義しますが、この例では簡潔にするために省略しています。 全体の例については、「 [ControlTemplate を作成して既存のコントロールの外観をカスタマイズ](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)する」を参照してください。  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.VisualState" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualState.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.VisualState" /> の名前を取得または設定します。</summary>
        <value><see cref="T:System.Windows.VisualState" /> の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素の表示状態を指定するには、<xref:System.Windows.VisualState> の <xref:System.Windows.VisualState.Name%2A> を <xref:System.Windows.VisualStateManager>に渡します。  
  
 <xref:System.Windows.Controls.Control> が <xref:System.Windows.Controls.ControlTemplate>で <xref:System.Windows.VisualStateManager> を使用する場合、コントロールの作成者は、<xref:System.Windows.Controls.ControlTemplate> をクラスシグネチャに配置することによって、その <xref:System.Windows.TemplateVisualStateAttribute> でどの <xref:System.Windows.VisualState> オブジェクトを検索する必要があるかを指定する必要があります。 <xref:System.Windows.Controls.ControlTemplate> 作成者は、新しい <xref:System.Windows.VisualState> オブジェクトを定義し、<xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType> プロパティによって指定された値に <xref:System.Windows.VisualState.Name%2A> プロパティを設定します。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]に含まれているコントロールの表示状態の名前を確認するには、「[コントロールのスタイルとテンプレート](/dotnet/framework/wpf/controls/control-styles-and-templates)」を参照してください。 既存のコントロールの <xref:System.Windows.Controls.ControlTemplate> と <xref:System.Windows.VisualState> オブジェクトを作成する方法の詳細については、「 [ControlTemplate を作成して既存のコントロールの外観をカスタマイズ](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)する」を参照してください。  
  
   
  
## Examples  
 次の例では、`CommonStates` と呼ばれる <xref:System.Windows.Controls.Button> の <xref:System.Windows.Controls.ControlTemplate> に <xref:System.Windows.VisualStateGroup> を作成し、状態、<xref:System.Windows.VisualState>、`Normal`、および `Pressed`に対して `MouseOver`オブジェクトを追加します。 <xref:System.Windows.Controls.Button> は、`CommonStates`<xref:System.Windows.VisualStateGroup>内の `Disabled` と呼ばれる状態も定義しますが、この例では簡潔にするために省略しています。 全体の例については、「 [ControlTemplate を作成して既存のコントロールの外観をカスタマイズ](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)する」を参照してください。  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Storyboard : System.Windows.Media.Animation.Storyboard with get, set" Usage="System.Windows.VisualState.Storyboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが <see cref="T:System.Windows.Media.Animation.Storyboard" /> で表される状態のときに、コントロールの外観を定義する <see cref="T:System.Windows.VisualState" /> を取得または設定します。</summary>
        <value>コントロールが <see cref="T:System.Windows.VisualState" /> で表される状態のときに、コントロールの外観を定義するストーリーボード。 既定では、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールが <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> プロパティによって指定された状態になると、<xref:System.Windows.VisualState.Storyboard%2A> が開始されます。 コントロールが状態を終了すると、<xref:System.Windows.VisualState.Storyboard%2A> が停止します。  
  
   
  
## Examples  
 次の例では、1つの <xref:System.Windows.Controls.Grid>を含む <xref:System.Windows.Controls.Button> の単純な <xref:System.Windows.Controls.ControlTemplate> を作成します。  `MouseOver` と呼ばれる <xref:System.Windows.VisualState> には、ユーザーが <xref:System.Windows.Controls.Button>上にマウスを置いたときに、<xref:System.Windows.Controls.Grid> の色を緑から赤に変更するストーリーボードがあります。  `Normal` と呼ばれる <xref:System.Windows.VisualState> は、ユーザーがマウスをボタンの外に移動したときに、<xref:System.Windows.Controls.Grid> が緑色に戻るようにするために用意されています。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
