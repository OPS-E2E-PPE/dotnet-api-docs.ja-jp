<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f55cfb8a8e447b15bdbcd8870fc4290a687cfba" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83453897" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>依存関係プロパティ システムに参加しているオブジェクトを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyObject> クラスを使用すると、多くの派生クラスで [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] プロパティシステムサービスが有効になります。  
  
 プロパティシステムの主な機能は、プロパティの値を計算し、変更された値に関するシステム通知を提供することです。 プロパティシステムに参加するもう1つのキークラスは <xref:System.Windows.DependencyProperty>です。 <xref:System.Windows.DependencyProperty> により、依存関係プロパティをプロパティシステムに登録できるようになります。また、各依存関係プロパティに関する id と情報が提供されます。一方、<xref:System.Windows.DependencyObject> 基底クラスでは、オブジェクトが依存関係プロパティを使用できるようになります。  
  
 <xref:System.Windows.DependencyObject> のサービスと特性は次のとおりです。  
  
-   依存関係プロパティのホストサポート。 <xref:System.Windows.DependencyProperty.Register%2A> メソッドを呼び出し、メソッドの戻り値をパブリックな静的フィールドとしてクラスに格納することによって、依存関係プロパティを登録します。  
  
-   添付プロパティのホスティングサポート。 添付プロパティを登録するには、<xref:System.Windows.DependencyProperty.RegisterAttached%2A> メソッドを呼び出し、メソッドの戻り値をパブリックな静的読み取り専用フィールドとしてクラスに格納します。 (追加のメンバー要件もあります。これは、添付プロパティの [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 固有の実装を表すことに注意してください。 詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。添付プロパティは、<xref:System.Windows.DependencyObject>から派生した任意のクラスで設定できます。  
  
-   <xref:System.Windows.DependencyObject>に存在する依存関係プロパティの値のユーティリティメソッドを取得、設定、およびクリアします。  
  
-   メタデータ、強制値のサポート、プロパティの変更通知、および依存関係プロパティまたは添付プロパティのコールバックのオーバーライド。 また、<xref:System.Windows.DependencyObject> クラスは、依存関係プロパティの所有者ごとのプロパティのメタデータを容易にします。  
  
-   <xref:System.Windows.ContentElement>、<xref:System.Windows.Freezable>、または <xref:System.Windows.Media.Visual>から派生したクラスの共通の基本クラス。 (<xref:System.Windows.UIElement>、もう1つの基本要素クラスには、<xref:System.Windows.Media.Visual>を含むクラス階層があります)。  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.DependencyObject> から派生し、新しい抽象クラスを作成します。 次に、クラスは添付プロパティを登録し、添付プロパティのサポートメンバーを含めます。  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.DependencyObject" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>プロパティのローカル値をクリアします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><see cref="T:System.Windows.DependencyProperty" /> オブジェクト参照によって識別される、消去対象の依存関係プロパティ。</param>
        <summary>プロパティのローカル値をクリアします。 クリアするプロパティは <see cref="T:System.Windows.DependencyProperty" /> 識別子で指定されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyObject.ClearValue%2A> を呼び出すことによってプロパティ値をクリアしても、依存関係プロパティのメタデータで指定されている既定値に依存関係プロパティが付与されるとは限りません。 プロパティをクリアすると、適用されている可能性があるすべてのローカル値が明示的にクリアされます。 詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、オブジェクトに対してローカル値が設定されているすべてのプロパティを反復処理し、<xref:System.Windows.DependencyObject.ClearValue%2A> を呼び出して、各プロパティの値をクリアします。  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">シールされている <see cref="T:System.Windows.DependencyObject" /> で <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> を呼び出そうとしました。</exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">消去する依存関係プロパティのキー。</param>
        <summary>読み取り専用プロパティのローカル値を消去します。 消去するプロパティは、<see cref="T:System.Windows.DependencyPropertyKey" /> で指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> は、プロパティシステム操作の読み取り専用の依存関係プロパティを識別します。 読み取り専用の依存関係プロパティを定義するクラスでは、このキーをパブリックアクセスで公開しないでください。 公開されたキーは、<xref:System.Windows.DependencyObject.ClearValue%2A> や <xref:System.Windows.DependencyObject.SetValue%2A> などのメソッドが、キーを参照するクラスまたはアセンブリの外部で呼び出された場合に、プロパティの読み取り専用の文字を否定するパブリックコードパスを提供します。  
  
 <xref:System.Windows.DependencyObject.ClearValue%2A> を呼び出すことによってプロパティ値をクリアしても、依存関係プロパティのメタデータで指定されている既定値に依存関係プロパティが付与されるとは限りません。 値をクリアすると、適用されている可能性があるローカル値のみが明示的にクリアされます。 詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">シールされている <see cref="T:System.Windows.DependencyObject" /> で <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> を呼び出そうとしました。</exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">強制する依存関係プロパティの識別子。</param>
        <summary>指定した依存関係プロパティの値を強制します。 これは、呼び出し元の <see cref="T:System.Windows.DependencyObject" /> の依存関係プロパティのプロパティ メタデータで指定されている <see cref="T:System.Windows.CoerceValueCallback" /> 関数を呼び出すことによって実現されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依存関係プロパティの <xref:System.Windows.CoerceValueCallback> は、<xref:System.Windows.DependencyObject.CoerceValue%2A>を呼び出すことによって明示的に呼び出されるだけでなく、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステムによって依存関係プロパティの値が再評価されるたびに、内部的に呼び出されます。  
  
 <xref:System.Windows.DependencyObject.CoerceValue%2A> メソッドを呼び出すと、最終的には、指定したプロパティの強制値コールバックが呼び出されます。 通常、<xref:System.Windows.DependencyObject.CoerceValue%2A> を呼び出すのは、強制値のコールバックが存在することがわかっている場合と、コールバックの強制型変換の条件がわかっている場合に限られます。  
  
 <xref:System.Windows.DependencyObject.CoerceValue%2A> を呼び出す最も一般的なシナリオは、依存する方法で互いの値に影響を与える関連プロパティのクラス処理またはプロパティ変更コールバック内にあります。 詳しくは、「[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、同じクラスの異なる依存関係プロパティの <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> として使用される <xref:System.Windows.PropertyChangedCallback> の実装内で <xref:System.Windows.DependencyObject.CoerceValue%2A> を呼び出します。 これは、依存関係プロパティ間の真の値の依存関係を導入するための一般的なパターンです。  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定した <paramref name="dp" /> またはその値が無効であるか、存在しません。</exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型をラップする <see cref="T:System.Windows.DependencyObjectType" /> を取得します。</summary>
        <value>このインスタンスの [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型をラップする <see cref="T:System.Windows.DependencyObjectType" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、メソッドから返されるオブジェクトの戻り値の型が <xref:System.Windows.DependencyObject> であり、その型に応じてプロパティシステム固有の操作を実行する場合に便利です。 たとえば、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型ではなく <xref:System.Windows.DependencyObjectType> を使用して <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> を呼び出す方が効率的です。 <xref:System.Windows.DependencyObjectType> より高速な検索が容易になります。  
  
   
  
## Examples  
 次の擬似コード例では、追加の派生クラスが `MyCustom` 依存関係プロパティの既定値を変更する可能性があることを `MySubClass` ます。 クラスは、コンストラクターが派生クラス instantiator として使用されるたびに、<xref:System.Windows.DependencyObjectType> 値に対してポリモーフィズムを利用することで、実際の派生クラスを決定できるパラメーターなしのコンストラクターを実装します。  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較する対象の <see cref="T:System.Windows.DependencyObject" />。</param>
        <summary>指定した <see cref="T:System.Windows.DependencyObject" /> が現在の <see cref="T:System.Windows.DependencyObject" /> と等しいかどうかを判断します。</summary>
        <returns>2 つのインスタンスが同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装は参照の等価性のみを持ち、含まれるプロパティの値の等価性の評価を試行しません。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="T:System.Windows.DependencyObject" /> は、<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> と <see cref="M:System.Windows.DependencyObject.GetHashCode" />の2つの基本的な <see cref="T:System.Object" /> メソッドをオーバーライドしてシールします。 オーバーライドは <see cref="T:System.Object" /> の実装を呼び出します。これにより、オブジェクトの等価性が得られます。 これらの意図的なオーバーライドの目的は、派生クラスが <see cref="T:System.Windows.DependencyObject" />の値の等価性を定義しないようにすることです。 <see cref="T:System.Windows.DependencyObject" /> とその依存関係プロパティの innate プロパティの値が変化するため、<see cref="T:System.Windows.DependencyObject" /> の値等号は正確ではありません。 これには、データバインディングや [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステムなどの基本的な [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 機能が含まれます。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.DependencyObject" /> のハッシュ コードを取得します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>
            <see cref="T:System.Windows.DependencyObject" /> は、<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> と <see cref="M:System.Windows.DependencyObject.GetHashCode" />の2つの <see cref="T:System.Object" /> メソッドをオーバーライドしてシールします。 オーバーライドは <see cref="T:System.Object" /> の実装を呼び出します。これにより、オブジェクトの等価性が得られます。 これらの意図的なオーバーライドの目的は、派生クラスが <see cref="T:System.Windows.DependencyObject" />の値の等価性を定義しないようにすることです。 <see cref="T:System.Windows.DependencyObject" /> とその依存関係プロパティの innate プロパティの値が変化するため、<see cref="T:System.Windows.DependencyObject" /> の値等号は正確ではありません。 これには、データバインディングや [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステムなどの基本的な [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 機能が含まれます。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>どの依存関係プロパティがこの <see cref="T:System.Windows.DependencyObject" /> 上にローカルに設定された値を持つかを確認するための、専用の列挙子を作成します。</summary>
        <returns>専用のローカル値列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *ローカル値*は、プロパティシステムの他の側面とは対照的に、<xref:System.Windows.DependencyObject.SetValue%2A>によって設定された依存関係プロパティの値です。  
  
 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> を呼び出すことによって取得された <xref:System.Windows.LocalValueEnumerator> は、<xref:System.Windows.DependencyObject> インスタンスにローカルに設定された値を持つプロパティを列挙するために使用できます。 このようなプロパティは、列挙子で <xref:System.Windows.LocalValueEntry> オブジェクトによって表されます。このオブジェクトには、特定の <xref:System.Windows.DependencyProperty> とその値を参照するプロパティがあります。 ローカルに設定された値を列挙するこの手法は、最適化やローカル値のその他の処理に使用できます。たとえば、クリアされた場合に、<xref:System.Windows.DependencyObject> のプロパティ値が変更されるかどうかを判断するために使用できます。  
  
> [!IMPORTANT]
>  返される <xref:System.Windows.LocalValueEnumerator> には、読み取り専用の依存関係プロパティ、またはプロパティシステムによって値が計算される依存関係プロパティの <xref:System.Windows.LocalValueEntry> レコードが含まれている場合があります。 たとえば、レイアウトによって幅が確立された visual framework 要素は、<xref:System.Windows.FrameworkElement.ActualWidth%2A>のローカル値を報告します。 リセットのためにローカル値を取得している場合は、各 <xref:System.Windows.LocalValueEntry> のプロパティ識別子の <xref:System.Windows.DependencyProperty.ReadOnly%2A> 値を確認し、該当する <xref:System.Windows.DependencyProperty> が読み取り専用ではないことを確認します。  
  
   
  
## Examples  
 次の例では、オブジェクトに対してローカル値が設定されているすべてのプロパティを反復処理し、<xref:System.Windows.DependencyObject.ClearValue%2A> を呼び出して、各プロパティの値をクリアします。  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">値を取得するプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
        <summary><see cref="T:System.Windows.DependencyObject" /> のこのインスタンスにある依存関係プロパティの現在の有効値を返します。</summary>
        <returns>現在の有効値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *有効値*は、プロパティシステムによって、値を要求している任意の呼び出し元に対して返されるプロパティの値です。 有効な値は、プロパティシステムによって、プロパティシステム値の優先順位に含まれるすべての入力が評価された結果です。 これには、強制変換とアニメーションが含まれます。 詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。  
  
 このメソッドは <xref:System.Windows.DependencyProperty.UnsetValue>を返しません。 <xref:System.Windows.DependencyProperty.UnsetValue> は、さまざまな容量で内部的に使用されるプロパティシステムの sentinel 値であり、強制型コールバックによって公開されることもあります。  
  
 プロパティの型が不明な場合は、要求された依存関係プロパティの識別子に対してクエリを実行し、戻り値を変換できる特定の <xref:System.Windows.DependencyProperty.PropertyType%2A> があるかどうかを判断できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定された <paramref name="dp" /> またはその値が無効か、指定された <paramref name="dp" /> が存在しません。</exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">無効にするプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
        <summary>指定した依存関係プロパティの有効値を再評価します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyObject.InvalidateProperty%2A>を呼び出すと、その依存関係プロパティに対して登録されている関連する <xref:System.Windows.CoerceValueCallback> または <xref:System.Windows.PropertyChangedCallback> 関数が呼び出される可能性があります。  
  
 ローカル値が設定されているプロパティで <xref:System.Windows.DependencyObject.InvalidateProperty%2A> を呼び出すことはできません。ローカル値は、アニメーションを除き、他のプロパティシステム入力よりも優先されるためです。 ただし、<xref:System.Windows.DependencyObject.ClearValue%2A>を呼び出し、<xref:System.Windows.DependencyObject.InvalidateProperty%2A>を呼び出すこともできます。 詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。  
  
 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> の呼び出しは、多くの依存関係プロパティのシナリオに適用できるとは限りません。 構成要素のいずれかの値が変更されたために依存関係プロパティが無効になった場合、プロパティシステムは、依存関係プロパティを自動的に無効にして再評価します。 ただし、<xref:System.Windows.DependencyObject.InvalidateProperty%2A> が有用な場合もあります。 特に、別の依存関係プロパティの強制値またはプロパティ変更コールバック内で <xref:System.Windows.DependencyObject.InvalidateProperty%2A> を使用できます。 また、<xref:System.Windows.DependencyObject.InvalidateProperty%2A> を使用すると、推奨される <xref:System.ComponentModel.INotifyPropertyChanged> 通知機構を実装できないデータソースに対して、バインドを強制的に再評価することもできます (たとえば、から派生できないデータクラスを使用する場合や、データが静的メンバーである場合など)。  
  
   
  
## Examples  
 次の例では、無効化されたプロパティの計算に関係するプロパティが変更されるたびに、カスタムプロパティの <xref:System.Windows.DependencyObject.InvalidateProperty%2A> を呼び出します。 これは、<xref:System.Windows.DependencyObject.CoerceValue%2A> メソッドを呼び出すための別の方法です。これは、プロパティを無効にすると、登録されている <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>も呼び出されるためです。  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスが現在シールされている (読み取り専用である) かどうかを示す値を取得します。</summary>
        <value>このインスタンスがシールされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値は内部的に設定されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">関心のある依存関係プロパティの識別子、そのタイプのプロパティ メタデータ、新旧の値を含むイベント データ。</param>
        <summary>この <see cref="T:System.Windows.DependencyObject" /> の依存関係プロパティの有効値が更新された場合に必ず呼び出されます。 変更された特定の依存関係プロパティは、イベント データで報告されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、通常、個々のプロパティの変更を検出したり、ケースごとにプロパティの無効化を実行するためのものではありません。 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> は、プロパティの広範な分類に関する特定の情報がわかっている場合に、一般的な無効化パターンを変更することを意図しています。 たとえば、<xref:System.Windows.Freezable> の変更は、<xref:System.Windows.Freezable>の値の型が変更されたり、サブプロパティであったりする可能性があります。この場合、変更は他の <xref:System.Windows.Freezable> 参照内にあります。 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> の <xref:System.Windows.Freezable> のオーバーライド実装では、内部情報を使用してプロパティがサブプロパティであるかどうかを判断し、どちらの場合にも適切な基本クラスのロジックを提供します。  
  
 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> は、オブジェクトの有効期間中に何度も呼び出される可能性があります。 したがって、特定のプロパティのメタデータをオーバーライドし、個々のプロパティの <xref:System.Windows.CoerceValueCallback> または <xref:System.Windows.PropertyChangedCallback> 関数をアタッチする場合は、プロパティシステム全体のパフォーマンスを向上させることができます。 ただし、このメソッドは、<xref:System.Windows.DependencyObject> に大量の値に関連する依存関係プロパティが含まれている場合、またはプロパティの無効化の複数の関連するケースに対して再実行する必要があるレンダリング動作などのロジックが含まれている場合に使用します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>常に基本実装を呼び出します。 この操作を行わないと、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステム全体が大幅に無効になり、誤った値が報告されます。</para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">値を取得するプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
        <summary>ローカルの依存関係プロパティの値を返します (存在する場合)。</summary>
        <returns>ローカル値を返します。またはローカル値が設定されていない場合は、sentinel 値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依存関係プロパティの一般的な "get" 操作には、<xref:System.Windows.DependencyObject.GetValue%2A> を使用する必要があります。 <xref:System.Windows.DependencyObject.ReadLocalValue%2A> は、値がローカルに設定されていないさまざまな状況では、有効な値を返しません。  
  
 スタイル、テーマ、テンプレート、メタデータの既定値、またはプロパティ値の継承によって設定された値は、ローカル値とは見なされません。 ただし、バインディングやその他の式は、評価後にローカル値と見なされます。  
  
 ローカル値が設定されていない場合、このメソッドは <xref:System.Windows.DependencyProperty.UnsetValue>を返します。  
  
 戻り値が <xref:System.Windows.DependencyProperty.UnsetValue>以外の場合は、要求された依存関係プロパティのメタデータを照会して、戻り値を変換できるより具体的な型があるかどうかを判断できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dp">設定する依存関係プロパティの識別子。</param>
        <param name="value">新しいローカル値。</param>
        <summary>依存関係プロパティ値のソースを変更せずにその値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アプリケーションで宣言されたプロパティの使用を無効にせずに、独自のプロパティのいずれかの値をプログラムで設定するコンポーネントによって使用されます。 <xref:System.Windows.DependencyObject.SetCurrentValue%2A> メソッドはプロパティの有効値を変更しますが、既存のトリガー、データバインディング、およびスタイルは引き続き機能します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">読み取り専用の依存関係プロパティ、またはシールされている <see cref="T:System.Windows.DependencyObject" /> 上のプロパティを変更しようとしました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> が、<paramref name="dp" /> プロパティに登録されている正しい型ではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ローカルの依存関係プロパティの値を設定します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">設定する依存関係プロパティの識別子。</param>
        <param name="value">新しいローカル値。</param>
        <summary>依存関係プロパティ識別子を指定して、該当する依存関係プロパティのローカル値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された型が、最初に登録された依存関係プロパティに対して宣言されている型と一致しない場合、例外がスローされます。 `value` パラメーターは、常に適切な型として指定する必要があります。  
  
 例外条件は、設定される依存関係プロパティの依存関係プロパティ識別子に存在する <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> コールバックによって影響を受ける可能性があります。 それ以外の場合、指定された値が一般的な型チェックの条件を満たさない可能性があります (たとえば、ネイティブ型が Double 型の場合に文字列を渡すなど)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">読み取り専用の依存関係プロパティ、またはシールされている <see cref="T:System.Windows.DependencyObject" /> 上のプロパティを変更しようとしました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> が、<paramref name="dp" /> プロパティに登録されている正しい型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">設定するプロパティの <see cref="T:System.Windows.DependencyPropertyKey" /> 識別子。</param>
        <param name="value">新しいローカル値。</param>
        <summary>依存関係プロパティの <see cref="T:System.Windows.DependencyPropertyKey" /> 識別子で指定した読み取り専用の依存関係プロパティのローカル値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この署名は、通常、カスタムクラスで定義されている読み取り専用の依存関係プロパティの値を設定するときに使用されます。 通常、<xref:System.Windows.DependencyObject.SetValue%2A> はその依存関係プロパティを登録した型からのみ呼び出され、依存関係プロパティに対して決定された値を提供する内部ロジックを実装します。 詳しくは、「[読み取り専用の依存関係プロパティ](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)」をご覧ください。  
  
 指定された型が、最初に登録された依存関係プロパティに対して宣言されている型と一致しない場合、例外がスローされます。 `value` パラメーターは、常に適切な型として指定する必要があります。 例外条件は、設定される依存関係プロパティの依存関係プロパティ識別子に存在する <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> コールバックによって影響を受ける可能性があります。  
  
   
  
## Examples  
 次の例では、読み取り専用の依存関係プロパティと、プロパティのコンシューマーに対して必要な読み取り専用の公開を提供する `public static readonly` <xref:System.Windows.DependencyProperty> と、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] ラッパーの get アクセサーを定義します。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">シリアル化する必要がある依存関係プロパティの識別子。</param>
        <summary>シリアル化プロセスが、指定された依存関係プロパティの値をシリアル化する必要があるかどうかを示す値を返します。</summary>
        <returns>指定された依存関係プロパティの値をシリアル化する必要がある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の実装は、依存関係プロパティに <xref:System.Windows.DependencyObject>で設定されたローカル値があるすべての場合に `true` を返します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このメソッドのオーバーライドでは、特定の依存関係プロパティが異なる方法で処理される可能性があります。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
