<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="05c1999400ced5386fbbdc6ab31ed931a6bd60b0" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73330392" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ea384-101">*弱いイベント パターン*で使用されるイベント マネージャーの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="ea384-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span></span> <span data-ttu-id="ea384-102">このマネージャーは、WeakEvent パターンを使用するイベント (またはコールバック) 用のリスナーを追加または削除します。</span><span class="sxs-lookup"><span data-stu-id="ea384-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-103">イベントリスナーに依存しないオブジェクトの有効期間がイベントソースにある場合は、通常、弱いイベントパターンを使用します。</span><span class="sxs-lookup"><span data-stu-id="ea384-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="ea384-104"><xref:System.Windows.WeakEventManager> の中心的なイベントディスパッチ機能を使用すると、ソースオブジェクトが永続化されていてもリスナーのハンドラーをガベージコレクションできます。</span><span class="sxs-lookup"><span data-stu-id="ea384-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="ea384-105">これに対し、`+=` 演算子を使用して通常のイベントフックを解除すると、切断されている可能性のあるソースにリスナーへの参照が保持されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="ea384-106">これにより、受信側がタイムリーにガベージコレクションを実行できなくなります。</span><span class="sxs-lookup"><span data-stu-id="ea384-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="ea384-107">ソースとリスナー間の有効期間の関係が弱いイベントパターンを使用する必要がある一般的な状況の1つは、データバインディングからの更新イベントの処理です。</span><span class="sxs-lookup"><span data-stu-id="ea384-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="ea384-108">弱いイベントパターンは、コールバックや通常のイベントにも使用できます。</span><span class="sxs-lookup"><span data-stu-id="ea384-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="ea384-109">カスタム <see cref="T:System.Windows.WeakEventManager" />の例については、「[弱いイベントパターン](~/docs/framework/wpf/advanced/weak-event-patterns.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ea384-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span></span></para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea384-110">派生クラスのコンストラクターによって初期化子として使用されると、基本クラスの値を初期化します。</span><span class="sxs-lookup"><span data-stu-id="ea384-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="ea384-111">イベントが処理されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ea384-111">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="ea384-112">イベントが配信するイベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ea384-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span></span></param>
        <summary><span data-ttu-id="ea384-113">管理対象のイベントを各リスナーに配信します。</span><span class="sxs-lookup"><span data-stu-id="ea384-113">Delivers the event being managed to each listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-114">サブクラスの <xref:System.Windows.WeakEventManager.StartListening%2A> および <xref:System.Windows.WeakEventManager.StopListening%2A> 実装によって追加または削除されたイベントハンドラー内から、<xref:System.Windows.WeakEventManager.DeliverEvent%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="ea384-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="ea384-115">クラスの `AddListener` 実装で <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> メソッドを呼び出すと、イベントを受信するリスナーの一覧が基になるコレクションに保持されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="ea384-116">(`AddListener` はインターフェイスまたはクラスコントラクトの一部ではありません。</span><span class="sxs-lookup"><span data-stu-id="ea384-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="ea384-117">`AddListener` は、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> を呼び出し、イベントの弱いイベントパターンリスナーを追加する manager クラスのメソッドに推奨される名前です。)</span><span class="sxs-lookup"><span data-stu-id="ea384-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="ea384-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> は、リスナーを1つのリストに追加します。</span><span class="sxs-lookup"><span data-stu-id="ea384-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="ea384-119">マネージャー実装でイベントごとにリスナーのリストが複数保持されている場合は、<xref:System.Windows.WeakEventManager.DeliverEvent%2A> または <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="ea384-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="ea384-120">代わりに、実装で独自の <xref:System.Windows.WeakEventManager.ListenerList> インスタンスを作成し `AddListener`、適切なリストにリスナーを追加する必要があります。また、<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>を呼び出すことによって、イベントを適切なリスナー一覧に配信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="ea384-121">イベントが処理されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ea384-121">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="ea384-122">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ea384-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <param name="list"><span data-ttu-id="ea384-123">指定された <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</span><span class="sxs-lookup"><span data-stu-id="ea384-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="ea384-124">管理対象のイベントを、指定されたリスト内の各リスナーに配信します。</span><span class="sxs-lookup"><span data-stu-id="ea384-124">Delivers the event being managed to each listener in the provided list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-125">このメソッドは、イベントデータでキャプチャされた情報に基づいて、マネージャー実装が個別のリスナーリストを保持する場合に必要です。</span><span class="sxs-lookup"><span data-stu-id="ea384-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="ea384-126">この高度な手法を使用する場合は、マネージャー実装の一部として個別のリストを作成して維持する必要があります。また、リスナーを特定のリストに追加する方法を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="ea384-127">生のイベントをリッスンするハンドラーの実装は、リストを区別するために使用する条件に基づいて動作し、適切なリストまたはリストにのみイベントを配信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="ea384-128"><see cref="T:System.Windows.WeakEventManager" /> を取得する対象となる型。</span><span class="sxs-lookup"><span data-stu-id="ea384-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span></span></param>
        <summary><span data-ttu-id="ea384-129">指定された型に使用される <see cref="T:System.Windows.WeakEventManager" /> 実装を返します。</span><span class="sxs-lookup"><span data-stu-id="ea384-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span></span></summary>
        <returns><span data-ttu-id="ea384-130">一致する <see cref="T:System.Windows.WeakEventManager" /> 実装。</span><span class="sxs-lookup"><span data-stu-id="ea384-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> の実装では、渡された `managerType`を使用してこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="ea384-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="ea384-132">返された <xref:System.Windows.WeakEventManager> は、どのイベントを受信したか、どのプライベートクラスハンドラーを呼び出すかを決定するための差別化要因として使用されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-133">要求されたソースの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="ea384-133">The zero-based index of the requested source.</span></span></param>
        <summary><span data-ttu-id="ea384-134">指定したソース用に格納されているデータを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ea384-134">Gets or sets the data being stored for the specified source.</span></span></summary>
        <value><span data-ttu-id="ea384-135">マネージャーによってこのソース用に格納されているデータ。</span><span class="sxs-lookup"><span data-stu-id="ea384-135">Data being stored by the manager for this source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-136">派生クラスでは、このインデクサーに格納するデータと型を選択できます。</span><span class="sxs-lookup"><span data-stu-id="ea384-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="ea384-137">通常、これは <xref:System.Windows.WeakEventManager.ListenerList>として実装されます。これは、リスナーへの弱い参照の一覧です。</span><span class="sxs-lookup"><span data-stu-id="ea384-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="ea384-138"><xref:System.Windows.WeakEventManager.ListenerList> の種類に必要な情報が含まれていない場合にのみ、この型を変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="ea384-139">その場合は、基になる型のすべてのクリーンアップが正しく実行されるように、<xref:System.Windows.WeakEventManager.Purge%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea384-140">イベントのリスナーを格納する新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="ea384-140">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="ea384-141">リスナーをイベントに格納する新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ea384-141">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-142">ハンドラー デリゲートがサブスクライブするソース オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ea384-142">The source object that the handler delegate subscribes to.</span></span></param>
        <param name="handler"><span data-ttu-id="ea384-143"><paramref name="source" /> で発生したイベントを処理するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="ea384-143">The delegate that handles the event that is raised by <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="ea384-144">指定されたソースのイベント ハンドラーとして指定したデリゲートを追加します。</span><span class="sxs-lookup"><span data-stu-id="ea384-144">Adds the specified delegate as an event handler of the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-145">リスナーを関連付けるソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-145">The source to attach listeners to.</span></span></param>
        <param name="listener"><span data-ttu-id="ea384-146">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="ea384-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="ea384-147">指定されたリスナーを、管理対象のイベントの指定されたソースに追加します。</span><span class="sxs-lookup"><span data-stu-id="ea384-147">Adds the provided listener to the provided source for the event being managed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-148">マネージャークラス内でこのメソッドを呼び出し、<xref:System.Windows.WeakEventManager> の実装でメソッドを `AddListener` します。</span><span class="sxs-lookup"><span data-stu-id="ea384-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="ea384-149">`AddListener` は、他のクラスが弱いイベントパターンのリスナーを追加できるようにするために、マネージャークラスで定義する静的メソッドの名前として推奨されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="ea384-150">`AddListener` は、リスナーがアタッチされている `source` と `listener` インスタンスの2つのパラメーターを受け取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="ea384-151">`AddListener` の実装では、現在のマネージャーで <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> メソッドを呼び出し、同じ2つのパラメーターを渡します。</span><span class="sxs-lookup"><span data-stu-id="ea384-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="ea384-152">リスナーのリストが以前に空だった場合、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> は、内部的に <xref:System.Windows.WeakEventManager.StartListening%2A> メソッドを呼び出します。これにより、ポリモーフィズムによって特定の <xref:System.Windows.WeakEventManager.StartListening%2A> のオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="ea384-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> は、`source`ごとに1つの内部 <xref:System.Windows.WeakEventManager.ListenerList> にリスナーを追加します。</span><span class="sxs-lookup"><span data-stu-id="ea384-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="ea384-154">マネージャーの実装で、各イベントソースの組み合わせに対して複数のリスナーのリストが保持されている場合は、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="ea384-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="ea384-155">代わりに、実装で独自の <xref:System.Windows.WeakEventManager.ListenerList> インスタンスを作成し `AddListener`、適切なリストにリスナーを追加する必要があります。また、<xref:System.Windows.WeakEventManager.DeliverEvent%2A> メソッドではなく <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> イベントを呼び出すことによって、適切なリスナーリストにイベントを配信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-156">ハンドラーを削除するソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-156">The source to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="ea384-157"><paramref name="source" /> から削除するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="ea384-157">The delegate to remove from <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="ea384-158">指定したソースから、以前追加されたハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="ea384-158">Removes the previously added handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-159">リスナーを削除するソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-159">The source to remove listeners from.</span></span></param>
        <param name="listener"><span data-ttu-id="ea384-160">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="ea384-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="ea384-161">以前に追加されたリスナーを指定されたソースから削除します。</span><span class="sxs-lookup"><span data-stu-id="ea384-161">Removes a previously added listener from the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-162">マネージャークラス内でこのメソッドを呼び出し、<xref:System.Windows.WeakEventManager> の実装でメソッドを `RemoveListener` します。</span><span class="sxs-lookup"><span data-stu-id="ea384-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="ea384-163">`RemoveListener` は、他のクラスが弱いイベントパターンのリスナーを削除できるようにするために、マネージャークラスで定義する静的メソッドの名前として推奨されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="ea384-164">`RemoveListener` は、リスナーが削除される `source` と `listener` クラスの2つのパラメーターを受け取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="ea384-165">`RemoveListener` の実装では、現在のマネージャーで <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> メソッドを呼び出し、同じ2つのパラメーターを渡します。</span><span class="sxs-lookup"><span data-stu-id="ea384-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="ea384-166"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> の呼び出しによってリスト内の最後のリスナーが削除された場合、<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> は内部的に <xref:System.Windows.WeakEventManager.StopListening%2A> メソッドを呼び出します。これにより、ポリモーフィズムによって特定の <xref:System.Windows.WeakEventManager.StopListening%2A> オーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="ea384-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> は `source`ごとに1つの内部 <xref:System.Windows.WeakEventManager.ListenerList> からリスナーを削除します。</span><span class="sxs-lookup"><span data-stu-id="ea384-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="ea384-168">マネージャーの実装で、各イベントソースの組み合わせに対して複数のリスナーのリストが保持されている場合は、<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="ea384-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="ea384-169">代わりに、実装で独自の <xref:System.Windows.WeakEventManager.ListenerList> インスタンスを作成し `RemoveListener`、適切なリストからリスナーを削除する必要があります。また、<xref:System.Windows.WeakEventManager.DeliverEvent%2A> メソッドの代わりに <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> メソッドを呼び出すことによって、適切なリスナーリストにイベントを配信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-170">リッスンされているイベントのソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-170">The source for events being listened to.</span></span></param>
        <param name="data"><span data-ttu-id="ea384-171">チェックするデータ。</span><span class="sxs-lookup"><span data-stu-id="ea384-171">The data to check.</span></span> <span data-ttu-id="ea384-172">このオブジェクトは、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> 実装であることが求められます。</span><span class="sxs-lookup"><span data-stu-id="ea384-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="ea384-173"><paramref name="source" /> のリッスンを中止し、すべてのエントリを <paramref name="data" /> から完全に削除する場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ea384-173"><see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</span></span></param>
        <summary><span data-ttu-id="ea384-174">指定されたソースのデータ リストから、アクティブでないリスナー エントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="ea384-174">Removes inactive listener entries from the data list for the provided source.</span></span> <span data-ttu-id="ea384-175">いくつかのエントリが実際にリストから削除された場合は、<see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="ea384-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span></span></summary>
        <returns><span data-ttu-id="ea384-176">一部のエントリが実際に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ea384-176"><see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-177"><xref:System.Windows.WeakEventManager.Purge%2A> メソッドには、データが <xref:System.Windows.WeakEventManager.ListenerList>のときにすべてのエントリを削除する既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ea384-178"><see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> の基になる型が <see cref="T:System.Windows.WeakEventManager.ListenerList" />以外のものである場合、または <see cref="T:System.Windows.WeakEventManager.ListenerList" />を超えるデータが含まれている場合は、<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span></span> <span data-ttu-id="ea384-179">オーバーライドでは、[代替型項目] の一覧の消去動作を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-179">The override should provide purge behavior for the alternate type items list.</span></span> <span data-ttu-id="ea384-180">通常、オーバーライドは、基本実装を呼び出さずに動作を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-180">Generally, the override should provide behavior without calling the base implementation.</span></span> <span data-ttu-id="ea384-181">特定の <see cref="T:System.Windows.WeakEventManager.ListenerList" /> をクリアする必要がある場合は、<see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="ea384-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea384-182">基になるデータ テーブルで読み取りロックを確立し、<see cref="T:System.IDisposable" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="ea384-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="ea384-183"><see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ea384-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-184">派生クラスでは、<xref:System.Windows.WeakEventManager.Item%2A> に格納されているテーブルに対するクエリは、常に `using (ReadLock) { ... }` の句内で行われる必要があります。ただし、既に書き込みロック内にあるクエリは除きます。</span><span class="sxs-lookup"><span data-stu-id="ea384-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="ea384-185">クラスが `source` と `listener`を超えるデータを必要とするより高度な `AddListener` 実装をサポートし、<xref:System.Windows.WeakEventManager.Item%2A> コレクションを使用して追加情報を格納する場合は、これらのクエリが必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="ea384-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-186">リスナー情報を削除するソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-186">The source to remove listener information for.</span></span></param>
        <summary><span data-ttu-id="ea384-187">指定したソースのリスナーをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="ea384-187">Removes all listeners for the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea384-188">基になるリスナー リストに含まれる未使用エントリの削除を、優先順位の低いスレッドで実行するように要求します。</span><span class="sxs-lookup"><span data-stu-id="ea384-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-189"><xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> メソッドを呼び出すことは、`purgeAll` パラメーターを `false`に設定して、現在のマネージャーの一覧にある <xref:System.Windows.WeakEventManager.Purge%2A> メソッドを低いスレッド優先度で呼び出すことに似ています。</span><span class="sxs-lookup"><span data-stu-id="ea384-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="ea384-190">新しいイベント マネージャーを設定する型。</span><span class="sxs-lookup"><span data-stu-id="ea384-190">The type to set the new event manager.</span></span></param>
        <param name="manager"><span data-ttu-id="ea384-191">新しいイベント マネージャー。</span><span class="sxs-lookup"><span data-stu-id="ea384-191">The new event manager.</span></span></param>
        <summary><span data-ttu-id="ea384-192">指定したマネージャーの種類に対する現在のマネージャーを設定します。</span><span class="sxs-lookup"><span data-stu-id="ea384-192">Sets the current manager for the specified manager type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-193"><xref:System.Windows.WeakEventManager.SetCurrentManager%2A> メソッドを呼び出して、<xref:System.Windows.WeakEventManager> の実装で `CurrentManager` プロパティの呼び出しによって必要とされる場合は、マネージャーを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ea384-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-194">リッスンを開始するソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-194">The source to begin listening on.</span></span></param>
        <summary><span data-ttu-id="ea384-195">派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="ea384-195">When overridden in a derived class, starts listening for the event being managed.</span></span> <span data-ttu-id="ea384-196"><see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> メソッドが初めて呼び出された後、マネージャーは、提供されたソースからの関連イベントを処理するたびに、<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> または <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> を呼び出している状態になる必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ea384-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> のオーバーライドでは、指定された <paramref name="source" />にハンドラーを追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span></span> <span data-ttu-id="ea384-198">ハンドラーは、マネージャー自体によって宣言されます。</span><span class="sxs-lookup"><span data-stu-id="ea384-198">The handler is declared by the manager itself.</span></span> <span data-ttu-id="ea384-199">クラスハンドラーをパブリックにすることはできません。また、クラスハンドラーは、マネージイベントに応答している場合にのみ呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-199">The class handler should not be public, and it should only be called in response to the event being managed.</span></span> <span data-ttu-id="ea384-200">クラスハンドラーは、<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> メソッドまたは <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> メソッドを適切に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ea384-201">リッスンを停止するソース。</span><span class="sxs-lookup"><span data-stu-id="ea384-201">The source to stop listening on.</span></span></param>
        <summary><span data-ttu-id="ea384-202">派生クラスでオーバーライドされると、指定されたソースで管理対象のイベントのリッスンを停止します。</span><span class="sxs-lookup"><span data-stu-id="ea384-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ea384-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> の実装では、<see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> メソッドによって追加されたクラスハンドラーを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span></span> <span data-ttu-id="ea384-204">リスナーを削除しても、リスナーの一覧はクリアされません。</span><span class="sxs-lookup"><span data-stu-id="ea384-204">Removing a listener should not clear the listener list.</span></span> <span data-ttu-id="ea384-205">代わりに、クラスハンドラーを (一時的に) 切断する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span></span> <span data-ttu-id="ea384-206"><see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> メソッドなど、<paramref name="purgeAll" /> パラメーターを <see langword="true" />に設定して、リスト全体をクリアするための他のメソッドも使用できます。</span><span class="sxs-lookup"><span data-stu-id="ea384-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea384-207">基になるデータ テーブルで書き込みロックを確立し、<see cref="T:System.IDisposable" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="ea384-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="ea384-208"><see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ea384-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea384-209">派生クラスでは、基になるデータテーブルに対するすべての変更が `using (WriteLock) { ... }` 句内で行われる必要があります。</span><span class="sxs-lookup"><span data-stu-id="ea384-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="ea384-210">これらの変更は、クラスが `source` と `listener`を超えるデータを必要とするより高度な `AddListener` 実装をサポートし、<xref:System.Windows.WeakEventManager.Item%2A> コレクションを使用して追加の情報を格納する場合に必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="ea384-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>
