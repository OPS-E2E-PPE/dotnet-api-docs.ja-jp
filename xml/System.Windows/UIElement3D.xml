<Type Name="UIElement3D" FullName="System.Windows.UIElement3D">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2be4c3605710c694753de024829eaba3e8a08c94" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75180020" /></Metadata><TypeSignature Language="C#" Value="public abstract class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract UIElement3D extends System.Windows.Media.Media3D.Visual3D implements class System.Windows.IInputElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement3D" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UIElement3D&#xA;Inherits Visual3D&#xA;Implements IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement3D abstract : System::Windows::Media::Media3D::Visual3D, System::Windows::IInputElement" />
  <TypeSignature Language="F#" Value="type UIElement3D = class&#xA;    inherit Visual3D&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Media3D.Visual3D</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2a269-101"><see cref="T:System.Windows.UIElement3D" /> は、Windows Presentation Foundation (WPF) の要素および基本表示特性における WPF コア レベル実装構築の基底クラスです。</span><span class="sxs-lookup"><span data-stu-id="2a269-101"><see cref="T:System.Windows.UIElement3D" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-102"><xref:System.Windows.UIElement3D> は、特定の3D 要素を表すクラスを派生させることができる抽象基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="2a269-102"><xref:System.Windows.UIElement3D> is an abstract base class from which you can derive classes to represent specific 3D elements.</span></span>  
  
 <span data-ttu-id="2a269-103">一般に、3D 要素の入力、フォーカス、およびイベントの動作の多くは、<xref:System.Windows.UIElement3D> クラスで定義されています。</span><span class="sxs-lookup"><span data-stu-id="2a269-103">Much of the input, focusing, and eventing behavior for 3D elements in general is defined in the <xref:System.Windows.UIElement3D> class.</span></span> <span data-ttu-id="2a269-104">これには、キーボード、マウス、およびスタイラスの入力のイベントと、関連するステータスプロパティが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-104">This includes the events for keyboard, mouse, and stylus input, and related status properties.</span></span> <span data-ttu-id="2a269-105">これらのイベントの多くはルーティングイベントであり、入力関連のイベントの多くには、バブルルーティングバージョンと、イベントのトンネリングバージョンの両方があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="2a269-106">これらのペアのイベントは、通常、コントロールの作成者にとって最も関心のあるイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="2a269-107"><xref:System.Windows.UIElement3D> には、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] イベントモデルに関連する Api も含まれます。これには、要素インスタンスから供給される指定されたルーティングイベントを発生させることができるメソッドも含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-107"><xref:System.Windows.UIElement3D> also includes APIs that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="2a269-108"><xref:System.Windows.UIElement3D> には、<xref:System.Windows.UIElement3D> クラスで特に定義された次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-108">A <xref:System.Windows.UIElement3D> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement3D> class:</span></span>  
  
-   <span data-ttu-id="2a269-109">ユーザー入力に応答できます (イベントのルーティングまたはコマンドのルーティングを使用して入力が送信される場所の制御を含む)。</span><span class="sxs-lookup"><span data-stu-id="2a269-109">Can respond to user input (including control of where input is sent via handling of event routing or routing of commands).</span></span>  
  
-   <span data-ttu-id="2a269-110">は、論理要素ツリーを介してルートを移動するルーティングイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-110">Can raise routed events that travel a route through the logical element tree.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a269-111"><xref:System.Windows.UIElement3D.Visibility%2A> の状態は、その要素によるすべての入力処理に影響します。</span><span class="sxs-lookup"><span data-stu-id="2a269-111"><xref:System.Windows.UIElement3D.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="2a269-112">表示されていない要素は、ヒットテストに関与せず、入力イベントを受け取りません。これは、が表示された場合の要素の境界上にマウスがある場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-112">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds of where the element would be if were visible.</span></span>  
  
 <span data-ttu-id="2a269-113"><xref:System.Windows.UIElement> クラスとは異なり、<xref:System.Windows.UIElement3D> クラスにはレイアウトは含まれません。</span><span class="sxs-lookup"><span data-stu-id="2a269-113">Unlike the <xref:System.Windows.UIElement> class, the <xref:System.Windows.UIElement3D> class does not include layout.</span></span> <span data-ttu-id="2a269-114">したがって、<xref:System.Windows.UIElement3D> クラスには、 **Measure**メソッドまたは**Arrange**メソッドは含まれません。</span><span class="sxs-lookup"><span data-stu-id="2a269-114">Therefore, the <xref:System.Windows.UIElement3D> class does not include **Measure** or **Arrange** methods.</span></span>  
  
 <span data-ttu-id="2a269-115"><xref:System.Windows.UIElement3D> から派生し、<xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A> および <xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A> をオーバーライドすることによって <xref:System.Windows.Media.Media3D.Visual3D> オブジェクトの独自のコレクションを保持するクラスは、新しい <xref:System.Windows.Media.Media3D.Visual3D> オブジェクトを <xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>に渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-115">A class that derives from <xref:System.Windows.UIElement3D> and maintains its own collection of <xref:System.Windows.Media.Media3D.Visual3D> objects by overriding <xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A> and <xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A> must still pass new <xref:System.Windows.Media.Media3D.Visual3D> objects to <xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>.</span></span>  
  
 <span data-ttu-id="2a269-116"><xref:System.Windows.UIElement3D> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-116"><xref:System.Windows.UIElement3D> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-117">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-117">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a269-118">次の例では、<xref:System.Windows.UIElement3D> クラスから派生させて `Sphere` クラスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-118">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="2a269-119">完全なサンプルについては、「 [UIElement3D 球のサンプル](https://go.microsoft.com/fwlink/?LinkID=160044)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-119">For the complete sample, see [UIElement3D Sphere Sample](https://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-120">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-120">Handling Events in 3-D Sample</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIElement3D ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UIElement3D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-121"><see cref="T:System.Windows.UIElement3D" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2a269-121">Initializes a new instance of the <see cref="T:System.Windows.UIElement3D" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-122"><xref:System.Windows.UIElement3D.%23ctor%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-122"><xref:System.Windows.UIElement3D.%23ctor%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-123">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-123">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2a269-124">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-124">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement3D.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="2a269-125">ハンドルするルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="2a269-125">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="2a269-126">ハンドラーの実装に対する参照。</span><span class="sxs-lookup"><span data-stu-id="2a269-126">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="2a269-127">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-127">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-128">同じイベントに対して、例外を発生させることなく同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-128">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="2a269-129">ただし、ハンドラーは実際にはイベントが処理されるときに複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-129">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="2a269-130">そのため、この動作がハンドラーの実装で考慮する必要がある副作用について考えてみてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-130">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="2a269-131">通常、このメソッドを使用して、カスタムルーティングイベントの [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] イベントアクセスパターン用の "add" アクセサーの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-131">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 <span data-ttu-id="2a269-132"><xref:System.Windows.UIElement3D.AddHandler%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-132"><xref:System.Windows.UIElement3D.AddHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-133">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-133">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement3D.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="2a269-134">ハンドルするルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="2a269-134">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="2a269-135">ハンドラーの実装に対する参照。</span><span class="sxs-lookup"><span data-stu-id="2a269-135">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="2a269-136">イベント データ内でルーティング イベントがハンドル済みとしてマークされている場合でも呼び出されるようにハンドラーを登録するには <see langword="true" />。ルーティング イベントが既にハンドル済みとしてマークされている場合はハンドラーを呼び出ないという既定の条件を使用してハンドラーを登録する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-136"><see langword="true" /> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="2a269-137">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-137">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="2a269-138">ルーティング イベントの再処理を機械的に要求しないでください。</span><span class="sxs-lookup"><span data-stu-id="2a269-138">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="2a269-139">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-139">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="2a269-140">イベント ルート上の別の要素により既にハンドル済みとしてマークされているルーティング イベントに対し、指定したハンドラーが呼び出されるようにするには、<paramref name="handledEventsToo" /> を <see langword="true" /> に指定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-140">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-141">低レベルの入力イベントを実用的な方法で処理することは、複雑なタスクです。</span><span class="sxs-lookup"><span data-stu-id="2a269-141">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="2a269-142">多くのコントロールは、特定のイベントが処理済みとしてマークされている動作を実装し、別の直感的なイベントに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="2a269-142">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="2a269-143">一般に、コントロールは、そのための設計目的がある場合にのみ、プラットフォーム入力イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="2a269-143">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="2a269-144">特定のシナリオでは、これらの設計の意図が、入力イベントの特定の処理に必要なものではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-144">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="2a269-145">これらのシナリオでは、`true` のように `handledEventsToo` にハンドラーを登録することが適切です。</span><span class="sxs-lookup"><span data-stu-id="2a269-145">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="2a269-146">ただし、この作業は定期的に行うべきではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-146">But you should not do this routinely.</span></span> <span data-ttu-id="2a269-147">処理された場合でも、すべてのイベントに応答してハンドラーを呼び出すと、独自のアプリケーションイベント処理ロジックが複雑になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-147">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="2a269-148">ハンドラーのロジックが大きくなると、パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-148">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="2a269-149">開発プロセス中に、アプリケーションロジックで処理するイベントを処理する必要がある場合は、既に処理されているイベントのハンドラーのアタッチを予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-149">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="2a269-150">特定のイベント制御の組み合わせのクラス処理動作を回避するためのもう1つの方法は、そのイベントのプレビューを使用することです。</span><span class="sxs-lookup"><span data-stu-id="2a269-150">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="2a269-151">たとえば、<xref:System.Windows.UIElement3D.MouseLeftButtonDown> がクラス処理によって処理済みとしてマークされている場合は、代わりに <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> のハンドラーを追加できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-151">For example, if <xref:System.Windows.UIElement3D.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="2a269-152">同じイベントに対して、例外を発生させることなく同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-152">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="2a269-153">ただし、ハンドラーは実際にはイベントが処理されるときに複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-153">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="2a269-154">そのため、この動作がハンドラーの実装で考慮する必要がある副作用について考えてみてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-154">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="2a269-155">通常、このメソッドを使用して、カスタムルーティングイベントの [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] イベントアクセスパターン用の "add" アクセサーの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-155">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 <span data-ttu-id="2a269-156"><xref:System.Windows.UIElement3D.AddHandler%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-156"><xref:System.Windows.UIElement3D.AddHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-157">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-157">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="2a269-158">ハンドラーの追加先のイベント ルート。</span><span class="sxs-lookup"><span data-stu-id="2a269-158">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="2a269-159">ハンドラーを追加するために使用されるイベント データ。</span><span class="sxs-lookup"><span data-stu-id="2a269-159">The event data that is used to add the handlers.</span></span> <span data-ttu-id="2a269-160">このメソッドは、イベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティを使用してハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2a269-160">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span></span></param>
        <summary><span data-ttu-id="2a269-161">現在の <see cref="T:System.Windows.EventRoute" /> イベント ハンドラー コレクションのハンドラーを、指定した <see cref="T:System.Windows.UIElement3D" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="2a269-161">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement3D" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-162">このメソッドは、<xref:System.Windows.EventRoute>に子要素のハンドラーを追加するために、コンテンツホスト要素 (<xref:System.Windows.IContentHost> を実装する要素またはそれ以外の要素のいずれか) によって使用できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-162">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span>  
  
 <span data-ttu-id="2a269-163"><xref:System.Windows.UIElement3D.AddToEventRoute%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-163"><xref:System.Windows.UIElement3D.AddToEventRoute%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-164">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-164">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement3D.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-165">この要素をドラッグアンドドロップ操作の対象として使用できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-165">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span></span></summary>
        <value><span data-ttu-id="2a269-166">この要素をドラッグアンドドロップ操作の対象として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-166"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-167">既定値は <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="2a269-167">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-168">ドラッグアンドドロップ操作は、既定では有効になっていません。 <xref:System.Windows.UIElement3D.AllowDrop%2A> を `true`に設定して、意図的に有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-168">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement3D.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="2a269-169">この基本設定以外に、ドラッグアンドドロップ動作は完全に実装固有であり、<xref:System.Windows.UIElement3D> またはその他の基本要素クラスでは定義されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-169">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement3D> or any other base element class.</span></span> <span data-ttu-id="2a269-170"><xref:System.Windows.Controls.RichTextBox>などの特定のコントロールには、既定の動作があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-170">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="2a269-171">ドラッグアンドドロップの詳細については、「[ドラッグアンドドロップの概要](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-171">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-172"><xref:System.Windows.UIElement3D.AllowDrop%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-172"><xref:System.Windows.UIElement3D.AllowDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-173">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-173">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-174">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-174">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-175">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-175">Identifier field</span></span>|<xref:System.Windows.UIElement3D.AllowDropProperty>|  
|<span data-ttu-id="2a269-176">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-176">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-177">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-177">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-178"><see cref="P:System.Windows.UIElement3D.AllowDrop" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-178">Identifies the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-179"><xref:System.Windows.UIElement3D.AllowDropProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-179"><xref:System.Windows.UIElement3D.AllowDropProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-180">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-180">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-181">少なくとも 1 つのタッチがこの要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-181">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="2a269-182">少なくとも 1 つのタッチがこの要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-182"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-183"><see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-183">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-184">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-184">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="2a269-185">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-185"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-186"><see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-186">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-187">少なくとも 1 つのタッチがこの要素上で押されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-187">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="2a269-188">少なくとも 1 つのタッチがこの要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-188"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-189"><see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-189">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-190">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-190">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="2a269-191">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-191"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-192"><see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-192">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement3D.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-193">この要素にマウスをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="2a269-193">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="2a269-194">マウスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-194"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-195">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-195">To be captured, an element must be enabled.</span></span> <span data-ttu-id="2a269-196"><xref:System.Windows.UIElement3D.CaptureMouse%2A>を呼び出す前に <xref:System.Windows.UIElement3D.IsEnabled%2A> が `true` かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2a269-196">Check whether <xref:System.Windows.UIElement3D.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement3D.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="2a269-197"><xref:System.Windows.UIElement3D.CaptureMouse%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.UIElement3D.IsMouseCaptured%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="2a269-197">If calling <xref:System.Windows.UIElement3D.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="2a269-198"><xref:System.Windows.UIElement3D.CaptureMouse%2A> を呼び出すと `true`が返された場合、<xref:System.Windows.UIElement3D.GotMouseCapture> および <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> イベントが発生し、<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> メソッドが呼び出された要素として報告されたイベントデータが <xref:System.Windows.UIElement3D.CaptureMouse%2A> されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-198">If calling <xref:System.Windows.UIElement3D.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement3D.GotMouseCapture> and <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement3D.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="2a269-199">キャプチャを強制的に実行すると、既存のキャプチャに干渉する可能性があります。特に、ドラッグアンドドロップに関連するキャプチャがマウスで発生する場合です。</span><span class="sxs-lookup"><span data-stu-id="2a269-199">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="2a269-200">すべての要素からマウスキャプチャをクリアするには、`null`として指定された `element` パラメーターを使用して <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2a269-200">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
 <span data-ttu-id="2a269-201"><xref:System.Windows.UIElement3D.CaptureMouse%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-201"><xref:System.Windows.UIElement3D.CaptureMouse%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-202">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-202">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement3D.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-203">この要素にスタイラスをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="2a269-203">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="2a269-204">スタイラスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-204"><see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-205">基になる既定のスタイラスデバイスに基づく既定の実装では、常に `true`が返されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-205">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="2a269-206">ただし、入力システムのデバイスの実装を提供する入力デバイスを拡張する場合は、異なる結果を返す可能性がある別のスタイラスデバイスの実装でシステムを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-206">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="2a269-207">要素は、スタイラスをキャプチャすると、スタイラスが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-207">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="2a269-208">スタイラスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="2a269-208">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="2a269-209">このメソッドを呼び出すと、基になる静的 <xref:System.Windows.Input.Stylus> メソッド <xref:System.Windows.Input.Stylus.Capture%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-209">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="2a269-210">実際のキャプチャ動作は、アクティブなスタイラスデバイス実装によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-210">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="2a269-211">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-211">To be captured, an element must be enabled.</span></span> <span data-ttu-id="2a269-212"><xref:System.Windows.UIElement3D.CaptureStylus%2A>を呼び出す前に <xref:System.Windows.UIElement3D.IsEnabled%2A> が返さ `true` かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2a269-212">Check whether <xref:System.Windows.UIElement3D.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement3D.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="2a269-213"><xref:System.Windows.UIElement3D.CaptureStylus%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.UIElement3D.IsStylusCaptured%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="2a269-213">If calling <xref:System.Windows.UIElement3D.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="2a269-214"><xref:System.Windows.UIElement3D.CaptureStylus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-214"><xref:System.Windows.UIElement3D.CaptureStylus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-215">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-215">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement3D.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="2a269-216">キャプチャの対象となるデバイス。</span><span class="sxs-lookup"><span data-stu-id="2a269-216">The device to capture.</span></span></param>
        <summary><span data-ttu-id="2a269-217">この要素にタッチをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="2a269-217">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="2a269-218">指定したタッチがこの要素にキャプチャされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-218"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-219"><xref:System.Windows.Input.TouchDevice> が現在別の要素にキャプチャされている場合、<xref:System.Windows.UIElement3D.CaptureTouch%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-219"><xref:System.Windows.UIElement3D.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="2a269-220"><xref:System.Windows.UIElement3D.CaptureTouch%2A> が `true`を返す場合、<xref:System.Windows.UIElement3D.GotTouchCapture> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-220">If <xref:System.Windows.UIElement3D.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement3D.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="2a269-221">この要素から1つのタッチのキャプチャを解放するには、<xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A> メソッドを使用して、解放するタッチデバイスを指定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-221">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="2a269-222">この要素からのすべてのタッチを解放するには、<xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2a269-222">To release all touches from this element, use the <xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2a269-223"><paramref name="touchDevice" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-223"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement3D.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-224">この要素に関連付けられている <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-224">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span></span></summary>
        <value><span data-ttu-id="2a269-225">すべての <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="2a269-225">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-226"><xref:System.Windows.Input.CommandBinding> を使用すると、この要素に対して特定のコマンドのコマンド処理を実行し、コマンド、そのイベント、およびこの要素によってアタッチされるハンドラーとの間のリンケージを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-226">A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span></span>  
  
 <span data-ttu-id="2a269-227"><xref:System.Windows.UIElement3D.CommandBindings%2A> コレクションを設定するための一般的な方法として、<xref:System.Windows.Input.CommandManager> メソッドをプログラムによって使用する方法があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-227">Another typical way to populate the <xref:System.Windows.UIElement3D.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
 <span data-ttu-id="2a269-228"><xref:System.Windows.UIElement3D.CommandBindings%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-228"><xref:System.Windows.UIElement3D.CommandBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-229">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-229">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="2a269-230">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="2a269-230">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2a269-231">XAML の値</span><span class="sxs-lookup"><span data-stu-id="2a269-231">XAML Values</span></span>  
 <span data-ttu-id="2a269-232">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="2a269-232">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="2a269-233">1つ以上の <xref:System.Windows.Input.CommandBinding> 要素。</span><span class="sxs-lookup"><span data-stu-id="2a269-233">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="2a269-234">これらのそれぞれには、既知のコマンドに設定された <xref:System.Windows.Input.CommandBinding.Command%2A> 属性と、<xref:System.Windows.Input.CommandBinding.CanExecute> および <xref:System.Windows.Input.CommandBinding.Executed> ハンドラーの実装に対して設定された属性が必要です。</span><span class="sxs-lookup"><span data-stu-id="2a269-234">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="2a269-235">詳細については、「<xref:System.Windows.Input.CommandBinding>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-235">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-236">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-236">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-237">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.DragEnter?displayProperty=nameWithType> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-237">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-238"><xref:System.Windows.UIElement3D.DragEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-238">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-239"><xref:System.Windows.UIElement3D.DragEnter> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-239"><xref:System.Windows.UIElement3D.DragEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-240">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-240">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-241">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-241">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-242">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-242">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragEnterEvent>|  
|<span data-ttu-id="2a269-243">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-243">Routing strategy</span></span>|<span data-ttu-id="2a269-244">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-244">Bubbling</span></span>|  
|<span data-ttu-id="2a269-245">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-245">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-246">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewDragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-246">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="2a269-247">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnDragEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-247">Override <xref:System.Windows.UIElement3D.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-248">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-248">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-249"><see cref="E:System.Windows.UIElement3D.DragEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-249">Identifies the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-250">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-250">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-251">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-251">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-252">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-252">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-253">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-253">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-254">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-254">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-255"><xref:System.Windows.UIElement3D.DragEnterEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-255"><xref:System.Windows.UIElement3D.DragEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-256">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-256">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-257">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-257">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-258">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.DragLeave?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-258">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-259"><xref:System.Windows.UIElement3D.DragLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-259">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-260"><xref:System.Windows.UIElement3D.DragLeave> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-260"><xref:System.Windows.UIElement3D.DragLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-261">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-261">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-262">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-262">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-263">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-263">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragLeaveEvent>|  
|<span data-ttu-id="2a269-264">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-264">Routing strategy</span></span>|<span data-ttu-id="2a269-265">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-265">Bubbling</span></span>|  
|<span data-ttu-id="2a269-266">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-266">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-267">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewDragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-267">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="2a269-268">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnDragLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-268">Override <xref:System.Windows.UIElement3D.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <altmember cref="E:System.Windows.UIElement3D.GiveFeedback" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-269">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-269">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-270"><see cref="E:System.Windows.UIElement3D.DragLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-270">Identifies the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-271">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-271">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-272">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-272">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-273">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-273">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-274">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-274">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-275">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-275">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-276"><xref:System.Windows.UIElement3D.DragLeaveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-276"><xref:System.Windows.UIElement3D.DragLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-277">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-277">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-278">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-278">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-279">このイベントは、要素の境界内でドラッグが発生した場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-279">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="2a269-280">ドラッグが境界の外側で開始された後、内を移動すると、このイベントも発生し、<xref:System.Windows.UIElement3D.DragEnter> および関連するプレビューイベントも発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-280">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement3D.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="2a269-281">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.DragOver?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-281">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-282"><xref:System.Windows.UIElement3D.DragOver> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-282">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-283"><xref:System.Windows.UIElement3D.DragOver> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-283"><xref:System.Windows.UIElement3D.DragOver> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-284">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-284">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-285">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-285">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-286">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-286">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragOverEvent>|  
|<span data-ttu-id="2a269-287">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-287">Routing strategy</span></span>|<span data-ttu-id="2a269-288">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-288">Bubbling</span></span>|  
|<span data-ttu-id="2a269-289">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-289">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-290">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewDragOver>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-290">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="2a269-291">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnDragOver%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-291">Override <xref:System.Windows.UIElement3D.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <altmember cref="E:System.Windows.UIElement3D.Drop" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-292">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-292">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-293"><see cref="E:System.Windows.UIElement3D.DragOver" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-293">Identifies the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-294">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-294">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-295">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-295">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-296">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-296">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-297">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-297">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-298">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-298">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-299"><xref:System.Windows.UIElement3D.DragOverEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-299"><xref:System.Windows.UIElement3D.DragOverEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-300">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-300">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-301">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-301">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-302">このイベントは、このクラスの <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.Drop?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-302">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-303"><xref:System.Windows.UIElement3D.Drop> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-303">Event handlers that are attached to the <xref:System.Windows.UIElement3D.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-304"><xref:System.Windows.UIElement3D.Drop> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-304"><xref:System.Windows.UIElement3D.Drop> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-305">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-305">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-306">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-306">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-307">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-307">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DropEvent>|  
|<span data-ttu-id="2a269-308">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-308">Routing strategy</span></span>|<span data-ttu-id="2a269-309">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-309">Bubbling</span></span>|  
|<span data-ttu-id="2a269-310">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-310">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-311">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewDrop>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-311">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="2a269-312">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnDrop%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-312">Override <xref:System.Windows.UIElement3D.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-313">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-313">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-314"><see cref="E:System.Windows.UIElement3D.Drop" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-314">Identifies the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-315">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-316">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-317">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-318">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-319">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-320"><xref:System.Windows.UIElement3D.DropEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-320"><xref:System.Windows.UIElement3D.DropEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-321">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-321">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement3D.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-322">この要素に論理フォーカスを設定することを試みます。</span><span class="sxs-lookup"><span data-stu-id="2a269-322">Attempts to set the logical focus on this element.</span></span></summary>
        <returns><span data-ttu-id="2a269-323">この要素に論理フォーカスとキーボード フォーカスの両方が設定された場合は <see langword="true" />。論理フォーカスのみが設定された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-323"><see langword="true" /> if both logical and keyboard focus were set to this element; <see langword="false" /> if only logical focus was set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-324">フォーカスを設定できるようにするには、<xref:System.Windows.UIElement3D.Focusable%2A> と <xref:System.Windows.UIElement3D.IsEnabled%2A> を両方とも `true`する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-324">To be focusable, <xref:System.Windows.UIElement3D.Focusable%2A> and <xref:System.Windows.UIElement3D.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="2a269-325">要素がフォーカス可能で有効になっている場合でも、特定のツリー (複合コントロールなど) 内のイベント処理は、フォーカスを許可しないことでプレビューフォーカスイベントに応答する可能性があるため、このメソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-325">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="2a269-326"><xref:System.Windows.UIElement3D.Focus%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> と <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="2a269-326">If calling  <xref:System.Windows.UIElement3D.Focus%2A> returns `true`, <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="2a269-327">関連するプロパティがまだ `true`ていない場合、<xref:System.Windows.UIElement3D.Focus%2A>を呼び出すと、次の1つ以上のイベントが次の順序で発生します。 <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>、<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> (ソースは新しいフォーカスターゲット)、<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>、<xref:System.Windows.UIElement3D.LostKeyboardFocus>、<xref:System.Windows.UIElement3D.GotKeyboardFocus> (ソースは新しいフォーカスターゲット) です。</span><span class="sxs-lookup"><span data-stu-id="2a269-327">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement3D.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement3D.LostKeyboardFocus>, <xref:System.Windows.UIElement3D.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="2a269-328">この呼び出しを成功させるには、アプリケーション内の他の要素が前にフォーカスを持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-328">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
 <span data-ttu-id="2a269-329">一般に、キーボードフォーカスと論理フォーカスという2つの異なる概念が適用されます。これは、常に同一であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="2a269-329">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span> <span data-ttu-id="2a269-330">このメソッドは、論理フォーカスを設定し、さらにキーボードフォーカスを設定しようとします。</span><span class="sxs-lookup"><span data-stu-id="2a269-330">This method sets the logical focus, and also attempts to set the keyboard focus.</span></span> <span data-ttu-id="2a269-331">特にキーボードフォーカスを設定するプログラム的な手段はありません。これは、ユーザーの入力によって発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-331">There is no programmatic means to set keyboard focus specifically, this happens due to user input.</span></span> <span data-ttu-id="2a269-332">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-332">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-333"><xref:System.Windows.UIElement3D.Focus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-333"><xref:System.Windows.UIElement3D.Focus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-334">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-334">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement3D.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-335">要素がフォーカスを得ることができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-335">Gets or sets a value that indicates whether the element can receive focus.</span></span></summary>
        <value><span data-ttu-id="2a269-336">要素がフォーカス可能な場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-336"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="2a269-337">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-337">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-338">フォーカスがある要素のみがキーボード入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-338">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="2a269-339"><xref:System.Windows.UIElement3D.Focusable%2A> は、実際の依存関係プロパティに対する [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] プロパティアクセサーです。</span><span class="sxs-lookup"><span data-stu-id="2a269-339"><xref:System.Windows.UIElement3D.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="2a269-340">この特定の依存関係プロパティは、派生要素クラスでは、明らかに "既定" 値が異なることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-340">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes.</span></span> <span data-ttu-id="2a269-341">これは、通常、次の2つの方法のいずれかで発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-341">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="2a269-342">依存関係プロパティは特定の派生クラスによって継承されますが、その派生クラスは依存関係プロパティのメタデータをオーバーライドし、プロパティの既定値を変更します。</span><span class="sxs-lookup"><span data-stu-id="2a269-342">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
 <span data-ttu-id="2a269-343"><xref:System.Windows.UIElement3D.Focusable%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-343"><xref:System.Windows.UIElement3D.Focusable%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-344">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-344">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-345">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-345">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-346">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-346">Identifier field</span></span>|<xref:System.Windows.UIElement3D.FocusableProperty>|  
|<span data-ttu-id="2a269-347">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-347">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-348">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-348">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-349"><see cref="P:System.Windows.UIElement3D.Focusable" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-349">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-350">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-350">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-351"><xref:System.Windows.UIElement3D.FocusableChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-351"><xref:System.Windows.UIElement3D.FocusableChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-352">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-352">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-353">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-353">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-354"><see cref="P:System.Windows.UIElement3D.Focusable" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-354">Identifies the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-355"><xref:System.Windows.UIElement3D.FocusableProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-355"><xref:System.Windows.UIElement3D.FocusableProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-356">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-356">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="member this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement3D.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-357">派生クラスでオーバーライドされると、ビジュアル親が存在しない場合に、この要素の代替[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] の親を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-357">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="2a269-358">報告する代替の親接続を派生クラスの実装が持つ場合のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a269-358">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-359">このメソッドの既定の仮想実装では、`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-359">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="2a269-360"><xref:System.Windows.FrameworkElement> は、実際の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-360"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="2a269-361">イベントのルーティングには、代替の親が使用されます。これにより、要素は、ビジュアルツリーを、標準の親にルーティングするための標準パターンとは別の方法でルーティングされるようにします。ルーティング戦略をプレビューします。</span><span class="sxs-lookup"><span data-stu-id="2a269-361">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 <span data-ttu-id="2a269-362"><xref:System.Windows.UIElement3D.GetUIParentCore%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-362"><xref:System.Windows.UIElement3D.GetUIParentCore%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-363">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-363">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-364">入力システムがこの要素を対象とするドラッグ アンド ドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-364">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-365"><xref:System.Windows.UIElement3D.GiveFeedback> イベントを使用すると、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、ドラッグイベントのソースでマウスポインターの外観を変更できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-365">The <xref:System.Windows.UIElement3D.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="2a269-366">視覚的なフィードバックにより、ドラッグアンドドロップ操作が進行中であることが強調されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-366">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="2a269-367">このイベントは、このクラスの <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.GiveFeedback> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-367">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-368"><xref:System.Windows.UIElement3D.GiveFeedback> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-368">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-369"><xref:System.Windows.UIElement3D.GiveFeedback> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-369"><xref:System.Windows.UIElement3D.GiveFeedback> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-370">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-370">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-371">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-371">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-372">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-372">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GiveFeedbackEvent>|  
|<span data-ttu-id="2a269-373">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-373">Routing strategy</span></span>|<span data-ttu-id="2a269-374">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-374">Bubbling</span></span>|  
|<span data-ttu-id="2a269-375">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-375">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="2a269-376">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewGiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-376">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="2a269-377">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnGiveFeedback%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-377">Override <xref:System.Windows.UIElement3D.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-378">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-378">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-379"><see cref="E:System.Windows.UIElement3D.GiveFeedback" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-379">Identifies the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-380">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-380">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-381">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-382">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-382">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-383">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-383">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-384">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-384">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-385"><xref:System.Windows.UIElement3D.GiveFeedbackEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-385"><xref:System.Windows.UIElement3D.GiveFeedbackEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-386">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-386">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-387">この要素が論理フォーカスを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-387">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-388">メソッド呼び出しを使用してフォーカスが意図的に強制されていても、前のキーボードフォーカスが別のスコープに存在する場合、論理フォーカスはキーボードフォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-388">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="2a269-389">このシナリオでは、キーボードフォーカスはそのままで、<xref:System.Windows.UIElement3D.Focus%2A> メソッドが呼び出される要素は引き続き論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-389">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement3D.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="2a269-390">このイベントをより正確に解釈することは、ルート内の要素の <xref:System.Windows.UIElement3D.IsFocused%2A> プロパティの値が `false` から `true`に変更されたときに発生することです。</span><span class="sxs-lookup"><span data-stu-id="2a269-390">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement3D.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="2a269-391">このイベントはバブルルーティングを使用するため、フォーカスを受け取る要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-391">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-392">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを取得した実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-392">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
 <span data-ttu-id="2a269-393"><xref:System.Windows.UIElement3D.GotFocus> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-393"><xref:System.Windows.UIElement3D.GotFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-394">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-394">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-395">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-395">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-396">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-396">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotFocusEvent>|  
|<span data-ttu-id="2a269-397">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-397">Routing strategy</span></span>|<span data-ttu-id="2a269-398">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-398">Bubbling</span></span>|  
|<span data-ttu-id="2a269-399">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-399">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="2a269-400">対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-400">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-401">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnGotFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-401">Override <xref:System.Windows.UIElement3D.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-402">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-402">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-403"><see cref="E:System.Windows.UIElement3D.GotFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-403">Identifies the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-404">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-404">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-405">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-405">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-406">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-406">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-407">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-407">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-408">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-408">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-409"><xref:System.Windows.UIElement3D.GotFocusEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-409"><xref:System.Windows.UIElement3D.GotFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-410">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-410">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-411">この要素にキーボード フォーカスが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-411">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-412"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> は、要素のフォーカス状態を保持するプロパティの状態の変化を追跡する類似したイベントです。<xref:System.Windows.UIElement3D.GotKeyboardFocus> イベントは、同じ状況の多くで発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-412"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement3D.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="2a269-413">このイベントはバブルルーティングを使用するため、フォーカスがある要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-413">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-414">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-414">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="2a269-415">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.GotKeyboardFocus> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-415">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-416"><xref:System.Windows.UIElement3D.GotKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-416">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-417"><xref:System.Windows.UIElement3D.GotKeyboardFocus> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-417"><xref:System.Windows.UIElement3D.GotKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-418">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-418">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-419">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-419">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-420">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-420">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>|  
|<span data-ttu-id="2a269-421">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-421">Routing strategy</span></span>|<span data-ttu-id="2a269-422">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-422">Bubbling</span></span>|  
|<span data-ttu-id="2a269-423">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-423">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="2a269-424">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-424">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="2a269-425">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-425">Override <xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-426">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-426">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-427"><see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-427">Identifies the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-428">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-428">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-429">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-429">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-430">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-430">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-431">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-431">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-432">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-432">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-433"><xref:System.Windows.UIElement3D.GotKeyboardFocusEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-433"><xref:System.Windows.UIElement3D.GotKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-434">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-434">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-435">この要素がマウスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-435">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-436">要素がマウスをキャプチャすると、マウスポインターが境界の外側にある場合でもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-436">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="2a269-437">マウスは、通常、ドラッグアンドドロップ操作中にキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャされたままになります。</span><span class="sxs-lookup"><span data-stu-id="2a269-437">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="2a269-438">このイベントはバブルルーティングを使用するため、キャプチャを持つ要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-438">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-439">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、マウスキャプチャを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-439">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="2a269-440">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.GotMouseCapture> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-440">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement3D.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-441"><xref:System.Windows.UIElement3D.GotMouseCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-441">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-442"><xref:System.Windows.UIElement3D.GotMouseCapture> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-442"><xref:System.Windows.UIElement3D.GotMouseCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-443">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-443">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-444">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-444">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-445">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-445">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotMouseCaptureEvent>|  
|<span data-ttu-id="2a269-446">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-446">Routing strategy</span></span>|<span data-ttu-id="2a269-447">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-447">Bubbling</span></span>|  
|<span data-ttu-id="2a269-448">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-448">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="2a269-449">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-449">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-450">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-450">Override <xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-451">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-451">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-452"><see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-452">Identifies the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-453">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-453">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-454">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-454">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-455">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-455">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-456">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-456">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-457">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-457">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-458"><xref:System.Windows.UIElement3D.GotMouseCaptureEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-458"><xref:System.Windows.UIElement3D.GotMouseCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-459">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-459">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-460">この要素がスタイラスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-460">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-461">要素がスタイラスをキャプチャすると、ポインターが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-461">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="2a269-462">スタイラスは、通常、ドラッグアンドドロップ操作中にキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャを保持します。</span><span class="sxs-lookup"><span data-stu-id="2a269-462">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="2a269-463">このイベントはバブルルーティングを使用するため、キャプチャを持つ要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-463">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-464">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、capture を持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-464">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="2a269-465">このイベントは、このクラスの添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.GotStylusCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-465">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement3D.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-466"><xref:System.Windows.UIElement3D.GotStylusCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-466">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-467"><xref:System.Windows.UIElement3D.GotStylusCapture> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-467"><xref:System.Windows.UIElement3D.GotStylusCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-468">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-468">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-469">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-469">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-470">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-470">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotStylusCaptureEvent>|  
|<span data-ttu-id="2a269-471">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-471">Routing strategy</span></span>|<span data-ttu-id="2a269-472">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-472">Bubbling</span></span>|  
|<span data-ttu-id="2a269-473">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-473">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-474">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-474">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-475">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-475">Override <xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-476">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-476">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-477"><see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-477">Identifies the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-478">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-478">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-479">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-479">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-480">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-480">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-481">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-481">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-482">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-482">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-483"><xref:System.Windows.UIElement3D.GotStylusCaptureEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-483"><xref:System.Windows.UIElement3D.GotStylusCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-484">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-484">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-485">タッチがこの要素にキャプチャされると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-485">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-486">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-486">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-487">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-487">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotTouchCaptureEvent>|  
|<span data-ttu-id="2a269-488">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-488">Routing strategy</span></span>|<span data-ttu-id="2a269-489">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-489">Bubbling</span></span>|  
|<span data-ttu-id="2a269-490">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-490">Delegate</span></span>|<span data-ttu-id="2a269-491"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs></span><span class="sxs-lookup"><span data-stu-id="2a269-491"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs></span></span>|  
  
-   <span data-ttu-id="2a269-492">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-492">Override <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-493"><see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-493">Identifies the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement3D.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-494">この要素に関連付けられている入力バインドのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-494">Gets the collection of input bindings associated with this element.</span></span></summary>
        <value><span data-ttu-id="2a269-495">入力バインディングのコレクション。</span><span class="sxs-lookup"><span data-stu-id="2a269-495">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-496">入力バインドでは、入力デバイスへのコマンドのバインドがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="2a269-496">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="2a269-497">たとえば、<xref:System.Windows.Input.MouseBinding> は、マウスデバイスに固有のプロパティを含む入力バインドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-497">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="2a269-498">入力バインディングのコレクションには、その型に関連する入力バインドと、インスタンスで宣言されている入力バインドの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-498">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="2a269-499">関連するプロパティ <xref:System.Windows.UIElement3D.CommandBindings%2A>は、コマンドバインドのコレクションを保持します。</span><span class="sxs-lookup"><span data-stu-id="2a269-499">A related property, <xref:System.Windows.UIElement3D.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="2a269-500">これらは、コマンド処理の次のレベルを表すという点で入力バインドとは異なります。これは、既知のコマンドに関連付けられているアクションです。</span><span class="sxs-lookup"><span data-stu-id="2a269-500">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
 <span data-ttu-id="2a269-501"><xref:System.Windows.UIElement3D.InputBindings%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-501"><xref:System.Windows.UIElement3D.InputBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-502">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-502">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="2a269-503">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="2a269-503">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2a269-504">XAML の値</span><span class="sxs-lookup"><span data-stu-id="2a269-504">XAML Values</span></span>  
 <span data-ttu-id="2a269-505">*Oneor、Inputbindings*</span><span class="sxs-lookup"><span data-stu-id="2a269-505">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="2a269-506">1つ以上の <xref:System.Windows.Input.InputBinding> 要素 (通常は <xref:System.Windows.Input.KeyBinding> または <xref:System.Windows.Input.MouseBinding> 派生クラス)。</span><span class="sxs-lookup"><span data-stu-id="2a269-506">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="2a269-507">これらのそれぞれには、<xref:System.Windows.Input.InputBinding.Command%2A> と <xref:System.Windows.Input.InputBinding.Gesture%2A> 属性が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-507">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateModel">
      <MemberSignature Language="C#" Value="public void InvalidateModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.InvalidateModel" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateModel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateModel();" />
      <MemberSignature Language="F#" Value="member this.InvalidateModel : unit -&gt; unit" Usage="uIElement3D.InvalidateModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-508">要素を表すモデルを無効にします。</span><span class="sxs-lookup"><span data-stu-id="2a269-508">Invalidates the model that represents the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-509"><xref:System.Windows.UIElement3D> クラスからクラスを派生させる場合、このメソッドを <xref:System.Windows.UIElement3D.OnUpdateModel%2A> メソッドと共に使用して、要素のモデルを更新できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-509">When you derive a class from the <xref:System.Windows.UIElement3D> class, you can use this method together with the <xref:System.Windows.UIElement3D.OnUpdateModel%2A> method to refresh the model of the element.</span></span>  
  
 <span data-ttu-id="2a269-510">高度なシナリオでは、このメソッドを呼び出す必要があるだけです。</span><span class="sxs-lookup"><span data-stu-id="2a269-510">You only need to call this method in advanced scenarios.</span></span> <span data-ttu-id="2a269-511">このような高度なシナリオの1つは、派生クラスに外観に影響を与える複数のプロパティがあり、基になるモデルを1回だけ更新する場合です。</span><span class="sxs-lookup"><span data-stu-id="2a269-511">One such advanced scenario is if the derived class has multiple properties that affect the appearance, and you want to update the underlying model only once.</span></span>  
  
 <span data-ttu-id="2a269-512"><xref:System.Windows.UIElement3D.InvalidateModel%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-512"><xref:System.Windows.UIElement3D.InvalidateModel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-513">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-513">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a269-514">次の例では、<xref:System.Windows.UIElement3D> クラスから派生させて `Sphere` クラスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-514">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="2a269-515">完全なサンプルについては、「 [UIElement3D 球のサンプル](https://go.microsoft.com/fwlink/?LinkID=160044)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-515">For the complete sample, see [UIElement3D Sphere Sample](https://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement3D.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-516">この要素が [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] で有効かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-516">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="2a269-517">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-517"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-518">既定値は <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="2a269-518">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-519">このプロパティは、特定の要素に対する <xref:System.Windows.UIElement3D.IsEnabledCore%2A> のクラス固有の実装 (実行時) によって影響を受けることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-519">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement3D.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="2a269-520">そのため、ここに記載されている既定値は有効でないことがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-520">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="2a269-521">この値を設定しようとすると、<xref:System.Windows.UIElement3D.IsEnabledCore%2A>によって返された値によってオーバーライドされる可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-521">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement3D.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="2a269-522">有効になっていない要素はヒットテストまたはフォーカスに含まれないため、入力イベントのソースにはなりません。</span><span class="sxs-lookup"><span data-stu-id="2a269-522">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
 <span data-ttu-id="2a269-523"><xref:System.Windows.UIElement3D.IsEnabled%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-523"><xref:System.Windows.UIElement3D.IsEnabled%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-524">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-524">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-525">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-525">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-526">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-526">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsEnabledProperty>|  
|<span data-ttu-id="2a269-527">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-527">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-528">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-528">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-529">この要素の <see cref="P:System.Windows.UIElement3D.IsEnabled" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-529">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-530">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-530">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-531"><xref:System.Windows.UIElement3D.IsEnabledChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-531"><xref:System.Windows.UIElement3D.IsEnabledChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-532">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-532">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-533">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-533">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement3D.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-534">派生クラス内で <see cref="P:System.Windows.UIElement3D.IsEnabled" /> の戻り値になる値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-534">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement3D.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="2a269-535">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-535"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-536"><xref:System.Windows.UIElement3D.IsEnabledCore%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-536"><xref:System.Windows.UIElement3D.IsEnabledCore%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-537">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-537">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-538">このプロパティの既定の実装では、値がキャッシュされ、この要素の親要素が有効になっているかどうかも計算されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-538">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="2a269-539">(親が有効になっていない場合、子要素を実用的な [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]で効果的に有効にすることはできません)。この実装をオーバーライドする場合は、この動作を維持するために基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-539">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span></para></block>
        <altmember cref="E:System.Windows.UIElement3D.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement3D.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-540"><see cref="P:System.Windows.UIElement3D.IsEnabled" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-540">Identifies the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-541"><xref:System.Windows.UIElement3D.IsEnabledProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-541"><xref:System.Windows.UIElement3D.IsEnabledProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-542">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-542">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement3D.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-543">この要素に論理フォーカスがあるかどうかを判断する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-543">Gets a value that determines whether this element has logical focus.</span></span></summary>
        <value><span data-ttu-id="2a269-544">この要素に論理フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-544"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-545">アプリケーションに複数のフォーカス区分 (メニューコンテンツとアプリケーションの残りの部分など) がある場合、論理フォーカスはキーボードフォーカスとは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-545">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="2a269-546">このシナリオでは、キーボードフォーカスはアプリケーション UI の1つの要素にしか配置できませんが、他のフォーカス区分内の特定の要素は引き続き論理フォーカスを保持する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-546">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="2a269-547">論理フォーカスの詳細については、「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-547">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-548">このプロパティを設定することによってフォーカスを設定しません (読み取り専用)。</span><span class="sxs-lookup"><span data-stu-id="2a269-548">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="2a269-549">このプロパティの一般的な用途は、<xref:System.Windows.Setter> または <xref:System.Windows.EventTrigger>の依存関係プロパティとして使用することです。</span><span class="sxs-lookup"><span data-stu-id="2a269-549">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="2a269-550">プログラムによってフォーカスを設定するには、<xref:System.Windows.UIElement3D.Focus%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2a269-550">To set focus programmatically, call <xref:System.Windows.UIElement3D.Focus%2A>.</span></span> <span data-ttu-id="2a269-551">フォーカスは、ユーザー操作またはコントロールの実装によって設定することもできます。これには、マウスキャプチャの動作が含まれる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-551">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
 <span data-ttu-id="2a269-552"><xref:System.Windows.UIElement3D.IsFocused%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-552"><xref:System.Windows.UIElement3D.IsFocused%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-553">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-553">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-554">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-555">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-555">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsFocusedProperty>|  
|<span data-ttu-id="2a269-556">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-556">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-557">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-557">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-558"><see cref="P:System.Windows.UIElement3D.IsFocused" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-558">Identifies the <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-559"><xref:System.Windows.UIElement3D.IsFocusedProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-559"><xref:System.Windows.UIElement3D.IsFocusedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-560">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-560">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement3D.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-561">この要素が、表示される内容のある部分からのヒット テストの結果として返されるかどうかを宣言する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-561">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span></span></summary>
        <value><span data-ttu-id="2a269-562">少なくとも 1 つの点からヒット テストの結果としてこの要素が返される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-562"><see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-563">既定値は <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="2a269-563">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-564">このプロパティの有効値は、論理ツリー内のヒットテスト可能な要素の相対位置によって影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2a269-564">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="2a269-565">たとえば、要素がヒットテストで表示されない要素の子要素である場合、その値をローカルに設定しようとしても、子のプロパティの有効値は `false`のままになります。</span><span class="sxs-lookup"><span data-stu-id="2a269-565">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="2a269-566">このため、コントロールに対して入力またはヒットテストを行わない場合は、複合コントロールで `false` するように <xref:System.Windows.UIElement3D.IsHitTestVisible%2A> を設定しないことが重要です。</span><span class="sxs-lookup"><span data-stu-id="2a269-566">For this reason, it is important that you do not set <xref:System.Windows.UIElement3D.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="2a269-567">ヒット テストについて詳しくは、「[ビジュアル層でのヒット テスト](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="2a269-567">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
 <span data-ttu-id="2a269-568"><xref:System.Windows.UIElement3D.IsHitTestVisible%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-568"><xref:System.Windows.UIElement3D.IsHitTestVisible%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-569">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-569">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-570">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-570">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-571">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-571">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>|  
|<span data-ttu-id="2a269-572">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-572">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-573">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-573">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-574">この要素の <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> 依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-574">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-575">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-575">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-576"><xref:System.Windows.UIElement3D.IsHitTestVisibleChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-576"><xref:System.Windows.UIElement3D.IsHitTestVisibleChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-577">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-577">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-578">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-578">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-579"><see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-579">Identifies the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-580"><xref:System.Windows.UIElement3D.IsHitTestVisibleProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-580"><xref:System.Windows.UIElement3D.IsHitTestVisibleProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-581">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-581">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement3D.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-582">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] などの入力方式システムがこの要素への入力の処理に対して有効になっているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-582">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="2a269-583">入力方式がアクティブである場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-583"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-584">基礎となる添付プロパティの既定値は <see langword="true;" /> ですが、この値は実行時の入力方式の実際の状態の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2a269-584">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-585">このプロパティは、現在有効になっている入力方法 (キーボード、音声、その他の入力デバイス) に対して、添付プロパティ <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> によって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-585">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, other input devices).</span></span>  
  
 <span data-ttu-id="2a269-586"><xref:System.Windows.UIElement3D.IsInputMethodEnabled%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-586"><xref:System.Windows.UIElement3D.IsInputMethodEnabled%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-587">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-587">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement3D.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-588">この要素にキーボード フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-588">Gets a value indicating whether this element has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="2a269-589">この要素にキーボード フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-589"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-590">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-590">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-591">このプロパティの特定値に対する変更は、フォーカス関連のイベントと共に発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-591">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="2a269-592"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> と <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> は、他の入力関連のイベントのクラスイベントハンドラー内で一般的に使用されます。たとえば、要素に既にキーボードフォーカスがあるかどうかを判断したり、マウスイベントとキーボードイベントの組み合わせが発生したときに決定したりします。</span><span class="sxs-lookup"><span data-stu-id="2a269-592"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
 <span data-ttu-id="2a269-593"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-593"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-594">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-594">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-595">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-595">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-596">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-596">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="2a269-597">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-597">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-598">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-598">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotFocus" />
        <altmember cref="E:System.Windows.UIElement3D.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-599">この要素の <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-599">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-600">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-600">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-601"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-601"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-602">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-602">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-603">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-603">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-604"><see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-604">Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-605"><xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-605"><xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-606">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-606">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement3D.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-607">キーボード フォーカスがその要素またはそのビジュアル ツリーの子要素内の任意の場所にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-607">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span></span></summary>
        <value><span data-ttu-id="2a269-608">キーボード フォーカスがその要素またはその子要素にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-608"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-609">このプロパティの値を変更すると、通常は、派生クラスによってイベントを抑制する <xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> がオーバーライドされていない限り、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-609">Changes to the value of this property typically raise the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="2a269-610">このプロパティは直接設定しませんが、<xref:System.Windows.UIElement3D.Focus%2A>を呼び出すか、<xref:System.Windows.UIElement3D.MoveFocus%2A> 要求を行うことによって、要素にフォーカスを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-610">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement3D.Focus%2A>, or by making a <xref:System.Windows.UIElement3D.MoveFocus%2A> request.</span></span> <span data-ttu-id="2a269-611">これらのいずれかのメソッド呼び出しによって、このプロパティ値が変更する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-611">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="2a269-612"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> と <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> は通常、他の入力関連のイベントのクラスイベントハンドラー内で使用されます。たとえば、要素に既にキーボードフォーカスがあるかどうかを判断したり、マウスイベントやキーボードイベントが組み合わせて発生したときに判断したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-612"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
 <span data-ttu-id="2a269-613"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-613"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-614">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-614">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-615">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-615">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-616">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-616">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="2a269-617">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-617">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-618">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-618">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-619">この要素の <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-619">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-620">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-620">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-621"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-621"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-622">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-622">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-623">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-623">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-624"><see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-624">Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-625"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-625"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-626">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-626">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement3D.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-627">この要素にマウスがキャプチャされるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-627">Gets a value indicating whether the mouse is captured to this element.</span></span></summary>
        <value><span data-ttu-id="2a269-628">要素にマウス キャプチャがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-628"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-629">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-629">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-630">マウスキャプチャの状態は、インプロセスのドラッグアンドドロップ操作に関連しています。</span><span class="sxs-lookup"><span data-stu-id="2a269-630">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="2a269-631"><xref:System.Windows.UIElement3D.IsMouseCaptured%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-631"><xref:System.Windows.UIElement3D.IsMouseCaptured%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-632">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-632">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-633">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-633">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-634">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-634">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseCapturedProperty>|  
|<span data-ttu-id="2a269-635">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-635">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-636">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-636">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement3D.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement3D.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-637">この要素の <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-637">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-638">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-638">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-639"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-639"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-640">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-640">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-641">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-641">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-642"><see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-642">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-643"><xref:System.Windows.UIElement3D.IsMouseCapturedProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-643"><xref:System.Windows.UIElement3D.IsMouseCapturedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-644">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-644">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement3D.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-645">この要素またはビジュアル ツリー内の子要素がマウスのキャプチャを保持するかどうかを決定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-645">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="2a269-646">この要素または格納されている要素がマウス キャプチャを持つ場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-646"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-647"><xref:System.Windows.UIElement3D.IsMouseCaptureWithin%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-647"><xref:System.Windows.UIElement3D.IsMouseCaptureWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-648">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-648">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-649">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-649">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-650">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-650">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="2a269-651">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-651">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-652">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-652">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-653">この要素の <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-653">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-654">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-654">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-655"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-655"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-656">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-656">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-657"><see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-657">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-658"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-658"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-659">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-659">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement3D.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-660">マウス ポインターの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-660">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="2a269-661">マウス ポインターがヒット テストと同じ要素の結果上にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-661"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-662">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-662">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-663"><xref:System.Windows.UIElement3D.IsMouseOver%2A>とは異なり、このプロパティは、マウスポインターがヒットテストの場合と同様に、リテラル要素の上にある場合にのみ `true` ます。</span><span class="sxs-lookup"><span data-stu-id="2a269-663">Unlike <xref:System.Windows.UIElement3D.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="2a269-664">マウスポインターが子要素の上にある場合、このプロパティは `false`されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-664">If the mouse pointer is instead over a child element, this property will be `false`.</span></span> <span data-ttu-id="2a269-665">コントロールを作成しないほとんどのシナリオでは、代わりに <xref:System.Windows.UIElement3D.IsMouseOver%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a269-665">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement3D.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="2a269-666">この要素によってマウスがキャプチャされ、このプロパティがキャプチャ時に `true` された場合、このプロパティは、マウスキャプチャが失われ、ポインターがその境界を越えていなくなるまで、`true` を返し続けます。</span><span class="sxs-lookup"><span data-stu-id="2a269-666">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
 <span data-ttu-id="2a269-667"><xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-667"><xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-668">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-668">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-669">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-669">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-670">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-670">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="2a269-671">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-671">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-672">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-672">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-673">この要素の <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-673">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-674">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-674">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-675"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-675"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-676">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-676">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-677"><see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-677">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-678"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-678"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-679">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-679">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement3D.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-680">マウス ポインターがこの要素 (ビジュアル ツリー内の子要素を含む) の上にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-680">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span></span></summary>
        <value><span data-ttu-id="2a269-681">マウス ポインターが要素またはその子要素の上にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-681"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-682">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-682">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-683">通常、コントロールは複合コントロールであり、コントロール内のさまざまな要素 (ビジュアルツリー) は、格納しているコントロールのマウス状態をすべて報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-683">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="2a269-684">たとえば、<xref:System.Windows.Controls.ListBox> スタイルコントロールは、<xref:System.Windows.Controls.ListBoxItem>を含めて、そのジオメトリの上にマウスがある場合に `true` として <xref:System.Windows.UIElement3D.IsMouseOver%2A> を報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-684">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement3D.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="2a269-685">似た "IsMouseOverChanged" イベントは存在しませんが、いくつかの類似イベントがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-685">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="2a269-686">たとえば、<xref:System.Windows.UIElement3D.MouseEnter>、<xref:System.Windows.UIElement3D.MouseMove>、および <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>を処理できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-686">For example, you can handle <xref:System.Windows.UIElement3D.MouseEnter>, <xref:System.Windows.UIElement3D.MouseMove>, and <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="2a269-687">この要素がマウスをキャプチャすると、マウスのキャプチャが失われ、マウスポインターが要素の境界内から出るまで、このプロパティは `true` のままになります。</span><span class="sxs-lookup"><span data-stu-id="2a269-687">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="2a269-688">一部のコントロールでは、マウスを直接操作しないように見えない特定のアクションに対して、意図的にマウスをキャプチャしています。</span><span class="sxs-lookup"><span data-stu-id="2a269-688">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="2a269-689">これにより、マウスが一見移動されていなくても、<xref:System.Windows.UIElement3D.IsMouseOver%2A> が `true` される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-689">This can lead to <xref:System.Windows.UIElement3D.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
 <span data-ttu-id="2a269-690"><xref:System.Windows.UIElement3D.IsMouseOver%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-690"><xref:System.Windows.UIElement3D.IsMouseOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-691">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-691">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-692">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-692">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-693">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-693">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseOverProperty>|  
|<span data-ttu-id="2a269-694">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-694">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-695">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-695">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-696"><see cref="P:System.Windows.UIElement3D.IsMouseOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-696">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-697"><xref:System.Windows.UIElement3D.IsMouseOverProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-697"><xref:System.Windows.UIElement3D.IsMouseOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-698">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-698">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement3D.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-699">この要素によってスタイラスがキャプチャされるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-699">Gets a value indicating whether the stylus is captured by this element.</span></span></summary>
        <value><span data-ttu-id="2a269-700">要素にスタイラスのキャプチャがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-700"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-701">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-701">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-702">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-702">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-703">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-703">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-704"><xref:System.Windows.UIElement3D.IsStylusCaptured%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-704"><xref:System.Windows.UIElement3D.IsStylusCaptured%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-705">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-705">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-706">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-706">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-707">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-707">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusCapturedProperty>|  
|<span data-ttu-id="2a269-708">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-708">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-709">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-709">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement3D.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement3D.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-710">この要素の <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-710">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-711">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-711">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-712"><xref:System.Windows.UIElement3D.IsStylusCapturedChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-712"><xref:System.Windows.UIElement3D.IsStylusCapturedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-713">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-713">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-714"><see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-714">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-715"><xref:System.Windows.UIElement3D.IsStylusCapturedProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-715"><xref:System.Windows.UIElement3D.IsStylusCapturedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-716">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-716">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement3D.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-717">この要素、または要素の境界とそのビジュアル ツリー内の要素がスタイラス キャプチャを保持するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-717">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span></span></summary>
        <value><span data-ttu-id="2a269-718">この要素または格納されている要素がスタイラスのキャプチャを持つ場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-718"><see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-719">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-719">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-720">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-720">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-721">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-721">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-722"><xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-722"><xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-723">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-723">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-724">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-724">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-725">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-725">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="2a269-726">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-726">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-727">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-727">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement3D.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-728">この要素の <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-728">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-729">これは、ルーティングイベントではなく、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-729">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-730"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-730"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-731">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-731">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-732"><see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-732">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-733"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-733"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-734">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-734">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement3D.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-735">スタイラスの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-735">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="2a269-736">スタイラス ポインターがヒット テストの結果と同じ要素上にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-736"><see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-737">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-737">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-738"><xref:System.Windows.UIElement3D.IsStylusOver%2A>とは異なり、このプロパティは、スタイラスが要素上にある場合にのみ `true` ます。</span><span class="sxs-lookup"><span data-stu-id="2a269-738">Unlike <xref:System.Windows.UIElement3D.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="2a269-739">スタイラスが子要素または要素のより深い合成 (ビジュアルツリー) の一部である要素上にある場合、このプロパティは `false`されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-739">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="2a269-740">コントロールがどのように合成されているかわからない場合 (たとえば、定義したコントロールのカスタムコントロールテンプレートでこのプロパティを使用する場合)、このプロパティは予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-740">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="2a269-741">コントロールを作成しないほとんどのシナリオでは、代わりに <xref:System.Windows.UIElement3D.IsStylusOver%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a269-741">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement3D.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="2a269-742">この要素にスタイラスのキャプチャが含まれており、このプロパティがキャプチャ時に `true` 場合、スタイラスのキャプチャが失われ、スタイラスがその境界を越えない限り、このプロパティは `true` のままです。</span><span class="sxs-lookup"><span data-stu-id="2a269-742">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="2a269-743">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-743">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-744">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-744">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-745"><xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-745"><xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-746">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-746">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-747">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-747">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-748">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-748">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="2a269-749">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-749">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-750">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-750">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-751">この要素の <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-751">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-752">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-752">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-753"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-753"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-754">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-754">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-755"><see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-755">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-756"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-756"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-757">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-757">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement3D.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-758">スタイラスのカーソルがこの要素 (子ビジュアル要素を含む) の上にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-758">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span></span></summary>
        <value><span data-ttu-id="2a269-759">スタイラスのカーソルが要素またはその子要素の上にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-759"><see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2a269-760">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-760">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-761">この要素にスタイラスのキャプチャがある場合、スタイラスのキャプチャが失われ、ポインターが境界外になるまで、このプロパティは引き続き `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-761">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="2a269-762">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-762">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-763">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-763">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-764"><xref:System.Windows.UIElement3D.IsStylusOver%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-764"><xref:System.Windows.UIElement3D.IsStylusOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-765">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-765">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-766">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-766">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-767">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-767">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusOverProperty>|  
|<span data-ttu-id="2a269-768">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-768">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-769">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-769">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-770"><see cref="P:System.Windows.UIElement3D.IsStylusOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-770">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-771"><xref:System.Windows.UIElement3D.IsStylusOverProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-771"><xref:System.Windows.UIElement3D.IsStylusOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-772">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-772">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement3D.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-773">この要素が [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] に表示されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-773">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="2a269-774">要素が表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-774"><see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-775"><xref:System.Windows.UIElement3D.IsVisible%2A> 値の決定には、多くの要因が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-775">Determination of the <xref:System.Windows.UIElement3D.IsVisible%2A> value takes many factors into account.</span></span> <span data-ttu-id="2a269-776">これに対し、設定可能なプロパティである <xref:System.Windows.UIElement3D.Visibility%2A>は、プログラムによって要素を表示または非表示にするという意図を示すだけです。</span><span class="sxs-lookup"><span data-stu-id="2a269-776">In contrast, <xref:System.Windows.UIElement3D.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="2a269-777">このプロパティの値を変更すると、通常は <xref:System.Windows.UIElement3D.IsVisibleChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-777">Changes to the value of this property will typically raise the <xref:System.Windows.UIElement3D.IsVisibleChanged> event.</span></span> <span data-ttu-id="2a269-778">一致する [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] "On \*" クラス処理オーバーライドメソッドがありません。このメソッドでは、一部の派生クラスでその動作をオーバーライドしてイベントを処理することができますが、クラスハンドラーは <xref:System.Windows.EventManager.RegisterClassHandler%2A>で直接アタッチできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-778">There is no matching [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] "On\*" class handling override method that would allow some derived class to override that behavior and handle the event, but a class handler could still be attached directly with <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-779"><xref:System.Windows.UIElement3D.IsVisible%2A> が `false` されている要素は入力イベント (またはコマンド) に参加していません。レイアウトのメジャーまたは配置パスに影響を与えることはなく、フォーカスを設定できず、タブシーケンスにも含まれず、ヒットテストでは報告されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-779">Elements where <xref:System.Windows.UIElement3D.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="2a269-780">これに対し、<xref:System.Windows.UIElement3D.IsEnabled%2A> が `false` されている要素は、引き続きイベントとコマンドに参加し、ヒットテストを行いますが、フォーカスを与えることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-780">In contrast, elements where <xref:System.Windows.UIElement3D.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
 <span data-ttu-id="2a269-781"><xref:System.Windows.UIElement3D.IsVisible%2A> は、スタイルトリガーとして使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-781"><xref:System.Windows.UIElement3D.IsVisible%2A> is not intended to be used as a style trigger.</span></span> <span data-ttu-id="2a269-782">スタイルのトリガーとして <xref:System.Windows.UIElement3D.IsVisible%2A> を使用すると、予期しない結果になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-782">Using <xref:System.Windows.UIElement3D.IsVisible%2A> as a style trigger might have unpredictable results.</span></span> <span data-ttu-id="2a269-783"><xref:System.Windows.UIElement3D.IsVisible%2A> は、下位レベルの入力実装による状態チェックを目的としています。</span><span class="sxs-lookup"><span data-stu-id="2a269-783"><xref:System.Windows.UIElement3D.IsVisible%2A> is intended for state checking by lower level input implementations.</span></span>  
  
 <span data-ttu-id="2a269-784"><xref:System.Windows.UIElement3D.IsVisible%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-784"><xref:System.Windows.UIElement3D.IsVisible%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-785">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-785">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-786">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-786">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-787">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-787">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsVisibleProperty>|  
|<span data-ttu-id="2a269-788">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-788">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-789">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-789">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-790">この要素の <see cref="P:System.Windows.UIElement3D.IsVisible" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-790">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsVisible" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-791">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-791">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="2a269-792"><xref:System.Windows.UIElement3D.IsVisibleChanged> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-792"><xref:System.Windows.UIElement3D.IsVisibleChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-793">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-793">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-794"><see cref="P:System.Windows.UIElement3D.IsVisible" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-794">Identifies the <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-795"><xref:System.Windows.UIElement3D.IsVisibleProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-795"><xref:System.Windows.UIElement3D.IsVisibleProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-796">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-796">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-797">この要素にキーボード フォーカスがある状態でいずれかのキーが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-797">Occurs when a key is pressed while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-798">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.KeyDown> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-798">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.KeyDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-799"><xref:System.Windows.UIElement3D.KeyDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-799">Event handlers that are attached to the <xref:System.Windows.UIElement3D.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-800"><xref:System.Windows.UIElement3D.KeyDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-800"><xref:System.Windows.UIElement3D.KeyDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-801">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-801">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-802">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-802">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-803">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-803">Identifier field</span></span>|<xref:System.Windows.UIElement3D.KeyDownEvent>|  
|<span data-ttu-id="2a269-804">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-804">Routing strategy</span></span>|<span data-ttu-id="2a269-805">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-805">Bubbling</span></span>|  
|<span data-ttu-id="2a269-806">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-806">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="2a269-807">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewKeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-807">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="2a269-808">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnKeyDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-808">Override <xref:System.Windows.UIElement3D.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-809">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-809">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-810"><see cref="E:System.Windows.UIElement3D.KeyDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-810">Identifies the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-811">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-811">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-812">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-812">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-813">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-813">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-814">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-814">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-815">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-815">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-816"><xref:System.Windows.UIElement3D.KeyDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-816"><xref:System.Windows.UIElement3D.KeyDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-817">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-817">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-818">この要素にキーボード フォーカスがある状態でキーが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-818">Occurs when a key is released while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-819">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に <xref:System.Windows.UIElement3D.KeyUp> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-819">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.KeyUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-820"><xref:System.Windows.UIElement3D.KeyUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-820">Event handlers that are attached to the <xref:System.Windows.UIElement3D.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-821"><xref:System.Windows.UIElement3D.KeyUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-821"><xref:System.Windows.UIElement3D.KeyUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-822">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-822">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-823">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-823">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-824">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-824">Identifier field</span></span>|<xref:System.Windows.UIElement3D.KeyUpEvent>|  
|<span data-ttu-id="2a269-825">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-825">Routing strategy</span></span>|<span data-ttu-id="2a269-826">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-826">Bubbling</span></span>|  
|<span data-ttu-id="2a269-827">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-827">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="2a269-828">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewKeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-828">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="2a269-829">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnKeyUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-829">Override <xref:System.Windows.UIElement3D.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyDown" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-830">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-830">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-831"><see cref="E:System.Windows.UIElement3D.KeyUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-831">Identifies the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-832">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-832">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-833">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-833">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-834">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-834">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-835">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-835">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-836">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-836">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-837"><xref:System.Windows.UIElement3D.KeyUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-837"><xref:System.Windows.UIElement3D.KeyUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-838">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-838">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-839">この要素が論理フォーカスを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-839">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-840">メソッド呼び出しを使用して意図的にフォーカスを外しているにもかかわらず、直前のキーボード フォーカスが異なるスコープ内に存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-840">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="2a269-841">このシナリオでは、キーボードフォーカスはそのまま残り、<xref:System.Windows.UIElement3D.Focus%2A> メソッドが呼び出される要素は論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-841">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement3D.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="2a269-842">このイベントをより正確に解釈することは、ルートの要素の <xref:System.Windows.UIElement3D.IsFocused%2A> プロパティの値が `true` から `false`に変化したときに発生することです。</span><span class="sxs-lookup"><span data-stu-id="2a269-842">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement3D.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="2a269-843">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-843">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-844">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを取得した実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-844">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
 <span data-ttu-id="2a269-845"><xref:System.Windows.UIElement3D.LostFocus> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-845"><xref:System.Windows.UIElement3D.LostFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-846">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-846">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-847">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-847">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-848">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-848">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostFocusEvent>|  
|<span data-ttu-id="2a269-849">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-849">Routing strategy</span></span>|<span data-ttu-id="2a269-850">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-850">Bubbling</span></span>|  
|<span data-ttu-id="2a269-851">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-851">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="2a269-852">対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-852">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-853">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnLostFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-853">Override <xref:System.Windows.UIElement3D.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-854">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-854">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-855"><see cref="E:System.Windows.UIElement3D.LostFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-855">Identifies the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-856">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-856">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-857">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-857">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-858">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-858">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-859">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-859">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-860">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-860">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-861"><xref:System.Windows.UIElement3D.LostFocusEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-861"><xref:System.Windows.UIElement3D.LostFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-862">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-862">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-863">この要素からキーボード フォーカスが離れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-863">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-864">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-864">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-865">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-865">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="2a269-866">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.LostKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-866">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-867"><xref:System.Windows.UIElement3D.LostKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-867">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-868"><xref:System.Windows.UIElement3D.LostKeyboardFocus> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-868"><xref:System.Windows.UIElement3D.LostKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-869">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-869">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-870">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-870">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-871">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-871">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>|  
|<span data-ttu-id="2a269-872">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-872">Routing strategy</span></span>|<span data-ttu-id="2a269-873">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-873">Bubbling</span></span>|  
|<span data-ttu-id="2a269-874">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-874">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="2a269-875">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-875">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="2a269-876">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-876">Override <xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-877">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-877">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-878"><see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-878">Identifies the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-879">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-879">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-880">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-880">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-881">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-881">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-882">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-882">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-883">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-883">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-884"><xref:System.Windows.UIElement3D.LostKeyboardFocusEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-884"><xref:System.Windows.UIElement3D.LostKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-885">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-885">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-886">この要素がマウス キャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-886">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-887">要素がマウスをキャプチャすると、ポインターが境界の外側にある場合でもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-887">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="2a269-888">マウスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="2a269-888">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="2a269-889">このイベントはバブルルーティングを使用するため、キャプチャを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-889">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-890">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、キャプチャを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-890">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="2a269-891">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.LostMouseCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-891">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-892"><xref:System.Windows.UIElement3D.LostMouseCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-892">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-893"><xref:System.Windows.UIElement3D.LostMouseCapture> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-893"><xref:System.Windows.UIElement3D.LostMouseCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-894">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-894">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-895">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-895">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-896">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-896">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostMouseCaptureEvent>|  
|<span data-ttu-id="2a269-897">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-897">Routing strategy</span></span>|<span data-ttu-id="2a269-898">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-898">Bubbling</span></span>|  
|<span data-ttu-id="2a269-899">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-899">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="2a269-900">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-900">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-901">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-901">Override <xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-902">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-902">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-903"><see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-903">Identifies the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-904">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-904">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-905">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-905">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-906">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-906">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-907">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-907">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-908">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-908">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-909"><xref:System.Windows.UIElement3D.LostMouseCaptureEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-909"><xref:System.Windows.UIElement3D.LostMouseCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-910">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-910">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-911">この要素がスタイラス キャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-911">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-912">要素がスタイラスをキャプチャすると、ポインターが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-912">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="2a269-913">スタイラスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="2a269-913">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="2a269-914">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-914">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-915">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-915">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="2a269-916">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.LostStylusCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-916">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-917"><xref:System.Windows.UIElement3D.LostStylusCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-917">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-918"><xref:System.Windows.UIElement3D.LostStylusCapture> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-918"><xref:System.Windows.UIElement3D.LostStylusCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-919">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-919">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-920">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-920">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-921">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-921">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostStylusCaptureEvent>|  
|<span data-ttu-id="2a269-922">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-922">Routing strategy</span></span>|<span data-ttu-id="2a269-923">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-923">Bubbling</span></span>|  
|<span data-ttu-id="2a269-924">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-924">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-925">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-925">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-926">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-926">Override <xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-927">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-927">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-928"><see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-928">Identifies the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-929">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-929">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-930">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-930">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-931">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-931">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-932">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-932">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-933">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-933">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-934"><xref:System.Windows.UIElement3D.LostStylusCaptureEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-934"><xref:System.Windows.UIElement3D.LostStylusCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-935">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-935">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-936">この要素がタッチのキャプチャを失うと発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-936">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-937">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-937">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-938">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-938">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostTouchCaptureEvent>|  
|<span data-ttu-id="2a269-939">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-939">Routing strategy</span></span>|<span data-ttu-id="2a269-940">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-940">Bubbling</span></span>|  
|<span data-ttu-id="2a269-941">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-941">Delegate</span></span>|<span data-ttu-id="2a269-942"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-942"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-943">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-943">Override <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-944"><see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-944">Identifies the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-945">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-945">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-946">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.MouseDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-946">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-947"><xref:System.Windows.UIElement3D.MouseDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-947">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-948"><xref:System.Windows.UIElement3D.MouseDown> イベントは、多くの場合、<xref:System.Windows.UIElement3D.MouseLeftButtonDown> または <xref:System.Windows.UIElement3D.MouseRightButtonDown>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="2a269-948">The <xref:System.Windows.UIElement3D.MouseDown> event is often raised together with either <xref:System.Windows.UIElement3D.MouseLeftButtonDown> or <xref:System.Windows.UIElement3D.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="2a269-949"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> と <xref:System.Windows.UIElement3D.MouseRightButtonDown> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-949"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="2a269-950"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> または <xref:System.Windows.UIElement3D.MouseRightButtonDown>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-950">See Remarks for <xref:System.Windows.UIElement3D.MouseLeftButtonDown> or <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a269-951">一部のコントロールには、マウスボタンイベントに固有のクラス処理が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-951">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="2a269-952">マウスの左ボタンダウンイベントは、コントロールでクラス処理を行う最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-952">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="2a269-953">クラスの処理では、多くの場合、基になる <xref:System.Windows.Input.Mouse> クラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="2a269-953">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="2a269-954">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-954">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="2a269-955">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-955">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="2a269-956">前の「」で説明されている問題を解決しても、次のいずれかの方法を使用してクラスを処理する派生クラスで、マウスの左ボタンダウンイベントの <xref:System.Windows.UIElement3D.MouseDown> イベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-956">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement3D.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="2a269-957"><xref:System.Windows.UIElement3D.PreviewMouseDown> イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="2a269-957">Attach handlers for the <xref:System.Windows.UIElement3D.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="2a269-958">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-958">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="2a269-959"><xref:System.Windows.UIElement3D.AddHandler%2A> を呼び出し、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-959">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement3D.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="2a269-960"><xref:System.Windows.UIElement3D.MouseDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-960"><xref:System.Windows.UIElement3D.MouseDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-961">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-961">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-962">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-962">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-963">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-963">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseDownEvent>|  
|<span data-ttu-id="2a269-964">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-964">Routing strategy</span></span>|<span data-ttu-id="2a269-965">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-965">Bubbling</span></span>|  
|<span data-ttu-id="2a269-966">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-966">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-967">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewMouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-967">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="2a269-968">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-968">Override <xref:System.Windows.UIElement3D.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-969">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-969">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-970"><see cref="E:System.Windows.UIElement3D.MouseDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-970">Identifies the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-971">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-971">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-972">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-972">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-973">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-973">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-974">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-974">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-975">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-975">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-976"><xref:System.Windows.UIElement3D.MouseDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-976"><xref:System.Windows.UIElement3D.MouseDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-977">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-977">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-978">マウス ポインターがこの要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-978">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-979"><xref:System.Windows.UIElement3D.MouseEnter> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="2a269-979"><xref:System.Windows.UIElement3D.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="2a269-980">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-980">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span>  
  
 <span data-ttu-id="2a269-981"><xref:System.Windows.UIElement3D.MouseEnter> はマウスポインターが要素の境界内に入ったことを追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement3D.IsMouseOver%2A> プロパティ値が `false` からこの要素の `true` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-981">Although <xref:System.Windows.UIElement3D.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="2a269-982">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.MouseEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-982">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-983"><xref:System.Windows.UIElement3D.MouseEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-983">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-984"><xref:System.Windows.UIElement3D.MouseEnter> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-984"><xref:System.Windows.UIElement3D.MouseEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-985">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-985">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-986">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-986">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-987">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-987">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseEnterEvent>|  
|<span data-ttu-id="2a269-988">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-988">Routing strategy</span></span>|<span data-ttu-id="2a269-989">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-989">Direct</span></span>|  
|<span data-ttu-id="2a269-990">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-990">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="2a269-991">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-991">Override <xref:System.Windows.UIElement3D.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-992">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-992">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-993"><see cref="E:System.Windows.UIElement3D.MouseEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-993">Identifies the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-994">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-994">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-995">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-995">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-996">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-996">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-997">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-997">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-998">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-998">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-999"><xref:System.Windows.UIElement3D.MouseEnterEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-999"><xref:System.Windows.UIElement3D.MouseEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1000">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1000">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1001">マウス ポインターがこの要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1001">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1002"><xref:System.Windows.UIElement3D.MouseLeave> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1002"><xref:System.Windows.UIElement3D.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="2a269-1003">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1003">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span>  
  
 <span data-ttu-id="2a269-1004"><xref:System.Windows.UIElement3D.MouseLeave> はマウスが要素から離れたことを追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement3D.IsMouseOver%2A> プロパティ値が `true` からこの要素の `false` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1004">Although <xref:System.Windows.UIElement3D.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="2a269-1005">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.MouseLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1005">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-1006"><xref:System.Windows.UIElement3D.MouseLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1006">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-1007"><xref:System.Windows.UIElement3D.MouseLeave> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1007"><xref:System.Windows.UIElement3D.MouseLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1008">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1008">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1009">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1009">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1010">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1010">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeaveEvent>|  
|<span data-ttu-id="2a269-1011">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1011">Routing strategy</span></span>|<span data-ttu-id="2a269-1012">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-1012">Direct</span></span>|  
|<span data-ttu-id="2a269-1013">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1013">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="2a269-1014">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1014">Override <xref:System.Windows.UIElement3D.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1015">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1015">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1016"><see cref="E:System.Windows.UIElement3D.MouseLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1016">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1017">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1017">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1018">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1018">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1019">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1019">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1020">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1020">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1021">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1021">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1022"><xref:System.Windows.UIElement3D.MouseLeaveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1022"><xref:System.Windows.UIElement3D.MouseLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1023">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1023">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1024">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1024">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1025">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1025">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1026">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1026">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-1027">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1027">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-1028">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1028">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-1029"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1029">If you mark <xref:System.Windows.UIElement3D.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="2a269-1030">これには、<xref:System.Windows.Controls.Control.MouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1030">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="2a269-1031">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1031">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-1032">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1032">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-1033">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1033">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a269-1034">クラスの処理では、多くの場合、基になる <xref:System.Windows.Input.Mouse> クラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1034">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="2a269-1035">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1035">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="2a269-1036">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1036">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="2a269-1037">前の「」で説明されている問題を解決しても、次のいずれかの方法を使用してクラスを処理する派生クラスで、マウスの左ボタンダウンイベントの <xref:System.Windows.UIElement3D.MouseLeftButtonDown> イベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1037">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement3D.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="2a269-1038"><xref:System.Windows.UIElement3D.PreviewMouseDown> イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1038">Attach handlers for the <xref:System.Windows.UIElement3D.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="2a269-1039">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1039">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="2a269-1040"><xref:System.Windows.UIElement3D.AddHandler%2A> を呼び出し、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1040">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement3D.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="2a269-1041"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1041"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1042">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1042">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1043">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1043">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1044">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1044">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="2a269-1045">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1045">Routing strategy</span></span>|<span data-ttu-id="2a269-1046">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-1046">Direct</span></span>|  
|<span data-ttu-id="2a269-1047">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1047">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-1048">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1048">Override <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1049">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1049">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1050"><see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1050">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1051">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1051">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1052">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1052">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1053">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1053">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1054">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1054">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1055">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1055">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1056"><xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1056"><xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1057">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1057">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1058">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1058">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1059">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1059">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1060">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1060">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-1061">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1061">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-1062">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1062">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-1063"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1063">If you mark <xref:System.Windows.UIElement3D.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="2a269-1064">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1064">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-1065">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1065">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-1066">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1066">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1067"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1067"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1068">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1068">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1069">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1069">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1070">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1070">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="2a269-1071">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1071">Routing strategy</span></span>|<span data-ttu-id="2a269-1072">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-1072">Direct</span></span>|  
|<span data-ttu-id="2a269-1073">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1073">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-1074">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1074">Override <xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1075">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1075">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1076"><see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1076">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1077">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1077">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1078">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1078">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1079">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1079">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1080">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1080">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1081">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1081">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1082"><xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1082"><xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1083">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1083">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1084">この要素の上でマウス ポインターが動かされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1084">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1085">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.MouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1085">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-1086"><xref:System.Windows.UIElement3D.MouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1086">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-1087"><xref:System.Windows.UIElement3D.MouseMove> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1087"><xref:System.Windows.UIElement3D.MouseMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1088">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1088">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1089">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1089">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1090">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1090">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseMoveEvent>|  
|<span data-ttu-id="2a269-1091">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1091">Routing strategy</span></span>|<span data-ttu-id="2a269-1092">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-1092">Bubbling</span></span>|  
|<span data-ttu-id="2a269-1093">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1093">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="2a269-1094">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewMouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1094">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="2a269-1095">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1095">Override <xref:System.Windows.UIElement3D.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1096">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1096">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1097"><see cref="E:System.Windows.UIElement3D.MouseMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1097">Identifies the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1098">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1098">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1099">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1099">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1100">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1100">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1101">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1101">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1102">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1102">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1103"><xref:System.Windows.UIElement3D.MouseMoveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1103"><xref:System.Windows.UIElement3D.MouseMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1104">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1104">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1105">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1105">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1106">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1106">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1107">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1107">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-1108">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1108">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-1109">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1109">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-1110"><xref:System.Windows.UIElement3D.MouseRightButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1110">If you mark <xref:System.Windows.UIElement3D.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="2a269-1111">これには、<xref:System.Windows.Controls.Control.MouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1111">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="2a269-1112">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1112">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-1113">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1113">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-1114">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1114">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1115">右ボタンマウスイベントは、多くの場合、アプリケーションシナリオでネイティブに処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1115">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="2a269-1116">たとえば、マウスの右ボタンを押すと、コンテキストメニューが表示する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1116">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="2a269-1117">「 [ContextMenu の概要](~/docs/framework/wpf/controls/contextmenu-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1117">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-1118"><xref:System.Windows.UIElement3D.MouseRightButtonDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1118"><xref:System.Windows.UIElement3D.MouseRightButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1119">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1119">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1120">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1120">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1121">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1121">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>|  
|<span data-ttu-id="2a269-1122">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1122">Routing strategy</span></span>|<span data-ttu-id="2a269-1123">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-1123">Direct</span></span>|  
|<span data-ttu-id="2a269-1124">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1124">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-1125">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1125">Override <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1126">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1126">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1127"><see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1127">Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1128">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1128">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1129">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1129">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1130">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1130">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1131">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1131">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1132">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1132">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1133"><xref:System.Windows.UIElement3D.MouseRightButtonDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1133"><xref:System.Windows.UIElement3D.MouseRightButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1134">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1134">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1135">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1135">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1136">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1136">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1137">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1137">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-1138">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1138">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-1139">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1139">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-1140"><xref:System.Windows.UIElement3D.MouseRightButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1140">If you mark <xref:System.Windows.UIElement3D.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="2a269-1141">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1141">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-1142">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1142">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-1143">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1143">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-1144"><xref:System.Windows.UIElement3D.MouseRightButtonUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1144"><xref:System.Windows.UIElement3D.MouseRightButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1145">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1145">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1146">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1146">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1147">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1147">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>|  
|<span data-ttu-id="2a269-1148">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1148">Routing strategy</span></span>|<span data-ttu-id="2a269-1149">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-1149">Direct</span></span>|  
|<span data-ttu-id="2a269-1150">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1150">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-1151">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1151">Override <xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1152">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1152">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1153"><see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1153">Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1154">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1154">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1155">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1155">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1156">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1156">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1157">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1157">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1158">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1158">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1159"><xref:System.Windows.UIElement3D.MouseRightButtonUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1159"><xref:System.Windows.UIElement3D.MouseRightButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1160">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1160">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1161">この要素の上でいずれかのマウス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1161">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1162">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.MouseUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1162">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-1163"><xref:System.Windows.UIElement3D.MouseUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1163">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-1164"><xref:System.Windows.UIElement3D.MouseUp> イベントは、多くの場合、<xref:System.Windows.UIElement3D.MouseLeftButtonUp> または <xref:System.Windows.UIElement3D.MouseRightButtonUp>と共に発生します。これは、2つの標準マウスボタンのいずれかのリリースに対応します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1164">The <xref:System.Windows.UIElement3D.MouseUp> event is often raised together with either <xref:System.Windows.UIElement3D.MouseLeftButtonUp> or <xref:System.Windows.UIElement3D.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="2a269-1165"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> と <xref:System.Windows.UIElement3D.MouseRightButtonUp> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1165"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="2a269-1166"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> または <xref:System.Windows.UIElement3D.MouseRightButtonUp>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1166">See Remarks for <xref:System.Windows.UIElement3D.MouseLeftButtonUp> or <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span>  
  
 <span data-ttu-id="2a269-1167"><xref:System.Windows.UIElement3D.MouseUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1167"><xref:System.Windows.UIElement3D.MouseUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1168">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1168">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1169">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1169">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1170">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1170">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseUpEvent>|  
|<span data-ttu-id="2a269-1171">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1171">Routing strategy</span></span>|<span data-ttu-id="2a269-1172">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-1172">Bubbling</span></span>|  
|<span data-ttu-id="2a269-1173">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1173">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-1174">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewMouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1174">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="2a269-1175">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1175">Override <xref:System.Windows.UIElement3D.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1176">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1176">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1177"><see cref="E:System.Windows.UIElement3D.MouseUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1177">Identifies the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1178">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1178">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1179">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1179">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1180">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1180">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1181">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1181">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1182">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1182">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1183"><xref:System.Windows.UIElement3D.MouseUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1183"><xref:System.Windows.UIElement3D.MouseUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1184">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1184">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1185">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1185">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1186">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素から <xref:System.Windows.UIElement3D.MouseWheel> イベントを受け取った場合、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1186">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement3D.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="2a269-1187">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.MouseWheel> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1187">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-1188"><xref:System.Windows.UIElement3D.MouseWheel> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1188">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-1189"><xref:System.Windows.UIElement3D.MouseWheel> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1189"><xref:System.Windows.UIElement3D.MouseWheel> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1190">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1190">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-1191">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-1191">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-1192">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-1192">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseWheelEvent>|  
|<span data-ttu-id="2a269-1193">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-1193">Routing strategy</span></span>|<span data-ttu-id="2a269-1194">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-1194">Bubbling</span></span>|  
|<span data-ttu-id="2a269-1195">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-1195">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="2a269-1196">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewMouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1196">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="2a269-1197">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnMouseWheel%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1197">Override <xref:System.Windows.UIElement3D.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="2a269-1198">3-d サンプルでのイベントの処理</span><span class="sxs-lookup"><span data-stu-id="2a269-1198">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-1199"><see cref="E:System.Windows.UIElement3D.MouseWheel" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1199">Identifies the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1200">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1200">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-1201">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1201">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-1202">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1202">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-1203">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1203">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-1204">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1204">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1205"><xref:System.Windows.UIElement3D.MouseWheelEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1205"><xref:System.Windows.UIElement3D.MouseWheelEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1206">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1206">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement3D.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="2a269-1207">既存のタブ オーダーを検査するモード、または視覚的な移動方向を示すプロパティを含む検査要求。</span><span class="sxs-lookup"><span data-stu-id="2a269-1207">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="2a269-1208">この要素から別の要素へのフォーカスの移動を試みます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1208">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="2a269-1209">フォーカスの移動方向は、ガイドラインの方向によって指定され、この要素のビジュアル親の編成内で解釈されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1209">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="2a269-1210">要求した検査が実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1210"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1211">このメソッドの戻り値を必ず確認してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1211">Make sure you check the return value of this method.</span></span> <span data-ttu-id="2a269-1212">コントロールのコンポジションで定義されているタブストップに走査を実行し、トラバーサル要求がラップを要求しなかった場合、`false` の戻り値が返されることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1212">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 <span data-ttu-id="2a269-1213"><xref:System.Windows.UIElement3D.MoveFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1213"><xref:System.Windows.UIElement3D.MoveFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1214">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1214">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement3D.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1215">アクセス キー イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="2a269-1215">The event data to the access key event.</span></span> <span data-ttu-id="2a269-1216">イベント データは、呼び出されたキーを報告し、これらのイベントの送信を制御する <see cref="T:System.Windows.Input.AccessKeyManager" /> オブジェクトが、このアクセス キーの呼び出しを他の要素にも送信したかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1216">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span></span></param>
        <summary><span data-ttu-id="2a269-1217">この要素に対して有効なアクセス キーが呼び出されたときのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1217">Provides class handling for when an access key that is meaningful for this element is invoked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1218"><xref:System.Windows.UIElement3D> クラス、またはその他の場所に実際の AccessKey イベントは存在しません。これは、のハンドラーを発生させたりアタッチしたりすることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1218">There is no actual AccessKey event in the <xref:System.Windows.UIElement3D> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="2a269-1219">代わりに、イベントは専用のマネージャークラス (<xref:System.Windows.Input.AccessKeyManager>) によって生成されます。このクラスは、入力モデル全体に適用されるアクセスキーを検索するためにすべての入力を後処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1219">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 <span data-ttu-id="2a269-1220"><xref:System.Windows.UIElement3D.OnAccessKey%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1220"><xref:System.Windows.UIElement3D.OnAccessKey%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1221">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1221">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-1222"><see cref="T:System.Windows.UIElement3D" /> でのこのメソッドの既定の実装では、<see cref="M:System.Windows.UIElement3D.Focus" />を呼び出すことによって、この要素にキーボードフォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1222">The default implementation of this method in <see cref="T:System.Windows.UIElement3D" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement3D.Focus" />).</span></span> <span data-ttu-id="2a269-1223">ユーザー補助のシナリオでは想定される動作なので、フォーカスがある場合、実装はこの動作を perpetuate 必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1223">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span></span> <span data-ttu-id="2a269-1224">基本実装では、渡されたイベントデータに対しては何も実行されず、それ以上イベントは発生しません。フォーカスを設定するだけです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1224">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement3D.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-1225"><see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> インフラストラクチャの、クラス固有の [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 実装を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1225">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span></summary>
        <returns><span data-ttu-id="2a269-1226">型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</span><span class="sxs-lookup"><span data-stu-id="2a269-1226">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1227"><xref:System.Windows.UIElement3D.OnCreateAutomationPeer%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1227"><xref:System.Windows.UIElement3D.OnCreateAutomationPeer%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1228">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1228">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-1229">このメソッドの実装は、通常、特定の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装のコンストラクターを呼び出し、それを戻り値として返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1229">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span></span>  
  
<span data-ttu-id="2a269-1230">すべての <see cref="T:System.Windows.UIElement3D" /> 派生クラスは、独自の特定の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装を [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャに提供するために、このメソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1230">All <see cref="T:System.Windows.UIElement3D" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span> <span data-ttu-id="2a269-1231">このパターンの実装の詳細については、「<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1231">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1232">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1232">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1233">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1233">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1234">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1234">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1235">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1235">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1236">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1236">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1237">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1237">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1238">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1238">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1239">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1239">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1240">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1240">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1241">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1241">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1242">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1242">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1243">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1243">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1244"><xref:System.Windows.UIElement3D.OnDragEnter%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1244"><xref:System.Windows.UIElement3D.OnDragEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1245">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1245">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1246">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1246">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1247">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1247">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1248">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1248">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1249">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1249">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1250">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1250">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1251">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1251">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1252">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1252">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1253">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1253">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1254">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1254">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1255">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1255">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1256">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1256">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1257">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1257">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1258"><xref:System.Windows.UIElement3D.OnDragLeave%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1258"><xref:System.Windows.UIElement3D.OnDragLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1259">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1259">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1260">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1260">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1261">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1261">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1262">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1262">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1263">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1263">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1264">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1264">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1265">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1265">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1266">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1266">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1267">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1267">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1268">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1268">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1269">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1269">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1270">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1270">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1271">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1271">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1272"><xref:System.Windows.UIElement3D.OnDragOver%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1272"><xref:System.Windows.UIElement3D.OnDragOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1273">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1273">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1274">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1274">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1275">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.Drop" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1275">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.Drop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1276">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1276">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1277">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1277">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1278">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1278">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1279">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1279">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1280">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1280">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1281">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1281">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1282">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1282">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1283">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1283">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1284">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1284">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1285">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1285">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1286"><xref:System.Windows.UIElement3D.OnDrop%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1286"><xref:System.Windows.UIElement3D.OnDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1287">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1287">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement3D.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1288">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1288">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1289">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.GiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1289">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1290">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1290">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1291">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1291">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1292">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1292">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1293">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1293">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1294">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1294">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1295">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1295">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1296">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1296">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1297">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1297">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1298">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1298">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1299">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1299">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1300"><xref:System.Windows.UIElement3D.OnGiveFeedback%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1300"><xref:System.Windows.UIElement3D.OnGiveFeedback%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1301">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1301">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1302">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1302">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="2a269-1303">このイベント データには、<see cref="E:System.Windows.UIElement3D.GotFocus" /> イベントの識別子が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1303">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="2a269-1304">提供されたイベント データを使用して、<see cref="E:System.Windows.UIElement3D.GotFocus" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1304">Raises the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1305">このメソッドには、仮想には、イベントを発生させる既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1305">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="2a269-1306">この On \* メソッドの実装は、イベントを発生させることを目的としています。このメソッドの実装は、<xref:System.Windows.UIElement3D.IsFocused%2A> プロパティの値が変更されたときにイベントを発生させるために、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1306">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="2a269-1307"><xref:System.Windows.UIElement3D.OnGotFocus%2A> 実装は、そのイベントのクラス処理を追加するための便利な方法を提供するだけの、他の [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] \* 実装とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1307">The <xref:System.Windows.UIElement3D.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 <span data-ttu-id="2a269-1308"><xref:System.Windows.UIElement3D.OnGotFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1308"><xref:System.Windows.UIElement3D.OnGotFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1309">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1309">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-1310">意図的に、または異常なイベントを発生させない必要がある場合を除き、実装が基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1310">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="2a269-1311">そうしないと、通常のユーザー操作では、通常はこの要素にフォーカスが設定されているため、<see cref="E:System.Windows.UIElement3D.GotFocus" /> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1311">Otherwise, the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="2a269-1312">要素にフォーカスを設定しない場合は、<see cref="P:System.Windows.UIElement3D.Focusable" /> を <see langword="false" />に設定することによって、要素がフォーカスされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1312">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement3D.Focusable" /> to <see langword="false" />.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <altmember cref="E:System.Windows.UIElement3D.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1313">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1313">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1314">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1314">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1315">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1315">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1316">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1316">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1317">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1317">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1318">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1318">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1319">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1319">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1320">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1320">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1321">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1321">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1322">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1322">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1323">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1323">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1324">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1324">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1325"><xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1325"><xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1326">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1326">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1327">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1327">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1328">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1328">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1329">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1329">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1330">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1330">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1331">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1331">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1332">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1332">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1333">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1333">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1334">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1334">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1335">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1335">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1336">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1336">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1337">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1337">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1338">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1338">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1339"><xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1339"><xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1340">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1340">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1341">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1341">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1342">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1342">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1343">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1343">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1344">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1344">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1345">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1345">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1346">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1346">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1347">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1347">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1348">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1348">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1349">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1349">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1350">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1350">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1351">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1351">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1352">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1352">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1353"><xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1353"><xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1354">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1354">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1355">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1355">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1356">タッチがこの要素にキャプチャされているときに発生する <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1356">Provides class handling for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1357"><xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1357">The <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-1358">派生クラスの <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.GotTouchCapture> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1358">Override <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.GotTouchCapture> event.</span></span> <span data-ttu-id="2a269-1359">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1359">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1360">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1360">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1361">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1361">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1362">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1362">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1363">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1363">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="2a269-1364">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1364">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1365">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1365">Then the <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1366"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1366">Notice that the  <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="2a269-1367">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1367">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1368">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1368">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1369">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1369">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1370">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1370">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1371"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1371"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1372">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1372">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1373">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1373">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1374">この要素によって <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> イベントが発生する直前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1374">Invoked just before the <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="2a269-1375">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1375">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1376">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1376">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1377">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1377">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1378">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1378">Then the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1379"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1379">Notice that the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="2a269-1380">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1380">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1381">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1381">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1382">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1382">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1383">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1383">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1384"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1384"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1385">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1385">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1386">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1386">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1387">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1387">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1388">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1388">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1389">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsMouseCaptured%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1389">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1390">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1390">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1391">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsMouseCapturedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1391">Then the <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1392"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1392">Notice that the <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> event is not a routed event.</span></span> <span data-ttu-id="2a269-1393">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1393">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1394">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1394">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1395">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1395">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1396">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1396">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1397"><xref:System.Windows.UIElement3D.OnIsMouseCapturedChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1397"><xref:System.Windows.UIElement3D.OnIsMouseCapturedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1398">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1398">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1399">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1399">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1400">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1400">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1401">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1401">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1402"><xref:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1402"><xref:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1403">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1403">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-1404">この仮想メソッドは、<see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1404">This virtual method is called when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1405">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1405">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1406">その後、同じイベントデータインスタンスを使用して、<see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1406">Then the <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1407">イベントがルーティングイベントではないことに注意してください。したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1407">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="2a269-1408">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1408">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1409">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1409">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1410">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1410">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1411">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1411">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1412">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1412">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1413">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1413">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1414">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1414">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1415">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1415">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1416">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1416">Then the <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1417"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1417">Notice that the <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="2a269-1418">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1418">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1419">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1419">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1420">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1420">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1421">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1421">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1422"><xref:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1422"><xref:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1423">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1423">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1424">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1424">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1425">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1425">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1426">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1426">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1427">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsStylusCaptured%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1427">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1428">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1428">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1429">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsStylusCapturedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1429">Then the <xref:System.Windows.UIElement3D.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1430">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1430">Notice that the event is not a routed event.</span></span> <span data-ttu-id="2a269-1431">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1431">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1432">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1432">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1433">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1433">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1434">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1434">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1435"><xref:System.Windows.UIElement3D.OnIsStylusCapturedChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1435"><xref:System.Windows.UIElement3D.OnIsStylusCapturedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1436">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1436">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1437">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1437">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1438">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1438">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1439">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1439">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1440">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1440">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1441">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1441">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1442">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1442">Then the <xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1443">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1443">Notice that the event is not a routed event.</span></span> <span data-ttu-id="2a269-1444">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1444">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1445">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1445">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1446">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1446">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1447">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1447">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1448"><xref:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1448"><xref:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1449">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1449">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1450">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1450">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1451">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1451">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="2a269-1452">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1452">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1453">この仮想メソッドは、<xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> の依存関係プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1453">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="2a269-1454">仮想メソッドは最初に呼び出され、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1454">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="2a269-1455">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1455">Then the <xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="2a269-1456">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1456">Notice that the event is not a routed event.</span></span> <span data-ttu-id="2a269-1457">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1457">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="2a269-1458">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1458">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1459">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1459">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1460">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1460">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1461"><xref:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1461"><xref:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1462">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1462">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1463">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1463">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1464">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1464">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1465">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1465">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1466">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1466">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="2a269-1467">入力やコマンドのバインドなど、キーストロークに依存するその他のプログラミング機能は、通常のキーストロークとして公開される前に、キーストロークを処理することがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1467">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="2a269-1468">これらの入力システム機能によってイベントが処理済みとしてマークされている場合、<xref:System.Windows.UIElement3D.OnKeyDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1468">If these input system features mark the event as handled, then <xref:System.Windows.UIElement3D.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1469">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1469">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1470">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1470">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1471">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1471">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1472">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1472">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1473">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1473">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1474">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1474">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1475">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1475">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1476">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1476">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1477">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1477">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1478"><xref:System.Windows.UIElement3D.OnKeyDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1478"><xref:System.Windows.UIElement3D.OnKeyDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1479">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1479">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1480">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1480">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1481">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1481">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1482">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1482">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1483">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1483">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="2a269-1484">入力やコマンドのバインドなど、キーストロークに依存するその他のプログラミング機能は、通常のキーストロークとして公開される前に、キーストロークを処理することがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1484">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="2a269-1485">これらの入力システム機能によってイベントが処理済みとしてマークされている場合、<xref:System.Windows.UIElement3D.OnKeyUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1485">If these input system features mark the event as handled, then <xref:System.Windows.UIElement3D.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1486">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1486">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1487">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1487">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1488">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1488">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1489">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1489">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1490">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1490">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1491">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1491">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1492">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1492">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1493">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1493">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1494">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1494">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1495"><xref:System.Windows.UIElement3D.OnKeyUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1495"><xref:System.Windows.UIElement3D.OnKeyUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1496">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1496">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1497">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1497">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="2a269-1498">このイベント データには、<see cref="E:System.Windows.UIElement3D.LostFocus" /> イベントの識別子が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1498">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="2a269-1499">提供されたイベント データを使って、<see cref="E:System.Windows.UIElement3D.LostFocus" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1499">Raises the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1500">このメソッドには、仮想には、イベントを発生させる既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1500">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="2a269-1501">この On \* メソッドの実装は、イベントを発生させることを目的としています。このメソッドの実装は、<xref:System.Windows.UIElement3D.IsFocused%2A> プロパティの値が変更されたときにイベントを発生させるために、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1501">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="2a269-1502">この実装は、そのイベントのクラス処理を追加するのに便利な方法のみを提供する、他の [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] \* 実装とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1502">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 <span data-ttu-id="2a269-1503"><xref:System.Windows.UIElement3D.OnLostFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1503"><xref:System.Windows.UIElement3D.OnLostFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1504">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1504">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-1505">意図的に、または異常なイベントを発生させない必要がある場合を除き、実装が基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1505">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="2a269-1506">そうしないと、通常のユーザー操作では、通常はこの要素にフォーカスが設定されているため、<see cref="E:System.Windows.UIElement3D.LostFocus" /> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1506">Otherwise, the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="2a269-1507">要素にフォーカスを設定しない場合は、<see cref="P:System.Windows.UIElement3D.Focusable" /> を <see langword="false" />に設定することによって、要素がフォーカスされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1507">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement3D.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1508">イベント データを格納する <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1508">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1509">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1509">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1510">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1510">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1511">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1511">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1512">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1512">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1513">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1513">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1514">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1514">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1515">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1515">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1516">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1516">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1517">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1517">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1518">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1518">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1519">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1519">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1520"><xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1520"><xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1521">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1521">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1522">イベント データを格納する <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1522">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1523">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1523">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1524">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1524">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1525">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1525">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1526">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1526">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1527">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1527">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1528">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1528">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1529">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1529">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1530">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1530">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1531">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1531">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1532">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1532">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1533">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1533">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1534"><xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1534"><xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1535">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1535">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1536">イベント データを格納する <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1536">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1537">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1537">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1538">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1538">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1539">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1539">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1540">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1540">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1541">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1541">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1542">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1542">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1543">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1543">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1544">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1544">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1545">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1545">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1546">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1546">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1547">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1547">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1548"><xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1548"><xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1549">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1549">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1550">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1550">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1551">この要素がタッチのキャプチャを失ったときに発生する <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1551">Provides class handling for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1552"><xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1552">The <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-1553">派生クラスの <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.LostTouchCapture> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1553">Override <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.LostTouchCapture> event.</span></span> <span data-ttu-id="2a269-1554">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1554">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1555">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1555">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1556">このイベント データは、押されたマウス ボタンおよび処理済み状態に関する詳細を報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1556">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="2a269-1557">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1557">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1558">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1558">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1559">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1559">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="2a269-1560">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1560">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="2a269-1561">これらの入力システム機能が <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement3D.OnMouseDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1561">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1562">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement3D.MouseLeftButtonDown> と <xref:System.Windows.UIElement3D.MouseRightButtonDown>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1562">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="2a269-1563">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1563">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="2a269-1564">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1564">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="2a269-1565">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1565">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="2a269-1566">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1566">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="2a269-1567"><xref:System.Windows.UIElement3D.OnMouseDown%2A>を処理することで、すべての潜在的なマウスボタンのダウンアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1567">By handling <xref:System.Windows.UIElement3D.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="2a269-1568">この動作は望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1568">This behavior might be unwanted.</span></span> <span data-ttu-id="2a269-1569">このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1569">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="2a269-1570">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1570">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="2a269-1571">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1571">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1572">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1572">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1573">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1573">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1574">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1574">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1575">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1575">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1576">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1576">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1577">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1577">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1578">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1578">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1579">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1579">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1580"><xref:System.Windows.UIElement3D.OnMouseDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1580"><xref:System.Windows.UIElement3D.OnMouseDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1581">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1581">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1582">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1582">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1583">未処理の <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1583">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="2a269-1584">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1584">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1585">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1585">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1586">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1586">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1587">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1587">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1588">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1588">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1589">この場合、一致イベントはルーティングイベントで、直接ルーティング方法が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1589">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="2a269-1590">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1590">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1591"><xref:System.Windows.UIElement3D.OnMouseEnter%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1591"><xref:System.Windows.UIElement3D.OnMouseEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1592">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1592">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1593">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1593">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1594">未処理の <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1594">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="2a269-1595">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1595">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1596">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1596">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1597">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1597">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-1598">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1598">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-1599">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1599">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1600">この場合、一致イベントはルーティングイベントで、直接ルーティング方法が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1600">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="2a269-1601">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1601">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1602"><xref:System.Windows.UIElement3D.OnMouseLeave%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1602"><xref:System.Windows.UIElement3D.OnMouseLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1603">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1603">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1604">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1604">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1605">このイベント データは、マウスの左ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1605">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="2a269-1606">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> ルーティング イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1606">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="2a269-1607">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1607">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1608"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1608">The <xref:System.Windows.UIElement3D.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1609"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.MouseLeftButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1609"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseLeftButtonDown>.</span></span> <span data-ttu-id="2a269-1610">この要素の目的のために <xref:System.Windows.UIElement3D.MouseLeftButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1610">Although you can mark the <xref:System.Windows.UIElement3D.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1611">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1611">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1612"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1612">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1613">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1613">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1614">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1614">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1615"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1615">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1616">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1616">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="2a269-1617">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1617">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="2a269-1618">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1618">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="2a269-1619">たとえば、<xref:System.Windows.Controls.Button> から派生させ、基本実装を呼び出さずに派生クラスの <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドによって <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントは無効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1619">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="2a269-1620"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1620"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1621">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1621">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1622">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1622">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1623">このイベント データは、マウスの左ボタンが放されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1623">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="2a269-1624">未処理の <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1624">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1625">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1625">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1626"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1626">The <xref:System.Windows.UIElement3D.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1627"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.MouseLeftButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1627"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseLeftButtonUp>.</span></span> <span data-ttu-id="2a269-1628">この要素の目的のために <xref:System.Windows.UIElement3D.MouseLeftButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1628">Although you can mark the <xref:System.Windows.UIElement3D.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1629">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1629">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1630"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1630">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1631">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1631">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1632">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1632">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1633"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1633">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1634"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1634"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1635">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1635">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1636">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1636">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1637">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1637">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1638">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1638">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1639">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1639">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1640">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1640">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1641">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1641">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1642">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1642">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1643">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1643">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1644">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1644">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1645">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1645">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1646">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1646">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1647">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1647">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1648"><xref:System.Windows.UIElement3D.OnMouseMove%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1648"><xref:System.Windows.UIElement3D.OnMouseMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1649">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1649">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1650">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1650">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1651">このイベント データは、マウスの右ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1651">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="2a269-1652">未処理の <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1652">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1653">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1653">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1654"><xref:System.Windows.UIElement3D.MouseRightButtonDown> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1654">The <xref:System.Windows.UIElement3D.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1655"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.MouseRightButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1655"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="2a269-1656">この要素の目的のために <xref:System.Windows.UIElement3D.MouseRightButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1656">Although you can mark the <xref:System.Windows.UIElement3D.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1657">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1657">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1658"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1658">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1659">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1659">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1660">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1660">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1661"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1661">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1662">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1662">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="2a269-1663">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1663">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="2a269-1664">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1664">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="2a269-1665">たとえば、<xref:System.Windows.Controls.Control> から派生させ、base を呼び出さずに派生クラスの <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドにより、<xref:System.Windows.Controls.Control> の既定の動作の一部であるコントロールのコンテキストメニューサービスが無効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1665">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 <span data-ttu-id="2a269-1666"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1666"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1667">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1667">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1668">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1668">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1669">このイベント データは、マウスの右ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1669">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="2a269-1670">未処理の <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1670">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1671">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1671">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1672"><xref:System.Windows.UIElement3D.MouseRightButtonUp> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1672">The <xref:System.Windows.UIElement3D.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1673"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.MouseRightButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1673"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span> <span data-ttu-id="2a269-1674">この要素の目的のために <xref:System.Windows.UIElement3D.MouseRightButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1674">Although you can mark the <xref:System.Windows.UIElement3D.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1675">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1675">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1676"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1676">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1677">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1677">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1678">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1678">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1679"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1679">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1680"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1680"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1681">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1681">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1682">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1682">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1683">このイベント データは、マウス ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1683">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="2a269-1684">未処理の <see cref="E:System.Windows.Input.Mouse.MouseUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1684">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1685">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1685">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1686">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1686">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="2a269-1687">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1687">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="2a269-1688">これらの入力システム機能が <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement3D.OnMouseUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1688">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1689">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement3D.MouseLeftButtonUp> と <xref:System.Windows.UIElement3D.MouseRightButtonUp>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1689">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span> <span data-ttu-id="2a269-1690">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1690">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="2a269-1691">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1691">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="2a269-1692">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1692">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="2a269-1693">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1693">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="2a269-1694"><xref:System.Windows.UIElement3D.OnMouseUp%2A>を処理することで、すべてのマウスボタンのアップアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1694">By handling <xref:System.Windows.UIElement3D.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="2a269-1695">この動作は望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1695">This behavior might be unwanted.</span></span> <span data-ttu-id="2a269-1696">このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1696">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="2a269-1697">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1697">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="2a269-1698">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1698">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1699">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1699">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1700">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1700">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1701">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1701">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1702">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1702">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1703">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1703">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1704">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1704">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1705">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1705">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1706">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1706">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1707"><xref:System.Windows.UIElement3D.OnMouseUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1707"><xref:System.Windows.UIElement3D.OnMouseUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1708">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1708">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement3D.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1709">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1709">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1710">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1710">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1711">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1711">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1712">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1712">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1713">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1713">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1714">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1714">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1715">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1715">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1716">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1716">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1717">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1717">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1718">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1718">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1719">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1719">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1720">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1720">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1721"><xref:System.Windows.UIElement3D.OnMouseWheel%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1721"><xref:System.Windows.UIElement3D.OnMouseWheel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1722">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1722">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1723">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1723">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1724">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1724">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1725">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1725">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1726">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1726">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1727">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1727">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1728">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1728">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1729">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1729">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1730">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1730">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1731">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1731">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1732">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1732">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1733">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1733">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1734">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1734">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1735">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1735">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1736"><xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1736"><xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1737">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1737">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1738">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1738">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1739">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1739">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1740">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1740">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1741">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1741">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1742">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1742">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1743">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1743">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1744">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1744">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1745">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1745">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1746">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1746">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1747">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1747">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1748">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1748">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1749">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1749">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1750">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1750">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1751"><xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1751"><xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1752">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1752">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1753">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1753">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1754">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1754">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1755">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1755">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1756">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1756">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1757">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1757">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1758">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1758">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1759">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1759">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1760">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1760">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1761">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1761">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1762">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1762">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1763">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1763">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1764">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1764">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1765">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1765">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1766"><xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1766"><xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1767">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1767">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1768">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1768">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1769">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDrop" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1769">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1770">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1770">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1771">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1771">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1772">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1772">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1773">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1773">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1774">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1774">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1775">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1775">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1776">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1776">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1777">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1777">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1778">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1778">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1779">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1779">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1780">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1780">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1781"><xref:System.Windows.UIElement3D.OnPreviewDrop%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1781"><xref:System.Windows.UIElement3D.OnPreviewDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1782">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1782">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1783">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1783">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1784">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1784">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1785">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1785">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1786">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1786">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1787">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1787">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1788">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1788">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1789">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1789">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1790">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1790">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1791">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1791">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1792">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1792">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1793">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1793">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1794">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1794">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1795">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1795">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1796"><xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1796"><xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1797">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1797">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1798">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1798">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1799">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1799">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1800">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1800">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1801">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1801">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1802">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1802">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1803">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1803">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1804">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1804">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1805">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1805">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1806">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1806">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1807">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1807">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1808">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1808">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1809">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1809">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1810">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1810">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1811"><xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1811"><xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1812">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1812">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1813">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1813">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1814">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1814">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1815">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1815">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1816">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1816">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1817">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1817">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1818">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1818">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1819">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1819">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1820">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1820">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1821">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1821">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1822">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1822">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1823">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1823">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1824">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1824">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1825">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1825">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1826"><xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1826"><xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1827">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1827">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1828">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1828">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1829">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1829">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1830">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1830">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1831">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1831">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1832">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1832">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1833">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1833">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1834">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1834">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1835">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1835">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1836">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1836">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1837">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1837">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1838">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1838">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1839">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1839">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1840">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1840">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1841"><xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1841"><xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1842">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1842">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1843">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1843">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1844">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1844">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1845">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1845">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1846">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1846">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1847">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1847">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1848">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1848">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1849">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1849">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1850">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1850">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1851">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1851">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1852">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1852">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1853">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1853">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1854">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1854">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1855">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1855">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1856"><xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1856"><xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1857">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1857">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1858">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1858">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1859">このイベント データは、1 つ以上のマウス ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1859">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="2a269-1860">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1860">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1861">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1861">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1862">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1862">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="2a269-1863">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1863">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="2a269-1864">これらの入力システム機能が <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1864">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1865">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> と <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1865">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="2a269-1866">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1866">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="2a269-1867">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1867">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="2a269-1868">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1868">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="2a269-1869">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1869">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="2a269-1870"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>を処理することで、すべての潜在的なマウスボタンのダウンアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1870">By handling <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="2a269-1871">この動作は望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1871">This behavior might be unwanted.</span></span> <span data-ttu-id="2a269-1872">このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1872">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="2a269-1873">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1873">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="2a269-1874">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1874">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1875">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1875">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1876">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1876">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1877">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1877">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1878">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1878">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1879">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1879">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1880">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1880">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1881">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1881">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1882">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1882">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1883">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1883">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1884"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1884"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1885">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1885">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1886">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1886">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1887">このイベント データは、マウスの左ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1887">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="2a269-1888">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1888">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1889">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1889">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1890"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1890">The <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1891"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1891"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="2a269-1892">この要素の目的のために <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1892">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1893">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1893">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1894"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1894">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1895">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1895">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1896">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1896">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1897"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1897">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1898">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1898">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="2a269-1899">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1899">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="2a269-1900">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1900">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="2a269-1901">たとえば、<xref:System.Windows.Controls.Button> から派生させ、基本実装を呼び出さずに派生クラスの <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドによって <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントは無効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1901">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="2a269-1902"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1902"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1903">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1903">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1904">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1904">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1905">このイベント データは、マウスの左ボタンが放されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1905">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="2a269-1906">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1906">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1907">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1907">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1908"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1908">The <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1909"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1909"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="2a269-1910">この要素の目的のために <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1910">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1911">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1911">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1912"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1912">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1913">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1913">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1914">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1914">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1915"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1915">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1916"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1916"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1917">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1917">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1918">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1918">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1919">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1919">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1920">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1920">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1921">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1921">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1922">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1922">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1923">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1923">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1924">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1924">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1925">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1925">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1926">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1926">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1927">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1927">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1928">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1928">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1929">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1929">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-1930">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1930">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1931"><xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1931"><xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1932">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1932">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1933">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1933">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1934">このイベント データは、マウスの右ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1934">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="2a269-1935">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1935">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1936">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1936">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1937"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1937">The <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1938"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.MouseRightButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1938"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="2a269-1939">この要素の目的のために <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1939">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1940">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1940">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1941"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1941">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1942">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1942">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1943">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1943">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1944"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1944">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1945">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1945">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="2a269-1946">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1946">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="2a269-1947">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1947">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="2a269-1948">たとえば、<xref:System.Windows.Controls.Control> から派生させ、base を呼び出さずに派生クラスの <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドにより、<xref:System.Windows.Controls.Control> の既定の動作の一部であるコントロールのコンテキストメニューサービスが無効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1948">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 <span data-ttu-id="2a269-1949"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1949"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1950">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1950">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1951">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1951">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1952">このイベント データは、マウスの右ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1952">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="2a269-1953">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1953">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1954">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1954">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1955"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1955">The <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="2a269-1956"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement3D> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1956"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="2a269-1957">この要素の目的のために <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1957">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="2a269-1958">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1958">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-1959"><xref:System.Windows.UIElement3D> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1959">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="2a269-1960">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1960">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="2a269-1961">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1961">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2a269-1962"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement3D> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1962">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="2a269-1963"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1963"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1964">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1964">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1965">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1965">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="2a269-1966">このイベント データは、1 つ以上のマウス ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1966">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="2a269-1967">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1967">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1968">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1968">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1969">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1969">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="2a269-1970">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1970">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="2a269-1971">これらの入力システム機能が <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1971">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="2a269-1972">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> と <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1972">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="2a269-1973">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1973">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="2a269-1974">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1974">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="2a269-1975">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1975">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="2a269-1976">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1976">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="2a269-1977"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>を処理することで、すべてのマウスボタンのアップアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1977">By handling <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="2a269-1978">この動作は望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1978">This behavior might be unwanted.</span></span> <span data-ttu-id="2a269-1979">このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="2a269-1979">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="2a269-1980">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1980">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="2a269-1981">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1981">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1982">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1982">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1983">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1983">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1984">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1984">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1985">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1985">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-1986">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-1986">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-1987">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1987">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-1988">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1988">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-1989">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1989">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-1990"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-1990"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-1991">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-1991">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-1992">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-1992">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-1993">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-1993">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-1994">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1994">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-1995">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1995">This method has no default implementation.</span></span> <span data-ttu-id="2a269-1996">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-1996">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-1997">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-1997">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-1998">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-1998">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-1999">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-1999">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2000">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2000">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2001">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2001">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2002">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2002">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2003">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2003">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2004">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2004">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2005"><xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2005"><xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2006">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2006">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2007">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2007">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2008">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2008">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2009">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2009">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2010">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2010">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2011">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2011">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2012">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2012">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2013">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2013">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2014">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2014">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2015">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2015">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2016">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2016">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2017">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2017">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2018">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2018">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2019">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2019">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2020"><xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2020"><xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2021">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2021">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2022">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2022">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2023">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2023">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2024">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2024">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2025">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2025">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2026">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2026">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2027">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2027">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2028">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2028">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2029">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2029">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2030">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2030">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2031">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2031">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2032">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2032">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2033">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2033">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2034">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2034">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2035"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2035"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2036">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2036">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2037">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2037">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2038">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2038">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2039">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2039">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2040">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2040">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2041">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2041">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2042">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2042">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2043">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2043">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2044">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2044">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2045">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2045">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2046">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2046">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2047">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2047">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2048">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2048">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2049">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2049">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2050"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2050"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2051">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2051">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2052">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2052">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2053">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2053">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2054">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2054">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2055">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2055">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2056">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2056">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2057">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2057">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2058">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2058">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2059">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2059">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2060">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2060">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2061">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2061">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2062">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2062">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2063">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2063">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2064">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2064">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2065"><xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2065"><xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2066">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2066">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2067">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2067">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2068">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2068">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2069">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2069">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2070">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2070">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2071">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2071">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2072">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2072">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2073">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2073">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2074">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2074">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2075">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2075">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2076">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2076">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2077">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2077">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2078">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2078">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2079">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2079">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2080"><xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2080"><xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2081">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2081">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2082">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2082">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2083">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2083">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2084">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2084">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2085">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2085">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2086">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2086">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2087">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2087">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2088">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2088">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2089">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2089">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2090">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2090">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2091">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2091">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2092">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2092">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2093">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2093">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2094">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2094">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2095"><xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2095"><xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2096">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2096">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2097">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2097">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2098">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2098">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2099">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2099">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2100">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2100">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2101">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2101">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2102">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2102">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2103">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2103">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2104">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2104">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2105">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2105">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2106">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2106">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2107">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2107">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2108">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2108">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2109">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2109">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2110"><xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2110"><xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2111">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2111">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2112">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2112">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2113">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2113">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2114">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2114">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2115">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2115">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2116">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2116">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2117">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2117">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2118">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2118">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2119">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2119">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2120">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2120">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2121">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2121">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2122">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2122">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2123">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2123">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2124">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2124">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2125"><xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2125"><xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2126">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2126">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2127">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2127">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2128">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2128">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2129">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2129">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2130">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2130">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2131">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2131">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2132">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2132">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2133">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2133">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2134">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2134">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2135">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2135">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2136">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2136">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2137">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2137">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2138">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2138">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2139">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2139">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2140"><xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2140"><xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2141">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2141">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2142">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2142">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2143">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2143">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2144">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2144">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2145">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2145">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2146">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2146">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2147">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2147">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2148">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2148">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2149">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2149">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2150">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2150">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2151">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2151">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2152">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2152">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2153">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2153">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2154">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2154">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2155"><xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2155"><xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2156">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2156">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2157">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2157">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2158">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2158">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2159">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2159">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2160">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2160">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2161">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2161">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2162">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2162">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2163">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2163">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2164">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2164">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2165">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2165">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2166">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2166">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2167">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2167">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2168">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2168">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="2a269-2169">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2169">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="2a269-2170"><xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2170"><xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2171">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2171">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement3D.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2172">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2172">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2173">この要素がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2173">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2174"><xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2174">The <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2175">派生クラスの <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.PreviewTouchDown> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2175">Override <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchDown> event.</span></span> <span data-ttu-id="2a269-2176">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2176">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2177">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2177">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2178">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2178">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2179"><xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2179">The <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2180">派生クラスの <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.PreviewTouchMove> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2180">Override <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchMove> event.</span></span> <span data-ttu-id="2a269-2181">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2181">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2182">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2182">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2183">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2183">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2184"><xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2184">The <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2185">派生クラスの <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.PreviewTouchUp> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2185">Override <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchUp> event.</span></span> <span data-ttu-id="2a269-2186">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2186">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement3D.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2187">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2187">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2188">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2188">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2189">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2189">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2190">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2190">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2191">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2191">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2192">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2192">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2193">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2193">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2194">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2194">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2195">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2195">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2196">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2196">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2197">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2197">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2198">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2198">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2199"><xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2199"><xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2200">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2200">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement3D.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2201">イベント データを格納している <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2201">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2202">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2202">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2203">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2203">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2204">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2204">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2205">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2205">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2206">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2206">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2207">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2207">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2208">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2208">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2209">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2209">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2210">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2210">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2211">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2211">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2212">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2212">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2213"><xref:System.Windows.UIElement3D.OnQueryCursor%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2213"><xref:System.Windows.UIElement3D.OnQueryCursor%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2214">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2214">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2215">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2215">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2216">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2216">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2217">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2217">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2218">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2218">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2219">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2219">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2220">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2220">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2221">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2221">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2222">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2222">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2223">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2223">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2224">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2224">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2225">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2225">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2226">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2226">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2227"><xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2227"><xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2228">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2228">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2229">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2229">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2230">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2230">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2231">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2231">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2232">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2232">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2233">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2233">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2234">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2234">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2235">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2235">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2236">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2236">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2237">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2237">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2238">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2238">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2239">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2239">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2240">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2240">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2241"><xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2241"><xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2242">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2242">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement3D.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2243">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2243">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2244">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2244">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2245">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2245">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2246">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2246">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2247">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2247">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2248">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2248">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2249">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2249">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2250">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2250">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2251">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2251">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2252">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2252">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2253">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2253">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2254">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2254">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2255"><xref:System.Windows.UIElement3D.OnStylusDown%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2255"><xref:System.Windows.UIElement3D.OnStylusDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2256">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2256">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2257">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2257">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2258">未処理の <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2258">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="2a269-2259">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2259">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2260">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2260">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2261">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2261">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-2262">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2262">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-2263">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2263">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2264">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2264">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2265">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2265">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-2266"><xref:System.Windows.UIElement3D.OnStylusEnter%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2266"><xref:System.Windows.UIElement3D.OnStylusEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2267">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2267">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2268">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2268">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2269">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2269">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2270">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2270">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2271">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2271">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2272">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2272">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2273">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2273">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2274">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2274">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2275">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2275">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2276">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2276">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2277">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2277">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2278">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2278">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2279">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2279">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2280"><xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2280"><xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2281">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2281">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2282">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2282">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2283">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2283">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2284">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2284">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2285">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2285">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2286">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2286">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2287">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2287">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2288">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2288">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2289">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2289">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2290">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2290">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2291">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2291">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2292">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2292">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2293">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2293">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2294"><xref:System.Windows.UIElement3D.OnStylusInRange%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2294"><xref:System.Windows.UIElement3D.OnStylusInRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2295">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2295">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2296">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2296">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2297">未処理の <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2297">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="2a269-2298">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2298">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2299">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2299">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2300">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2300">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="2a269-2301">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2301">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="2a269-2302">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2302">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2303">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2303">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2304">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2304">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="2a269-2305"><xref:System.Windows.UIElement3D.OnStylusLeave%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2305"><xref:System.Windows.UIElement3D.OnStylusLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2306">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2306">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2307">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2307">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2308">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2308">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2309">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2309">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2310">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2310">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2311">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2311">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2312">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2312">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2313">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2313">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2314">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2314">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2315">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2315">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2316">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2316">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2317">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2317">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2318">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2318">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2319"><xref:System.Windows.UIElement3D.OnStylusMove%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2319"><xref:System.Windows.UIElement3D.OnStylusMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2320">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2320">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2321">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2321">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2322">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2322">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2323">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2323">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2324">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2324">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2325">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2325">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2326">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2326">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2327">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2327">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2328">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2328">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2329">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2329">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2330">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2330">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2331">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2331">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2332">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2332">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2333"><xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2333"><xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2334">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2334">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement3D.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2335">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2335">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2336">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2336">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2337">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2337">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2338">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2338">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2339">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2339">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2340">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2340">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2341">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2341">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2342">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2342">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2343">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2343">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2344">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2344">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2345">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2345">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2346">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2346">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2347"><xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2347"><xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2348">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2348">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2349">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2349">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2350">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2350">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2351">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2351">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2352">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2352">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2353">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2353">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2354">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2354">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2355">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2355">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2356">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2356">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2357">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2357">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2358">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2358">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2359">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2359">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2360">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2360">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2361"><xref:System.Windows.UIElement3D.OnStylusUp%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2361"><xref:System.Windows.UIElement3D.OnStylusUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2362">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2362">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement3D.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2363">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2363">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2364">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2364">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="2a269-2365">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2365">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2366">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2366">This method has no default implementation.</span></span> <span data-ttu-id="2a269-2367">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2367">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="2a269-2368">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2368">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="2a269-2369">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2369">In this case the matching event is a routed event.</span></span> <span data-ttu-id="2a269-2370">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2370">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="2a269-2371">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2371">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="2a269-2372">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2372">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="2a269-2373">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement3D> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2373">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="2a269-2374">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2374">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="2a269-2375"><xref:System.Windows.UIElement3D.OnTextInput%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2375"><xref:System.Windows.UIElement3D.OnTextInput%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2376">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2376">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2377">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2377">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2378">この要素の内部がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement3D.TouchDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2378">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2379"><xref:System.Windows.UIElement3D.OnTouchDown%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2379">The <xref:System.Windows.UIElement3D.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2380">派生クラスの <xref:System.Windows.UIElement3D.OnTouchDown%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.TouchDown> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2380">Override <xref:System.Windows.UIElement3D.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchDown> event.</span></span> <span data-ttu-id="2a269-2381">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnTouchDown%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2381">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2382">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2382">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2383">この要素の境界の外部から内部にタッチが移動したときに発生する <see cref="E:System.Windows.UIElement3D.TouchEnter" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2383">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2384"><xref:System.Windows.UIElement3D.OnTouchEnter%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2384">The <xref:System.Windows.UIElement3D.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2385">派生クラスの <xref:System.Windows.UIElement3D.OnTouchEnter%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.TouchEnter> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2385">Override <xref:System.Windows.UIElement3D.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchEnter> event.</span></span> <span data-ttu-id="2a269-2386">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnTouchEnter%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2386">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2387">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2387">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2388">この要素の境界の内部から外部にタッチが移動したときに発生する <see cref="E:System.Windows.UIElement3D.TouchLeave" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2388">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2389"><xref:System.Windows.UIElement3D.OnTouchLeave%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2389">The <xref:System.Windows.UIElement3D.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2390">派生クラスの <xref:System.Windows.UIElement3D.OnTouchLeave%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.TouchLeave> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2390">Override <xref:System.Windows.UIElement3D.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchLeave> event.</span></span> <span data-ttu-id="2a269-2391">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnTouchLeave%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2391">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2392">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2392">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2393">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement3D.TouchMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2393">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2394"><xref:System.Windows.UIElement3D.OnTouchMove%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2394">The <xref:System.Windows.UIElement3D.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2395">派生クラスの <xref:System.Windows.UIElement3D.OnTouchMove%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.TouchMove> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2395">Override <xref:System.Windows.UIElement3D.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchMove> event.</span></span> <span data-ttu-id="2a269-2396">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnTouchMove%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2396">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-2397">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-2397">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2a269-2398">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement3D.TouchUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2398">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2399"><xref:System.Windows.UIElement3D.OnTouchUp%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2399">The <xref:System.Windows.UIElement3D.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="2a269-2400">派生クラスの <xref:System.Windows.UIElement3D.OnTouchUp%2A> をオーバーライドして、<xref:System.Windows.UIElement3D.TouchUp> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2400">Override <xref:System.Windows.UIElement3D.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchUp> event.</span></span> <span data-ttu-id="2a269-2401">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement3D.OnTouchUp%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2401">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUpdateModel">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdateModel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdateModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnUpdateModel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdateModel ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdateModel();" />
      <MemberSignature Language="F#" Value="abstract member OnUpdateModel : unit -&gt; unit&#xA;override this.OnUpdateModel : unit -&gt; unit" Usage="uIElement3D.OnUpdateModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-2402">派生クラスでオーバーライドした場合に、レンダリング操作に関与します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2402">Participates in rendering operations when overridden in a derived class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2403"><xref:System.Windows.UIElement3D> クラスからクラスを派生させる場合、このメソッドを <xref:System.Windows.UIElement3D.InvalidateModel%2A> メソッドと共に使用して、要素のモデルを更新できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2403">When you derive a class from the <xref:System.Windows.UIElement3D> class, you can use this method together with the <xref:System.Windows.UIElement3D.InvalidateModel%2A> method to refresh the model of the element.</span></span>  
  
 <span data-ttu-id="2a269-2404">高度なシナリオでは、このメソッドを呼び出す必要があるだけです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2404">You only need to call this method in advanced scenarios.</span></span> <span data-ttu-id="2a269-2405">このような高度なシナリオの1つは、派生クラスに外観に影響を与える複数のプロパティがあり、基になるモデルを1回だけ更新する場合です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2405">One such advanced scenario is if the derived class has multiple properties that affect the appearance, and you want to update the underlying model only once.</span></span> <span data-ttu-id="2a269-2406"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> メソッド内で、<xref:System.Windows.Media.Media3D.Visual3D> クラスの <xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A> プロパティを更新できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2406">Within the <xref:System.Windows.UIElement3D.OnUpdateModel%2A> method you could update the <xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A> property of the <xref:System.Windows.Media.Media3D.Visual3D> class.</span></span>  
  
 <span data-ttu-id="2a269-2407">このメソッドには、<xref:System.Windows.UIElement3D> クラスに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2407">This method has no default implementation in the <xref:System.Windows.UIElement3D> class.</span></span>  
  
 <span data-ttu-id="2a269-2408"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2408"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2409">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2409">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a269-2410">次の例では、<xref:System.Windows.UIElement3D> クラスから派生させて `Sphere` クラスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2410">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="2a269-2411">完全なサンプルについては、「 [UIElement3D 球のサンプル](https://go.microsoft.com/fwlink/?LinkID=160044)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2411">For the complete sample, see [UIElement3D Sphere Sample](https://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement3D.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="2a269-2412">直前の親。</span><span class="sxs-lookup"><span data-stu-id="2a269-2412">The previous parent.</span></span> <span data-ttu-id="2a269-2413"><see langword="null" /> に直前の親要素がなかった場合は、<see cref="T:System.Windows.DependencyObject" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2413">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span></span></param>
        <summary><span data-ttu-id="2a269-2414">この <see cref="T:System.Windows.UIElement3D" /> の親要素によって、基になるビジュアル親に対する変更が報告されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2414">Invoked when the parent element of this <see cref="T:System.Windows.UIElement3D" /> reports a change to its underlying visual parent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2415"><xref:System.Windows.UIElement3D.OnVisualParentChanged%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2415"><xref:System.Windows.UIElement3D.OnVisualParentChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2416">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2416">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2a269-2417">このメソッドをオーバーライドする場合は、常に基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2417">If you override this method, always call the base implementation.</span></span> <span data-ttu-id="2a269-2418">既定の基本実装では、逆継承されたプロパティ状態の内部メンテナンスが実行されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2418">The default base implementation performs some internal maintenance of reverse-inherited property state.</span></span> <span data-ttu-id="2a269-2419">基本実装を呼び出さないと、この状態は無効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2419">Failing to call the base implementation will invalidate this state.</span></span>  
  
<span data-ttu-id="2a269-2420">このメソッドは、<see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2420">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="2a269-2421">また、<see cref="T:System.Windows.FrameworkElement" /> と <see cref="T:System.Windows.Window" /> は両方とも <see cref="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />の <see cref="T:System.Windows.UIElement3D" /> の実装をオーバーライドし、シールする <see cref="T:System.Windows.Window" /> ます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2421"><see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement3D" /> implementation of <see cref="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement3D.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="2a269-2422">要求したフォーカス検査の方向。</span><span class="sxs-lookup"><span data-stu-id="2a269-2422">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="2a269-2423">派生クラスでオーバーライドされると、指定したフォーカス検査方向のフォーカスを受け取ることになる要素を返します。実際にはフォーカスはその要素に移動しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-2423">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="2a269-2424"><see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> が実際に呼び出された場合にフォーカスを受け取る要素。</span><span class="sxs-lookup"><span data-stu-id="2a269-2424">The element that would have received focus if <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2425">このクラスでのこのメソッドの既定の実装は不完全であり、常に `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2425">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 <span data-ttu-id="2a269-2426"><xref:System.Windows.UIElement3D.PredictFocus%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2426"><xref:System.Windows.UIElement3D.PredictFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2427">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2427">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2428">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2428">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2429">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewDragEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2429">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2430"><xref:System.Windows.UIElement3D.PreviewDragEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2430">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2431"><xref:System.Windows.UIElement3D.PreviewDragEnter> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2431"><xref:System.Windows.UIElement3D.PreviewDragEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2432">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2432">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2433">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2433">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2434">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2434">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragEnterEvent>|  
|<span data-ttu-id="2a269-2435">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2435">Routing strategy</span></span>|<span data-ttu-id="2a269-2436">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2436">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2437">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2437">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-2438">対応するバブルイベントは <xref:System.Windows.UIElement3D.DragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2438">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragEnter>.</span></span>  
  
-   <span data-ttu-id="2a269-2439">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2439">Override <xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2440"><see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2440">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2441">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2441">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2442">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2442">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2443">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2443">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2444">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2444">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2445">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2445">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2446"><xref:System.Windows.UIElement3D.PreviewDragEnterEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2446"><xref:System.Windows.UIElement3D.PreviewDragEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2447">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2447">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2448">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2448">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2449">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewDragLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2449">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2450"><xref:System.Windows.UIElement3D.PreviewDragLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2450">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2451"><xref:System.Windows.UIElement3D.PreviewDragLeave> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2451"><xref:System.Windows.UIElement3D.PreviewDragLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2452">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2452">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2453">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2453">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2454">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2454">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>|  
|<span data-ttu-id="2a269-2455">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2455">Routing strategy</span></span>|<span data-ttu-id="2a269-2456">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2456">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2457">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2457">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-2458">対応するバブルイベントは <xref:System.Windows.UIElement3D.DragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2458">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragLeave>.</span></span>  
  
-   <span data-ttu-id="2a269-2459">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2459">Override <xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2460"><see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2460">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2461">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2461">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2462">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2462">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2463">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2463">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2464">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2464">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2465">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2465">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2466"><xref:System.Windows.UIElement3D.PreviewDragLeaveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2466"><xref:System.Windows.UIElement3D.PreviewDragLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2467">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2467">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2468">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2468">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2469">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewDragOver> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2469">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2470"><xref:System.Windows.UIElement3D.PreviewDragOver> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2470">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2471"><xref:System.Windows.UIElement3D.PreviewDragOver> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2471"><xref:System.Windows.UIElement3D.PreviewDragOver> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2472">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2472">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2473">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2473">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2474">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2474">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragOverEvent>|  
|<span data-ttu-id="2a269-2475">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2475">Routing strategy</span></span>|<span data-ttu-id="2a269-2476">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2476">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2477">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2477">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-2478">対応するバブルイベントは <xref:System.Windows.UIElement3D.DragOver>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2478">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragOver>.</span></span>  
  
-   <span data-ttu-id="2a269-2479">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2479">Override <xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2480"><see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2480">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2481">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2481">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2482">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2482">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2483">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2483">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2484">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2484">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2485">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2485">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2486"><xref:System.Windows.UIElement3D.PreviewDragOverEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2486"><xref:System.Windows.UIElement3D.PreviewDragOverEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2487">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2487">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2488">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2488">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2489">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewDrop> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2489">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2490"><xref:System.Windows.UIElement3D.PreviewDrop> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2490">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2491"><xref:System.Windows.UIElement3D.PreviewDrop> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2491"><xref:System.Windows.UIElement3D.PreviewDrop> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2492">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2492">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2493">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2493">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2494">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2494">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDropEvent>|  
|<span data-ttu-id="2a269-2495">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2495">Routing strategy</span></span>|<span data-ttu-id="2a269-2496">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2496">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2497">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2497">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="2a269-2498">対応するバブルイベントは <xref:System.Windows.UIElement3D.Drop>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2498">The corresponding bubbling event is <xref:System.Windows.UIElement3D.Drop>.</span></span>  
  
-   <span data-ttu-id="2a269-2499">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewDrop%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2499">Override <xref:System.Windows.UIElement3D.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2500"><see cref="E:System.Windows.UIElement3D.PreviewDrop" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2500">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2501">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2501">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2502">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2502">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2503">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2503">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2504">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2504">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2505">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2505">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2506"><xref:System.Windows.UIElement3D.PreviewDropEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2506"><xref:System.Windows.UIElement3D.PreviewDropEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2507">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2507">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2508">ドラッグ アンド ドロップ操作が開始されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2508">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2509"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> イベントを使用すると、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、ドラッグイベントのソースでマウスポインターの外観を変更できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2509">The <xref:System.Windows.UIElement3D.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="2a269-2510">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewGiveFeedback> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2510">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2511"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2511">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2512"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2512"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2513">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2513">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2514">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2514">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2515">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2515">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="2a269-2516">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2516">Routing strategy</span></span>|<span data-ttu-id="2a269-2517">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2517">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2518">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2518">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="2a269-2519">対応するバブルイベントは <xref:System.Windows.UIElement3D.GiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2519">The corresponding bubbling event is <xref:System.Windows.UIElement3D.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="2a269-2520">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2520">Override <xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2521"><see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2521">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2522">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2522">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2523">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2523">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2524">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2524">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2525">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2525">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2526">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2526">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2527"><xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2527"><xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2528">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2528">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2529">この要素にキーボード フォーカスが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2529">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2530">このイベントではトンネリングルーティングが使用されるため、フォーカスがある要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2530">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-2531">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2531">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="2a269-2532">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2532">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2533"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2533">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2534"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2534"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2535">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2535">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2536">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2536">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2537">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2537">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="2a269-2538">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2538">Routing strategy</span></span>|<span data-ttu-id="2a269-2539">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2539">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2540">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2540">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="2a269-2541">対応するバブルイベントは <xref:System.Windows.UIElement3D.GotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2541">The corresponding bubbling event is <xref:System.Windows.UIElement3D.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="2a269-2542">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2542">Override <xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2543"><see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2543">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2544">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2544">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2545">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2545">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2546">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2546">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2547">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2547">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2548">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2548">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2549"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2549"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2550">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2550">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2551">この要素にキーボード フォーカスがある状態でいずれかのキーが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2551">Occurs when a key is pressed while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2552">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2552">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="2a269-2553">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewKeyDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2553">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2554"><xref:System.Windows.UIElement3D.PreviewKeyDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2554">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2555"><xref:System.Windows.UIElement3D.PreviewKeyDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2555"><xref:System.Windows.UIElement3D.PreviewKeyDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2556">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2556">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2557">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2557">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2558">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2558">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewKeyDownEvent>|  
|<span data-ttu-id="2a269-2559">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2559">Routing strategy</span></span>|<span data-ttu-id="2a269-2560">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2560">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2561">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2561">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="2a269-2562">対応するバブルイベントは <xref:System.Windows.UIElement3D.KeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2562">The corresponding bubbling event is <xref:System.Windows.UIElement3D.KeyDown>.</span></span>  
  
-   <span data-ttu-id="2a269-2563">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2563">Override <xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2564"><see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2564">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2565">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2565">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2566">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2566">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2567">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2567">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2568">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2568">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2569">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2569">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2570"><xref:System.Windows.UIElement3D.PreviewKeyDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2570"><xref:System.Windows.UIElement3D.PreviewKeyDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2571">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2571">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2572">この要素にキーボード フォーカスがある状態でキーが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2572">Occurs when a key is released while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2573">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2573">Key handling interacts with other platform features such as commanding and text composition.</span></span>  
  
 <span data-ttu-id="2a269-2574">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewKeyUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2574">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2575"><xref:System.Windows.UIElement3D.PreviewKeyUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2575">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2576"><xref:System.Windows.UIElement3D.PreviewKeyUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2576"><xref:System.Windows.UIElement3D.PreviewKeyUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2577">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2577">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2578">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2578">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2579">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2579">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewKeyUpEvent>|  
|<span data-ttu-id="2a269-2580">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2580">Routing strategy</span></span>|<span data-ttu-id="2a269-2581">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2581">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2582">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2582">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="2a269-2583">対応するバブルイベントは <xref:System.Windows.UIElement3D.KeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2583">The corresponding bubbling event is <xref:System.Windows.UIElement3D.KeyUp>.</span></span>  
  
-   <span data-ttu-id="2a269-2584">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2584">Override <xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2585"><see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2585">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2586">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2586">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2587">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2587">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2588">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2588">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2589">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2589">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2590">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2590">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2591"><xref:System.Windows.UIElement3D.PreviewKeyUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2591"><xref:System.Windows.UIElement3D.PreviewKeyUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2592">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2592">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2593">この要素からキーボード フォーカスが離れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2593">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2594">このイベントではトンネリングルーティングが使用されるため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2594">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="2a269-2595">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2595">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="2a269-2596">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2596">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2597"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2597">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2598"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2598"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2599">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2599">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2600">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2600">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2601">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2601">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="2a269-2602">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2602">Routing strategy</span></span>|<span data-ttu-id="2a269-2603">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2603">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2604">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2604">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="2a269-2605">対応するバブルイベントは <xref:System.Windows.UIElement3D.LostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2605">The corresponding bubbling event is <xref:System.Windows.UIElement3D.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="2a269-2606">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2606">Override <xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2607"><see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2607">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2608">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2608">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2609">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2609">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2610">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2610">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2611">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2611">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2612">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2612">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2613"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2613"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2614">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2614">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2615">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2615">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2616">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewMouseDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2616">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2617"><xref:System.Windows.UIElement3D.PreviewMouseDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2617">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2618"><xref:System.Windows.UIElement3D.PreviewMouseDown> イベントは、多くの場合、<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> または <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2618">The <xref:System.Windows.UIElement3D.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="2a269-2619"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> と <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2619"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="2a269-2620"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> または <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2620">See Remarks for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</span></span>  
  
 <span data-ttu-id="2a269-2621"><xref:System.Windows.UIElement3D.PreviewMouseDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2621"><xref:System.Windows.UIElement3D.PreviewMouseDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2622">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2622">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2623">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2623">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2624">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2624">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseDownEvent>|  
|<span data-ttu-id="2a269-2625">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2625">Routing strategy</span></span>|<span data-ttu-id="2a269-2626">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2626">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2627">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2627">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2628">対応するバブルイベントは <xref:System.Windows.UIElement3D.MouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2628">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseDown>.</span></span>  
  
-   <span data-ttu-id="2a269-2629">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2629">Override <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2630"><see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2630">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2631">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2631">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2632">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2632">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2633">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2633">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2634">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2634">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2635">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2635">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2636"><xref:System.Windows.UIElement3D.PreviewMouseDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2636"><xref:System.Windows.UIElement3D.PreviewMouseDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2637">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2637">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2638">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2638">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2639">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2639">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2640">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2640">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-2641">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2641">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-2642">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2642">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-2643"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2643">If you mark <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="2a269-2644">これには、<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2644">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="2a269-2645">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2645">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-2646">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2646">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-2647">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2647">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2648"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2648"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2649">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2649">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2650">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2650">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2651">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2651">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="2a269-2652">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2652">Routing strategy</span></span>|<span data-ttu-id="2a269-2653">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-2653">Direct</span></span>|  
|<span data-ttu-id="2a269-2654">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2654">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2655">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2655">Override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2656"><see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2656">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2657">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2657">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2658">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2658">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2659">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2659">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2660">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2660">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2661">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2661">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2662"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2662"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2663">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2663">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2664">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2664">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2665">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2665">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2666">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2666">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-2667">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2667">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-2668">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2668">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-2669"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2669">If you mark <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="2a269-2670">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2670">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-2671">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2671">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-2672">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2672">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2673"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2673"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2674">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2674">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2675">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2675">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2676">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2676">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="2a269-2677">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2677">Routing strategy</span></span>|<span data-ttu-id="2a269-2678">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-2678">Direct</span></span>|  
|<span data-ttu-id="2a269-2679">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2679">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2680">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2680">Override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2681"><see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2681">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2682">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2682">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2683">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2683">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2684">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2684">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2685">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2685">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2686">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2686">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2687"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2687"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2688">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2688">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2689">この要素上でマウス ポインターが動かされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2689">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2690">このイベントは、マウスポインターが要素の境界内に最初に入ってから、マウスポインターが要素の境界内に残ったままになると、両方とも発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2690">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="2a269-2691">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewMouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2691">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2692"><xref:System.Windows.UIElement3D.PreviewMouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2692">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2693"><xref:System.Windows.UIElement3D.PreviewMouseMove> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2693"><xref:System.Windows.UIElement3D.PreviewMouseMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2694">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2694">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2695">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2695">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2696">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2696">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>|  
|<span data-ttu-id="2a269-2697">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2697">Routing strategy</span></span>|<span data-ttu-id="2a269-2698">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2698">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2699">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2699">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="2a269-2700">対応するバブルイベントは <xref:System.Windows.UIElement3D.MouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2700">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseMove>.</span></span>  
  
-   <span data-ttu-id="2a269-2701">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2701">Override <xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2702"><see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2702">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2703">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2703">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2704">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2704">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2705">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2705">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2706">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2706">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2707">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2707">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2708"><xref:System.Windows.UIElement3D.PreviewMouseMoveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2708"><xref:System.Windows.UIElement3D.PreviewMouseMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2709">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2709">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2710">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2710">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2711">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2711">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2712">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2712">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-2713">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2713">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-2714">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2714">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-2715"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2715">If you mark <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="2a269-2716">これには、<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2716">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="2a269-2717">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2717">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-2718">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2718">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-2719">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2719">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2720"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2720"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2721">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2721">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2722">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2722">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2723">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2723">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="2a269-2724">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2724">Routing strategy</span></span>|<span data-ttu-id="2a269-2725">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-2725">Direct</span></span>|  
|<span data-ttu-id="2a269-2726">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2726">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2727">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2727">Override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2728"><see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2728">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2729">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2729">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2730">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2730">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2731">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2731">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2732">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2732">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2733">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2733">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2734"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2734"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2735">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2735">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2736">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2736">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2737">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.UIElement3D>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2737">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2738">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="2a269-2738">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="2a269-2739">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2739">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="2a269-2740">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement3D.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2740">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="2a269-2741"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2741">If you mark <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="2a269-2742">概念的には、このイベント (および <xref:System.Windows.UIElement3D>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2742">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="2a269-2743">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2743">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="2a269-2744">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement3D>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2744">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-2745"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2745"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2746">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2746">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2747">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2747">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2748">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2748">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="2a269-2749">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2749">Routing strategy</span></span>|<span data-ttu-id="2a269-2750">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-2750">Direct</span></span>|  
|<span data-ttu-id="2a269-2751">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2751">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2752">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2752">Override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2753"><see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2753">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2754">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2754">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2755">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2755">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2756">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2756">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2757">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2757">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2758">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2758">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2759"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2759"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2760">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2760">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2761">この要素の上にマウス ポインターがある状態でいずれかのマウス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2761">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2762">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewMouseUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2762">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2763"><xref:System.Windows.UIElement3D.PreviewMouseUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2763">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2764"><xref:System.Windows.UIElement3D.PreviewMouseUp> イベントは、多くの場合、<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> または <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2764">The <xref:System.Windows.UIElement3D.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="2a269-2765"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> と <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2765"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="2a269-2766"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> または <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2766">See Remarks for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span>  
  
 <span data-ttu-id="2a269-2767"><xref:System.Windows.UIElement3D.PreviewMouseUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2767"><xref:System.Windows.UIElement3D.PreviewMouseUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2768">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2768">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2769">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2769">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2770">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2770">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseUpEvent>|  
|<span data-ttu-id="2a269-2771">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2771">Routing strategy</span></span>|<span data-ttu-id="2a269-2772">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2772">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2773">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2773">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2774">対応するバブルイベントは <xref:System.Windows.UIElement3D.MouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2774">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseUp>.</span></span>  
  
-   <span data-ttu-id="2a269-2775">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2775">Override <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2776"><see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2776">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2777">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2777">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2778">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2778">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2779">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2779">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2780">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2780">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2781">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2781">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2782"><xref:System.Windows.UIElement3D.PreviewMouseUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2782"><xref:System.Windows.UIElement3D.PreviewMouseUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2783">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2783">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2784">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2784">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2785">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素からこのイベントを受け取った場合、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2785">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="2a269-2786">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewMouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2786">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2787"><xref:System.Windows.UIElement3D.PreviewMouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2787">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2788"><xref:System.Windows.UIElement3D.PreviewMouseWheel> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2788"><xref:System.Windows.UIElement3D.PreviewMouseWheel> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2789">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2789">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2790">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2790">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2791">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2791">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>|  
|<span data-ttu-id="2a269-2792">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2792">Routing strategy</span></span>|<span data-ttu-id="2a269-2793">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2793">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2794">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2794">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="2a269-2795">対応するバブルイベントは <xref:System.Windows.UIElement3D.MouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2795">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="2a269-2796">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2796">Override <xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2797"><see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2797">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2798">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2798">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2799">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2799">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2800">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2800">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2801">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2801">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2802">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2802">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2803"><xref:System.Windows.UIElement3D.PreviewMouseWheelEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2803"><xref:System.Windows.UIElement3D.PreviewMouseWheelEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2804">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2804">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2805">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2805">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2806"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> イベントを使用すると、ドラッグ元はドラッグアンドドロップ操作をキャンセルする必要があるかどうかを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2806">The <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="2a269-2807">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2807">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2808"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2808">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2809"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2809"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2810">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2810">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2811">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2811">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2812">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2812">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="2a269-2813">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2813">Routing strategy</span></span>|<span data-ttu-id="2a269-2814">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2814">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2815">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2815">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="2a269-2816">対応するバブルイベントは <xref:System.Windows.UIElement3D.QueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2816">The corresponding bubbling event is <xref:System.Windows.UIElement3D.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="2a269-2817">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2817">Override <xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2818"><see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2818">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2819">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2819">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2820">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2820">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2821">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2821">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2822">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2822">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2823">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2823">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2824"><xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2824"><xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2825">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2825">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2826">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2826">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2827">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusButtonDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2827">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2828"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2828">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2829">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2829">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2830">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2830">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2831"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2831"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2832">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2832">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2833">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2833">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2834">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2834">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="2a269-2835">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2835">Routing strategy</span></span>|<span data-ttu-id="2a269-2836">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2836">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2837">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2837">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2838">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2838">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="2a269-2839">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2839">Override <xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2840"><see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2840">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2841">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2841">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2842">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2842">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2843">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2843">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2844">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2844">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2845">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2845">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2846"><xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2846"><xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2847">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2847">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2848">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2848">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2849">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusButtonUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2849">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2850"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2850">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2851">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2851">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2852">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2852">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2853"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2853"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2854">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2854">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2855">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2855">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2856">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2856">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="2a269-2857">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2857">Routing strategy</span></span>|<span data-ttu-id="2a269-2858">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2858">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2859">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2859">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-2860">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2860">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="2a269-2861">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2861">Override <xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2862"><see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2862">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2863">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2863">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2864">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2864">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2865">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2865">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2866">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2866">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2867">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2867">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2868"><xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2868"><xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2869">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2869">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2870">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2870">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2871">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2871">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2872"><xref:System.Windows.UIElement3D.PreviewStylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2872">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2873">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2873">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2874">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2874">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2875"><xref:System.Windows.UIElement3D.PreviewStylusDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2875"><xref:System.Windows.UIElement3D.PreviewStylusDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2876">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2876">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2877">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2877">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2878">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2878">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusDownEvent>|  
|<span data-ttu-id="2a269-2879">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2879">Routing strategy</span></span>|<span data-ttu-id="2a269-2880">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2880">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2881">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2881">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="2a269-2882">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2882">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusDown>.</span></span>  
  
-   <span data-ttu-id="2a269-2883">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2883">Override <xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2884"><see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2884">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2885">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2885">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2886">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2886">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2887">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2887">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2888">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2888">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2889">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2889">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2890"><xref:System.Windows.UIElement3D.PreviewStylusDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2890"><xref:System.Windows.UIElement3D.PreviewStylusDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2891">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2891">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2892">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2892">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2893">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusInAirMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2893">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2894"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2894">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2895">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2895">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2896">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2896">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2897"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2897"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2898">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2898">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2899">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2899">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2900">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2900">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="2a269-2901">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2901">Routing strategy</span></span>|<span data-ttu-id="2a269-2902">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2902">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2903">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2903">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-2904">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2904">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="2a269-2905">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2905">Override <xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2906"><see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2906">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2907">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2907">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2908">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2908">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2909">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2909">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2910">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2910">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2911">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2911">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2912"><xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2912"><xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2913">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2913">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2914">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2914">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2915">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusInRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2915">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2916"><xref:System.Windows.UIElement3D.PreviewStylusInRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2916">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2917">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2917">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2918">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2918">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2919"><xref:System.Windows.UIElement3D.PreviewStylusInRange> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2919"><xref:System.Windows.UIElement3D.PreviewStylusInRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2920">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2920">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2921">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2921">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2922">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2922">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="2a269-2923">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2923">Routing strategy</span></span>|<span data-ttu-id="2a269-2924">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2924">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2925">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2925">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-2926">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2926">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="2a269-2927">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2927">Override <xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2928"><see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2928">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2929">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2929">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2930">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2930">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2931">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2931">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2932">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2932">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2933">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2933">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2934"><xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2934"><xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2935">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2935">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2936">スタイラスが要素上にあるときにスタイラスが移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2936">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="2a269-2937">このイベントを発生させるためには、デジタイザーによって検出されている間にスタイラスが移動する必要があります。それ以外の場合には、代わりに <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> が発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2937">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2938">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2938">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2939"><xref:System.Windows.UIElement3D.PreviewStylusMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2939">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2940">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2940">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2941">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2941">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2942"><xref:System.Windows.UIElement3D.PreviewStylusMove> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2942"><xref:System.Windows.UIElement3D.PreviewStylusMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2943">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2943">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2944">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2944">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2945">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2945">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>|  
|<span data-ttu-id="2a269-2946">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2946">Routing strategy</span></span>|<span data-ttu-id="2a269-2947">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2947">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2948">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2948">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-2949">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2949">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusMove>.</span></span>  
  
-   <span data-ttu-id="2a269-2950">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2950">Override <xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2951"><see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2951">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2952">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2952">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2953">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2953">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2954">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2954">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2955">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2955">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2956">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2956">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2957"><xref:System.Windows.UIElement3D.PreviewStylusMoveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2957"><xref:System.Windows.UIElement3D.PreviewStylusMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2958">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2958">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2959">スタイラスがデジタイザーから離れすぎているために検出されないときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2959">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2960">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2960">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2961"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2961">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2962">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2962">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2963">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2963">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2964"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2964"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2965">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2965">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2966">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2966">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2967">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2967">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="2a269-2968">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2968">Routing strategy</span></span>|<span data-ttu-id="2a269-2969">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2969">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2970">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2970">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-2971">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2971">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="2a269-2972">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2972">Override <xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2973"><see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2973">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2974">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2974">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2975">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2975">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2976">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2976">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-2977">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2977">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-2978">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2978">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-2979"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2979"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2980">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2980">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2981">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2981">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2982">スタイラスジェスチャの詳細については、「<xref:System.Windows.Input.SystemGesture>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2982">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="2a269-2983">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2983">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-2984"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2984">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-2985">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-2985">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-2986">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2986">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-2987"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-2987"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-2988">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-2988">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-2989">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-2989">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-2990">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-2990">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="2a269-2991">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-2991">Routing strategy</span></span>|<span data-ttu-id="2a269-2992">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-2992">Tunneling</span></span>|  
|<span data-ttu-id="2a269-2993">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-2993">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="2a269-2994">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-2994">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="2a269-2995">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-2995">Override <xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-2996"><see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-2996">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-2997">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2997">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-2998">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2998">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-2999">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-2999">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3000">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3000">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3001">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3001">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3002"><xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3002"><xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3003">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3003">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3004">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3004">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3005">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewStylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3005">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3006"><xref:System.Windows.UIElement3D.PreviewStylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3006">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3007">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3007">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3008">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3008">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3009"><xref:System.Windows.UIElement3D.PreviewStylusUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3009"><xref:System.Windows.UIElement3D.PreviewStylusUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3010">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3010">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3011">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3011">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3012">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3012">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusUpEvent>|  
|<span data-ttu-id="2a269-3013">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3013">Routing strategy</span></span>|<span data-ttu-id="2a269-3014">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3014">Tunneling</span></span>|  
|<span data-ttu-id="2a269-3015">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3015">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3016">対応するバブルイベントは <xref:System.Windows.UIElement3D.StylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3016">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusUp>.</span></span>  
  
-   <span data-ttu-id="2a269-3017">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3017">Override <xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3018"><see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3018">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3019">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3019">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3020">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3020">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3021">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3021">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3022">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3022">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3023">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3023">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3024"><xref:System.Windows.UIElement3D.PreviewStylusUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3024"><xref:System.Windows.UIElement3D.PreviewStylusUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3025">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3025">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3026">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3026">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3027"><xref:System.Windows.UIElement3D.PreviewTextInput> イベントを使用すると、コンポーネントまたはアプリケーションは、デバイスに依存しない方法でテキスト入力をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3027">The <xref:System.Windows.UIElement3D.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="2a269-3028">キーボードは <xref:System.Windows.UIElement3D.PreviewTextInput>の主な手段です。ただし、音声、手書き、およびその他の入力デバイスでも <xref:System.Windows.UIElement3D.PreviewTextInput>が生成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3028">The keyboard is the primary means of <xref:System.Windows.UIElement3D.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement3D.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="2a269-3029">キーの組み合わせ (既定のキーボードまたは入力方式のエディター) では、複数のキーイベントによってテキスト入力イベントが1つだけ発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3029">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="2a269-3030">このイベントは、このクラスの <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.PreviewTextInput> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3030">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3031"><xref:System.Windows.UIElement3D.PreviewTextInput> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3031">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3032"><xref:System.Windows.UIElement3D.PreviewTextInput> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3032"><xref:System.Windows.UIElement3D.PreviewTextInput> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3033">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3033">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3034">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3034">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3035">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3035">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTextInputEvent>|  
|<span data-ttu-id="2a269-3036">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3036">Routing strategy</span></span>|<span data-ttu-id="2a269-3037">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3037">Tunneling</span></span>|  
|<span data-ttu-id="2a269-3038">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3038">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="2a269-3039">対応するバブルイベントは <xref:System.Windows.UIElement3D.TextInput>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3039">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TextInput>.</span></span>  
  
-   <span data-ttu-id="2a269-3040">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3040">Override <xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3041"><see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3041">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3042">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3042">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3043">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3043">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3044">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3044">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3045">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3045">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3046">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3046">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3047"><xref:System.Windows.UIElement3D.PreviewTextInputEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3047"><xref:System.Windows.UIElement3D.PreviewTextInputEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3048">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3048">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3049">指がこの要素の上にある間に、その指で画面に触れると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3049">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3050">既定では、<xref:System.Windows.UIElement3D.PreviewTouchDown> イベントと <xref:System.Windows.UIElement3D.TouchDown> イベントは、指が画面に触れると移動するまで発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3050">By default, the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="2a269-3051">画面上で指を押しながら移動せずに押すと、<xref:System.Windows.Input.Stylus>のプレスアンドホールド動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3051">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="2a269-3052">プレスアンドホールドの動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3052">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="2a269-3053">指が画面に触れるとすぐに <xref:System.Windows.UIElement3D.PreviewTouchDown> および <xref:System.Windows.UIElement3D.TouchDown> イベントが発生するようにするには、この要素の <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 添付プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3053">To cause the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3054">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3054">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3055">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3055">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchDownEvent>|  
|<span data-ttu-id="2a269-3056">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3056">Routing strategy</span></span>|<span data-ttu-id="2a269-3057">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3057">Tunneling</span></span>|  
|<span data-ttu-id="2a269-3058">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3058">Delegate</span></span>|<span data-ttu-id="2a269-3059"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3059"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3060">対応するバブルイベントは <xref:System.Windows.UIElement3D.TouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3060">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchDown>.</span></span>  
  
-   <span data-ttu-id="2a269-3061">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3061">Override <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3062"><see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3062">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3063">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3063">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3064">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3064">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3065">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3065">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>|  
|<span data-ttu-id="2a269-3066">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3066">Routing strategy</span></span>|<span data-ttu-id="2a269-3067">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3067">Tunneling</span></span>|  
|<span data-ttu-id="2a269-3068">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3068">Delegate</span></span>|<span data-ttu-id="2a269-3069"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3069"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3070">対応するバブルイベントは <xref:System.Windows.UIElement3D.TouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3070">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchMove>.</span></span>  
  
-   <span data-ttu-id="2a269-3071">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3071">Override <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3072"><see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3072">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3073">この要素の上に指があるときに、その指が画面から離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3073">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3074">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3074">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3075">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3075">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchUpEvent>|  
|<span data-ttu-id="2a269-3076">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3076">Routing strategy</span></span>|<span data-ttu-id="2a269-3077">トンネリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3077">Tunneling</span></span>|  
|<span data-ttu-id="2a269-3078">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3078">Delegate</span></span>|<span data-ttu-id="2a269-3079"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3079"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3080">対応するバブルイベントは <xref:System.Windows.UIElement3D.TouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3080">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchUp>.</span></span>  
  
-   <span data-ttu-id="2a269-3081">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3081">Override <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3082"><see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3082">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3083">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3083">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3084"><xref:System.Windows.UIElement3D.QueryContinueDrag> イベントは、ドラッグ元がドラッグアンドドロップ操作をキャンセルする必要があるかどうかを判断するために使用します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3084">The <xref:System.Windows.UIElement3D.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="2a269-3085">このイベントは、このクラスの <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.QueryContinueDrag> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3085">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3086"><xref:System.Windows.UIElement3D.QueryContinueDrag> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3086">Event handlers that are attached to the <xref:System.Windows.UIElement3D.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3087"><xref:System.Windows.UIElement3D.QueryContinueDrag> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3087"><xref:System.Windows.UIElement3D.QueryContinueDrag> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3088">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3088">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3089">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3089">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3090">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3090">Identifier field</span></span>|<xref:System.Windows.UIElement3D.QueryContinueDragEvent>|  
|<span data-ttu-id="2a269-3091">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3091">Routing strategy</span></span>|<span data-ttu-id="2a269-3092">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3092">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3093">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3093">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="2a269-3094">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3094">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="2a269-3095">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3095">Override <xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3096"><see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3096">Identifies the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3097">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3097">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3098">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3098">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3099">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3099">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3100">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3100">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3101">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3101">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3102"><xref:System.Windows.UIElement3D.QueryContinueDragEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3102"><xref:System.Windows.UIElement3D.QueryContinueDragEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3103">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3103">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3104">カーソルの表示が要求されると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3104">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="2a269-3105">このイベントは、マウス ポインターが別の位置へ移動するたびに要素上で発生します。したがって、場合によってはカーソル オブジェクトを移動先の位置に基づいて変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3105">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3106">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.QueryCursor> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3106">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3107"><xref:System.Windows.UIElement3D.QueryCursor> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3107">Event handlers that are attached to the <xref:System.Windows.UIElement3D.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3108">このイベント名によって参照されているカーソルは、必ずしもテキストカーソル (挿入ポイントとも呼ばれます) ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3108">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="2a269-3109">代わりに、このコンテキストのカーソルは、Windows プログラミングにおけるいくつかの入力関連のデバイスまたは概念に関連する、画面上のグラフィカルな表示を宣言するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="2a269-3109">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="2a269-3110">このオブジェクトは、WPF の <xref:System.Windows.Input.Cursor> クラスによって表されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3110">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="2a269-3111">WPF 入力システムでは、マウスポインターの画面上の位置を表すときに、このカーソルを変更できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3111">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="2a269-3112"><xref:System.Windows.Input.Cursors> 列挙体の定義済みの値を使用することも、カスタムカーソルをイメージファイルとして宣言することもできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3112">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="2a269-3113"><xref:System.Windows.UIElement3D.QueryCursor> イベントのリッスンは、カーソル管理の効率的な手法ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3113">Listening for the <xref:System.Windows.UIElement3D.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="2a269-3114">代わりに、各要素は <xref:System.Windows.FrameworkContentElement.Cursor%2A> と <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>を使用して独自のカーソル動作を定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3114">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="2a269-3115"><xref:System.Windows.UIElement3D.QueryCursor> に依存するのは、WPF フレームワークレベルの基本要素を使用していない場合、または要素単位でカーソル動作を定義するときにニーズを満たしていない特殊な状況においてのみです。</span><span class="sxs-lookup"><span data-stu-id="2a269-3115">You should only rely on <xref:System.Windows.UIElement3D.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="2a269-3116"><xref:System.Windows.UIElement3D.QueryCursor>に応答してカーソル動作を実装する方法の詳細については、「<xref:System.Windows.Input.QueryCursorEventHandler>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3116">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement3D.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
 <span data-ttu-id="2a269-3117"><xref:System.Windows.UIElement3D.QueryCursor> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3117"><xref:System.Windows.UIElement3D.QueryCursor> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3118">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3118">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3119">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3119">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3120">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3120">Identifier field</span></span>|<xref:System.Windows.UIElement3D.QueryCursorEvent>|  
|<span data-ttu-id="2a269-3121">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3121">Routing strategy</span></span>|<span data-ttu-id="2a269-3122">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3122">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3123">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3123">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="2a269-3124">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3124">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="2a269-3125">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnQueryCursor%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3125">Override <xref:System.Windows.UIElement3D.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3126"><see cref="E:System.Windows.UIElement3D.QueryCursor" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3126">Identifies the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3127">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3127">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3128">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3128">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3129">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3129">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3130">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3130">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3131">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3131">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3132"><xref:System.Windows.UIElement3D.QueryCursorEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3132"><xref:System.Windows.UIElement3D.QueryCursorEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3133">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3133">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2a269-3134">イベント データを格納し、発生するイベントを識別する <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-3134">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="2a269-3135">特定のルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3135">Raises a specific routed event.</span></span> <span data-ttu-id="2a269-3136">発生する <see cref="T:System.Windows.RoutedEvent" /> は、提供された <see cref="T:System.Windows.RoutedEventArgs" /> インスタンス内で識別されます (そのイベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティとして)。</span><span class="sxs-lookup"><span data-stu-id="2a269-3136">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3137">`e` パラメーターは、すべてのルーティングイベントデータの共通基本型として型指定されます。ただし、イベントデータは、発生したイベントに対して使用できる最も具体的なイベントデータ型として指定する必要があります。これは <xref:System.Windows.RoutedEventArgs> 派生クラスに、発生時に特定のイベントを想定した実際のデータプロパティが含まれているためです。</span><span class="sxs-lookup"><span data-stu-id="2a269-3137">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="2a269-3138"><xref:System.Windows.RoutedEventArgs> は、イベントの状態プロパティではありません。また、どのルーティングイベントを発生させるかも識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3138"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="2a269-3139">このイベント発生パターンとルーティングイベントデータはどちらも、イベントに関連するプロパティだけを含む [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントとデータクラスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3139">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
 <span data-ttu-id="2a269-3140"><xref:System.Windows.UIElement3D.RaiseEvent%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3140"><xref:System.Windows.UIElement3D.RaiseEvent%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3141">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3141">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement3D.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-3142">キャプチャされているすべてのタッチ デバイスをこの要素から解放します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3142">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement3D.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-3143">この要素がマウス キャプチャを保持していた場合、キャプチャを解放します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3143">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3144">この要素がキャプチャを保持していない場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3144">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="2a269-3145">このメソッドを呼び出す前に、<xref:System.Windows.UIElement3D.IsMouseCaptured%2A> の値を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3145">Consider checking the value of <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> before you call this method.</span></span>  
  
 <span data-ttu-id="2a269-3146"><xref:System.Windows.UIElement3D.ReleaseMouseCapture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3146"><xref:System.Windows.UIElement3D.ReleaseMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3147">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3147">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement3D.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-3148">この要素がスタイラス デバイス キャプチャを保持していた場合、キャプチャを解放します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3148">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3149">この要素がキャプチャを保持していない場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3149">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="2a269-3150">このメソッドを呼び出す前に、<xref:System.Windows.UIElement3D.IsStylusCaptured%2A> の値を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3150">Consider checking the value of <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 <span data-ttu-id="2a269-3151"><xref:System.Windows.UIElement3D.ReleaseStylusCapture%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3151"><xref:System.Windows.UIElement3D.ReleaseStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3152">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3152">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement3D.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="2a269-3153">解放の対象となるデバイス。</span><span class="sxs-lookup"><span data-stu-id="2a269-3153">The device to release.</span></span></param>
        <summary><span data-ttu-id="2a269-3154">指定されたタッチ デバイスをこの要素から解放することを試みます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3154">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="2a269-3155">タッチ デバイスが解放された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-3155"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2a269-3156"><paramref name="touchDevice" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3156"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement3D.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="2a269-3157">ハンドラーがアタッチされているルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="2a269-3157">The identifier of the routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="2a269-3158">この要素のイベント ハンドラー コレクションから削除する特定のハンドラー実装。</span><span class="sxs-lookup"><span data-stu-id="2a269-3158">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="2a269-3159">指定したルーティング イベント ハンドラーをこの要素から削除します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3159">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3160">この API を使用する最も一般的なシナリオは、カスタムルーティングイベントに関連付けられた [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "ラッパー" イベントを実装する場合です。具体的には、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] レベルでハンドラーの "削除" ロジックを実装する場合です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3160">The most common scenario for using this API is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span>  
  
 <span data-ttu-id="2a269-3161">メソッド呼び出しの入力パラメーターに一致する条件に登録されたハンドラーがない場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3161">Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="2a269-3162">条件に一致する複数のハンドラーがアタッチされている場合は、イベントハンドラーストア内の最初のハンドラーだけが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3162">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="2a269-3163">この動作は、`-=` 演算子の [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] の動作と一致します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3163">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="2a269-3164">`routedEvent` も `handler` も `null`ない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3164">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="2a269-3165">いずれかの値を `null` として指定しようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3165">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="2a269-3166">このメソッドは `handledEventsToo` パラメーター情報を無視します。これは、既に処理されたイベントの処理を可能にする <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャを使用してハンドラーが最初に追加された場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3166">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="2a269-3167">どちらの種類のハンドラーも削除されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3167">Either type of handler is removed.</span></span>  
  
 <span data-ttu-id="2a269-3168"><xref:System.Windows.UIElement3D.RemoveHandler%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3168"><xref:System.Windows.UIElement3D.RemoveHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3169">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3169">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement3D.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-3170">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement3D.CommandBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3170">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="2a269-3171"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement3D.CommandBindings" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-3171"><see langword="true" /> if the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3172">これは、<xref:System.Windows.UIElement3D.CommandBindings%2A> がローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3172">This will return `true` if <xref:System.Windows.UIElement3D.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="2a269-3173">この `ShouldSerialize` メソッドは、<xref:System.Windows.UIElement3D.CommandBindings%2A> プロパティに単純な既定値がないために用意されています。</span><span class="sxs-lookup"><span data-stu-id="2a269-3173">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement3D.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="2a269-3174">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3174">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="2a269-3175">通常、このメソッドは、デザイナーを開発しているか、<xref:System.Windows.UIElement3D>を組み込んだ独自のコントロールを開発している場合に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3175">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-3176">詳細については、「 [ShouldSerialize メソッドと Reset メソッドによる既定値の定義](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3176">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 <span data-ttu-id="2a269-3177"><xref:System.Windows.UIElement3D.ShouldSerializeCommandBindings%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3177"><xref:System.Windows.UIElement3D.ShouldSerializeCommandBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3178">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3178">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement3D.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a269-3179">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement3D.InputBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3179">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="2a269-3180"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement3D.InputBindings" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2a269-3180"><see langword="true" /> if the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3181">これは、<xref:System.Windows.UIElement3D.InputBindings%2A> がローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3181">This will return `true` if <xref:System.Windows.UIElement3D.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="2a269-3182">この `ShouldSerialize` メソッドは、<xref:System.Windows.UIElement3D.InputBindings%2A> プロパティに単純な既定値がないために用意されています。</span><span class="sxs-lookup"><span data-stu-id="2a269-3182">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement3D.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="2a269-3183">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3183">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="2a269-3184">通常、このメソッドは、デザイナーを開発しているか、<xref:System.Windows.UIElement3D>を組み込んだ独自のコントロールを開発している場合に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3184">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="2a269-3185">詳細については、「 [ShouldSerialize メソッドと Reset メソッドによる既定値の定義](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3185">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 <span data-ttu-id="2a269-3186"><xref:System.Windows.UIElement3D.ShouldSerializeInputBindings%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3186"><xref:System.Windows.UIElement3D.ShouldSerializeInputBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3187">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3187">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3188">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3188">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3189">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusButtonDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3189">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3190"><xref:System.Windows.UIElement3D.StylusButtonDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3190">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3191">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3191">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3192">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3192">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3193"><xref:System.Windows.UIElement3D.StylusButtonDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3193"><xref:System.Windows.UIElement3D.StylusButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3194">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3194">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3195">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3195">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3196">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3196">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusButtonDownEvent>|  
|<span data-ttu-id="2a269-3197">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3197">Routing strategy</span></span>|<span data-ttu-id="2a269-3198">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3198">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3199">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3199">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-3200">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3200">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="2a269-3201">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3201">Override <xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3202"><see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3202">Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3203">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3203">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3204">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3204">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3205">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3205">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3206">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3206">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3207">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3207">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3208"><xref:System.Windows.UIElement3D.StylusButtonDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3208"><xref:System.Windows.UIElement3D.StylusButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3209">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3209">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3210">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3210">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3211">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusButtonUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3211">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3212"><xref:System.Windows.UIElement3D.StylusButtonUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3212">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3213">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3213">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3214">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3214">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3215"><xref:System.Windows.UIElement3D.StylusButtonUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3215"><xref:System.Windows.UIElement3D.StylusButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3216">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3216">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3217">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3217">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3218">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3218">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusButtonUpEvent>|  
|<span data-ttu-id="2a269-3219">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3219">Routing strategy</span></span>|<span data-ttu-id="2a269-3220">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3220">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3221">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3221">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="2a269-3222">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3222">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="2a269-3223">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3223">Override <xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3224"><see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3224">Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3225">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3225">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3226">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3226">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3227">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3227">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3228">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3228">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3229">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3229">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3230"><xref:System.Windows.UIElement3D.StylusButtonUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3230"><xref:System.Windows.UIElement3D.StylusButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3231">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3231">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3232">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3232">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3233">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3233">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3234"><xref:System.Windows.UIElement3D.StylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3234">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3235">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3235">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3236">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3236">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3237"><xref:System.Windows.UIElement3D.StylusDown> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3237"><xref:System.Windows.UIElement3D.StylusDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3238">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3238">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3239">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3239">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3240">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3240">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusDownEvent>|  
|<span data-ttu-id="2a269-3241">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3241">Routing strategy</span></span>|<span data-ttu-id="2a269-3242">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3242">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3243">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3243">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="2a269-3244">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3244">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="2a269-3245">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3245">Override <xref:System.Windows.UIElement3D.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3246"><see cref="E:System.Windows.UIElement3D.StylusDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3246">Identifies the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3247">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3247">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3248">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3248">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3249">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3249">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3250">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3250">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3251">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3251">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3252"><xref:System.Windows.UIElement3D.StylusDownEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3252"><xref:System.Windows.UIElement3D.StylusDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3253">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3253">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3254">スタイラスがこの要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3254">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3255"><xref:System.Windows.UIElement3D.StylusEnter> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3255"><xref:System.Windows.UIElement3D.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="2a269-3256">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3256">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="2a269-3257">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3257">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="2a269-3258"><xref:System.Windows.UIElement3D.StylusEnter> は、スタイラスが要素の境界内に入るタイミングを追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement3D.IsStylusOver%2A> プロパティ値が `false` からこの要素の `true` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3258">Although <xref:System.Windows.UIElement3D.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="2a269-3259">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3259">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3260"><xref:System.Windows.UIElement3D.StylusEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3260">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3261">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3261">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3262">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3262">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3263"><xref:System.Windows.UIElement3D.StylusEnter> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3263"><xref:System.Windows.UIElement3D.StylusEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3264">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3264">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3265">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3265">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3266">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3266">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusEnterEvent>|  
|<span data-ttu-id="2a269-3267">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3267">Routing strategy</span></span>|<span data-ttu-id="2a269-3268">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-3268">Direct</span></span>|  
|<span data-ttu-id="2a269-3269">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3269">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3270">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3270">Override <xref:System.Windows.UIElement3D.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3271"><see cref="E:System.Windows.UIElement3D.StylusEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3271">Identifies the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3272">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3272">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3273">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3273">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3274">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3274">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3275">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3275">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3276">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3276">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3277"><xref:System.Windows.UIElement3D.StylusEnterEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3277"><xref:System.Windows.UIElement3D.StylusEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3278">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3278">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3279">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3279">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3280">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusInAirMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3280">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3281"><xref:System.Windows.UIElement3D.StylusInAirMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3281">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3282">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3282">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3283">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3283">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3284"><xref:System.Windows.UIElement3D.StylusInAirMove> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3284"><xref:System.Windows.UIElement3D.StylusInAirMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3285">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3285">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3286">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3286">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3287">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3287">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusInAirMoveEvent>|  
|<span data-ttu-id="2a269-3288">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3288">Routing strategy</span></span>|<span data-ttu-id="2a269-3289">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3289">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3290">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3290">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3291">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3291">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="2a269-3292">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3292">Override <xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3293"><see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3293">Identifies the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3294">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3294">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3295">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3295">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3296">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3296">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3297">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3297">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3298">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3298">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3299"><xref:System.Windows.UIElement3D.StylusInAirMoveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3299"><xref:System.Windows.UIElement3D.StylusInAirMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3300">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3300">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3301">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3301">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3302">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusInRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3302">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3303"><xref:System.Windows.UIElement3D.StylusInRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3303">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3304">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3304">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3305">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3305">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3306"><xref:System.Windows.UIElement3D.StylusInRange> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3306"><xref:System.Windows.UIElement3D.StylusInRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3307">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3307">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3308">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3308">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3309">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3309">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusInRangeEvent>|  
|<span data-ttu-id="2a269-3310">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3310">Routing strategy</span></span>|<span data-ttu-id="2a269-3311">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3311">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3312">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3312">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3313">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3313">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="2a269-3314">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusInRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3314">Override <xref:System.Windows.UIElement3D.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3315"><see cref="E:System.Windows.UIElement3D.StylusInRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3315">Identifies the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3316">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3316">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3317">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3317">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3318">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3318">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3319">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3319">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3320">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3320">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3321"><xref:System.Windows.UIElement3D.StylusInRangeEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3321"><xref:System.Windows.UIElement3D.StylusInRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3322">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3322">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3323">スタイラスが要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3323">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3324"><xref:System.Windows.UIElement3D.StylusLeave> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3324"><xref:System.Windows.UIElement3D.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="2a269-3325">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3325">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="2a269-3326">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3326">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="2a269-3327"><xref:System.Windows.UIElement3D.StylusLeave> はスタイラスが要素の境界内から出たときに追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement3D.IsStylusOver%2A> プロパティ値が `true` からこの要素の `false` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3327">Although <xref:System.Windows.UIElement3D.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="2a269-3328">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3328">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3329"><xref:System.Windows.UIElement3D.StylusLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3329">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3330">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3330">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3331">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3331">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3332"><xref:System.Windows.UIElement3D.StylusLeave> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3332"><xref:System.Windows.UIElement3D.StylusLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3333">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3333">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3334">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3334">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3335">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3335">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusLeaveEvent>|  
|<span data-ttu-id="2a269-3336">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3336">Routing strategy</span></span>|<span data-ttu-id="2a269-3337">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-3337">Direct</span></span>|  
|<span data-ttu-id="2a269-3338">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3338">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3339">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3339">Override <xref:System.Windows.UIElement3D.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3340"><see cref="E:System.Windows.UIElement3D.StylusLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3340">Identifies the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3341">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3341">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3342">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3342">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3343">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3343">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3344">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3344">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3345">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3345">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3346"><xref:System.Windows.UIElement3D.StylusLeaveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3346"><xref:System.Windows.UIElement3D.StylusLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3347">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3347">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3348">スタイラスがこの要素上を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3348">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="2a269-3349">このイベントを発生させるには、デジタイザー上でスタイラスを移動する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3349">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="2a269-3350">それ以外の場合は、代わりに <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> が発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3350">Otherwise, <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3351">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3351">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3352"><xref:System.Windows.UIElement3D.StylusMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3352">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3353">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3353">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3354">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3354">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3355"><xref:System.Windows.UIElement3D.StylusMove> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3355"><xref:System.Windows.UIElement3D.StylusMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3356">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3356">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3357">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3357">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3358">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3358">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusMoveEvent>|  
|<span data-ttu-id="2a269-3359">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3359">Routing strategy</span></span>|<span data-ttu-id="2a269-3360">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3360">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3361">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3361">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3362">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3362">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="2a269-3363">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3363">Override <xref:System.Windows.UIElement3D.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3364"><see cref="E:System.Windows.UIElement3D.StylusMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3364">Identifies the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3365">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3365">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3366">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3366">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3367">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3367">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3368">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3368">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3369">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3369">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3370"><xref:System.Windows.UIElement3D.StylusMoveEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3370"><xref:System.Windows.UIElement3D.StylusMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3371">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3371">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3372">この要素上でスタイラスが検出可能になるにはデジタイザーから離れすぎているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3372">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3373">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusOutOfRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3373">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3374"><xref:System.Windows.UIElement3D.StylusOutOfRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3374">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3375">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3375">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3376">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3376">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3377"><xref:System.Windows.UIElement3D.StylusOutOfRange> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3377"><xref:System.Windows.UIElement3D.StylusOutOfRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3378">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3378">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3379">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3379">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3380">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3380">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>|  
|<span data-ttu-id="2a269-3381">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3381">Routing strategy</span></span>|<span data-ttu-id="2a269-3382">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3382">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3383">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3383">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3384">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3384">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="2a269-3385">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3385">Override <xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3386"><see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3386">Identifies the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3387">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3387">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3388">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3388">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3389">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3389">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3390">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3390">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3391">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3391">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3392"><xref:System.Windows.UIElement3D.StylusOutOfRangeEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3392"><xref:System.Windows.UIElement3D.StylusOutOfRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3393">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3393">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3394">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3394">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3395">スタイラスジェスチャの詳細については、「<xref:System.Windows.Input.SystemGesture>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3395">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="2a269-3396">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusSystemGesture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3396">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3397"><xref:System.Windows.UIElement3D.StylusSystemGesture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3397">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3398">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3398">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3399">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3399">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3400"><xref:System.Windows.UIElement3D.StylusSystemGesture> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3400"><xref:System.Windows.UIElement3D.StylusSystemGesture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3401">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3401">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3402">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3402">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3403">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3403">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusSystemGestureEvent>|  
|<span data-ttu-id="2a269-3404">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3404">Routing strategy</span></span>|<span data-ttu-id="2a269-3405">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3405">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3406">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3406">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="2a269-3407">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3407">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="2a269-3408">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3408">Override <xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3409"><see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3409">Identifies the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3410">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3410">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3411">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3411">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3412">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3412">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3413">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3413">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3414">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3414">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3415"><xref:System.Windows.UIElement3D.StylusSystemGestureEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3415"><xref:System.Windows.UIElement3D.StylusSystemGestureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3416">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3416">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3417">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3417">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3418">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.StylusUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3418">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3419"><xref:System.Windows.UIElement3D.StylusUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3419">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3420">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3420">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="2a269-3421">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://go.microsoft.com/fwlink/?LinkId=160818)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3421">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="2a269-3422"><xref:System.Windows.UIElement3D.StylusUp> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3422"><xref:System.Windows.UIElement3D.StylusUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3423">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3423">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3424">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3424">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3425">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3425">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusUpEvent>|  
|<span data-ttu-id="2a269-3426">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3426">Routing strategy</span></span>|<span data-ttu-id="2a269-3427">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3427">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3428">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3428">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="2a269-3429">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewStylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3429">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="2a269-3430">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnStylusUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3430">Override <xref:System.Windows.UIElement3D.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3431"><see cref="E:System.Windows.UIElement3D.StylusUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3431">Identifies the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3432">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3432">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3433">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3433">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3434">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3434">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3435">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3435">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3436">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3436">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3437"><xref:System.Windows.UIElement3D.StylusUpEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3437"><xref:System.Windows.UIElement3D.StylusUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3438">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3438">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3439">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3439">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3440"><xref:System.Windows.UIElement3D.TextInput> イベントを使用すると、コンポーネントまたはアプリケーションは、デバイスに依存しない方法でテキスト入力をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3440">The <xref:System.Windows.UIElement3D.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="2a269-3441">キーボードは <xref:System.Windows.UIElement3D.TextInput>の主な手段ですが、音声、手書き、およびその他の入力デバイスも <xref:System.Windows.UIElement3D.TextInput>を発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3441">The keyboard is the primary means of <xref:System.Windows.UIElement3D.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement3D.TextInput>.</span></span>  
  
 <span data-ttu-id="2a269-3442">キーの組み合わせにより、既定のキーボードまたは入力方式のエディターによって、複数のキーイベントによってテキスト入力イベントが1つだけ発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3442">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="2a269-3443">このイベントは、このクラスの <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement3D> が基本要素として継承されている場合に、<xref:System.Windows.UIElement3D.TextInput> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3443">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.TextInput> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="2a269-3444"><xref:System.Windows.UIElement3D.TextInput> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3444">Event handlers that are attached to the <xref:System.Windows.UIElement3D.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="2a269-3445"><xref:System.Windows.UIElement3D.TextInput> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3445"><xref:System.Windows.UIElement3D.TextInput> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3446">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3446">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3447">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3447">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3448">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3448">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TextInputEvent>|  
|<span data-ttu-id="2a269-3449">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3449">Routing strategy</span></span>|<span data-ttu-id="2a269-3450">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3450">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3451">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3451">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="2a269-3452">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewTextInput>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3452">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="2a269-3453">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnTextInput%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3453">Override <xref:System.Windows.UIElement3D.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3454"><see cref="E:System.Windows.UIElement3D.TextInput" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3454">Identifies the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3455">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3455">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="2a269-3456">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3456">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="2a269-3457">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="2a269-3457">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="2a269-3458">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3458">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="2a269-3459">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3459">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="2a269-3460"><xref:System.Windows.UIElement3D.TextInputEvent> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3460"><xref:System.Windows.UIElement3D.TextInputEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3461">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3461">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3462">指がこの要素の上にある間に、その指で画面に触れると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3462">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3463">既定では、<xref:System.Windows.UIElement3D.PreviewTouchDown> イベントと <xref:System.Windows.UIElement3D.TouchDown> イベントは、指が画面に触れると移動するまで発生しません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3463">By default, the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="2a269-3464">画面上で指を押しながら移動せずに押すと、<xref:System.Windows.Input.Stylus>のプレスアンドホールド動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3464">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="2a269-3465">プレスアンドホールドの動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3465">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="2a269-3466">指が画面に触れるとすぐに <xref:System.Windows.UIElement3D.PreviewTouchDown> および <xref:System.Windows.UIElement3D.TouchDown> イベントが発生するようにするには、この要素の <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 添付プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3466">To cause the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3467">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3467">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3468">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3468">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchDownEvent>|  
|<span data-ttu-id="2a269-3469">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3469">Routing strategy</span></span>|<span data-ttu-id="2a269-3470">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3470">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3471">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3471">Delegate</span></span>|<span data-ttu-id="2a269-3472"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3472"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3473">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewTouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3473">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="2a269-3474">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnTouchDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3474">Override <xref:System.Windows.UIElement3D.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3475"><see cref="E:System.Windows.UIElement3D.TouchDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3475">Identifies the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3476">タッチがこの要素の境界の外部から内部に移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3476">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3477">このイベントは、タッチデバイスがこの要素にキャプチャされているかどうかにかかわらず、常に発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3477">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3478">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3478">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3479">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3479">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchEnterEvent>|  
|<span data-ttu-id="2a269-3480">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3480">Routing strategy</span></span>|<span data-ttu-id="2a269-3481">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-3481">Direct</span></span>|  
|<span data-ttu-id="2a269-3482">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3482">Delegate</span></span>|<span data-ttu-id="2a269-3483"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3483"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3484">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnTouchEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3484">Override <xref:System.Windows.UIElement3D.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3485"><see cref="E:System.Windows.UIElement3D.TouchEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3485">Identifies the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3486">この要素にキャプチャされているすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3486">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="2a269-3487">この要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="2a269-3487">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3488">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3488">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="2a269-3489">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="2a269-3489">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3490">この要素上にあるすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3490">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="2a269-3491">この要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="2a269-3491">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3492">この要素またはそのビジュアル ツリー内のいずれかの子要素上にあるすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3492">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="2a269-3493">この要素またはそのビジュアル ツリー内のいずれかの子要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="2a269-3493">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3494">タッチがこの要素の境界の内部から外部に移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3494">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3495">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3495">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3496">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3496">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchLeaveEvent>|  
|<span data-ttu-id="2a269-3497">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3497">Routing strategy</span></span>|<span data-ttu-id="2a269-3498">直接</span><span class="sxs-lookup"><span data-stu-id="2a269-3498">Direct</span></span>|  
|<span data-ttu-id="2a269-3499">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3499">Delegate</span></span>|<span data-ttu-id="2a269-3500"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3500"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3501">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnTouchLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3501">Override <xref:System.Windows.UIElement3D.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3502"><see cref="E:System.Windows.UIElement3D.TouchLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3502">Identifies the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3503">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3503">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3504">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3504">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3505">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3505">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchMoveEvent>|  
|<span data-ttu-id="2a269-3506">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3506">Routing strategy</span></span>|<span data-ttu-id="2a269-3507">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3507">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3508">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3508">Delegate</span></span>|<span data-ttu-id="2a269-3509"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3509"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3510">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewTouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3510">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="2a269-3511">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnTouchMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3511">Override <xref:System.Windows.UIElement3D.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3512"><see cref="E:System.Windows.UIElement3D.TouchMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3512">Identifies the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3513">この要素の上に指があるときに、その指が画面から離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3513">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="2a269-3514">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3514">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3515">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3515">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchUpEvent>|  
|<span data-ttu-id="2a269-3516">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="2a269-3516">Routing strategy</span></span>|<span data-ttu-id="2a269-3517">バブリング</span><span class="sxs-lookup"><span data-stu-id="2a269-3517">Bubbling</span></span>|  
|<span data-ttu-id="2a269-3518">デリゲート</span><span class="sxs-lookup"><span data-stu-id="2a269-3518">Delegate</span></span>|<span data-ttu-id="2a269-3519"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="2a269-3519"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="2a269-3520">対応するトンネリングイベントは <xref:System.Windows.UIElement3D.PreviewTouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3520">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="2a269-3521">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement3D.OnTouchUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a269-3521">Override <xref:System.Windows.UIElement3D.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3522"><see cref="E:System.Windows.UIElement3D.TouchUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3522">Identifies the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement3D.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3523">この要素の [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 可視性を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3523">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span></span></summary>
        <value><span data-ttu-id="2a269-3524">列挙体の値。</span><span class="sxs-lookup"><span data-stu-id="2a269-3524">A value of the enumeration.</span></span> <span data-ttu-id="2a269-3525">既定値は <see cref="F:System.Windows.Visibility.Visible" />です。</span><span class="sxs-lookup"><span data-stu-id="2a269-3525">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3526">このプロパティを設定すると、<xref:System.Windows.UIElement3D.IsVisible%2A>の値に影響します。これにより、<xref:System.Windows.UIElement3D.IsVisibleChanged> イベントが発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3526">Setting this property affects the value of <xref:System.Windows.UIElement3D.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement3D.IsVisibleChanged> event.</span></span> <span data-ttu-id="2a269-3527">ただし、<xref:System.Windows.UIElement3D.IsVisible%2A> には、それを含む親の可視性の設定など、それに影響を与える他の要因があります。</span><span class="sxs-lookup"><span data-stu-id="2a269-3527">However, <xref:System.Windows.UIElement3D.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="2a269-3528"><xref:System.Windows.UIElement3D.Visibility%2A> が <xref:System.Windows.Visibility.Visible> されていない要素は入力イベント (またはコマンド) に参加せず、ヒットテストでは報告されません。</span><span class="sxs-lookup"><span data-stu-id="2a269-3528">Elements where <xref:System.Windows.UIElement3D.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands) and are not reported in hit testing.</span></span>  
  
 <span data-ttu-id="2a269-3529"><xref:System.Windows.UIElement3D.Visibility%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3529"><xref:System.Windows.UIElement3D.Visibility%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3530">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3530">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2a269-3531">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="2a269-3531">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2a269-3532">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="2a269-3532">Identifier field</span></span>|<xref:System.Windows.UIElement3D.VisibilityProperty>|  
|<span data-ttu-id="2a269-3533">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="2a269-3533">Metadata properties set to `true`</span></span>|<span data-ttu-id="2a269-3534">なし</span><span class="sxs-lookup"><span data-stu-id="2a269-3534">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a269-3535"><see cref="P:System.Windows.UIElement3D.Visibility" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2a269-3535">Identifies the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a269-3536"><xref:System.Windows.UIElement3D.VisibilityProperty> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2a269-3536"><xref:System.Windows.UIElement3D.VisibilityProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="2a269-3537">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a269-3537">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
