<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e572de880c670ec2cfa54ca28d3ce8c774a58802" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82339501" /></Metadata><TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <TypeSignature Language="C++ CLI" Value="protected: ref class WeakEventManager::ListenerList" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2118d-101"><see cref="T:System.Windows.WeakEventManager" /> のリスナーを格納するための組み込みのコレクション リストを提供します。</span><span class="sxs-lookup"><span data-stu-id="2118d-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2118d-102">この一覧には <xref:System.Collections.IList> と <xref:System.Collections.ICollection>で定義されているものと似たメンバーが含まれており、同様の機能を提供しますが、このクラスはこれらのインターフェイスのいずれも実装しません。</span><span class="sxs-lookup"><span data-stu-id="2118d-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="2118d-103">ほとんどの <xref:System.Windows.WeakEventManager> 派生クラスは、<xref:System.Windows.WeakEventManager.ListenerList>のメンバーを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2118d-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="2118d-104"><xref:System.Windows.WeakEventManager> メソッド <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> と <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> は、既定の <xref:System.Windows.WeakEventManager.ListenerList> を内部で使用します。 `source`ごとに1つの一覧があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="2118d-105"><xref:System.Windows.WeakEventManager.ListenerList> メソッドを呼び出す必要があるのは、<xref:System.Windows.WeakEventManager> クラスが同じイベントソースの組み合わせに対して複数のリストを保持し、各リストがイベントのさまざまな条件を考慮して作成されている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="2118d-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="2118d-106">この場合、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> と <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> は使用せず、`AddListener` または `RemoveListener` を実装して、内部リスナーリストの1つだけでリスナーを操作します。通常は、`AddListener` または `RemoveListener`に追加したパラメーターに基づいています。</span><span class="sxs-lookup"><span data-stu-id="2118d-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="2118d-107">また、未加工のイベントを受け取るハンドラーの実装では、単に <xref:System.Windows.WeakEventManager.DeliverEvent%2A>を呼び出すことはできません。代わりに、イベントの詳細を追跡し、<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>を使用して適切な一覧にのみイベントを配信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="2118d-108">内部リストを操作できるように、<xref:System.Windows.WeakEventManager.ListenerList> のさまざまな方法が用意されています。これにより、イベントの実際の配信時にリストが変更されるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="2118d-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="2118d-109">この実装手法を使用したクラスの例は <xref:System.ComponentModel.PropertyChangedEventManager>であり、変更されたプロパティに基づいて `PropertyChanged` 用に個別のリスナーリストを保持します。</span><span class="sxs-lookup"><span data-stu-id="2118d-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="2118d-110">XAML テキストの使用</span><span class="sxs-lookup"><span data-stu-id="2118d-110">XAML Text Usage</span></span>  
 <span data-ttu-id="2118d-111">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]でこのクラスを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="2118d-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2118d-112"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2118d-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2118d-113"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2118d-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Windows.WeakEventManager.ListenerList : int -&gt; System.Windows.WeakEventManager.ListenerList" Usage="new System.Windows.WeakEventManager.ListenerList capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="2118d-114">初期リストに割り当てられる項目の数。</span><span class="sxs-lookup"><span data-stu-id="2118d-114">The number of items that should be allocated in the initial list.</span></span></param>
        <summary><span data-ttu-id="2118d-115">指定した初期量を使用して、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2118d-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Add listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="2118d-116"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加するリスナー要素。</span><span class="sxs-lookup"><span data-stu-id="2118d-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="2118d-117"><see cref="T:System.Windows.IWeakEventListener" /> に <see cref="T:System.Windows.WeakEventManager.ListenerList" /> オブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="2118d-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2118d-118">リスナーとして提供されるオブジェクトは、<xref:System.Windows.IWeakEventListener> インターフェイスを実装する <xref:System.Windows.DependencyObject> である必要があります。したがって、<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 実装が動作します。</span><span class="sxs-lookup"><span data-stu-id="2118d-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="2118d-119">リストの内容を変更する前に、常に <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="2118d-120">それ以外の場合は、リストがイベントの配信処理中であるため、元のがロックされている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="2118d-121"><xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> を呼び出すと、<xref:System.Windows.WeakEventManager.ListenerList.Add%2A> の呼び出しが複製でも機能するように、入力 `list` が複製に変更されます。</span><span class="sxs-lookup"><span data-stu-id="2118d-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="2118d-122"><xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> が `true`を返す場合は、コードの他の領域で保持しているリストへのプライベート参照を更新する必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : Delegate -&gt; unit" Usage="listenerList.AddHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="2118d-123"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="2118d-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="2118d-124">イベント ハンドラーを <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="2118d-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberSignature Language="F#" Value="member this.BeginUse : unit -&gt; bool" Usage="listenerList.BeginUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2118d-125">リストが使用中であることを宣言します。</span><span class="sxs-lookup"><span data-stu-id="2118d-125">Declares the list to be in use.</span></span> <span data-ttu-id="2118d-126">これにより、リスト項目の反復処理中に、このリストを直接変更することができなくなります。</span><span class="sxs-lookup"><span data-stu-id="2118d-126">This prevents direct changes to the list during iterations of the list items.</span></span></summary>
        <returns><span data-ttu-id="2118d-127">リストが使用中であることが既に宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2118d-127"><see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2118d-128"><xref:System.Windows.WeakEventManager> の実装では、リスナーにイベントを配信するためにリストを反復処理する前に <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> を呼び出し、完了時に <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="2118d-129">これにより、イベント配信の反復処理が進行している間に、別の呼び出し元によってリストが変更されるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="2118d-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="2118d-130">この期間中にリストが変更された場合は、一覧が複製されます。</span><span class="sxs-lookup"><span data-stu-id="2118d-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="2118d-131">リストが複製されている場合、<xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> は `true`を返します。これは、前回の配信でリスナーが最近変更されなかったことを意味します。</span><span class="sxs-lookup"><span data-stu-id="2118d-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public System.Windows.WeakEventManager.ListenerList Clone ();" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As WeakEventManager.ListenerList" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::WeakEventManager::ListenerList ^ Clone();" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2118d-132">この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> の変更可能な複製を作成します。</span><span class="sxs-lookup"><span data-stu-id="2118d-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="2118d-133">現在のオブジェクトの変更可能な複製。</span><span class="sxs-lookup"><span data-stu-id="2118d-133">A modifiable clone of the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="listenerList.CopyTo newList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newList"><span data-ttu-id="2118d-134">コピー先のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2118d-134">The object to copy to.</span></span></param>
        <summary><span data-ttu-id="2118d-135">指定した <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に現在の <see cref="T:System.Windows.WeakEventManager.ListenerList" /> をコピーします。</span><span class="sxs-lookup"><span data-stu-id="2118d-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2118d-136"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> に格納されている項目の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="2118d-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <value><span data-ttu-id="2118d-137"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> に格納されている項目の数。</span><span class="sxs-lookup"><span data-stu-id="2118d-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberSignature Language="F#" Value="abstract member DeliverEvent : obj * EventArgs * Type -&gt; bool&#xA;override this.DeliverEvent : obj * EventArgs * Type -&gt; bool" Usage="listenerList.DeliverEvent (sender, args, managerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="args" Type="System.EventArgs" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="managerType" Type="System.Type" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="2118d-138">イベントを発生させたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2118d-138">The object that raised the event.</span></span></param>
        <param name="args"><span data-ttu-id="2118d-139">イベント データを含むオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="2118d-139">An object that contains the event data.</span></span></param>
        <param name="managerType"><span data-ttu-id="2118d-140">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</span><span class="sxs-lookup"><span data-stu-id="2118d-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span></span></param>
        <summary><span data-ttu-id="2118d-141">管理対象のイベントを <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内の各リスナーに配信します。</span><span class="sxs-lookup"><span data-stu-id="2118d-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="2118d-142"><see langword="true" /> のリスナーのいずれかがガベージ コレクションされたオブジェクトを参照する場合 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2118d-142"><see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.WeakEventManager.ListenerList" Usage="System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::WeakEventManager::ListenerList ^ Empty { System::Windows::WeakEventManager::ListenerList ^ get(); };" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2118d-143">比較のために空のリストを表す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2118d-143">Gets a value that represents an empty list for purposes of comparisons.</span></span></summary>
        <value><span data-ttu-id="2118d-144">空のリスト表現。</span><span class="sxs-lookup"><span data-stu-id="2118d-144">The empty list representation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberSignature Language="F#" Value="member this.EndUse : unit -&gt; unit" Usage="listenerList.EndUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2118d-145"><see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> で開始されたロック状態を解除します。</span><span class="sxs-lookup"><span data-stu-id="2118d-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2118d-146">この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> が空であるかどうかを宣言する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2118d-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span></span></summary>
        <value><span data-ttu-id="2118d-147">リストが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2118d-147"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2118d-148">このメソッドは、<xref:System.Windows.WeakEventManager.ListenerList.Count%2A> がゼロかどうかをチェックするのと同じですが、リスト内のいずれかの参照が古くなっているかどうかを確認しません。</span><span class="sxs-lookup"><span data-stu-id="2118d-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="2118d-149">すべての参照が引き続き有効であることを確認する場合は、リストの空の状態を確認する直前に <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2118d-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.IWeakEventListener" Usage="System.Windows.WeakEventManager.ListenerList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2118d-150">リスト内のリスナーの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="2118d-150">The zero-based index of the listener in the list.</span></span></param>
        <summary><span data-ttu-id="2118d-151"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内の特定のリスナー項目を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2118d-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span></span></summary>
        <value><span data-ttu-id="2118d-152">指定したインデックス位置にある項目。指定したインデックス位置に項目がない場合は null 参照。</span><span class="sxs-lookup"><span data-stu-id="2118d-152">The item at that index, or a null reference if no item was at that index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberSignature Language="F#" Value="static member PrepareForWriting : ListenerList -&gt; bool" Usage="System.Windows.WeakEventManager.ListenerList.PrepareForWriting list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="2118d-153">使用状態を確認し、場合に応じてコピーする対象のリスト。</span><span class="sxs-lookup"><span data-stu-id="2118d-153">The list to check for use state and potentially copy.</span></span></param>
        <summary><span data-ttu-id="2118d-154">指定したリストが使用中かどうかを確認します。リストが使用中である場合は、リストの参照パラメーターを、オリジナルのリストではなくリストのコピーに設定します。</span><span class="sxs-lookup"><span data-stu-id="2118d-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span></span></summary>
        <returns><span data-ttu-id="2118d-155">指定したリストが呼び出し時に使用されていたために <see langword="true" /> パラメーターの参照がコピーに変更された場合は <paramref name="list" />。</span><span class="sxs-lookup"><span data-stu-id="2118d-155"><see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span></span> <span data-ttu-id="2118d-156">指定されたリストが使用されておらず <see langword="false" /> パラメーターの参照が変更されなかった場合は <paramref name="list" />。</span><span class="sxs-lookup"><span data-stu-id="2118d-156"><see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2118d-157">指定されたリストが使用中である場合 (つまり、イベントが現在配信されていることを意味します)、このメソッドを呼び出すと、入力 `list` が複製に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="2118d-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="2118d-158">既存のユーザーは、新しいリストに変更を加えることなく、元のリストへのイベントの配信を終了します。</span><span class="sxs-lookup"><span data-stu-id="2118d-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="2118d-159">メソッドが `true`を返す場合、呼び出し元は、指定されたリストが最新ではなくなる可能性があることを示すために、独自のデータ構造に新しいリストを挿入することができます。</span><span class="sxs-lookup"><span data-stu-id="2118d-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="2118d-160">このメソッドは <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> を内部で呼び出し、<xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>を直ちに呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2118d-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="2118d-161">したがって、<xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> を呼び出すと、リストがロックされません。</span><span class="sxs-lookup"><span data-stu-id="2118d-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="2118d-162">複製コピーは、<xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>を呼び出した後にセカンダリ操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="2118d-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; bool" Usage="listenerList.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2118d-163">基になる参照ターゲットが null 参照であるリストからエントリをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="2118d-163">Removes all entries from the list where the underlying reference target is a null reference.</span></span></summary>
        <returns><span data-ttu-id="2118d-164">エントリが削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2118d-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Remove listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="2118d-165">削除するアイテムです。</span><span class="sxs-lookup"><span data-stu-id="2118d-165">The item to remove.</span></span></param>
        <summary><span data-ttu-id="2118d-166"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内で最初に見つかったリスナー項目を削除します。</span><span class="sxs-lookup"><span data-stu-id="2118d-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2118d-167">リストの内容を変更する前に、常に <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="2118d-168">それ以外の場合は、リストがイベントの配信処理中であるため、元のがロックされている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="2118d-169"><xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> を呼び出すと、<xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> の呼び出しが複製でも機能するように、入力 `list` が複製に変更されます。</span><span class="sxs-lookup"><span data-stu-id="2118d-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="2118d-170"><xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> が `true`を返す場合は、コードの他の領域で保持しているリストへのプライベート参照を更新する必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="2118d-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveHandler : Delegate -&gt; unit" Usage="listenerList.RemoveHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="2118d-171"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> から削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="2118d-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="2118d-172"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> からイベント ハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="2118d-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
