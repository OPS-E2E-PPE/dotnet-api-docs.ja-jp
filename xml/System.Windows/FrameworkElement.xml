<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1a4f6dc4c6b7b7361ab5438a7c8aea7e8f4834bd" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82445386" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface ISupportInitialize&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6434d-101">WPF フレームワーク レベルのプロパティ、イベント、およびメソッドのセットを Windows Presentation Foundation (WPF) 要素で利用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-101">Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</span></span> <span data-ttu-id="6434d-102">このクラスは WPF フレームワーク レベルの実装として用意されており、<see cref="T:System.Windows.UIElement" /> によって定義される WPF コア レベル API 上に構築されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-102">This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-103"><xref:System.Windows.FrameworkElement> は、WPF フレームワークレベルの要素クラスと WPF のコアレベルの <xref:System.Windows.UIElement> presentation services のセットとの間の接続ポイントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-103"><xref:System.Windows.FrameworkElement> is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services.</span></span> <span data-ttu-id="6434d-104">これらの概念の詳細については、「 [WPF のアーキテクチャ](~/docs/framework/wpf/advanced/wpf-architecture.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-104">For more information about these concepts, see [WPF Architecture](~/docs/framework/wpf/advanced/wpf-architecture.md).</span></span>  
  
 <span data-ttu-id="6434d-105"><xref:System.Windows.FrameworkElement> によって <xref:System.Windows.UIElement> が拡張され、次の機能が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-105"><xref:System.Windows.FrameworkElement> extends <xref:System.Windows.UIElement> and adds the following capabilities:</span></span>  
  
-   <span data-ttu-id="6434d-106">**レイアウトシステム定義**: <xref:System.Windows.FrameworkElement> <xref:System.Windows.UIElement>で仮想メンバーとして定義された特定のメソッドに対して、特定の WPF フレームワークレベルの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-106">**Layout system definition**: <xref:System.Windows.FrameworkElement> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="6434d-107">特に、特定の WPF コアレベルのレイアウトオーバーライドをシールし、代わりに、派生クラスでオーバーライドする必要がある WPF フレームワークレベルの同等の <xref:System.Windows.FrameworkElement> を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-107">Most notably, <xref:System.Windows.FrameworkElement> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</span></span> <span data-ttu-id="6434d-108">たとえば <xref:System.Windows.FrameworkElement> は <xref:System.Windows.UIElement.ArrangeCore%2A> シールされていますが <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>を提供しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-108">For example, <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span> <span data-ttu-id="6434d-109">これらの変更は、WPF フレームワークレベルで、<xref:System.Windows.FrameworkElement> 派生クラスをレンダリングできる完全なレイアウトシステムが配置されていることを反映しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-109">These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="6434d-110">WPF のコアレベルでは、一般的な [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ベースのレイアウトソリューションを構築する特定のメンバーが配置されていますが、レイアウトシステムの実際のエンジンは定義されていません。</span><span class="sxs-lookup"><span data-stu-id="6434d-110">At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined.</span></span> <span data-ttu-id="6434d-111">詳細については、「[Layout](~/docs/framework/wpf/advanced/layout.md)」 (レイアウト) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-111">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
-   <span data-ttu-id="6434d-112">**論理ツリー:** 一般的な [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プログラミングモデルは、多くの場合、要素のツリーとして表現されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-112">**The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements.</span></span> <span data-ttu-id="6434d-113">要素のツリーを論理ツリーとして表現できるようになり、マークアップでそのツリーを定義するためのサポートが <xref:System.Windows.FrameworkElement> レベルで実装されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-113">Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <xref:System.Windows.FrameworkElement> level.</span></span> <span data-ttu-id="6434d-114">ただし <xref:System.Windows.FrameworkElement> は意図的にコンテンツモデルを定義しないため、派生クラスにその責任を残します。</span><span class="sxs-lookup"><span data-stu-id="6434d-114">Note however that <xref:System.Windows.FrameworkElement> deliberately does not define a content model, and leaves that responsibility to derived classes.</span></span> <span data-ttu-id="6434d-115">詳細については、「[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-115">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
-   <span data-ttu-id="6434d-116">**オブジェクトの有効期間イベント:** 多くの場合、要素がいつ初期化されるか (コンストラクターが呼び出されます)、または要素が最初に論理ツリーに読み込まれるタイミングを知ることが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6434d-116">**Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</span></span> <span data-ttu-id="6434d-117"><xref:System.Windows.FrameworkElement> は、オブジェクトの有効期間に関連するいくつかのイベントを定義します。これにより、子要素の追加など、要素を含む分離コード操作に便利なフックが提供されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-117"><xref:System.Windows.FrameworkElement> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</span></span> <span data-ttu-id="6434d-118">詳細については、「[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-118">For more information, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
-   <span data-ttu-id="6434d-119">**データバインディングと動的リソース参照のサポート:** データバインディングとリソースのプロパティレベルのサポートは <xref:System.Windows.DependencyProperty> クラスによって実装され、プロパティシステムに組み込まれていますが、<xref:System.Windows.Expression> として格納されているメンバー値を解決する機能 (データバインディングと動的リソースの両方の基になるプログラミング構成要素) は <xref:System.Windows.FrameworkElement>によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-119">**Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="6434d-120">詳細については、「[データバインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)」と「 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-120">For more information, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md) and [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="6434d-121">**Styles:** <xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkElement.Style%2A> プロパティを定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-121">**Styles:** <xref:System.Windows.FrameworkElement> defines the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="6434d-122">ただし、<xref:System.Windows.FrameworkElement> では、テンプレートのサポートがまだ定義されていないか、デコレーターをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="6434d-122">However, <xref:System.Windows.FrameworkElement> does not yet define support for templates, or support decorators.</span></span> <span data-ttu-id="6434d-123">これらの機能は、<xref:System.Windows.Controls.Control> や <xref:System.Windows.Controls.ContentControl>などのコントロールクラスによって導入されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-123">These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
-   <span data-ttu-id="6434d-124">**その他のアニメーションのサポート:** 一部のアニメーションサポートは WPF コアレベルで既に定義されていますが、<xref:System.Windows.FrameworkElement.BeginStoryboard%2A> および関連するメンバーを実装することによって、これを拡張 <xref:System.Windows.FrameworkElement> ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-124">**More animation support:** Some animation support was already defined at the WPF core level, but <xref:System.Windows.FrameworkElement> extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.</span></span>  
  
 <span data-ttu-id="6434d-125">クラス階層からわかるように、多くの [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] クラスは、直接、または <xref:System.Windows.Controls.Panel> や <xref:System.Windows.Controls.Control>などの中間基本クラスを使用して <xref:System.Windows.FrameworkElement>から派生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-125">As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classes derive from <xref:System.Windows.FrameworkElement>, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.</span></span>  
  
 <span data-ttu-id="6434d-126"><xref:System.Windows.FrameworkElement> を基底クラスとして使用する場合は、最初に既存の派生クラスを確認することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6434d-126">If you intend to use <xref:System.Windows.FrameworkElement> as a base class, you might want to first examine the existing derived classes.</span></span> <span data-ttu-id="6434d-127"><xref:System.Windows.FrameworkElement> では、いくつかの基本的なシナリオがサポートされますが、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]で [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] を作成するために使用するビルディングブロックの意味では、"要素" に適した多くの機能がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-127"><xref:System.Windows.FrameworkElement> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> <span data-ttu-id="6434d-128">たとえば、<xref:System.Windows.FrameworkElement> は真のコンテンツモデルを定義していません。基底クラスとして <xref:System.Windows.FrameworkElement>、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 子要素を作成できるプロパティは定義しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-128">For instance, a <xref:System.Windows.FrameworkElement> does not define any true content model; <xref:System.Windows.FrameworkElement> as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] child elements.</span></span> <span data-ttu-id="6434d-129">特に、<xref:System.Windows.Controls.Control> と <xref:System.Windows.Controls.ContentControl>を確認することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-129">In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-130"><see cref="T:System.Windows.FrameworkElement" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6434d-130">Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-131">この要素の描画時の高さを取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-131">Gets the rendered height of this element.</span></span></summary>
        <value><span data-ttu-id="6434d-132">要素の高さ ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] の値)。</span><span class="sxs-lookup"><span data-stu-id="6434d-132">The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-133">既定値は 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="6434d-133">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-134">このプロパティは、他の高さ入力に基づいて計算された値であり、レイアウトシステムです。</span><span class="sxs-lookup"><span data-stu-id="6434d-134">This property is a calculated value based on other height inputs, and the layout system.</span></span> <span data-ttu-id="6434d-135">値は、実際のレンダリングパスに基づいてレイアウトシステム自体によって設定されます。したがって、入力の変更の基礎となる <xref:System.Windows.FrameworkElement.Height%2A> などのプロパティの設定値よりも少し遅れが生じることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-135">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="6434d-136"><xref:System.Windows.FrameworkElement.ActualHeight%2A> は計算された値であるため、レイアウトシステムによるさまざまな操作の結果として、複数の変更が報告される可能性があることに注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-136">Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="6434d-137">レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-137">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="6434d-138">このプロパティを [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]から設定することはできませんが、スタイルの値に基づいて <xref:System.Windows.Trigger> を作成することはできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-138">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-139">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-139">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-140">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-140">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|<span data-ttu-id="6434d-141">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-141">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-142">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-142">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-143">次の例では、さまざまな高さのプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-143">The following example displays various height properties.</span></span>  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-144"><see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-144">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-145">この要素の描画時の幅を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-145">Gets the rendered width of this element.</span></span></summary>
        <value><span data-ttu-id="6434d-146">要素の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] の値)。</span><span class="sxs-lookup"><span data-stu-id="6434d-146">The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-147">既定値は 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="6434d-147">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-148">このプロパティは、他の幅入力とレイアウトシステムに基づく計算値です。</span><span class="sxs-lookup"><span data-stu-id="6434d-148">This property is a calculated value based on other width inputs, and the layout system.</span></span> <span data-ttu-id="6434d-149">値は、実際のレンダリングパスに基づいてレイアウトシステム自体によって設定されます。したがって、入力の変更の基礎となる <xref:System.Windows.FrameworkElement.Width%2A> などのプロパティの設定値よりも少し遅れが生じることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-149">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="6434d-150"><xref:System.Windows.FrameworkElement.ActualWidth%2A> は計算された値であるため、レイアウトシステムによるさまざまな操作の結果として、複数の変更が報告される可能性があることに注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-150">Because <xref:System.Windows.FrameworkElement.ActualWidth%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="6434d-151">レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-151">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="6434d-152">このプロパティを [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]から設定することはできませんが、スタイルの値に基づいて <xref:System.Windows.Trigger> を作成することはできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-152">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-153">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-153">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-154">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-154">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|<span data-ttu-id="6434d-155">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-155">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-156">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-156">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-157">次の例では、さまざまな幅のプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-157">The following example displays various width properties.</span></span>  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-158"><see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-158">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="6434d-159">追加される子要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-159">Child element to be added.</span></span></param>
        <summary><span data-ttu-id="6434d-160">指定したオブジェクトをこの要素の論理ツリーに追加します。</span><span class="sxs-lookup"><span data-stu-id="6434d-160">Adds the provided object to the logical tree of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-161">このメソッドは、要素の論理上の子要素を表すオブジェクトのコレクションの実装に使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-161">Use this method for the implementation of collections on objects that represent logical child elements of an element.</span></span> <span data-ttu-id="6434d-162">子要素コレクションのコレクションのメンテナンスは、プロパティの getter または setter、変更されたイベントのクラス処理、コンストラクター、またはコレクション型自体で行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-162">Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="6434d-163">コントロールの作成者にとっては、このレベルで論理ツリーを操作することは推奨されません。ただし、使用できる基本コントロールクラスのコンテンツモデルが制御シナリオに適していない場合は除きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-163">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</span></span> <span data-ttu-id="6434d-164"><xref:System.Windows.Controls.ContentControl>、<xref:System.Windows.Controls.ItemsControl>、および <xref:System.Windows.Controls.HeaderedItemsControl>のレベルでサブクラス化することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-164">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="6434d-165">これらのクラスは、専用の Api を使用して論理ツリーの子要素を適用するコンテンツモデルを提供します。また、テンプレートを使用したスタイル設定などの [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 制御で通常は望ましい他の機能をサポートします。</span><span class="sxs-lookup"><span data-stu-id="6434d-165">These classes provide a content model with particular enforcement of logical tree child elements through dedicated APIs, as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span> <span data-ttu-id="6434d-166"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> と <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>の使用方法の詳細については、「 [WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-166">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 <span data-ttu-id="6434d-167">論理ツリーが別のプロセスによって反復処理されている場合に、<xref:System.Windows.FrameworkElement.AddLogicalChild%2A> が例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> may throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-168">次の例では、独自のビジュアル層実装を行うカスタム <xref:System.Windows.FrameworkElement> の `Child` プロパティを実装しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-168">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="6434d-169">プロパティセッターは、値が変更された場合に、クラス固有のビジュアルコレクションだけでなく、論理ツリーから古い値が削除されるように設計されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-169">The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="6434d-170">プロパティ値がキャッシュされ、新しい値が論理ツリーとカスタムビジュアルコレクションの両方に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-170">The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-171">必要に応じて現在のテンプレートのビジュアル ツリーを構築し、この呼び出しによってビジュアル ツリーが再構築されたかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-171">Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</span></span></summary>
        <returns><span data-ttu-id="6434d-172">ビジュアルがツリーに追加された場合は <see langword="true" />、それ以外の場合は <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-172"><see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-173">アプリケーションはこのメソッドを呼び出して、要素のビジュアルツリーが完全であることを保証できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-173">Applications can call this method to guarantee that the visual tree of an element is complete.</span></span> <span data-ttu-id="6434d-174">この保証手順は、コードがツリー内の子要素をチェックする場合に必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-174">This guarantee step might be necessary if code will be checking the child elements in the tree.</span></span> <span data-ttu-id="6434d-175">アプリケーション内の一般的な要素ロジックでは、テンプレートが有効期間内の適切な位置にある要素に自動的に適用されるため、<xref:System.Windows.FrameworkElement.ApplyTemplate%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-175">For typical element logic within applications, calling <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</span></span>  
  
 <span data-ttu-id="6434d-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> は、WPF フレームワークレベルのレイアウトシステムによって、すべてのメジャーパスで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is called on every Measure pass by the WPF framework-level layout system.</span></span>  
  
 <span data-ttu-id="6434d-177">派生クラスは、<xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> クラスハンドラーを使用して、このメソッドが明示的に呼び出された場合、またはレイアウトシステムによって呼び出された場合に通知を受け取ることができ <xref:System.Windows.FrameworkElement> ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-177"><xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system.</span></span> <span data-ttu-id="6434d-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> は、テンプレートが完全に生成され、論理ツリーにアタッチされた後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="6434d-179">この要素が要素自体と子を配置するために使用する親の末尾の領域。</span><span class="sxs-lookup"><span data-stu-id="6434d-179">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="6434d-180"><see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (<see cref="T:System.Windows.UIElement" /> で仮想メソッドとして定義されています) を実装し、その実装をシールします。</span><span class="sxs-lookup"><span data-stu-id="6434d-180">Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-181">このメソッドはシールされています。</span><span class="sxs-lookup"><span data-stu-id="6434d-181">This method is sealed.</span></span> <span data-ttu-id="6434d-182">要素のレイアウトの配置パス専用にカスタム要素のロジックをオーバーライドするには、<xref:System.Windows.FrameworkElement> 派生クラスで <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>をオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-182">In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize"><span data-ttu-id="6434d-183">この要素が要素自体と子を配置するために使用する親の末尾の領域。</span><span class="sxs-lookup"><span data-stu-id="6434d-183">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="6434d-184">派生クラスでオーバーライドされると、子要素を配置し、<see cref="T:System.Windows.FrameworkElement" /> 派生クラスのサイズを決定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-184">When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</span></span></summary>
        <returns><span data-ttu-id="6434d-185">使用する実際のサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-185">The actual size used.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-186">レイアウト処理の配置パスをカスタマイズするコントロールの作成者は、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-186">Control authors who want to customize the arrange pass of layout processing should override this method.</span></span> <span data-ttu-id="6434d-187">実装パターンでは、表示されている各子要素の <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> を呼び出し、各子要素の最終的な目的のサイズを <paramref name="finalRect" /> パラメーターとして渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-187">The implementation pattern should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each visible child element, and pass the final desired size for each child element as the <paramref name="finalRect" /> parameter.</span></span> <span data-ttu-id="6434d-188">親要素は各子の <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> を呼び出す必要があります。そうしないと、子要素はレンダリングされません。</span><span class="sxs-lookup"><span data-stu-id="6434d-188">Parent elements should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child, otherwise the child elements will not be rendered.</span></span>  
  
<span data-ttu-id="6434d-189">多くの派生クラスは、このメソッドの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-189">Many derived classes offer implementations of this method.</span></span> <span data-ttu-id="6434d-190">目立つのは、<see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />、<see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" />、<see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-190">Prominent ones include: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-191">この要素の初期化プロセスを開始します。</span><span class="sxs-lookup"><span data-stu-id="6434d-191">Starts the initialization process for this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-192">このメソッドは、要素を要素ツリーにまだ公開したり接続したりしない方法で調整する場合に、個々の要素に対して呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-192">You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</span></span> <span data-ttu-id="6434d-193">たとえば、新しい <xref:System.Windows.FrameworkElement>を作成しても、まだ論理ツリーにアタッチしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-193">For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree.</span></span> <span data-ttu-id="6434d-194">または、要素が子要素である論理ツリーが、アプリケーションのウィンドウまたはページに接続されていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-194">Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-195">要素の読み込みプロセス中に要素が初期化される前に発生する特別な処理を提供するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-195">Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="6434d-196">基本 (既定) の実装では初期化を追跡する内部フラグが設定されるため、実装では基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-196">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span> <span data-ttu-id="6434d-197">考えられる1つの実装は、コンストラクターによって既に有効にされていない独自のプライベートクラス初期化ルーチンへのフックとして、このメソッドを使用することです。</span><span class="sxs-lookup"><span data-stu-id="6434d-197">One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</span></span>  
  
<span data-ttu-id="6434d-198"><see cref="M:System.Windows.FrameworkElement.EndInit" /> が呼び出される前に、同じ要素で <see cref="M:System.Windows.FrameworkElement.BeginInit" /> が複数回呼び出された場合、基本実装では例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-198">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkElement.BeginInit" /> is called more than one time on the same element prior to <see cref="M:System.Windows.FrameworkElement.EndInit" /> being called.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6434d-199">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="6434d-199">Begins the sequence of actions contained in the provided storyboard.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="6434d-200">開始するストーリーボード。</span><span class="sxs-lookup"><span data-stu-id="6434d-200">The storyboard to begin.</span></span></param>
        <summary><span data-ttu-id="6434d-201">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="6434d-201">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-202">一般的なアニメーションのシナリオでは、この方法は使用しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-202">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="6434d-203">通常は、マークアップで <xref:System.Windows.Media.Animation.Storyboard> または <xref:System.Windows.Media.Animation.BeginStoryboard> 要素を作成し、次に要素の <xref:System.Windows.EventTrigger> コンテンツとして配置します。</span><span class="sxs-lookup"><span data-stu-id="6434d-203">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="6434d-204">イベントによってトリガーされると、アニメーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-204">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="6434d-205"><xref:System.Windows.Media.Animation.Storyboard> の制御側面の大部分は、マークアップで公開されているプロパティによって対処できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-205">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="6434d-206">`isControllable`、パラメーターを使用しない署名、またはそのパラメーターが `false`指定されている場合は、アニメーションが "塗りつぶし" の期間に達するとすぐに、アニメーションに関連付けられているタイムラインの時計が削除されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-206">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="6434d-207">そのため、1回実行した後にアニメーションを再起動することはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-207">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="6434d-208">アニメーションを制御するには、ストーリーボードが[X:Name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)を持つか、コード内で参照によってアクセスできる必要もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-208">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-209">次の例では、リソースから <xref:System.Windows.Media.Animation.Storyboard> を取得し、内部イベントがクラスで処理されたときにその <xref:System.Windows.Media.Animation.Storyboard> を実行します。</span><span class="sxs-lookup"><span data-stu-id="6434d-209">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard, handoffBehavior As HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="6434d-210">開始するストーリーボード。</span><span class="sxs-lookup"><span data-stu-id="6434d-210">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="6434d-211">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</span><span class="sxs-lookup"><span data-stu-id="6434d-211">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <summary><span data-ttu-id="6434d-212">プロパティが既にアニメーション化されていた場合にどうするかを指定するオプションを使用して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="6434d-212">Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-213">一般的なアニメーションのシナリオでは、この方法は使用しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-213">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="6434d-214">通常は、マークアップで <xref:System.Windows.Media.Animation.Storyboard> または <xref:System.Windows.Media.Animation.BeginStoryboard> 要素を作成し、次に要素の <xref:System.Windows.EventTrigger> コンテンツとして配置します。</span><span class="sxs-lookup"><span data-stu-id="6434d-214">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="6434d-215">イベントによってトリガーされると、アニメーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-215">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="6434d-216"><xref:System.Windows.Media.Animation.Storyboard> の制御側面の大部分は、マークアップで公開されているプロパティによって対処できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-216">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="6434d-217">`isControllable`、パラメーターを使用しない署名、またはそのパラメーターが `false`指定されている場合は、アニメーションが "塗りつぶし" の期間に達するとすぐに、アニメーションに関連付けられているタイムラインの時計が削除されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-217">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="6434d-218">そのため、1回実行した後にアニメーションを再起動することはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-218">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="6434d-219">アニメーションを制御するには、ストーリーボードが[X:Name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)を持つか、コード内で参照によってアクセスできる必要もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-219">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="6434d-220">ハンドオフ動作は、<xref:System.Windows.Media.Animation.BeginStoryboard>の属性として指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-220">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="6434d-221">作成 HandoffBehavior の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-221">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="6434d-222"><xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>を使用して <xref:System.Windows.Media.Animation.Storyboard>、<xref:System.Windows.Media.Animation.AnimationTimeline>、または <xref:System.Windows.Media.Animation.AnimationClock> をプロパティに適用すると、そのプロパティに以前関連付けられていたすべての <xref:System.Windows.Media.Animation.Clock> オブジェクトが引き続きシステムリソースを消費します。タイミングシステムは、クロックを自動的に削除しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-222">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="6434d-223"><xref:System.Windows.Media.Animation.HandoffBehavior.Compose>を使用して多数のクロックを適用するときのパフォーマンスの問題を回避するには、アニメーション化されたプロパティから完成したクロックを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-223">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="6434d-224">クロックを削除するには、いくつかの方法があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-224">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="6434d-225">プロパティからすべてのクロックを削除するには、アニメーション化されたオブジェクトの <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-225">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="6434d-226">最初のパラメーターとしてアニメーション化するプロパティを指定し、2番目のパラメーターとして `null` します。</span><span class="sxs-lookup"><span data-stu-id="6434d-226">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="6434d-227">これにより、プロパティからすべてのアニメーションクロックが削除されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-227">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="6434d-228">特定の <xref:System.Windows.Media.Animation.AnimationClock> をクロックの一覧から削除するには、<xref:System.Windows.Media.Animation.AnimationClock> の <xref:System.Windows.Media.Animation.Clock.Controller%2A> プロパティを使用して <xref:System.Windows.Media.Animation.ClockController>を取得し、次に <xref:System.Windows.Media.Animation.ClockController.Remove%2A> の <xref:System.Windows.Media.Animation.ClockController>メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-228">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="6434d-229">これは通常、クロックの <xref:System.Windows.Media.Animation.Clock.Completed> イベントハンドラーで実行されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-229">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="6434d-230"><xref:System.Windows.Media.Animation.ClockController>によって制御できるのはルートクロックのみであることに注意してください。子クロックの <xref:System.Windows.Media.Animation.Clock.Controller%2A> プロパティは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-230">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="6434d-231">また、クロックの有効期間が無期限の場合は、<xref:System.Windows.Media.Animation.Clock.Completed> イベントが発生しないことにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-231">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="6434d-232">その場合、ユーザーは <xref:System.Windows.Media.Animation.ClockController.Remove%2A>を呼び出すタイミングを決定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-232">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="6434d-233">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</span><span class="sxs-lookup"><span data-stu-id="6434d-233">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="6434d-234">オブジェクトがガベージコレクションされると、そのクロックも切断され、ガベージコレクトされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-234">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="6434d-235">クロックオブジェクトの詳細については、「[アニメーションとタイミングシステムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-235">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-236">次の例では、リソースから <xref:System.Windows.Media.Animation.Storyboard> を取得し、内部イベントがクラスで処理されたときにその <xref:System.Windows.Media.Animation.Storyboard> を実行します。</span><span class="sxs-lookup"><span data-stu-id="6434d-236">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard, handoffBehavior As HandoffBehavior, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="6434d-237">開始するストーリーボード。</span><span class="sxs-lookup"><span data-stu-id="6434d-237">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="6434d-238">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</span><span class="sxs-lookup"><span data-stu-id="6434d-238">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <param name="isControllable"><span data-ttu-id="6434d-239">アニメーションを起動した後に、アニメーションを制御できるかどうか (一時停止できるかどうか) を宣言します。</span><span class="sxs-lookup"><span data-stu-id="6434d-239">Declares whether the animation is controllable (can be paused) after it is started.</span></span></param>
        <summary><span data-ttu-id="6434d-240">開始後のアニメーションの制御の状態を指定して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="6434d-240">Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-241">一般的なアニメーションのシナリオでは、この方法は使用しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-241">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="6434d-242">通常は、マークアップで <xref:System.Windows.Media.Animation.Storyboard> または <xref:System.Windows.Media.Animation.BeginStoryboard> 要素を作成し、次に要素の <xref:System.Windows.EventTrigger> コンテンツとして配置します。</span><span class="sxs-lookup"><span data-stu-id="6434d-242">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="6434d-243">イベントによってトリガーされると、アニメーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-243">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="6434d-244"><xref:System.Windows.Media.Animation.Storyboard> の制御側面の大部分は、マークアップで公開されているプロパティによって対処できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-244">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="6434d-245">`isControllable`、パラメーターを使用しない署名、またはそのパラメーターが `false`指定されている場合は、アニメーションが "塗りつぶし" の期間に達するとすぐに、アニメーションに関連付けられているタイムラインの時計が削除されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-245">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="6434d-246">そのため、1回実行した後にアニメーションを再起動することはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-246">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="6434d-247">アニメーションを制御するには、ストーリーボードが[X:Name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)を持つか、コード内で参照によってアクセスできる必要もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-247">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="6434d-248">ハンドオフ動作は、<xref:System.Windows.Media.Animation.BeginStoryboard>の属性として指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-248">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="6434d-249">作成 HandoffBehavior の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-249">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="6434d-250"><xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>を使用して <xref:System.Windows.Media.Animation.Storyboard>、<xref:System.Windows.Media.Animation.AnimationTimeline>、または <xref:System.Windows.Media.Animation.AnimationClock> をプロパティに適用すると、そのプロパティに以前関連付けられていたすべての <xref:System.Windows.Media.Animation.Clock> オブジェクトが引き続きシステムリソースを消費します。タイミングシステムは、クロックを自動的に削除しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-250">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="6434d-251"><xref:System.Windows.Media.Animation.HandoffBehavior.Compose>を使用して多数のクロックを適用するときのパフォーマンスの問題を回避するには、アニメーション化されたプロパティから完成したクロックを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-251">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="6434d-252">クロックを削除するには、いくつかの方法があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-252">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="6434d-253">プロパティからすべてのクロックを削除するには、アニメーション化されたオブジェクトの <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-253">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="6434d-254">最初のパラメーターとしてアニメーション化するプロパティを指定し、2番目のパラメーターとして `null` します。</span><span class="sxs-lookup"><span data-stu-id="6434d-254">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="6434d-255">これにより、プロパティからすべてのアニメーションクロックが削除されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-255">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="6434d-256">特定の <xref:System.Windows.Media.Animation.AnimationClock> をクロックの一覧から削除するには、<xref:System.Windows.Media.Animation.AnimationClock> の <xref:System.Windows.Media.Animation.Clock.Controller%2A> プロパティを使用して <xref:System.Windows.Media.Animation.ClockController>を取得し、次に <xref:System.Windows.Media.Animation.ClockController.Remove%2A> の <xref:System.Windows.Media.Animation.ClockController>メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-256">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="6434d-257">これは通常、クロックの <xref:System.Windows.Media.Animation.Clock.Completed> イベントハンドラーで実行されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-257">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="6434d-258"><xref:System.Windows.Media.Animation.ClockController>によって制御できるのはルートクロックのみであることに注意してください。子クロックの <xref:System.Windows.Media.Animation.Clock.Controller%2A> プロパティは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-258">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="6434d-259">また、クロックの有効期間が無期限の場合は、<xref:System.Windows.Media.Animation.Clock.Completed> イベントが発生しないことにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-259">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="6434d-260">その場合、ユーザーは <xref:System.Windows.Media.Animation.ClockController.Remove%2A>を呼び出すタイミングを決定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-260">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="6434d-261">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</span><span class="sxs-lookup"><span data-stu-id="6434d-261">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="6434d-262">オブジェクトがガベージコレクションされると、そのクロックも切断され、ガベージコレクトされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-262">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="6434d-263">クロックオブジェクトの詳細については、「[アニメーションとタイミングシステムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-263">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-264">要素に使用される <see cref="T:System.Windows.Data.BindingGroup" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-264">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></summary>
        <value><span data-ttu-id="6434d-265">要素に使用される <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-265">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-266"><xref:System.Windows.Data.BindingGroup> を使用すると、オブジェクトの複数のプロパティの値を検証できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-266">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="6434d-267">たとえば、ユーザーにアドレスを入力するように求めるメッセージが表示され、`Address`型のオブジェクトが設定されているとします。このオブジェクトには、`Street`、`City`、`ZipCode`、`Country`というプロパティがユーザーが指定した値と共に格納されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-267">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="6434d-268">このアプリケーションには、4つの <xref:System.Windows.Controls.TextBox> コントロールを含むパネルがあり、それぞれがオブジェクトのプロパティの1つにバインドされています。</span><span class="sxs-lookup"><span data-stu-id="6434d-268">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object's properties.</span></span> <span data-ttu-id="6434d-269"><xref:System.Windows.Data.BindingGroup> 内の <xref:System.Windows.Controls.ValidationRule> を使用して、`Address` オブジェクトを検証できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-269">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="6434d-270">たとえば、<xref:System.Windows.Controls.ValidationRule> は、住所の国/地域に対して郵便番号が有効であることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-270">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country/region of the address.</span></span>  
  
 <span data-ttu-id="6434d-271">子要素は、他の継承可能なプロパティと同様に、親要素から <xref:System.Windows.Data.BindingGroup> を継承します。</span><span class="sxs-lookup"><span data-stu-id="6434d-271">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-272">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-272">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-273">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-273">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|<span data-ttu-id="6434d-274">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-274">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-275">次の例は、ユーザーが2つのオブジェクトのプロパティを等しい値に設定したかどうかを確認するアプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="6434d-275">The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</span></span> <span data-ttu-id="6434d-276">最初の例では、2つの <xref:System.Windows.Controls.TextBox> コントロールを作成し、それぞれが異なるデータソースにバインドされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-276">The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source.</span></span> <span data-ttu-id="6434d-277"><xref:System.Windows.Controls.StackPanel> には、2つの文字列が等しいことを確認する <xref:System.Windows.Controls.ValidationRule> を含む <xref:System.Windows.Data.BindingGroup> があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-277">The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.</span></span>  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 <span data-ttu-id="6434d-278">次の例では、前の例で使用している <xref:System.Windows.Controls.ValidationRule> を示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-278">The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.</span></span>  <span data-ttu-id="6434d-279"><xref:System.Windows.Controls.ValidationRule.Validate%2A> メソッドのオーバーライドでは、この例では <xref:System.Windows.Data.BindingGroup> から各ソースオブジェクトを取得し、オブジェクトのプロパティが等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6434d-279">In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 <span data-ttu-id="6434d-280"><xref:System.Windows.Controls.ValidationRule>を呼び出すには、<xref:System.Windows.Data.BindingGroup.UpdateSources%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-280">To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.</span></span>  <span data-ttu-id="6434d-281">次の例では、ボタンの click イベントが発生したときに <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-281">The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-282"><see cref="P:System.Windows.FrameworkElement.BindingGroup" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-282">Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6434d-283">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</span><span class="sxs-lookup"><span data-stu-id="6434d-283">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-284">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</span><span class="sxs-lookup"><span data-stu-id="6434d-284">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-285">このメソッドを呼び出すと、現在の要素を起点とする <xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-285">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="6434d-286">このイベントは、<xref:System.Windows.Controls.ScrollViewer>、または派生または類似のクラスによって処理できるように生成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-286">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="6434d-287">期待される動作は、イベントが親要素によって処理され、イベントデータで処理されたとマークされ、イベントのソースが <xref:System.Windows.Controls.ScrollViewer> コントロールに埋め込まれたロジックを通じて表示されることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-287">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="6434d-288"><xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントも <xref:System.Windows.FrameworkElement.BringIntoView%2A> メソッドも、成功または失敗に関する情報を送信しません。これに対して、イベントは通常、成功時に処理済みとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-288">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="6434d-289">失敗の理由には、<xref:System.Windows.Visibility.Visible>以外の値の <xref:System.Windows.UIElement.Visibility%2A> など、要素の設定を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-289">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="6434d-290">`targetRectangle`を指定しない署名を使用すると、要素のサイズ全体 (<xref:System.Windows.UIElement.RenderSize%2A>) が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-290">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="6434d-291">このメソッドを呼び出すと、要素を含む任意の親のスクロール可能な領域で <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> が呼び出される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-291">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="6434d-292">この要素がスクロール可能な領域に含まれていない場合でも、<xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントは発生しますが、イベントリスナーが存在しないため、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-292">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-293">次の例では、移動先の URI (uniform resource identifier) にフラグメントが含まれている場合に常に応答するアプリケーションナビゲーションイベントのハンドラーを実装しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-293">The following example implements a handler for an application navigation event that responds whenever the uniform resource identifier (URI) being navigated to includes a fragment.</span></span> <span data-ttu-id="6434d-294">このフラグメントは、ハッシュ記号 (#) に続く URI で名前が付けられ、実装されている動作によって、要素がフレーム内でスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-294">The fragment is named in the URI following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</span></span> <span data-ttu-id="6434d-295">この例では、<xref:System.Windows.FrameworkElement.BringIntoView%2A> と <xref:System.Windows.FrameworkElement.RequestBringIntoView> がスクロール動作を要求します。</span><span class="sxs-lookup"><span data-stu-id="6434d-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.</span></span>  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle"><span data-ttu-id="6434d-296">指定した、表示する必要がある要素のサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-296">Specified size of the element that should also be brought into view.</span></span></param>
        <summary><span data-ttu-id="6434d-297">この要素が含まれているスクロール可能な領域内で、この要素の指定したサイズの領域が表示されるように試みます。</span><span class="sxs-lookup"><span data-stu-id="6434d-297">Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-298">このメソッドを呼び出すと、現在の要素を起点とする <xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-298">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="6434d-299">このイベントは、<xref:System.Windows.Controls.ScrollViewer>、または派生または類似のクラスによって処理できるように生成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-299">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="6434d-300">期待される動作は、イベントが親要素によって処理され、イベントデータで処理されたとマークされ、イベントのソースが <xref:System.Windows.Controls.ScrollViewer> コントロールに埋め込まれたロジックを通じて表示されることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-300">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="6434d-301"><xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントも <xref:System.Windows.FrameworkElement.BringIntoView%2A> メソッドも、成功または失敗に関する情報を送信しません。これに対して、イベントは通常、成功時に処理済みとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-301">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="6434d-302">失敗の理由には、<xref:System.Windows.Visibility.Visible>以外の値の <xref:System.Windows.UIElement.Visibility%2A> など、要素の設定を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-302">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="6434d-303">`targetRectangle`を指定しない署名を使用すると、要素のサイズ全体 (<xref:System.Windows.UIElement.RenderSize%2A>) が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-303">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="6434d-304">このメソッドを呼び出すと、要素を含む任意の親のスクロール可能な領域で <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> が呼び出される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-304">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="6434d-305">この要素がスクロール可能な領域に含まれていない場合でも、<xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントは発生しますが、イベントリスナーが存在しないため、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-305">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-306">次の例では、制約されたスクロール領域に大きなグラフィックがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-306">The following example has a large graphic in a constrained scrolling region.</span></span> <span data-ttu-id="6434d-307">ページ上のボタンには、ビューを大きなグラフィックの特定の領域にスクロールするハンドラーがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-307">A button on the page has a handler that scrolls the view to a particular region of the large graphic.</span></span>  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-308">この要素内から [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] によってコンテキスト メニューが要求された場合に常に表示されるコンテキスト メニュー要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-308">Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span></span></summary>
        <value><span data-ttu-id="6434d-309">この要素に割り当てられたコンテキスト メニュー。</span><span class="sxs-lookup"><span data-stu-id="6434d-309">The context menu assigned to this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-310"><xref:System.Windows.Controls.ContextMenu> 自体は <xref:System.Windows.FrameworkElement> 派生クラスであり、<xref:System.Windows.Controls.ContextMenu> 自体が <xref:System.Windows.FrameworkElement.ContextMenu%2A> プロパティを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-310"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property.</span></span> <span data-ttu-id="6434d-311">ただし、これによりユーザーにとってわかりにくいコンテキストメニューエクスペリエンスが作成されるため、この方法はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="6434d-311">However, this creates a confusing context menu experience for the user and this practice is not recommended.</span></span>  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-312">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-313">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-313">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|<span data-ttu-id="6434d-314">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-315">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-315">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-316">要素のコンテキスト メニューが閉じる直前に発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-316">Occurs just before any context menu on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-317">コンテキストメニューを終了しないようにするには、イベントのハンドラーがそれを処理済みとしてマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-317">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="6434d-318">このイベントをスタイルの <xref:System.Windows.EventTrigger> として使用するには、イベントの基になるサービスの定義を参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-318">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="6434d-319">(この使用方法が必要になるのは、基になるサービスイベントを公開する <xref:System.Windows.FrameworkElement> のイベント実装が、トリガーとして使用できるように <xref:System.Windows.FrameworkElement.ContextMenuClosing> 識別子をマップしないためです)。</span><span class="sxs-lookup"><span data-stu-id="6434d-319">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuClosing> identifier such that you can use it as a trigger).</span></span>  
  
 <span data-ttu-id="6434d-320"><xref:System.Windows.Controls.ContextMenu> 自体は <xref:System.Windows.FrameworkElement> 派生クラスですが、コンテキストメニューでは <xref:System.Windows.FrameworkElement.ContextMenuClosing> イベントは直接発生しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-320"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the <xref:System.Windows.FrameworkElement.ContextMenuClosing> event will not be raised by a context menu directly.</span></span> <span data-ttu-id="6434d-321">代わりに、コンテキストメニューをプロパティとして "所有" する要素からイベントが発生し、ユーザーが UI のコンテキストメニューを閉じようとしたときにのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-321">Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</span></span> <span data-ttu-id="6434d-322">ただし、<xref:System.Windows.Controls.ContextMenu> 自体が <xref:System.Windows.FrameworkElement.ContextMenu%2A> プロパティ (入れ子になったコンテキストメニュー) を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-322">However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu).</span></span> <span data-ttu-id="6434d-323">この場合、<xref:System.Windows.Controls.ContextMenu> は、入れ子になった <xref:System.Windows.Controls.ContextMenu> を実際に所有し、イベントを発生させる可能性があります。イベントのソースは、入れ子になったコンテキストメニューになります。</span><span class="sxs-lookup"><span data-stu-id="6434d-323">In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.</span></span>  
  
 <span data-ttu-id="6434d-324"><xref:System.Windows.Controls.ContextMenu> クラス自体にも同様のイベント (<xref:System.Windows.Controls.ContextMenu.Closed>) がありますが、<xref:System.Windows.Controls.ContextMenu.Closed> イベントではユーザー操作をキャンセルすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-324">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-325">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-326">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-326">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="6434d-327">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-327">Routing strategy</span></span>|<span data-ttu-id="6434d-328">バブリング</span><span class="sxs-lookup"><span data-stu-id="6434d-328">Bubbling</span></span>|  
|<span data-ttu-id="6434d-329">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-329">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="6434d-330">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-330">Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-331"><see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-331">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-332">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-332">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-333">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-333">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-334">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-334">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-335">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-335">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-336">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-336">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-337">要素のコンテキスト メニューが開くときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-337">Occurs when any context menu on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-338">コンテキストメニューを手動で開くには、イベントのハンドラーが関連するイベントを処理済みとしてマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-338">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="6434d-339">それ以外の場合は、[<xref:System.Windows.FrameworkElement.ContextMenu%2A>] プロパティの既存の値を使用して、ショートカットメニューが自動的に開きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-339">Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="6434d-340">イベントを処理済みとしてマークすると、既定のアクションが実質的にキャンセルされます。また、<xref:System.Windows.FrameworkElement.ContextMenu%2A> プロパティの値をリセットし、新しい <xref:System.Windows.Controls.ContextMenu>を開くことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-340">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="6434d-341">ただし、タイミングの問題に注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-341">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="6434d-342">コンテキストメニューを <xref:System.Windows.FrameworkElement.ContextMenuOpening> ハンドラーで完全に置き換えるには、最初のコンテキストメニューを null または空にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-342">In order to completely replace the context menu through a <xref:System.Windows.FrameworkElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="6434d-343">または、イベントを処理し、新しいコンテキストメニューを手動で開く必要がある場合もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-343">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="6434d-344">詳細については、「[方法: ContextMenuOpening イベントを処理する](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-344">For details, see [How to: Handle the ContextMenuOpening Event](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).</span></span>  
  
 <span data-ttu-id="6434d-345">このイベントをスタイルの <xref:System.Windows.EventTrigger> として使用するには、基になる添付イベントを参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-345">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="6434d-346">(この使用方法が必要になるのは、基になるサービスイベントを公開する <xref:System.Windows.FrameworkElement> のイベント実装が、トリガーで使用できるように <xref:System.Windows.FrameworkElement.ContextMenuOpening> 識別子をマップしないためです)。</span><span class="sxs-lookup"><span data-stu-id="6434d-346">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuOpening> identifier such that you can use it in triggers).</span></span>  
  
 <span data-ttu-id="6434d-347"><xref:System.Windows.Controls.ContextMenu> 自体は <xref:System.Windows.FrameworkElement> 派生クラスですが、このイベントは、ソースとして開かれているコンテキストメニューからは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-347"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source.</span></span> <span data-ttu-id="6434d-348">イベントは、コンテキストメニューをプロパティとして "所有" する要素から発生し、ユーザーが UI でコンテキストメニューを開こうとしたときにのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-348">The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</span></span> <span data-ttu-id="6434d-349"><xref:System.Windows.Controls.ContextMenu> 自体が <xref:System.Windows.FrameworkElement.ContextMenu%2A> プロパティを持つことはできますが、このシナリオは避ける必要があります (詳細については、「<xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="6434d-349">It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="6434d-350"><xref:System.Windows.Controls.ContextMenu> クラス自体にも同様のイベント (<xref:System.Windows.Controls.ContextMenu.Opened>) がありますが <xref:System.Windows.Controls.ContextMenu.Opened> では、ユーザー操作をキャンセルすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-350">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-351">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-352">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-352">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="6434d-353">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-353">Routing strategy</span></span>|<span data-ttu-id="6434d-354">バブリング</span><span class="sxs-lookup"><span data-stu-id="6434d-354">Bubbling</span></span>|  
|<span data-ttu-id="6434d-355">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-355">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="6434d-356">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-356">Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-357"><see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-357">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-358">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-359">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-360">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-361">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-362">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-363"><see cref="P:System.Windows.FrameworkElement.ContextMenu" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-363">Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-364">この要素上にマウス ポインターが置かれたときに表示されるカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-364">Gets or sets the cursor that displays when the mouse pointer is over this element.</span></span></summary>
        <value><span data-ttu-id="6434d-365">表示対象のカーソル。</span><span class="sxs-lookup"><span data-stu-id="6434d-365">The cursor to display.</span></span> <span data-ttu-id="6434d-366">既定値はこの依存関係プロパティごとに <see langword="null" /> として定義されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-366">The default value is defined as <see langword="null" /> per this dependency property.</span></span> <span data-ttu-id="6434d-367">ただし、実行時における実用的な既定値は、さまざまな要因から取得されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-367">However, the practical default at run time will come from a variety of factors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-368">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]でこのプロパティを設定すると、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサは <xref:System.Windows.Input.Cursor> クラスの型変換に依存して文字列を評価します。</span><span class="sxs-lookup"><span data-stu-id="6434d-368">When you set this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="6434d-369">指定された文字列は、<xref:System.Windows.Input.CursorType> 値に評価される必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-369">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="6434d-370">詳細については、「<xref:System.Windows.Input.Cursor>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-370">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="6434d-371">このプロパティによって確立されたカーソルは、マウスポインターがこの要素の上にあるときに表示されるかどうかは、<xref:System.Windows.FrameworkElement.ForceCursor%2A> プロパティの値にも依存します。</span><span class="sxs-lookup"><span data-stu-id="6434d-371">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="6434d-372">また、アクティブなドラッグ、マウスのキャプチャ、コントロール内のテキスト編集モードなどのイベント関連の考慮事項は、このプロパティで指定した値よりも優先順位の高いカーソルにも影響します。</span><span class="sxs-lookup"><span data-stu-id="6434d-372">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="6434d-373">このプロパティを最終的な既定値に設定する動作を元に戻すには、再度 `null` に設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-373">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="6434d-374">`null` の既定値は、実際のカーソル値の決定がここで遅延され、他の場所から取得する必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6434d-374">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="6434d-375">任意のソースからプログラムの値を指定せずに表示された場合、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] アプリケーションの視覚的な既定のカーソルは矢印になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-375">If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span> <span data-ttu-id="6434d-376">ただし、一時的なカーソルの変更は、要素が渡されたときに要素の <xref:System.Windows.FrameworkElement.Cursor%2A> 値に設定されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-376">However, the transient cursor changes are not set to the <xref:System.Windows.FrameworkElement.Cursor%2A> values of the elements when they are passed over.</span></span> <span data-ttu-id="6434d-377"><xref:System.Windows.FrameworkElement.Cursor%2A> プロパティは、実際に設定されている場合には null 以外の値のみを報告します。たとえば、コードやスタイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-377">The <xref:System.Windows.FrameworkElement.Cursor%2A> property will only report non null values in cases where it was actually set, for instance through code or a style.</span></span> <span data-ttu-id="6434d-378">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] アプリケーションにマウスを移動するたびに、<xref:System.Windows.UIElement.QueryCursor> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-378">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event.</span></span> <span data-ttu-id="6434d-379">イベントのバブルと、ルートにあるすべての要素には、イベントを処理し、このイベントの引数を使用してカーソルの値を設定する機会があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-379">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</span></span> <span data-ttu-id="6434d-380">これは、ほとんどの場合に視覚的に見えるカーソルを生成するメカニズムです。</span><span class="sxs-lookup"><span data-stu-id="6434d-380">This is the mechanism that produces the visually apparent cursor in most cases.</span></span> <span data-ttu-id="6434d-381"><xref:System.Windows.UIElement.QueryCursor> ハンドラーがカーソルの結果を返す場合、イベントが処理され、引数の値が変更されたという事実は、<xref:System.Windows.FrameworkElement.ForceCursor%2A> が設定されていない限り、<xref:System.Windows.FrameworkElement.Cursor%2A> プロパティの値よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-381">If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="6434d-382">カスタムカーソルを作成しない場合は、通常、このプロパティを <xref:System.Windows.Input.Cursors> クラスの静的なプロパティ値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-382">If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span> <span data-ttu-id="6434d-383">コードに <xref:System.Windows.FrameworkElement.Cursor%2A> を設定するには、次のいずれかが必要です。</span><span class="sxs-lookup"><span data-stu-id="6434d-383">Setting <xref:System.Windows.FrameworkElement.Cursor%2A> in code requires one of the following:</span></span>  
  
-   <span data-ttu-id="6434d-384"><xref:System.Windows.Input.Cursor> コンストラクターを呼び出して、<xref:System.Windows.Input.Cursor> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-384">Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance.</span></span> <span data-ttu-id="6434d-385"><xref:System.Windows.Input.Cursor> コンストラクターのシグネチャはどちらも、カスタムカーソルの <xref:System.Windows.Input.Cursor> オブジェクトを作成することを想定して、ストリームまたはファイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-385">Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.</span></span>  
  
-   <span data-ttu-id="6434d-386"><xref:System.Windows.Input.CursorConverter> クラスとその <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> メソッドを使用して、<xref:System.Windows.Input.CursorType>、または <xref:System.Windows.Input.CursorType>に評価できる文字列を指定し、戻り値を <xref:System.Windows.Input.Cursor>にキャストします。</span><span class="sxs-lookup"><span data-stu-id="6434d-386">Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.</span></span>  
  
 <span data-ttu-id="6434d-387">部分信頼では、<xref:System.Windows.Input.Cursor> をカスタム値に設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-387">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="6434d-388">カスタムカーソルの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-388">For more information on custom cursors, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-389">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-389">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-390">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-390">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|<span data-ttu-id="6434d-391">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-391">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-392">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-392">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-393">次の例は、カーソルグラフィックを意図的に設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-393">The following example shows how to deliberately set the cursor graphic.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-394"><see cref="P:System.Windows.FrameworkElement.Cursor" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-394">Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-395">要素がデータ バインディングに含まれている場合に、その要素のデータ コンテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-395">Gets or sets the data context for an element when it participates in data binding.</span></span></summary>
        <value><span data-ttu-id="6434d-396">データ コンテキストとして使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6434d-396">The object to use as data context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-397">*データコンテキスト*は、バインドに使用されるデータソースや、パスなどのその他の特性について、要素が親要素から情報を継承できるようにする概念です。</span><span class="sxs-lookup"><span data-stu-id="6434d-397">*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</span></span>  
  
 <span data-ttu-id="6434d-398">データコンテキストは、そのオブジェクトのプロパティを評価するバインディングを使用して、.NET オブジェクトに直接設定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-398">Data context can be set directly to a .NET object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="6434d-399">または、データコンテキストを <xref:System.Windows.Data.DataSourceProvider> オブジェクトに設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-399">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="6434d-400">この依存関係プロパティは、プロパティ値を継承します。</span><span class="sxs-lookup"><span data-stu-id="6434d-400">This dependency property inherits property values.</span></span> <span data-ttu-id="6434d-401">ローカル値またはスタイルによって確立された <xref:System.Windows.FrameworkElement.DataContext%2A> の他の値を持たない子要素がある場合、プロパティシステムは、この値が割り当てられている最も近い親要素の <xref:System.Windows.FrameworkElement.DataContext%2A> 値になるように値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-401">If there are child elements without other values for <xref:System.Windows.FrameworkElement.DataContext%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="6434d-402">または、<xref:System.Windows.Data.Binding> クラスの次のいずれかのプロパティを使用して、バインドソースを明示的に指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-402">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly:</span></span>
  
    - <span data-ttu-id="6434d-403">[https://login.microsoftonline.com/consumers/](<xref:System.Windows.Data.Binding.ElementName%2A>)</span><span class="sxs-lookup"><span data-stu-id="6434d-403"><xref:System.Windows.Data.Binding.ElementName%2A>.</span></span>
    - <span data-ttu-id="6434d-404">[https://login.microsoftonline.com/consumers/](<xref:System.Windows.Data.Binding.Source%2A>)</span><span class="sxs-lookup"><span data-stu-id="6434d-404"><xref:System.Windows.Data.Binding.Source%2A>.</span></span>
    - <span data-ttu-id="6434d-405">[https://login.microsoftonline.com/consumers/](<xref:System.Windows.Data.Binding.RelativeSource%2A>)</span><span class="sxs-lookup"><span data-stu-id="6434d-405"><xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> 
  
  <span data-ttu-id="6434d-406">詳細については、「[方法: バインディングソースを指定](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-406">For more information, see [How to: Specify the Binding Source](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).</span></span>  
  
 <span data-ttu-id="6434d-407">XAML では、通常、<xref:System.Windows.FrameworkElement.DataContext%2A> は <xref:System.Windows.Data.Binding> 宣言として設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-407">In XAML, <xref:System.Windows.FrameworkElement.DataContext%2A> is most typically set as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="6434d-408">プロパティ要素の構文または属性構文を使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-408">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="6434d-409">属性の構文については、このページの例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-409">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="6434d-410">コードを使用して <xref:System.Windows.FrameworkElement.DataContext%2A>を設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-410">You can also use code to set <xref:System.Windows.FrameworkElement.DataContext%2A>.</span></span>  
  
 <span data-ttu-id="6434d-411"><xref:System.Windows.FrameworkElement.DataContext%2A> は、あるコンテキストが別のコンテキストにバインドされている可能性のあるシナリオを容易にするためのバインド可能なプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6434d-411"><xref:System.Windows.FrameworkElement.DataContext%2A> is a bindable property to facilitate scenarios where one context might be bound to another.</span></span> <span data-ttu-id="6434d-412">ただし、<xref:System.Windows.FrameworkElement.DataContext%2A>にバインドする場合は、循環バインディング参照を作成しないように注意してください (<xref:System.Windows.FrameworkElement.DataContext%2A> をそれ自体にバインドしないでください。 <xref:System.Windows.FrameworkElement.DataContext%2A> プロパティのプロパティ値の継承の特性によって実行できます)。</span><span class="sxs-lookup"><span data-stu-id="6434d-412">However, if you bind to <xref:System.Windows.FrameworkElement.DataContext%2A>, be careful to not create circular binding references (do not bind a <xref:System.Windows.FrameworkElement.DataContext%2A> to itself, which it is possible to do because of the property value inheritance nature of the <xref:System.Windows.FrameworkElement.DataContext%2A> property).</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-413">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-413">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-414">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-414">XAML Attribute Usage</span></span>  
  
```xaml  
<object DataContext="bindingUsage"/>  
```

<span data-ttu-id="6434d-415">または</span><span class="sxs-lookup"><span data-stu-id="6434d-415">-or-</span></span>

```xaml
<object DataContext="{resourceExtension contextResourceKey}"/>  
```
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-416">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-416">XAML Values</span></span>  
 <span data-ttu-id="6434d-417">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="6434d-417">*dataContextObject*</span></span>  
 <span data-ttu-id="6434d-418">親要素内の任意のバインドのデータコンテキストとして機能する直接埋め込まれたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6434d-418">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="6434d-419">通常、このオブジェクトは <xref:System.Windows.Data.Binding> または別の <xref:System.Windows.Data.BindingBase> 派生クラスです。</span><span class="sxs-lookup"><span data-stu-id="6434d-419">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class.</span></span> <span data-ttu-id="6434d-420">また、バインドを目的としたオブジェクトの種類の生データをここに配置し、実際のバインドを後で定義することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-420">Alternatively, raw data of any object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="6434d-421">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="6434d-421">*bindingUsage*</span></span>  
 <span data-ttu-id="6434d-422">適切なデータコンテキストに評価されるバインディングの使用。</span><span class="sxs-lookup"><span data-stu-id="6434d-422">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="6434d-423">詳細については、「[バインディングのマークアップ拡張機能](~/docs/framework/wpf/advanced/binding-markup-extension.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-423">For details, see [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md).</span></span>  
  
 <span data-ttu-id="6434d-424">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="6434d-424">*resourceExtension*</span></span>  
 <span data-ttu-id="6434d-425">[`StaticResource`](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)または[`DynamicResource`](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)のいずれかです。</span><span class="sxs-lookup"><span data-stu-id="6434d-425">One of the following: [`StaticResource`](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [`DynamicResource`](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span></span> <span data-ttu-id="6434d-426">この使用法は、リソース内のオブジェクトとして定義された生データを参照するときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-426">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="6434d-427">「 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-427">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="6434d-428">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="6434d-428">*contextResourceKey*</span></span>  
 <span data-ttu-id="6434d-429"><xref:System.Windows.ResourceDictionary>内から要求されているオブジェクトのキー識別子。</span><span class="sxs-lookup"><span data-stu-id="6434d-429">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-430">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-430">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-431">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-431">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|<span data-ttu-id="6434d-432">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-432">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-433">次の例では、データコンテキストがバインディングにどのように作用するかを示し、バインドされたプロパティの特定の値を定義する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-433">The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</span></span>  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-434">この要素のデータ コンテキストが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-434">Occurs when the data context for this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-435">データコンテキストとデータバインディングの詳細については、「[データバインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-435">For an explanation of data contexts and data binding, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6434d-436">要素の <xref:System.Windows.FrameworkElement.DataContext%2A> が変更されると、この要素のすべてのデータバインドプロパティが影響を受ける可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-436">When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="6434d-437">これは、データコンテキストを継承する論理ツリー内の現在の要素の子要素であるすべての要素と、現在の要素自体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-437">This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="6434d-438">このような既存のバインディングでは、新しい <xref:System.Windows.FrameworkElement.DataContext%2A> を再解釈し、バインドの結果を再評価する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-438">All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results.</span></span> <span data-ttu-id="6434d-439">データバインディングエンジンは、これらの再評価の順序を決定するものではなく、<xref:System.Windows.FrameworkElement.DataContextChanged> イベントの発生を基準としています。</span><span class="sxs-lookup"><span data-stu-id="6434d-439">The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <xref:System.Windows.FrameworkElement.DataContextChanged> event.</span></span> <span data-ttu-id="6434d-440">再評価は、イベントの前、イベントの後、または任意の組み合わせで行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-440">The reevaluations can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-441"><see cref="P:System.Windows.FrameworkElement.DataContext" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-441">Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-442">テーマ スタイルを使用または定義するときに、このコントロールのスタイルを参照するために使用されるキーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-442">Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</span></span></summary>
        <value><span data-ttu-id="6434d-443">スタイルのキー。</span><span class="sxs-lookup"><span data-stu-id="6434d-443">The style key.</span></span> <span data-ttu-id="6434d-444">テーマ スタイル参照の一部として正常に機能するために、この値は、スタイルを設定するコントロールの <see cref="T:System.Type" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-444">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-445">このプロパティは、通常、直接プロパティアクセサーのいずれかを使用して設定されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-445">This property is typically not set through any of its direct property accessors.</span></span> <span data-ttu-id="6434d-446">代わりに、新しい <xref:System.Windows.FrameworkElement> 派生クラスを作成するたびに、この依存関係プロパティの型固有のメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-446">Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="6434d-447">コントロールを派生させる場合は、コントロールの派生クラス (または同等のクラスの初期化) の静的コンストラクター内で、<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> 識別子に対して <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-447">When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).</span></span>  
  
 <span data-ttu-id="6434d-448">通常、コントロールは、このプロパティの既定値を独自の型にオーバーライドしますが、場合によっては、テーマディクショナリ内のスタイルが存在する基本型を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-448">A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</span></span> <span data-ttu-id="6434d-449">これは、基本コントロールのコントロールテンプレートでその派生コントロールのビジュアル表現が完全に定義されていて、派生型で公開されている追加のメンバーがコントロールテンプレートの一部として追加の要素を必要としない場合にのみ実用的です。</span><span class="sxs-lookup"><span data-stu-id="6434d-449">This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</span></span>  
  
 <span data-ttu-id="6434d-450">要素またはコントロールがテーマスタイルを意図的に使用しないようにするには、<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-450">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-451">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-451">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-452">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-452">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="6434d-453">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-453">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-454">次の例は、「解説」で説明されている依存関係プロパティメタデータオーバーライドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-454">The following example illustrates the dependency property metadata override usage discussed in Remarks.</span></span> <span data-ttu-id="6434d-455">このコードでは、専用のコントロールライブラリアセンブリから使用することを意図した `NumericUpDown` カスタムコントロールクラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-455">This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly.</span></span> <span data-ttu-id="6434d-456">図に示す静的コンストラクターは、いくつかのプライベート初期化関数を参照し、クラスハンドラーを登録します (もう1つの一般的なコントロールのサブクラス化に関する説明を参照してください。[ルーティングイベントを処理済みとしてマークし、クラスを処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)します)。最後に、`NumericUpDown` クラスの <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 依存関係プロパティのメタデータをオーバーライド</span><span class="sxs-lookup"><span data-stu-id="6434d-456">The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) and finally overrides the <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> dependency property metadata on the `NumericUpDown` class.</span></span> <span data-ttu-id="6434d-457"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> は常に、意図したキーとして独自の型を返します。これは、テーマスタイルシステムが、任意のスタイルではないコントロールのスタイルを検索するために使用する規則です。</span><span class="sxs-lookup"><span data-stu-id="6434d-457"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</span></span> <span data-ttu-id="6434d-458">完全なサンプルでは、そのキーによって参照される実際のコントロールのテーマスタイルも定義します。「 [NumericUpDown Custom Control With Theme AND UI Automation Support Sample」を](https://go.microsoft.com/fwlink/?LinkID=160025)参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-458">The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025).</span></span>  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown2.cs)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown2.vb)]  

  <span data-ttu-id="6434d-459">この例の完全なソースコードは、と[Visual Basic](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary)の両方[C#](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary)について GitHub で入手できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-459">The complete source code for this example is available on GitHub for both [C#](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) and [Visual Basic](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary).</span></span>

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160025"><span data-ttu-id="6434d-460">テーマと UI オートメーションサポートのサンプルを使用した NumericUpDown カスタムコントロール</span><span class="sxs-lookup"><span data-stu-id="6434d-460">NumericUpDown Custom Control with Theme and UI Automation Support Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-461"><see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-461">Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-462">この要素の初期化プロセスが完了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-462">Indicates that the initialization process for the element is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-463"><xref:System.Windows.FrameworkElement.BeginInit%2A> が以前に呼び出された場合、基本実装では <xref:System.Windows.FrameworkElement.Initialized> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-463">If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event.</span></span> <span data-ttu-id="6434d-464">それ以外の場合、<xref:System.Windows.FrameworkElement.BeginInit%2A> が呼び出されなかった場合、または <xref:System.Windows.FrameworkElement.BeginInit%2A> が呼び出されたかどうかを判断できなかった場合、<xref:System.Windows.FrameworkElement.Initialized> は発生せず、代わりに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-464">Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6434d-465">以前に <see cref="M:System.Windows.FrameworkElement.EndInit" /> が呼び出されていないこの要素で、<see cref="M:System.Windows.FrameworkElement.BeginInit" /> が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="6434d-465"><see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-466">要素の読み込みプロセス中に要素が初期化されるときに発生する特別な処理を提供するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-466">Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</span></span>  
  
 <span data-ttu-id="6434d-467">基本 (既定) の実装では初期化を追跡する内部フラグが設定されるため、実装では基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-467">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6434d-468">要求された要素の名前。</span><span class="sxs-lookup"><span data-stu-id="6434d-468">The name of the requested element.</span></span></param>
        <summary><span data-ttu-id="6434d-469">指定した識別名を持つ要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="6434d-469">Finds an element that has the provided identifier name.</span></span></summary>
        <returns><span data-ttu-id="6434d-470">要求された要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-470">The requested element.</span></span> <span data-ttu-id="6434d-471">一致する要素が見つからなかった場合は <see langword="null" /> になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-471">This can be <see langword="null" /> if no matching element was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-472">要素に子要素がある場合、これらの子要素は、要求された名前付き要素に対して再帰的に検索されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-472">If the element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
 <span data-ttu-id="6434d-473"><xref:System.Windows.FrameworkElement.FindName%2A> は、現在の要素の名前スコープ内で動作します。</span><span class="sxs-lookup"><span data-stu-id="6434d-473"><xref:System.Windows.FrameworkElement.FindName%2A> operates within the current element's namescope.</span></span> <span data-ttu-id="6434d-474">詳細については、「 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-474">For details, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="6434d-475">x:Name 属性</span><span class="sxs-lookup"><span data-stu-id="6434d-475">x:Name Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="6434d-476">要求したリソースのキー識別子。</span><span class="sxs-lookup"><span data-stu-id="6434d-476">The key identifier for the requested resource.</span></span></param>
        <summary><span data-ttu-id="6434d-477">指定したキーを持つリソースを検索します。要求したリソースが見つからない場合は例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-477">Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</span></span></summary>
        <returns><span data-ttu-id="6434d-478">要求されたリソース。</span><span class="sxs-lookup"><span data-stu-id="6434d-478">The requested resource.</span></span> <span data-ttu-id="6434d-479">指定したキーを持つリソースが見つからなかった場合は例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-479">If no resource with the provided key was found, an exception is thrown.</span></span> <span data-ttu-id="6434d-480">その場合は <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 値が返されることもあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-480">An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="6434d-481">見つからないキーに対してこのメソッドを呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-481">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="6434d-482"><xref:System.Windows.FrameworkElement.FindResource%2A>を呼び出した結果として発生する例外を処理しない場合は、代わりに <xref:System.Windows.FrameworkElement.TryFindResource%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-482">If you do not want to handle exceptions that result from calling <xref:System.Windows.FrameworkElement.FindResource%2A>, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead.</span></span> <span data-ttu-id="6434d-483"><xref:System.Windows.FrameworkElement.TryFindResource%2A> は、要求されたリソースが見つからない場合に `null` を返し、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="6434d-483"><xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="6434d-484">リソースが呼び出し元の要素で見つからない場合は、論理ツリー内の親要素が次に検索され、次にアプリケーション、テーマ、およびシステムリソースが検索されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-484">If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</span></span> <span data-ttu-id="6434d-485">このルックアップ方法は、マークアップで動的リソース参照によってリソースが要求された場合のツリーの検索方法と同じです。</span><span class="sxs-lookup"><span data-stu-id="6434d-485">This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</span></span> <span data-ttu-id="6434d-486">リソースルックアップの詳細については、「 [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-486">For more information about resource lookup, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="6434d-487">通常は、返されたリソース値を使用して設定したプロパティの型に <xref:System.Windows.FrameworkElement.FindResource%2A> 戻り値を直ちにキャストします。</span><span class="sxs-lookup"><span data-stu-id="6434d-487">Typically, you immediately cast a <xref:System.Windows.FrameworkElement.FindResource%2A> return value to the type of the property that you setting with the returned resource value.</span></span>  
  
 <span data-ttu-id="6434d-488">リソースキーは必ずしも文字列であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="6434d-488">Resource keys are not necessarily strings.</span></span> <span data-ttu-id="6434d-489">たとえば、テーマレベルでのコントロールのスタイルは、コントロールの <xref:System.Type> に意図的にキーを設定します。また、コントロールのアプリケーションまたはページスタイルは、通常、この同じキーの規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-489">For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention.</span></span> <span data-ttu-id="6434d-490">詳細については、「[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」または「 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-490">For details, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md) or [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-491">次の例では、名前付きリソースを取得し、それを適切な型にキャストしてプロパティに入力します。</span><span class="sxs-lookup"><span data-stu-id="6434d-491">The following example obtains a named resource and casts it to an appropriate type to fill a property.</span></span>  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="6434d-492"><paramref name="resourceKey" /> が見つからず、<see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> イベントのイベント ハンドラーが存在しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-492"><paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span>  
  
<span data-ttu-id="6434d-493">または</span><span class="sxs-lookup"><span data-stu-id="6434d-493">-or-</span></span> 
 <span data-ttu-id="6434d-494"><paramref name="resourceKey" /> が見つからず、<see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> イベントで <see langword="false" /> プロパティが <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-494"><paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6434d-495"><paramref name="resourceKey" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-495"><paramref name="resourceKey" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-496">レイアウトを制御する親要素内でのテキストやその他の [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 要素のフロー方向を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-496">Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</span></span></summary>
        <value><span data-ttu-id="6434d-497">テキストやその他の [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 要素の親要素内でのフロー方向を示す列挙値。</span><span class="sxs-lookup"><span data-stu-id="6434d-497">The direction that text and other [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements flow within their parent element, as a value of the enumeration.</span></span> <span data-ttu-id="6434d-498">既定値は <see cref="F:System.Windows.FlowDirection.LeftToRight" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-498">The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-499">依存関係プロパティの使用法によって、この要素の <xref:System.Windows.FrameworkElement.FlowDirection%2A> が設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-499">The dependency property usage sets the <xref:System.Windows.FrameworkElement.FlowDirection%2A> on this element.</span></span> <span data-ttu-id="6434d-500">プロパティ値の継承により、要素に <xref:System.Windows.FrameworkElement.FlowDirection%2A> を設定すると、ローカルに <xref:System.Windows.FrameworkElement.FlowDirection%2A> 設定されていないすべての子要素、またはスタイルなどの他の手段で <xref:System.Windows.FrameworkElement.FlowDirection%2A> が設定される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-500">Because of property value inheritance, setting <xref:System.Windows.FrameworkElement.FlowDirection%2A> on an element can potentially set <xref:System.Windows.FrameworkElement.FlowDirection%2A> on all child elements that did not set <xref:System.Windows.FrameworkElement.FlowDirection%2A> locally or though other means such as styles.</span></span>  
  
 <span data-ttu-id="6434d-501">このプロパティは、アプリケーションのカルチャ情報の一部として自動的に設定されるわけではありません。要素には、必ずしもカルチャ情報によって暗黙的に指定される一般的なフロー方向に従うことを意図していないコンテンツが含まれる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-501">This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</span></span> <span data-ttu-id="6434d-502">グローバリゼーションの考慮事項の詳細については、「 [WPF のグローバリゼーション](~/docs/framework/wpf/advanced/globalization-for-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-502">For more information on globalization considerations, see [Globalization for WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).</span></span>  
  
 <span data-ttu-id="6434d-503">このプロパティには [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] プロパティアクセサーが定義されているため、依存関係プロパティとして機能します。</span><span class="sxs-lookup"><span data-stu-id="6434d-503">This property has a defined [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property.</span></span> <span data-ttu-id="6434d-504">ただし、添付ファイルとして登録されているので、添付プロパティとしても機能することができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-504">However, it is also registered as attached, so it can also function as an attached property.</span></span> <span data-ttu-id="6434d-505">アタッチされた登録は、主にプロパティ値の継承がサポートされるようにするために使用されますが、プロパティを添付プロパティとして使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-505">The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</span></span> <span data-ttu-id="6434d-506">添付プロパティの使用は、フローの方向を設定する対象のオブジェクトが、レイアウトを実行する <xref:System.Windows.FrameworkElement> 親要素を持ち、それ自体が <xref:System.Windows.FrameworkElement>ではなく、`FlowDirection` プロパティが直接定義されていない場合にのみ関連します。</span><span class="sxs-lookup"><span data-stu-id="6434d-506">The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property.</span></span> <span data-ttu-id="6434d-507">(<xref:System.Windows.Documents.Block> や <xref:System.Windows.Documents.Inline> などのフロードキュメントクラスの中には、独自の `FlowDirection`を定義するものもあれば、フローの方向を設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-507">(Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction.</span></span> <span data-ttu-id="6434d-508">プロパティ値は、添付プロパティの使用を必要とせずに最終的なコンテンツホストによって読み取られます)。</span><span class="sxs-lookup"><span data-stu-id="6434d-508">The property value is then read by the eventual content host without requiring attached property usage.)</span></span>  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-509">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-509">XAML Attribute Usage</span></span>  
 <span data-ttu-id="6434d-510">\<*オブジェクト* **system.windows.flowdirection>**= "<xref:System.Windows.FlowDirection>"/></span><span class="sxs-lookup"><span data-stu-id="6434d-510">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span></span>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="6434d-511">XAML テキストの使用</span><span class="sxs-lookup"><span data-stu-id="6434d-511">XAML Text Usage</span></span>  
 <span data-ttu-id="6434d-512">このプロパティは、次の [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 添付プロパティを使用して、派生クラス <xref:System.Windows.FrameworkElement> ないクラスで設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-512">This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attached property usage:</span></span>  
  
 <span data-ttu-id="6434d-513">`<`*オブジェクト*`FrameworkElement.`**system.windows.flowdirection>**= "<xref:System.Windows.FlowDirection>`"/>`</span><span class="sxs-lookup"><span data-stu-id="6434d-513">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span></span>  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-514">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-514">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-515">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-515">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|<span data-ttu-id="6434d-516">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-516">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-517"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span><span class="sxs-lookup"><span data-stu-id="6434d-517"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span></span>|  
  
 <span data-ttu-id="6434d-518">このプロパティは、依存関係プロパティと添付プロパティの両方です。「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-518">This property is both a dependency property and an attached property; see Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-519"><see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-519">Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-520">この要素がキーボード フォーカスを受け取ったときに適用される外観、効果、またはその他のスタイル特性のカスタマイズを可能にするプロパティを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-520">Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span></span></summary>
        <value><span data-ttu-id="6434d-521">フォーカスに適用する目的のスタイル。</span><span class="sxs-lookup"><span data-stu-id="6434d-521">The desired style to apply on focus.</span></span> <span data-ttu-id="6434d-522">依存関係プロパティで宣言されている既定値は、空の静的 <see cref="T:System.Windows.Style" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-522">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span></span> <span data-ttu-id="6434d-523">ただし、実行時の有効値は、多くの場合、コントロールのテーマ サポートによって提供されたスタイルです (ただし、常にそうであるとは限りません)。</span><span class="sxs-lookup"><span data-stu-id="6434d-523">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-524">このプロパティはビジュアルの外観に影響しますが、メタデータ内の <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> を報告しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-524">This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata.</span></span> <span data-ttu-id="6434d-525">これは、視覚的な外観の変更はイベントドリブンであり、常に適用されない可能性があるため、通常はビジュアルやレイアウト情報をメタデータに報告しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6434d-525">This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="6434d-526">概念的には、コントロールに適用されるフォーカスの視覚的な動作は、コントロールからコントロールまで一貫している必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-526">Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</span></span> <span data-ttu-id="6434d-527">一貫性を適用する最も合理的な方法は、テーマ全体を作成する場合にのみフォーカスの視覚スタイルを変更することです。</span><span class="sxs-lookup"><span data-stu-id="6434d-527">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="6434d-528">このプロパティをテーマの一部としてではなく、個々のコントロールスタイルで設定することは、このプロパティを使用するためのものではありません。これは、キーボードフォーカスに関してユーザーエクスペリエンスが混乱する可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-528">Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="6434d-529">テーマ全体で一貫していないコントロール固有の動作を行う場合は、<xref:System.Windows.UIElement.IsFocused%2A> や <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>など、個々の入力状態プロパティのスタイルでトリガーを使用し、既存のフォーカスの視覚スタイルを視覚的に干渉しないようにする方法があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-529">If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="6434d-530"><xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> と代替のフォーカスプロパティの設計目的の詳細については、「[コントロールのフォーカスのスタイル設定」および FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-530">For more information on the design intention of <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-531">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-531">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-532">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-532">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-533">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-533">XAML Values</span></span>  
 <span data-ttu-id="6434d-534">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="6434d-534">*resourceExtension*</span></span>  
 <span data-ttu-id="6434d-535">次のいずれか:、または。</span><span class="sxs-lookup"><span data-stu-id="6434d-535">One of the following: , or .</span></span> <span data-ttu-id="6434d-536">「 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-536">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="6434d-537">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="6434d-537">*styleResourceKey*</span></span>  
 <span data-ttu-id="6434d-538">要求されているスタイルを識別するキー。</span><span class="sxs-lookup"><span data-stu-id="6434d-538">The key that identifies the style being requested.</span></span> <span data-ttu-id="6434d-539">キーは、<xref:System.Windows.ResourceDictionary>内の既存のリソースを参照します。</span><span class="sxs-lookup"><span data-stu-id="6434d-539">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6434d-540">Property 要素の構文は技術的には可能ですが、推奨されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-540">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="6434d-541">「[インラインスタイルとテンプレート」を](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-541">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="6434d-542">[TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md)または <xref:System.Windows.Data.Binding> を使用したバインディング参照も可能ですが、一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-542">A binding reference using [TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-543">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-544">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-544">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="6434d-545">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-546">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-546">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-547"><see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-547">Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-548">この <see cref="T:System.Windows.FrameworkElement" /> でカーソルを [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] プロパティの宣言に従って描画するように<see cref="P:System.Windows.FrameworkElement.Cursor" /> を強制するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-548">Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</span></span></summary>
        <value><span data-ttu-id="6434d-549">この要素の上にあるときのカーソルの表示に <see langword="true" /> の現在の設定を強制的に使用する場合は <see cref="P:System.Windows.FrameworkElement.Cursor" /> (すべての子要素を含む)。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-549"><see langword="true" /> if cursor presentation while over this element is forced to use current <see cref="P:System.Windows.FrameworkElement.Cursor" /> settings for the cursor (including on all child elements); otherwise <see langword="false" />.</span></span> <span data-ttu-id="6434d-550">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-550">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-551">このプロパティを `true` に設定すると、子要素によって設定されたカーソル設定がオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-551">If you set this property to `true` you will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="6434d-552">一般に、アプリケーションの一般的な [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] では、子要素がカーソルを指定しようとしている場合に、ユーザーにとって混乱を招く可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-552">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="6434d-553"><xref:System.Windows.FrameworkElement.ForceCursor%2A> の設定は、コントロールのサブクラス化や複合のシナリオに適しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-553">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-554">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-555">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-555">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|<span data-ttu-id="6434d-556">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-556">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-557">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-557">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-558">次の例では、カーソル値を強制的に指定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-558">The following example forces the cursor value.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-559"><see cref="P:System.Windows.FrameworkElement.ForceCursor" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-559">Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6434d-560">バインディングを取得するターゲット <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-560">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</span></span></param>
        <summary><span data-ttu-id="6434d-561">指定したプロパティでのバインディングを表す <see cref="T:System.Windows.Data.BindingExpression" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-561">Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</span></span></summary>
        <returns><span data-ttu-id="6434d-562">ターゲット プロパティにアクティブなバインディングが設定されている場合は <see cref="T:System.Windows.Data.BindingExpression" />。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-562">A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-563">`null` の戻り値をチェックする手法は、プロパティにアクティブなバインディングがあるかどうかを判断するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-563">Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.</span></span>  
  
 <span data-ttu-id="6434d-564">このメソッドは、実際には <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> メソッドをラップする単なるラッパーです。</span><span class="sxs-lookup"><span data-stu-id="6434d-564">This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6434d-565"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> は、現在のインスタンスと `dp` パラメーターを <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>に渡します。</span><span class="sxs-lookup"><span data-stu-id="6434d-565"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="6434d-566"><see cref="P:System.Windows.FrameworkElement.FlowDirection" /> を返す要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-566">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</span></span></param>
        <summary><span data-ttu-id="6434d-567">指定した <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> の <see cref="T:System.Windows.DependencyObject" /> 添付プロパティの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-567">Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="6434d-568">列挙体の値としての要求されたフローの方向。</span><span class="sxs-lookup"><span data-stu-id="6434d-568">The requested flow direction, as a value of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-569">このメソッドの主な目的は、<xref:System.Windows.FrameworkElement.FlowDirection%2A> プロパティの添付プロパティの構文をサポートすることです。したがって、指定された <xref:System.Windows.FrameworkElement> の子要素は、親要素内の配置のフロー方向を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-569">The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="6434d-570">現在の <xref:System.Windows.FrameworkElement>の値を取得するには、直接 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] アクセサー <xref:System.Windows.FrameworkElement.FlowDirection%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-570">To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="6434d-571">ビジュアル プレゼンテーションを行う要素の部分のサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-571">The size of the part of the element that does visual presentation.</span></span></param>
        <summary><span data-ttu-id="6434d-572">クリッピング マスクのジオメトリを返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-572">Returns a geometry for a clipping mask.</span></span> <span data-ttu-id="6434d-573">クリッピング マスクは、利用可能な表示領域より大きな要素をレイアウト システムが配置しようとすると適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-573">The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</span></span></summary>
        <returns><span data-ttu-id="6434d-574">クリッピング ジオメトリ。</span><span class="sxs-lookup"><span data-stu-id="6434d-574">The clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-575">レイアウトシステムの動作の一部として、`layoutSlotSize` から余白が減算されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-575">Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.</span></span>  
  
 <span data-ttu-id="6434d-576">Null 参照が返された場合は、クリッピングが発生しないことを示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-576">A returned null reference indicates that no clipping will occur.</span></span> <span data-ttu-id="6434d-577"><xref:System.Windows.UIElement.ClipToBounds%2A> が `false`場合、既定の実装は常に `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-577">The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span> <span data-ttu-id="6434d-578">このメソッドは、<xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-578">This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6434d-579"><xref:System.Windows.FrameworkElement> の実装では、計算で <xref:System.Windows.FrameworkElement.MaxHeight%2A> と <xref:System.Windows.FrameworkElement.MaxWidth%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-579">The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations.</span></span> <span data-ttu-id="6434d-580"><xref:System.Windows.FrameworkElement> のいくつかのサブクラスは、このメソッドを再度オーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-580">Several subclasses of <xref:System.Windows.FrameworkElement> override this method again.</span></span> <span data-ttu-id="6434d-581"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>は、装飾が通常の境界の外側にあることが多いため、常にをオーバーライドして `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-581"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds.</span></span> <span data-ttu-id="6434d-582"><xref:System.Windows.UIElement.ClipToBounds%2A> が `false`の場合、<xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> と <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> は `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-582"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-583"><see cref="P:System.Windows.UIElement.ClipToBounds" /> が <see langword="false" />場合、既定の実装は常に <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-583">The default implementation always returns <see langword="null" /> when <see cref="P:System.Windows.UIElement.ClipToBounds" /> is <see langword="false" />.</span></span> <span data-ttu-id="6434d-584">通常、オーバーライドは、基本クラスとは対照的に、派生クラスとそのレイアウトロジックの関係と目的に応じて、この動作を維持することが求められます。</span><span class="sxs-lookup"><span data-stu-id="6434d-584">Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName"><span data-ttu-id="6434d-585">検索する子の名前。</span><span class="sxs-lookup"><span data-stu-id="6434d-585">Name of the child to find.</span></span></param>
        <summary><span data-ttu-id="6434d-586">インスタンス化された <see cref="T:System.Windows.Controls.ControlTemplate" /> のビジュアル ツリー内にある名前付き要素を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-586">Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</span></span></summary>
        <returns><span data-ttu-id="6434d-587">要求された要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-587">The requested element.</span></span> <span data-ttu-id="6434d-588">要求した名前の要素が存在しない場合は <see langword="null" /> になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-588">May be <see langword="null" /> if no element of the requested name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-589">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] のテンプレートには、自己完結型の名前スコープがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-589">Templates in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope.</span></span> <span data-ttu-id="6434d-590">これは、テンプレートが再使用されるためです。また、1つのコントロールの複数のインスタンスがテンプレートをインスタンス化している場合、テンプレートで定義されているすべての名前は一意のままにできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-590">This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</span></span> <span data-ttu-id="6434d-591"><xref:System.Windows.FrameworkElement.GetTemplateChild%2A> メソッドを呼び出して、インスタンス化された後にテンプレートから取得したオブジェクトへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-591">Call the <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> method to return references to objects that come from the template after it is instantiated.</span></span> <span data-ttu-id="6434d-592"><xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> メソッドを使用してテンプレートから項目を検索することはできません。これは <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> がより一般的なスコープで動作し、適用後に <xref:System.Windows.Controls.ControlTemplate> クラス自体とインスタンス化されたテンプレートの間に接続がないためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-592">You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.</span></span>  
  
 <span data-ttu-id="6434d-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> は、このメソッドと同じ機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> supplies the same function as this method.</span></span> <span data-ttu-id="6434d-594"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> は保護されるのではなくパブリックです。また、要素内のテンプレートにアクセスしてその中の名前付き項目を検索できるようにする正しい名前スコープの考慮事項を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-594"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</span></span> <span data-ttu-id="6434d-595">親コントロールの外部にある要素を取得する必要がある場合は、<xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-595">Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> when you need to get an element outside of its parent control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-596">ビジュアル親が存在しない場合に、この要素に対する代替の論理上の親を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-596">Returns an alternative logical parent for this element if there is no visual parent.</span></span></summary>
        <returns><span data-ttu-id="6434d-597">このメソッドの WPF フレームワーク レベルの実装が非ビジュアルの親接続を持つ場合は <see langword="null" /> 以外の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-597">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-598">このメソッドは、<xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-598">This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6434d-599">既定の <xref:System.Windows.FrameworkElement> 実装では、想定される1つのビジュアル親が返されます。これは、<xref:System.Windows.FrameworkElement.Parent%2A> 値を取得する場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-599">The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value.</span></span> <span data-ttu-id="6434d-600">派生クラスの実装は、代替の親リレーションシップを返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-600">Derived class implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="6434d-601">コレクション内の要求された子要素の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="6434d-601">The zero-based index of the requested child element in the collection.</span></span></param>
        <summary><span data-ttu-id="6434d-602"><see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /> をオーバーライドし、子要素のコレクションから指定したインデックス位置の子を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-602">Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</span></span></summary>
        <returns><span data-ttu-id="6434d-603">要求された子要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-603">The requested child element.</span></span> <span data-ttu-id="6434d-604">これは <see langword="null" /> を返しません。指定されたインデックスが範囲外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-604">This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-605"><xref:System.Windows.FrameworkElement> の実装では、有効なインデックスは0だけです。</span><span class="sxs-lookup"><span data-stu-id="6434d-605">In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero.</span></span> <span data-ttu-id="6434d-606"><xref:System.Windows.FrameworkElement.GetVisualChild%2A> のコンテンツモデルでは、コレクションではなく、0個または1個の子要素がサポートされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-606">The content model for <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supports either zero or one child elements, not a collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-607">次の例では、カスタム装飾が、複数のビジュアルな子のために保持する <xref:System.Windows.Media.VisualCollection> によって宣言された値を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-607">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children.</span></span> <span data-ttu-id="6434d-608">これらの値は、<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> と <xref:System.Windows.FrameworkElement.GetVisualChild%2A>の上書きによって報告されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-608">These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-609">この実装は、視覚的な子要素のわかりやすいコレクションを保持しない要素に対してのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6434d-609">This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</span></span> <span data-ttu-id="6434d-610">このようなコレクションを持つ要素は、このメソッドをオーバーライドし、その要素でサポートされている子要素コレクション内の等価のインデックスにインデックスをマップする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-610">Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</span></span> <span data-ttu-id="6434d-611">0から <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (-1) までの範囲のインデックスは、有効な要素を返す必要があります。その他のインデックスは、範囲外の例外をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-611">An index in the range from zero to <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (minus one) should return a valid element; any other index should throw an out-of-range exception.</span></span> <span data-ttu-id="6434d-612">子コレクションをサポートし、<see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> をオーバーライドして複数の子要素を返すことができる要素型の例は <see cref="T:System.Windows.Controls.Panel" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-612">An example of an element type that does support a child collection and overrides <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> to return more than one possible child is <see cref="T:System.Windows.Controls.Panel" />.</span></span>  
  
<span data-ttu-id="6434d-613"><see cref="T:System.Windows.FrameworkElement" /> の既定の実装では、ビジュアル子は1つだけであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6434d-613">The default implementation in <see cref="T:System.Windows.FrameworkElement" /> presumes only one visual child.</span></span> <span data-ttu-id="6434d-614">0以外の <paramref name="index" /> に渡された値を指定すると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-614">Any value passed for <paramref name="index" /> other than zero causes an exception to be thrown.</span></span> <span data-ttu-id="6434d-615">デコレーター、装飾、特化されたレンダリングを持つ要素など、いくつかの一般的な要素は、<see cref="T:System.Windows.FrameworkElement" /> 実装 (中間基本クラスからの実装) をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-615">Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <see cref="T:System.Windows.FrameworkElement" /> implementation (of the implementation from intermediate base classes).</span></span> <span data-ttu-id="6434d-616">一部の実装では、1つのビジュアル子を強制的に適用し、他の実装ではコレクションを許可します。</span><span class="sxs-lookup"><span data-stu-id="6434d-616">Some implementations still enforce one visual child whereas others allow a collection.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-617">要素の推奨される高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-617">Gets or sets the suggested height of the element.</span></span></summary>
        <value><span data-ttu-id="6434d-618">要素の高さ ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 単位)。</span><span class="sxs-lookup"><span data-stu-id="6434d-618">The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-619">既定値は <see cref="F:System.Double.NaN" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-619">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="6434d-620">この値は 0.0 以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-620">This value must be equal to or greater than 0.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-621"><xref:System.Windows.FrameworkElement.Height%2A> は、高さ情報を指定する <xref:System.Windows.FrameworkElement> の書き込み可能な3つのプロパティの1つです。</span><span class="sxs-lookup"><span data-stu-id="6434d-621"><xref:System.Windows.FrameworkElement.Height%2A> is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="6434d-622">もう1つは <xref:System.Windows.FrameworkElement.MinHeight%2A> と <xref:System.Windows.FrameworkElement.MaxHeight%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6434d-622">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="6434d-623">これらの値の間に競合がある場合、実際の高さを決定するためのアプリケーションの順序は、最初の <xref:System.Windows.FrameworkElement.MinHeight%2A> が受け入れられ、<xref:System.Windows.FrameworkElement.MaxHeight%2A>される必要があります。また、範囲内にある場合は <xref:System.Windows.FrameworkElement.Height%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-623">If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="6434d-624">この要素が他の要素内の子要素である場合、このプロパティを値に設定することは、実際には推奨値にすぎません。</span><span class="sxs-lookup"><span data-stu-id="6434d-624">If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</span></span> <span data-ttu-id="6434d-625">レイアウトシステムおよび親要素の特定のレイアウトロジックでは、レイアウト処理中に値が非バインド入力として使用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-625">The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</span></span> <span data-ttu-id="6434d-626">実際には、<xref:System.Windows.FrameworkElement> はほぼ常に他の要素の子要素です。<xref:System.Windows.Window>に <xref:System.Windows.FrameworkElement.Height%2A> を設定した場合でも同様です。</span><span class="sxs-lookup"><span data-stu-id="6434d-626">In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the <xref:System.Windows.FrameworkElement.Height%2A> on <xref:System.Windows.Window>.</span></span> <span data-ttu-id="6434d-627">(<xref:System.Windows.Window>の場合、その値は、基になるアプリケーションモデルで、アプリケーションをホストする Hwnd を作成する基本的なレンダリング仮定を確立するときに使用されます)。</span><span class="sxs-lookup"><span data-stu-id="6434d-627">(For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</span></span>  
  
 <span data-ttu-id="6434d-628">許容される <xref:System.Double> 値に加えて、このプロパティを <xref:System.Double.NaN?displayProperty=nameWithType>することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-628">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6434d-629">これは、コードで自動サイズ変更動作を指定する方法です。</span><span class="sxs-lookup"><span data-stu-id="6434d-629">This is how you specify auto sizing behavior in code.</span></span> <span data-ttu-id="6434d-630">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] では、値を文字列 "Auto" (大文字と小文字を区別しない) に設定して、自動サイズ変更動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6434d-630">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="6434d-631">自動サイズ変更動作は、要素が使用可能な高さを塗りつぶすことを意味します。</span><span class="sxs-lookup"><span data-stu-id="6434d-631">Auto sizing behavior implies that the element will fill the height available to it.</span></span> <span data-ttu-id="6434d-632">ただし、特定のコントロールでは、既定のテーマスタイルによって既定値が提供されることがよくあります。これは、明示的に有効にしない限り、自動サイズ変更動作を無効にします。</span><span class="sxs-lookup"><span data-stu-id="6434d-632">Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="6434d-633">このプロパティの戻り値は、その値に設定されている値と常に同じです。</span><span class="sxs-lookup"><span data-stu-id="6434d-633">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="6434d-634">これに対し、<xref:System.Windows.FrameworkElement.ActualHeight%2A> の値は異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-634">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary.</span></span> <span data-ttu-id="6434d-635">これは、何らかの理由で提案されたサイズがレイアウトによって拒否されたため、または瞬間的に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-635">This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</span></span> <span data-ttu-id="6434d-636">レイアウトシステム自体は、プロパティシステムの <xref:System.Windows.FrameworkElement.Height%2A> のセットに対して非同期的に動作し、特定のサイズ変更プロパティの変更がまだ処理されていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-636">The layout system itself works asynchronously relative to the property system's set of <xref:System.Windows.FrameworkElement.Height%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="6434d-637"><xref:System.Double> 値の値の制限は、<xref:System.Windows.ValidateValueCallback> メカニズムによって適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-637">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="6434d-638">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-638">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
 <span data-ttu-id="6434d-639">検証チェックに加えて、レイアウトシステムによって適用される <xref:System.Windows.FrameworkElement.Height%2A> に対して非決定的な上限が設定されています (これは、<xref:System.Single.MaxValue?displayProperty=nameWithType> よりも大きいが <xref:System.Double.MaxValue?displayProperty=nameWithType>よりも小さい非常に大きい数値です)。</span><span class="sxs-lookup"><span data-stu-id="6434d-639">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Height%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="6434d-640">この制約を超えた場合、要素はレンダリングされず、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6434d-640">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="6434d-641">ビジュアル表示の最大サイズよりも大幅に大きい値に <xref:System.Windows.FrameworkElement.Height%2A> を設定しないか、またはこの非決定的な上限を超えることができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-641">Do not set <xref:System.Windows.FrameworkElement.Height%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-642">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-642">XAML Attribute Usage</span></span>  
  
```xaml
<object Height="double"/>  
```

<span data-ttu-id="6434d-643">または</span><span class="sxs-lookup"><span data-stu-id="6434d-643">-or-</span></span>

```xaml
<object Height="qualifiedDouble"/>  
```

<span data-ttu-id="6434d-644">または</span><span class="sxs-lookup"><span data-stu-id="6434d-644">-or-</span></span>

```xaml
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-645">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-645">XAML Values</span></span>  
 <span data-ttu-id="6434d-646">*double*</span><span class="sxs-lookup"><span data-stu-id="6434d-646">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="6434d-647">0.0 以上の <xref:System.Double> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="6434d-647">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-648">上限については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-648">See Remarks for upper bound information.</span></span> <span data-ttu-id="6434d-649">この値は、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] の測定値として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-649">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="6434d-650">文字列には、小数点を明示的に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-650">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="6434d-651">たとえば、`1` の値は許容されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-651">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="6434d-652">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="6434d-652">*qualifiedDouble*</span></span>  
 <span data-ttu-id="6434d-653">前に説明した*double*値。その後に、`px`、`in`、`cm`、`pt`のいずれかの単位宣言文字列が続きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-653">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="6434d-654">`px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="6434d-654">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="6434d-655">`in` はインチ。1in==96px</span><span class="sxs-lookup"><span data-stu-id="6434d-655">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="6434d-656">`cm` はセンチメートルです。1cm = = (96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="6434d-656">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="6434d-657">`pt` はポイント。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="6434d-657">`pt` is points; 1pt==(96/72) px</span></span>  
  
 <span data-ttu-id="6434d-658">**Auto**</span><span class="sxs-lookup"><span data-stu-id="6434d-658">**Auto**</span></span>  
 <span data-ttu-id="6434d-659">自動サイズ調整の動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6434d-659">Enables autosizing behavior.</span></span> <span data-ttu-id="6434d-660">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-660">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-661">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-661">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-662">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-662">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|<span data-ttu-id="6434d-663">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-663">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-664"><see cref="P:System.Windows.FrameworkElement.Height" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-664">Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-665">この要素が、Panel またはアイテム コントロールのような親要素内に構成されるときに適用される水平方向の配置特性を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-665">Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="6434d-666">列挙体の値としての水平方向の配置設定。</span><span class="sxs-lookup"><span data-stu-id="6434d-666">A horizontal alignment setting, as a value of the enumeration.</span></span> <span data-ttu-id="6434d-667">既定では、 <see cref="F:System.Windows.HorizontalAlignment.Stretch" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-667">The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-668">要素に対して <xref:System.Windows.FrameworkElement.Height%2A> および <xref:System.Windows.FrameworkElement.Width%2A> のプロパティが明示的に設定されている場合、これらの測定値はレイアウト中の方が高くなり、<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> を <xref:System.Windows.HorizontalAlignment.Stretch>に設定した場合の一般的な効果はキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-668">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> to <xref:System.Windows.HorizontalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="6434d-669"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> は、実際の依存関係プロパティに対する [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] プロパティアクセサーです。</span><span class="sxs-lookup"><span data-stu-id="6434d-669"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="6434d-670">この特定の依存関係プロパティでは、サブクラス要素 (特にコントロール) では、明らかに "既定" 値が異なることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-670">This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</span></span> <span data-ttu-id="6434d-671">これは通常、次の2つの方法のいずれかで発生します。依存関係プロパティは特定のサブクラスに再登録されますが、既定値を設定するために異なるメタデータを使用します。または、適用される既定のスタイルによって、その依存関係プロパティの値が異なるように設定されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-671">This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="6434d-672">たとえば、<xref:System.Windows.Controls.Label> コントロールの <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> の明らかな "既定" は、<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> から <xref:System.Windows.FrameworkElement>直接継承され <xref:System.Windows.Controls.Label> ている場合でも <xref:System.Windows.HorizontalAlignment.Left>されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-672">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment.Left>, even though <xref:System.Windows.Controls.Label> inherits <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="6434d-673">これは、スタイルのコントロールテンプレート内で、<xref:System.Windows.Controls.Label>の既定のスタイルで値がリセットされたためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-673">This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.</span></span>  
  
 <span data-ttu-id="6434d-674"><xref:System.Windows.Controls.Canvas> は、レイアウトの作成時に <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> を使用しません。 <xref:System.Windows.Controls.Canvas> は絶対配置に基づいているためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-674"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="6434d-675"><xref:System.Windows.Controls.Label> または派生クラスによって継承される場合、<xref:System.Windows.Controls.Label> この依存関係プロパティの既定値を <xref:System.Windows.HorizontalAlignment.Left>するように再定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-675">When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment.Left>.</span></span>  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-676">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-676">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-677">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-677">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|<span data-ttu-id="6434d-678">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-678">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-679"><see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-679">Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-680">プロパティ値の継承、リソース キーのルックアップ、および RelativeSource FindAncestor 検索のスコープの制限を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-680">Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</span></span></summary>
        <value><span data-ttu-id="6434d-681">列挙体の値。</span><span class="sxs-lookup"><span data-stu-id="6434d-681">A value of the enumeration.</span></span> <span data-ttu-id="6434d-682">既定では、 <see cref="F:System.Windows.InheritanceBehavior.Default" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-682">The default is <see cref="F:System.Windows.InheritanceBehavior.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-683">要素ツリーセット内の特定の境界は、継承動作のスコープを意図的に制限したり、リソースの参照を強制してアプリケーションのリソースをチェックしたり、RelativeSource FindAncestor の参照が現在の要素またはその他の要素に対してクエリを実行したりしないように <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> します。</span><span class="sxs-lookup"><span data-stu-id="6434d-683">Certain boundaries in the element tree set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</span></span> <span data-ttu-id="6434d-684">RelativeSource FindAncestor 参照は、<xref:System.Windows.Data.RelativeSource.Mode%2A> プロパティが <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> 値に設定されている <xref:System.Windows.Data.RelativeSource> をバインドが使用する場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-684">RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> value.</span></span>  
  
 <span data-ttu-id="6434d-685">派生クラスでこのプロパティを設定する場合は、静的コンストラクターまたは他の初期化ルーチン内で実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-685">If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-686">この <see cref="T:System.Windows.FrameworkElement" /> が初期化されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-686">Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized.</span></span> <span data-ttu-id="6434d-687">このイベントと同時に、<see cref="P:System.Windows.FrameworkElement.IsInitialized" /> プロパティの値が <see langword="false" /> (未定義) から <see langword="true" /> に変更されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-687">This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-688">このイベントは、<xref:System.Windows.FrameworkElement.EndInit%2A> または <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> メソッドが呼び出されるたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-688">This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called.</span></span> <span data-ttu-id="6434d-689">どちらのメソッドの呼び出しも、アプリケーションコードから、または [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ページが処理されるときの [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] プロセッサ動作を通じて発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-689">Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] page is processed.</span></span>  
  
 <span data-ttu-id="6434d-690"><xref:System.Windows.FrameworkElement.Loaded> と <xref:System.Windows.FrameworkElement.Initialized> のどちらを処理するかは、要件によって異なります。</span><span class="sxs-lookup"><span data-stu-id="6434d-690">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="6434d-691">要素のプロパティを読み取り、プロパティをリセットする必要がなく、レイアウト情報を必要としない場合は、<xref:System.Windows.FrameworkElement.Initialized> の動作に適したイベントである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-691">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="6434d-692">要素のすべてのプロパティを使用できるようにする必要があり、レイアウトをリセットする可能性のあるプロパティを設定する場合は、<xref:System.Windows.FrameworkElement.Loaded> 動作する方が適切なイベントである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-692">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="6434d-693">新しいレイアウトパスが必要であることを示すために、ハンドラーがレイアウトシステムによって解釈されるプロパティをリセットする場合は、再入に注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-693">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="6434d-694">(変更された場合、新しいレイアウトパスを必要とするプロパティがわからない場合は、プロパティの <xref:System.Windows.FrameworkPropertyMetadata> 値を確認する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="6434d-694">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="6434d-695"><xref:System.Windows.FrameworkElement>のオブジェクトイベントのシーケンス、および関連するいくつかのアプリケーションおよび要素クラスの詳細については、「[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-695">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-696">この <see cref="T:System.Windows.FrameworkElement" /> で使用される入力のコンテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-696">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <value><span data-ttu-id="6434d-697">代替の入力メソッドからの入力を解釈する方法を変更する入力スコープ。</span><span class="sxs-lookup"><span data-stu-id="6434d-697">The input scope, which modifies how input from alternative input methods is interpreted.</span></span> <span data-ttu-id="6434d-698">既定値は <see langword="null" /> です (コマンドの既定の処理が行われます)。</span><span class="sxs-lookup"><span data-stu-id="6434d-698">The default value is <see langword="null" /> (which results in a default handling of commands).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-699">この依存関係プロパティは、プロパティ値を継承します。</span><span class="sxs-lookup"><span data-stu-id="6434d-699">This dependency property inherits property values.</span></span> <span data-ttu-id="6434d-700">ローカル値またはスタイルによって確立された <xref:System.Windows.FrameworkElement.InputScope%2A> の他の値を持たない子要素がある場合、プロパティシステムは、この値が割り当てられている最も近い祖先要素の <xref:System.Windows.FrameworkElement.InputScope%2A> 値になるように値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-700">If there are child elements without other values for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 <span data-ttu-id="6434d-701">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文の使用法が示されていますが、構文的に許可されていますが、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] でこのプロパティを設定するのは一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-701">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-702">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-702">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-703">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-703">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|<span data-ttu-id="6434d-704">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-704">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-705"><see cref="P:System.Windows.FrameworkElement.InputScope" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-705">Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-706">この要素が、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサによって処理されている間、またはこの要素の <see cref="M:System.Windows.FrameworkElement.EndInit" /> メソッドが明示的に呼び出されたときに初期化されたかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-706">Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</span></span></summary>
        <value><span data-ttu-id="6434d-707">前述の <see langword="true" /> 処理やメソッド呼び出しごとに要素が初期化された場合は [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-707"><see langword="true" /> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-708">このプロパティは、この要素が新しい親要素を持つように論理ツリー内で移動された場合にも `true` ことがあります。そのため再読み込みが再び行われます。</span><span class="sxs-lookup"><span data-stu-id="6434d-708">This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 <span data-ttu-id="6434d-709">このプロパティは、<xref:System.Windows.FrameworkElement.BeginInit%2A> と <xref:System.Windows.FrameworkElement.EndInit%2A>を使用している場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="6434d-709">This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>.</span></span> <span data-ttu-id="6434d-710">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサによって読み込まれる論理ツリー内の要素は、確実に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-710">Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized.</span></span> <span data-ttu-id="6434d-711">論理ツリーに含まれていない要素は <xref:System.Windows.FrameworkElement.EndInit%2A> が呼び出されたときに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-711">Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called.</span></span> <span data-ttu-id="6434d-712"><xref:System.Windows.FrameworkElement.BeginInit%2A> と <xref:System.Windows.FrameworkElement.EndInit%2A>の特定の処理が存在しない場合、コンストラクターが初期化された結果を返すとすぐにこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-712">In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-713">この要素が表示のために読み込まれているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-713">Gets a value that indicates whether this element has been loaded for presentation.</span></span></summary>
        <value><span data-ttu-id="6434d-714">現在の要素が要素ツリーにアタッチされている場合は <see langword="true" />。読み込まれた要素ツリーに要素がアタッチされていない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-714"><see langword="true" /> if the current element is attached to an element tree; <see langword="false" /> if the element has never been attached to a loaded element tree.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-715">新しく構築された <xref:System.Windows.FrameworkElement>では、このプロパティは `false`から開始され、`true`に設定された後も、要素がコードによって接続された論理ツリーから削除された場合でも、`true` のままになります。</span><span class="sxs-lookup"><span data-stu-id="6434d-715">From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code.</span></span> <span data-ttu-id="6434d-716">`true` 状態は、要素がプレゼンテーションエンジンに読み込まれるときに、一般的なプレゼンテーションロジックによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-716">`true` state is set by the general presentation logic when elements are loaded into the presentation engine.</span></span>  
  
 <span data-ttu-id="6434d-717">通常、読み込まれた要素はレンダリングされますが、すべての <xref:System.Windows.FrameworkElement> 派生クラスがプレゼンテーションを持つわけではなく、<xref:System.Windows.UIElement.Visibility%2A> などの他のプロパティがプレゼンテーションに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-717">Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-718">次の例では、2つのハンドラーを実装しています。1つはルート要素の <xref:System.Windows.FrameworkElement.Loaded> イベントを処理します。したがって、ページルート要素がイベントの有意性であるため、その要素が読み込まれることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6434d-718">The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</span></span> <span data-ttu-id="6434d-719">もう1つのハンドラーはユーザーコントロールにフックされ、<xref:System.Windows.FrameworkElement.IsLoaded%2A> を呼び出して、ルート要素が完全に読み込まれることを保証します。</span><span class="sxs-lookup"><span data-stu-id="6434d-719">The other handler is hooked to a user control, and calls <xref:System.Windows.FrameworkElement.IsLoaded%2A> to assure that the root element is loaded completely.</span></span> <span data-ttu-id="6434d-720">どちらのハンドラーも、子要素に新しいデータを設定する同じ関数 (非表示) を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-720">Both handlers call the same function (not shown) that will populate child elements with fresh data.</span></span>  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-721">要素に適用されるローカライズ/グローバリゼーション言語情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-721">Gets or sets localization/globalization language information that applies to an element.</span></span></summary>
        <value><span data-ttu-id="6434d-722">この要素の言語情報。</span><span class="sxs-lookup"><span data-stu-id="6434d-722">The language information for this element.</span></span> <span data-ttu-id="6434d-723">既定値は、<see cref="T:System.Windows.Markup.XmlLanguage" /> 値が文字列 "en-US" に設定されている <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-723">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-724">文字列の形式は RFC 3066 標準に従います。</span><span class="sxs-lookup"><span data-stu-id="6434d-724">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="6434d-725">たとえば、英語 (米国) は "en-us" です。</span><span class="sxs-lookup"><span data-stu-id="6434d-725">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="6434d-726">値と形式の詳細については、「<xref:System.Windows.Markup.XmlLanguage>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-726">For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.</span></span>  
  
 <span data-ttu-id="6434d-727">この依存関係プロパティは、プロパティ値を継承します。</span><span class="sxs-lookup"><span data-stu-id="6434d-727">This dependency property inherits property values.</span></span> <span data-ttu-id="6434d-728">ローカル値またはスタイルによって確立された <xref:System.Windows.FrameworkElement.Language%2A> の他の値を持たない子要素がある場合、プロパティシステムは、この値が割り当てられている最も近い祖先要素の <xref:System.Windows.FrameworkElement.Language%2A> 値になるように値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-728">If there are child elements without other values for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] <span data-ttu-id="6434d-729">は、`xml:lang` 属性の一般的な意味を定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-729">defines the general meaning of the `xml:lang` attribute.</span></span> <span data-ttu-id="6434d-730"><xref:System.Windows.FrameworkElement.Language%2A> は、本質的にこの属性の意味を依存関係プロパティとして公開します。</span><span class="sxs-lookup"><span data-stu-id="6434d-730"><xref:System.Windows.FrameworkElement.Language%2A> essentially exposes the meaning of this attribute as a dependency property.</span></span> <span data-ttu-id="6434d-731"><xref:System.Windows.FrameworkElement.Language%2A> はプログラムによって調整できます。また、`xml:lang` 属性が [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]の子要素スコープに継承できる方法と同じ方法で、プロパティシステム値の継承に参加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-731"><xref:System.Windows.FrameworkElement.Language%2A> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].</span></span> <span data-ttu-id="6434d-732"><xref:System.Windows.FrameworkElement.Language%2A>を設定すると、その値が `xml:lang` になり、以前の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-732">If you set <xref:System.Windows.FrameworkElement.Language%2A>, that value becomes the `xml:lang` and overwrites any previous value.</span></span> <span data-ttu-id="6434d-733">詳細については、「 [XAML での xml: lang の処理](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-733">For more information, see [xml:lang Handling in XAML](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-734">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-734">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-735">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-735">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|<span data-ttu-id="6434d-736">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-736">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-737"><see cref="P:System.Windows.FrameworkElement.Language" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-737">Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-738">レイアウトの実行時にこの要素に適用するグラフィック変換を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-738">Gets or sets a graphics transformation that should apply to this element when  layout is performed.</span></span></summary>
        <value><span data-ttu-id="6434d-739">この要素で使用する変換。</span><span class="sxs-lookup"><span data-stu-id="6434d-739">The transform this element should use.</span></span> <span data-ttu-id="6434d-740">既定では、 <see cref="P:System.Windows.Media.Transform.Identity" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-740">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-741"><xref:System.Windows.UIElement.RenderTransform%2A>とは対照的に、<xref:System.Windows.FrameworkElement.LayoutTransform%2A> はレイアウトの結果に影響します。</span><span class="sxs-lookup"><span data-stu-id="6434d-741">In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> will affect results of layout.</span></span>  
  
 <span data-ttu-id="6434d-742">変換を設定すると、スケーリングと回転の強力な機能が提供されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-742">Setting a transform provides powerful capabilities of scaling and rotating.</span></span> <span data-ttu-id="6434d-743">ただし、<xref:System.Windows.FrameworkElement.LayoutTransform%2A> は <xref:System.Windows.Media.TranslateTransform> 操作を無視します。</span><span class="sxs-lookup"><span data-stu-id="6434d-743">However, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignores <xref:System.Windows.Media.TranslateTransform> operations.</span></span> <span data-ttu-id="6434d-744">これは、<xref:System.Windows.FrameworkElement> の子要素のレイアウトシステムの動作によって、スケールまたは回転された要素の位置へのオフセットが、親要素のレイアウトと座標系に自動修正されるためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-744">This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</span></span>  
  
 <span data-ttu-id="6434d-745">レイアウトシステムによる完全なパスを必要としないシナリオで起動すると、アプリケーションのパフォーマンスが低下する可能性があります。これは、<xref:System.Windows.FrameworkElement.LayoutTransform%2A> が原因です。</span><span class="sxs-lookup"><span data-stu-id="6434d-745"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</span></span> <span data-ttu-id="6434d-746"><xref:System.Windows.Controls.Panel>の <xref:System.Windows.Controls.Panel.Children%2A> コレクションに <xref:System.Windows.FrameworkElement.LayoutTransform%2A> を適用すると、レイアウトシステムによって新しいパスがトリガーされ、すべての画面上のオブジェクトが強制的に再測定および再配置されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-746">When you apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</span></span> <span data-ttu-id="6434d-747">完全なアプリケーション [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]を更新する場合は、この機能が必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-747">If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need.</span></span> <span data-ttu-id="6434d-748">ただし、完全なレイアウトパスを必要としない場合は、<xref:System.Windows.UIElement.RenderTransform%2A> プロパティを使用します。これはレイアウトシステムを呼び出しません。したがって、通常はこのシナリオに適した選択肢です。</span><span class="sxs-lookup"><span data-stu-id="6434d-748">However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</span></span>  
  
 <span data-ttu-id="6434d-749"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> が役に立つシナリオの例としては、メニューコンポーネントなどの要素を水平から垂直へ、またはその逆方向に回転させたり、フォーカスを合わせて要素を拡大縮小したり、編集動作を提供したりすることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-749">Example scenarios where <xref:System.Windows.FrameworkElement.LayoutTransform%2A> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</span></span>  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-750">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-750">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-751">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-751">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|<span data-ttu-id="6434d-752">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-752">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-753">次の例は、<xref:System.Windows.FrameworkElement.LayoutTransform%2A> を要素に適用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-753">The following example shows how to apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to an element.</span></span> <span data-ttu-id="6434d-754">この例では、<xref:System.Windows.Controls.Button> のインスタンスを作成し、親 <xref:System.Windows.Controls.Grid>内でホストします。</span><span class="sxs-lookup"><span data-stu-id="6434d-754">The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>.</span></span> <span data-ttu-id="6434d-755">また、<xref:System.Windows.FrameworkElement.LayoutTransform%2A> プロパティを使用して、<xref:System.Windows.Controls.Button>に <xref:System.Windows.Media.RotateTransform> を適用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-755">It also uses the <xref:System.Windows.FrameworkElement.LayoutTransform%2A> property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=158252"><span data-ttu-id="6434d-756">2-d 変換のサンプル</span><span class="sxs-lookup"><span data-stu-id="6434d-756">2-D Transforms Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-757"><see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-757">Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-758">要素のレイアウトやレンダリングが完了し、操作を受け入れる準備が整ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-758">Occurs when the element is laid out, rendered, and ready for interaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-759">通常、<xref:System.Windows.FrameworkElement.Loaded> は、要素の初期化シーケンスで最後に発生したイベントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-759"><xref:System.Windows.FrameworkElement.Loaded> is usually the last event raised in an element initialization sequence.</span></span> <span data-ttu-id="6434d-760"><xref:System.Windows.FrameworkElement.Initialized>後に常に発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-760">It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>.</span></span> <span data-ttu-id="6434d-761"><xref:System.Windows.FrameworkElement.Loaded> と <xref:System.Windows.FrameworkElement.Initialized> のどちらを処理するかは、要件によって異なります。</span><span class="sxs-lookup"><span data-stu-id="6434d-761">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="6434d-762">要素のプロパティを読み取り、プロパティをリセットする必要がなく、レイアウト情報を必要としない場合は、<xref:System.Windows.FrameworkElement.Initialized> の動作に適したイベントである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-762">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="6434d-763">要素のすべてのプロパティを使用できるようにする必要があり、レイアウトをリセットする可能性のあるプロパティを設定する場合は、<xref:System.Windows.FrameworkElement.Loaded> 動作する方が適切なイベントである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-763">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="6434d-764">新しいレイアウトパスが必要であることを示すために、ハンドラーがレイアウトシステムによって解釈されるプロパティをリセットする場合は、再入に注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-764">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="6434d-765">(変更された場合、新しいレイアウトパスを必要とするプロパティがわからない場合は、プロパティの <xref:System.Windows.FrameworkPropertyMetadata> 値を確認する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="6434d-765">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="6434d-766"><xref:System.Windows.FrameworkElement>のオブジェクトイベントのシーケンス、および関連するいくつかのアプリケーションおよび要素クラスの詳細については、「[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-766">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 <span data-ttu-id="6434d-767">ダイレクトルーティングイベントはルートに従わないので、これらのイベントは、発生したものと同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-767">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="6434d-768">直接ルーティングイベントでは、他のルーティングイベントの動作がサポートされます。これらは、アクセス可能なハンドラーコレクションをサポートし、スタイルの <xref:System.Windows.EventTrigger> として使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-768">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="6434d-769">ユーザーが開始したシステムテーマの変更の結果として、<xref:System.Windows.FrameworkElement.Loaded> と <xref:System.Windows.FrameworkElement.Unloaded> の両方がコントロールで発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-769"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="6434d-770">テーマを変更すると、コントロールテンプレートとそれに含まれるビジュアルツリーが無効化されます。これにより、コントロール全体がアンロードされ、再読み込みされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-770">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="6434d-771">したがって、ページが最初にページへの移動によって読み込まれた場合にのみ、<xref:System.Windows.FrameworkElement.Loaded> を発生させることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-771">Therefore <xref:System.Windows.FrameworkElement.Loaded> cannot be assumed to occur only when a page is first loaded through navigation to the page.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-772">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-772">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-773">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-773">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|<span data-ttu-id="6434d-774">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-774">Routing strategy</span></span>|<span data-ttu-id="6434d-775">直接</span><span class="sxs-lookup"><span data-stu-id="6434d-775">Direct</span></span>|  
|<span data-ttu-id="6434d-776">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-776">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-777"><see cref="E:System.Windows.FrameworkElement.Loaded" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-777">Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-778">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-778">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-779">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-779">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-780">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-780">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-781">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-781">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-782">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-782">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-783">この要素の論理上の子要素に対する列挙子を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-783">Gets an enumerator for logical child elements of this element.</span></span></summary>
        <value><span data-ttu-id="6434d-784">この要素の論理上の子要素に対する列挙子。</span><span class="sxs-lookup"><span data-stu-id="6434d-784">An enumerator for logical child elements of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-785"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> を使用すると、子要素を反復処理できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-785"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> allows you to iterate over child elements.</span></span> <span data-ttu-id="6434d-786">これは、定義済みの専用のコレクションがなくても、複数の子要素 (特に子要素 <xref:System.Windows.FrameworkContentElement>) を含む要素に便利です。</span><span class="sxs-lookup"><span data-stu-id="6434d-786">This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.</span></span>  
  
 <span data-ttu-id="6434d-787"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> と <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>の使用方法の詳細については、「 [WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-787">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c5358e14-d24c-44c7-b5eb-6062a4fd981c"><span data-ttu-id="6434d-788">x:Array のマークアップ拡張機能</span><span class="sxs-lookup"><span data-stu-id="6434d-788">x:Array Markup Extension</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-789">要素の外側の余白を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-789">Gets or sets the outer margin of an element.</span></span></summary>
        <value><span data-ttu-id="6434d-790">要素の余白の値を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-790">Provides margin values for the element.</span></span> <span data-ttu-id="6434d-791">既定値は、すべてのプロパティが 0 (ゼロ) の <see cref="T:System.Windows.Thickness" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-791">The default value is a <see cref="T:System.Windows.Thickness" /> with all properties equal to 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-792">余白は、この要素とその他の要素の間のスペースで、レイアウトによって [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]が作成されるときに隣接します。</span><span class="sxs-lookup"><span data-stu-id="6434d-792">The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="6434d-793">共有要素は、ピア要素 (共通の親コントロールのコレクション内の他の要素など) である場合もあれば、この要素の親である場合もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-793">Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</span></span>  
  
 <span data-ttu-id="6434d-794"><xref:System.Windows.FrameworkElement.Margin%2A> は、余白を非対称に設定できるように、数値ではなく <xref:System.Windows.Thickness> 構造として設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-794"><xref:System.Windows.FrameworkElement.Margin%2A> is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically.</span></span> <span data-ttu-id="6434d-795"><xref:System.Windows.Thickness> 構造体自体は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 属性構文で非対称 <xref:System.Windows.FrameworkElement.Margin%2A> を指定できるように、文字列型の変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="6434d-795">The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute syntax also.</span></span>  
  
 <span data-ttu-id="6434d-796">0以外の余白は、要素のレイアウトの <xref:System.Windows.FrameworkElement.ActualWidth%2A> と <xref:System.Windows.FrameworkElement.ActualHeight%2A>の外側にスペースを適用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-796">A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.</span></span>  
  
 <span data-ttu-id="6434d-797">余白は、レイアウト内の兄弟要素に追加されます。たとえば、隣接する2つの要素が隣接するエッジに30を設定している場合、隣接する2つの要素の間に60単位の領域があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-797">Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</span></span>  
  
 <span data-ttu-id="6434d-798">余白が設定されている要素は、割り当てられた四角形の領域が余白と要素のコンテンツ領域に十分な大きさでない場合は、通常、指定された <xref:System.Windows.FrameworkElement.Margin%2A> のサイズを制限しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-798">Elements that have margins set will not typically constrain the size of the specified <xref:System.Windows.FrameworkElement.Margin%2A> if the allotted rectangle space is not large enough for the margin plus the element content area.</span></span> <span data-ttu-id="6434d-799">要素のコンテンツ領域は、レイアウトが計算されるときに制約されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-799">The element content area will be constrained instead when layout is calculated.</span></span> <span data-ttu-id="6434d-800">余白が制限されるのは、コンテンツが既にゼロに制限されている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="6434d-800">The only case where margins would be constrained also is if the content is already constrained all the way to zero.</span></span>  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-801">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-801">XAML Attribute Usage</span></span>  
  
```xaml  
<object Margin="left,top,right,bottom"/>  
```

<span data-ttu-id="6434d-802">または</span><span class="sxs-lookup"><span data-stu-id="6434d-802">-or-</span></span>

```xaml
<object Margin="left,top"/>  
```

<span data-ttu-id="6434d-803">または</span><span class="sxs-lookup"><span data-stu-id="6434d-803">-or-</span></span>  

```xaml
<object Margin="thicknessReference"/>  
```

<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-804">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-804">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-805">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-805">XAML Values</span></span>  
 <span data-ttu-id="6434d-806">*left、top、right、bottom*</span><span class="sxs-lookup"><span data-stu-id="6434d-806">*left, top, right, bottom*</span></span>  
 <span data-ttu-id="6434d-807"><xref:System.Windows.Thickness> 構造体の4つの可能なディメンションプロパティを指定する0から <xref:System.Double.PositiveInfinity> までの数値。</span><span class="sxs-lookup"><span data-stu-id="6434d-807">Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.</span></span>  
  
 <span data-ttu-id="6434d-808">属性の使用法では、指定された順序で適用される省略された値も、対称的かつ論理的に使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-808">The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</span></span> <span data-ttu-id="6434d-809">たとえば、`Margin="20"` は、すべてのプロパティが20に設定された <xref:System.Windows.Thickness> を意味します。</span><span class="sxs-lookup"><span data-stu-id="6434d-809">For instance, `Margin="20"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20.</span></span> <span data-ttu-id="6434d-810">`Margin="20,50"` は <xref:System.Windows.Thickness.Right%2A> <xref:System.Windows.Thickness.Left%2A> の <xref:System.Windows.Thickness> を20に設定し、<xref:System.Windows.Thickness.Top%2A> と <xref:System.Windows.Thickness.Bottom%2A> を50に設定して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-810">`Margin="20,50"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.</span></span>  
  
 <span data-ttu-id="6434d-811"><xref:System.Windows.Thickness> メジャーの既定の単位は [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="6434d-811">The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)].</span></span> <span data-ttu-id="6434d-812">また、任意のメジャーに `cm`、`in`、または `pt` の単位の種類の文字列を追加することによって、他の単位を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-812">You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.</span></span>  
  
 <span data-ttu-id="6434d-813">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 属性として指定する数値には小数点を指定する必要があります (0 は許容されますが、0.0 として指定する必要はありません)。</span><span class="sxs-lookup"><span data-stu-id="6434d-813">Number values provided as [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</span></span> <span data-ttu-id="6434d-814">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] の使用方法の詳細については、「<xref:System.Windows.Thickness>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-814">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
 <span data-ttu-id="6434d-815">*thicknessReference*</span><span class="sxs-lookup"><span data-stu-id="6434d-815">*thicknessReference*</span></span>  
 <span data-ttu-id="6434d-816">既存の <xref:System.Windows.Thickness>へのオブジェクト参照。</span><span class="sxs-lookup"><span data-stu-id="6434d-816">An object reference to an existing <xref:System.Windows.Thickness>.</span></span> <span data-ttu-id="6434d-817">これは、`}`、、または `}` 参照である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-817">This might be a `}`, a , or `}` reference.</span></span> <span data-ttu-id="6434d-818">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] の使用方法の詳細については、「<xref:System.Windows.Thickness>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-818">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-819">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-819">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-820">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-820">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|<span data-ttu-id="6434d-821">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-821">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-822"><see cref="P:System.Windows.FrameworkElement.Margin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-822">Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-823">要素の高さの最大値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-823">Gets or sets the maximum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="6434d-824">要素の最大高 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 単位)。</span><span class="sxs-lookup"><span data-stu-id="6434d-824">The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-825">既定値は <see cref="F:System.Double.PositiveInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-825">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="6434d-826">この値は、0.0 以上の任意の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-826">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-827"><see cref="F:System.Double.PositiveInfinity" /> も有効です。</span><span class="sxs-lookup"><span data-stu-id="6434d-827"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-828">これは、高さ情報を指定する <xref:System.Windows.FrameworkElement> の3つのプロパティのうちの1つです。</span><span class="sxs-lookup"><span data-stu-id="6434d-828">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="6434d-829">もう1つは <xref:System.Windows.FrameworkElement.MinHeight%2A> と <xref:System.Windows.FrameworkElement.Height%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6434d-829">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  <span data-ttu-id="6434d-830">これらの値の間に競合がある場合、実際の高さを決定するためのアプリケーションの順序は、最初に <xref:System.Windows.FrameworkElement.MinHeight%2A> が受け入れられる必要があります。次に、<xref:System.Windows.FrameworkElement.MaxHeight%2A>ます。これらの各値が範囲内にある場合は <xref:System.Windows.FrameworkElement.Height%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-830">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="6434d-831"><xref:System.Double> 値の値の制限は、<xref:System.Windows.ValidateValueCallback> メカニズムによって適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-831">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="6434d-832">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-832">If you attempt to set an invalid value a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-833">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-833">XAML Attribute Usage</span></span>  
  
```xaml  
<object MaxHeight="double"/>  
```

<span data-ttu-id="6434d-834">または</span><span class="sxs-lookup"><span data-stu-id="6434d-834">-or-</span></span>

```xaml
<object MaxHeight ="qualifiedDouble"/>  
```

<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-835">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-835">XAML Values</span></span>  
 <span data-ttu-id="6434d-836">*double*</span><span class="sxs-lookup"><span data-stu-id="6434d-836">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="6434d-837">0.0 以上の <xref:System.Double> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="6434d-837">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-838">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] の測定値として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-838">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="6434d-839">文字列には、小数点を明示的に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-839">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="6434d-840">たとえば、`1` の値は許容されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-840">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="6434d-841">[プロパティ値] セクションで説明したのと同じ <xref:System.Double> 範囲制限が適用されますが、値を明示的に <xref:System.Double.PositiveInfinity>に設定する必要がある場合は、 [X:Static マークアップ拡張機能](~/docs/framework/xaml-services/x-static-markup-extension.md)を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-841">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="6434d-842">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="6434d-842">*qualifiedDouble*</span></span>  
 <span data-ttu-id="6434d-843">前に説明した*double*値。その後に、`px`、`in`、`cm`、`pt`のいずれかの単位宣言文字列が続きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-843">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="6434d-844">`px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="6434d-844">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="6434d-845">`in` はインチ。1in==96px</span><span class="sxs-lookup"><span data-stu-id="6434d-845">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="6434d-846">`cm` はセンチメートルです。1cm = = (96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="6434d-846">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="6434d-847">`pt` はポイント。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="6434d-847">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-848">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-848">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-849">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-849">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|<span data-ttu-id="6434d-850">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-850">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-851"><see cref="P:System.Windows.FrameworkElement.MaxHeight" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-851">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-852">要素の幅の最大値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-852">Gets or sets the maximum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="6434d-853">要素の最大の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 単位)。</span><span class="sxs-lookup"><span data-stu-id="6434d-853">The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-854">既定値は <see cref="F:System.Double.PositiveInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-854">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="6434d-855">この値は、0.0 以上の任意の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-855">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-856"><see cref="F:System.Double.PositiveInfinity" /> も有効です。</span><span class="sxs-lookup"><span data-stu-id="6434d-856"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-857">これは、幅情報を指定する <xref:System.Windows.FrameworkElement> の3つのプロパティのうちの1つです。</span><span class="sxs-lookup"><span data-stu-id="6434d-857">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span> <span data-ttu-id="6434d-858">もう1つは <xref:System.Windows.FrameworkElement.MinWidth%2A> と <xref:System.Windows.FrameworkElement.Width%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6434d-858">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>.</span></span> <span data-ttu-id="6434d-859">これらの値の間に競合がある場合、実際の幅を決定するためのアプリケーションの順序は、最初に <xref:System.Windows.FrameworkElement.MinWidth%2A> する必要があります。次に、<xref:System.Windows.FrameworkElement.MaxWidth%2A>、それぞれが境界内にある場合は <xref:System.Windows.FrameworkElement.Width%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-859">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="6434d-860"><xref:System.Double> 値の値の制限は、<xref:System.Windows.ValidateValueCallback> メカニズムによって適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-860">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="6434d-861">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-861">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-862">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-862">XAML Attribute Usage</span></span>  
  
```xaml 
<object MaxWidth="double"/>  
```

<span data-ttu-id="6434d-863">または</span><span class="sxs-lookup"><span data-stu-id="6434d-863">-or-</span></span>

```xaml
<object MaxWidth="qualifiedDouble"/>  
```

<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-864">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-864">XAML Values</span></span>  
 <span data-ttu-id="6434d-865">*double*</span><span class="sxs-lookup"><span data-stu-id="6434d-865">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="6434d-866">0.0 以上の <xref:System.Double> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="6434d-866">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-867">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] の測定値として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-867">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="6434d-868">文字列には、小数点を明示的に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-868">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="6434d-869">たとえば、`1` の値は許容されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-869">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="6434d-870">[プロパティの値] セクションに記載されているのと同じ <xref:System.Double> 範囲の制限が適用されます。ただし、値を <xref:System.Double.PositiveInfinity>に設定するには、 [X:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md)を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-870">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) to set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="6434d-871">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="6434d-871">*qualifiedDouble*</span></span>  
 <span data-ttu-id="6434d-872">前に説明した*double*値。その後に、`px`、`in`、`cm`、`pt`のいずれかの単位宣言文字列が続きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-872">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="6434d-873">`px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="6434d-873">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="6434d-874">`in` はインチ。1in==96px</span><span class="sxs-lookup"><span data-stu-id="6434d-874">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="6434d-875">`cm` はセンチメートルです。1cm = = (96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="6434d-875">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="6434d-876">`pt` はポイント。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="6434d-876">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-877">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-877">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-878">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-878">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|<span data-ttu-id="6434d-879">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-879">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-880"><see cref="P:System.Windows.FrameworkElement.MaxWidth" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-880">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="6434d-881">親要素が子要素に与えることが利用可能なサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-881">The available size that the parent element can give to the child elements.</span></span></param>
        <summary><span data-ttu-id="6434d-882"><see cref="T:System.Windows.FrameworkElement" /> の測定パス レイアウト システムの基本動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-882">Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <returns><span data-ttu-id="6434d-883">レイアウト内のこの要素の必要なサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-883">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-884">このメソッドは、WPF のコアレベルと WPF フレームワークレベルのレイアウトメジャーの実装に接続するために <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-884">This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> to connect the  WPF core-level and WPF framework-level layout measure implementations.</span></span> <span data-ttu-id="6434d-885"><xref:System.Windows.FrameworkElement> の実装は、メソッドをシールします。</span><span class="sxs-lookup"><span data-stu-id="6434d-885">The <xref:System.Windows.FrameworkElement> implementation seals the method.</span></span> <span data-ttu-id="6434d-886">WPF フレームワークレベルでビルドされる要素の測定パスレイアウト動作を調整するには、代わりに <xref:System.Windows.FrameworkElement.MeasureOverride%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-886">To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead.</span></span> <span data-ttu-id="6434d-887">WPF フレームワークレベルで意図的に構築されていない要素または <xref:System.Windows.FrameworkElement>を使用する要素の測定パスレイアウト動作を調整するには、<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-887">To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="6434d-888">この要素が子要素に提供できる使用可能なサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-888">The available size that this element can give to child elements.</span></span> <span data-ttu-id="6434d-889">あらゆるコンテンツに要素がサイズを合わせることを示す値として、無限大を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-889">Infinity can be specified as a value to indicate that the element will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="6434d-890">派生クラスでオーバーライドされると、子要素に必要なレイアウトのサイズを測定し、<see cref="T:System.Windows.FrameworkElement" /> 派生クラスのサイズを決定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-890">When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</span></span></summary>
        <returns><span data-ttu-id="6434d-891">子要素のサイズの計算に基づいて、この要素が判断したレイアウト時に必要なサイズ。</span><span class="sxs-lookup"><span data-stu-id="6434d-891">The size that this element determines it needs during layout, based on its calculations of child element sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-892"><xref:System.Windows.FrameworkElement.MeasureOverride%2A> をオーバーライドして、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] レイアウトシステムに参加するときに、要素のカスタムレイアウトのサイズ変更動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-892">Override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] layout system.</span></span> <span data-ttu-id="6434d-893">実装では、次の操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-893">Your implementation should do the following:</span></span>  
  
1.  <span data-ttu-id="6434d-894">レイアウトの一部である子要素の特定のコレクションを反復処理し、各子要素の <xref:System.Windows.UIElement.Measure%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-894">Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
2.  <span data-ttu-id="6434d-895">子ですぐに <xref:System.Windows.UIElement.DesiredSize%2A> を取得します (これは <xref:System.Windows.UIElement.Measure%2A> が呼び出された後にプロパティとして設定されます)。</span><span class="sxs-lookup"><span data-stu-id="6434d-895">Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).</span></span>  
  
3.  <span data-ttu-id="6434d-896">子要素の測定値に基づいて、親のネットワークの目的のサイズを計算します。</span><span class="sxs-lookup"><span data-stu-id="6434d-896">Compute the net desired size of the parent based upon the measurement of the child elements.</span></span>  
  
 <span data-ttu-id="6434d-897"><xref:System.Windows.FrameworkElement.MeasureOverride%2A> の戻り値は、要素独自の目的のサイズにする必要があります。これは、現在の要素の親要素のメジャー入力になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-897">The return value of <xref:System.Windows.FrameworkElement.MeasureOverride%2A> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</span></span> <span data-ttu-id="6434d-898">この同じプロセスは、ページのルート要素に到達するまでレイアウトシステムを経由し続けます。</span><span class="sxs-lookup"><span data-stu-id="6434d-898">This same process continues through the layout system until the root element of the page is reached.</span></span>  
  
 <span data-ttu-id="6434d-899">このプロセスでは、子要素がより多くの領域を必要としていることを示すために、子要素が最初の `availableSize` よりも大きい <xref:System.Windows.UIElement.DesiredSize%2A> サイズを返すことがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-899">During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space.</span></span> <span data-ttu-id="6434d-900">これは、スクロール可能な領域を導入することによって、親コントロールのサイズを変更することによって、親コントロールのサイズを変更することによって、独自の実装で処理することができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-900">This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6434d-901">要素は、このプロセス中に各子の <xref:System.Windows.UIElement.Measure%2A> を呼び出す必要があります。そうしないと、子要素のサイズが正しく設定または配置されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-901">Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-902">次の非コンパイルコードは、この実装パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-902">The following non-compiling code shows this implementation pattern.</span></span>  <span data-ttu-id="6434d-903"><c>Visualchildren</c>は、独自の要素で定義する必要がある子の列挙可能なコレクションプロパティを表します。</span><span class="sxs-lookup"><span data-stu-id="6434d-903"><c>VisualChildren</c> represents an enumerable collection property of children that your own element should define.</span></span> <span data-ttu-id="6434d-904">プロパティには、任意の名前を付けることができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-904">The property can be named anything.</span></span> <span data-ttu-id="6434d-905"><c>Visualchildren</c>は、この例のためのプレースホルダー名です。 <c>visualchildren</c>は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] または名前付けパターンの一部で提供される API ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-905"><c>VisualChildren</c> is a placeholder name for purposes of this example, <c>VisualChildren</c> is not an API as provided by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] or a part of a naming pattern.</span></span> 
  
<span data-ttu-id="6434d-906">[! code-csharp[CorePseudocode # FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)][! code-vb[CorePseudocode # FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span><span class="sxs-lookup"><span data-stu-id="6434d-906">[!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-907">要素の高さの最小値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-907">Gets or sets the minimum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="6434d-908">要素の高さの最小値 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 単位)。</span><span class="sxs-lookup"><span data-stu-id="6434d-908">The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-909">既定値は 0.0 です。</span><span class="sxs-lookup"><span data-stu-id="6434d-909">The default value is 0.0.</span></span> <span data-ttu-id="6434d-910">この値は、0.0 以上の任意の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-910">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-911">ただし、<see cref="F:System.Double.PositiveInfinity" /> は有効でなく、<see cref="F:System.Double.NaN" /> も有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-911">However, <see cref="F:System.Double.PositiveInfinity" /> is NOT valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-912">これは、高さ情報を指定する <xref:System.Windows.FrameworkElement> の3つのプロパティのうちの1つです。</span><span class="sxs-lookup"><span data-stu-id="6434d-912">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span>  <span data-ttu-id="6434d-913">もう1つは <xref:System.Windows.FrameworkElement.Height%2A> と <xref:System.Windows.FrameworkElement.MaxHeight%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6434d-913">The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="6434d-914">これらの値の間に競合がある場合、実際の高さを決定するためのアプリケーションの順序は、最初に <xref:System.Windows.FrameworkElement.MinHeight%2A> が受け入れられる必要があります。次に、<xref:System.Windows.FrameworkElement.MaxHeight%2A>ます。これらの各値が範囲内にある場合は <xref:System.Windows.FrameworkElement.Height%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-914">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="6434d-915"><xref:System.Double> 値の値の制限は、<xref:System.Windows.ValidateValueCallback> メカニズムによって適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-915">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="6434d-916">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-916">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-917">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-917">XAML Attribute Usage</span></span>  
  
```xaml
<object MinHeight="double"/>  
```

<span data-ttu-id="6434d-918">または</span><span class="sxs-lookup"><span data-stu-id="6434d-918">-or-</span></span>

```xaml
<object MinHeight="qualifiedDouble"/>  
```

<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-919">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-919">XAML Values</span></span>  
 <span data-ttu-id="6434d-920">*double*</span><span class="sxs-lookup"><span data-stu-id="6434d-920">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="6434d-921">0.0 以上の <xref:System.Double> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="6434d-921">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-922">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] の測定値として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-922">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="6434d-923">文字列には、小数点を明示的に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-923">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="6434d-924">たとえば、`1` の値は許容されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-924">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="6434d-925">[プロパティの値] セクションに記載されているのと同じ <xref:System.Double> 範囲の制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-925">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="6434d-926">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="6434d-926">*qualifiedDouble*</span></span>  
 <span data-ttu-id="6434d-927">前に説明した*double*値。その後に、`px`、`in`、`cm`、`pt`のいずれかの単位宣言文字列が続きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-927">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="6434d-928">`px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="6434d-928">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="6434d-929">`in` はインチ。1in==96px</span><span class="sxs-lookup"><span data-stu-id="6434d-929">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="6434d-930">`cm` はセンチメートルです。1cm = = (96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="6434d-930">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="6434d-931">`pt` はポイント。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="6434d-931">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-932">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-932">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-933">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-933">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|<span data-ttu-id="6434d-934">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-934">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-935"><see cref="P:System.Windows.FrameworkElement.MinHeight" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-935">Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-936">要素の幅の最小値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-936">Gets or sets the minimum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="6434d-937">要素の幅の最小値 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 単位)。</span><span class="sxs-lookup"><span data-stu-id="6434d-937">The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-938">既定値は 0.0 です。</span><span class="sxs-lookup"><span data-stu-id="6434d-938">The default value is 0.0.</span></span> <span data-ttu-id="6434d-939">この値は、0.0 以上の任意の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-939">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-940">ただし、<see cref="F:System.Double.PositiveInfinity" /> と <see cref="F:System.Double.NaN" /> は無効です。</span><span class="sxs-lookup"><span data-stu-id="6434d-940">However, <see cref="F:System.Double.PositiveInfinity" /> is not valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-941">これは、幅情報を指定する <xref:System.Windows.FrameworkElement> の3つのプロパティのうちの1つです。</span><span class="sxs-lookup"><span data-stu-id="6434d-941">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="6434d-942">もう1つは <xref:System.Windows.FrameworkElement.Width%2A> と <xref:System.Windows.FrameworkElement.MaxWidth%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6434d-942">The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="6434d-943">これらの値の間に競合がある場合、実際の幅を決定するためのアプリケーションの順序は、最初に <xref:System.Windows.FrameworkElement.MinWidth%2A> する必要があります。次に、<xref:System.Windows.FrameworkElement.MaxWidth%2A>、それぞれが境界内にある場合は <xref:System.Windows.FrameworkElement.Width%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-943">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="6434d-944"><xref:System.Double> 値の値の制限は、<xref:System.Windows.ValidateValueCallback> メカニズムによって適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-944">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="6434d-945">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-945">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-946">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-946">XAML Attribute Usage</span></span>  
  
```xaml 
<object MinWidth="double"/>  
```

<span data-ttu-id="6434d-947">または</span><span class="sxs-lookup"><span data-stu-id="6434d-947">-or-</span></span>

```xaml
<object MinWidth="qualifiedDouble"/>  
```
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-948">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-948">XAML Values</span></span>  
 <span data-ttu-id="6434d-949">*double*</span><span class="sxs-lookup"><span data-stu-id="6434d-949">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="6434d-950">0.0 以上の <xref:System.Double> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="6434d-950">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-951">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] の測定値として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-951">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="6434d-952">文字列には、小数点を明示的に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-952">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="6434d-953">たとえば、`1` の値は許容されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-953">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="6434d-954">[プロパティの値] セクションに記載されているのと同じ <xref:System.Double> 範囲の制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-954">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="6434d-955">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="6434d-955">*qualifiedDouble*</span></span>  
 <span data-ttu-id="6434d-956">前に説明した*double*値。その後に、`px`、`in`、`cm`、`pt`のいずれかの単位宣言文字列が続きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-956">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="6434d-957">`px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="6434d-957">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="6434d-958">`in` はインチ。1in==96px</span><span class="sxs-lookup"><span data-stu-id="6434d-958">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="6434d-959">`cm` はセンチメートルです。1cm = = (96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="6434d-959">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="6434d-960">`pt` はポイント。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="6434d-960">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-961">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-961">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-962">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-962">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|<span data-ttu-id="6434d-963">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-963">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-964"><see cref="P:System.Windows.FrameworkElement.MinWidth" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-964">Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="6434d-965">フォーカスの移動方向を表す列挙値。</span><span class="sxs-lookup"><span data-stu-id="6434d-965">The direction that focus is to be moved, as a value of the enumeration.</span></span></param>
        <summary><span data-ttu-id="6434d-966">指定した移動方向の別の要素にこの要素からキーボード フォーカスを移動します。</span><span class="sxs-lookup"><span data-stu-id="6434d-966">Moves the keyboard focus away from this element and to another element in a provided traversal direction.</span></span></summary>
        <returns><span data-ttu-id="6434d-967">フォーカスの移動が成功した場合は <see langword="true" /> が返されます。指定した方向にターゲット要素が存在しない場合や、ターゲット要素にキーボード フォーカスを設定できなかった場合は、<see langword="false" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-967">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-968">この実装は <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> をオーバーライドし、メソッドをシールします。</span><span class="sxs-lookup"><span data-stu-id="6434d-968">This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> and seals the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-969">次の例では、いくつかの可能なボタン入力を処理するハンドラーを実装しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-969">The following example implements a handler that handles several possible button inputs.</span></span> <span data-ttu-id="6434d-970">各ボタンは、可能な <xref:System.Windows.Input.FocusNavigationDirection>を表します。</span><span class="sxs-lookup"><span data-stu-id="6434d-970">Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="6434d-971">ハンドラーは、現在のキーボードフォーカスを持つ要素を追跡し、指定された <xref:System.Windows.Input.TraversalRequest> 型パラメーターの初期化として適切な <xref:System.Windows.Input.FocusNavigationDirection> を指定することによって、その要素に対して <xref:System.Windows.FrameworkElement.MoveFocus%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-971">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.MoveFocus%2A> on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span>  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-972">要素の識別名を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-972">Gets or sets the identifying name of the element.</span></span> <span data-ttu-id="6434d-973">この名前は参照を提供するため、イベント ハンドラー コードなどの分離コードは、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサによる処理の際に、構築された後のマークアップ要素を参照できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-973">The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</span></span></summary>
        <value><span data-ttu-id="6434d-974">要素の名前です。</span><span class="sxs-lookup"><span data-stu-id="6434d-974">The name of the element.</span></span> <span data-ttu-id="6434d-975">既定値は空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="6434d-975">The default is an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-976">このプロパティの最も一般的な使用方法は、マークアップの属性として [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 要素名を指定することです。</span><span class="sxs-lookup"><span data-stu-id="6434d-976">The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.</span></span>  
  
 <span data-ttu-id="6434d-977">このプロパティは、基本的に、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:Name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)を設定するための WPF フレームワークレベルの便宜的なプロパティを提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-977">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md).</span></span>  
  
 <span data-ttu-id="6434d-978">名前スコープ内で一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-978">Names must be unique within a namescope.</span></span> <span data-ttu-id="6434d-979">詳細については、「 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-979">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="6434d-980">コードで要素を作成する場合は、<xref:System.Windows.FrameworkElement.Name%2A> を取得するのは一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-980">Getting a <xref:System.Windows.FrameworkElement.Name%2A> if you are creating elements in code is not common.</span></span> <span data-ttu-id="6434d-981">コードに適切な参照が既にある場合は、要素参照のメソッドとプロパティを呼び出すだけで、通常は <xref:System.Windows.FrameworkElement.Name%2A>は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-981">If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <xref:System.Windows.FrameworkElement.Name%2A>.</span></span> <span data-ttu-id="6434d-982">これに対する例外は、<xref:System.Windows.FrameworkElement.Name%2A> 文字列にオーバーロードされた意味がある場合です。たとえば、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]にその名前を表示すると便利な場合です。</span><span class="sxs-lookup"><span data-stu-id="6434d-982">An exception to this is if the <xref:System.Windows.FrameworkElement.Name%2A> string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="6434d-983">元の <xref:System.Windows.FrameworkElement.Name%2A> をマークアップから設定した場合、分離コードから <xref:System.Windows.FrameworkElement.Name%2A> を設定することもお勧めしません。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] を読み込んだ後にプロパティを変更しても、元のオブジェクト参照は変更されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-983">Setting a <xref:System.Windows.FrameworkElement.Name%2A> from code-behind if the original <xref:System.Windows.FrameworkElement.Name%2A> was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will not change the original object reference.</span></span> <span data-ttu-id="6434d-984">オブジェクト参照は、基になる名前スコープが解析中に明示的に作成された場合にのみ作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-984">The object references are created only when the underlying namescopes are explicitly created during parsing.</span></span> <span data-ttu-id="6434d-985">既に読み込まれている要素の <xref:System.Windows.FrameworkElement.Name%2A> プロパティを有効に変更するには、<xref:System.Windows.FrameworkElement.RegisterName%2A> を明示的に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-985">You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the <xref:System.Windows.FrameworkElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="6434d-986">コードから <xref:System.Windows.FrameworkElement.Name%2A> を設定することが重要なケースの1つは、ストーリーボードが実行される要素の名前を登録するときに、それらを実行時に参照できるようにすることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-986">One notable case where setting <xref:System.Windows.FrameworkElement.Name%2A> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</span></span> <span data-ttu-id="6434d-987">名前を登録する前に、をインスタンス化して <xref:System.Windows.NameScope> インスタンスを割り当てる必要がある場合もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-987">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="6434d-988">「例」または「[ストーリーボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-988">See the Example section, or [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="6434d-989">コードから <xref:System.Windows.FrameworkElement.Name%2A> を設定するアプリケーションは限られていますが、<xref:System.Windows.FrameworkElement.Name%2A> によって要素を取得する方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="6434d-989">Setting <xref:System.Windows.FrameworkElement.Name%2A> from code has limited applications, but getting an element by <xref:System.Windows.FrameworkElement.Name%2A> is more common.</span></span> <span data-ttu-id="6434d-990">特定のシナリオとして、アプリケーションがアプリケーションにページを再読み込みするナビゲーションモデルがサポートされていて、実行時コードがそのページに対して定義された分離コードではない場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-990">One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</span></span> <span data-ttu-id="6434d-991">任意の <xref:System.Windows.FrameworkElement>から使用できるユーティリティメソッド <xref:System.Windows.FrameworkElement.FindName%2A>は、その要素の論理ツリー内の <xref:System.Windows.FrameworkElement.Name%2A> によって要素を検索し、必要に応じてツリーを再帰的に検索できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-991">The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by <xref:System.Windows.FrameworkElement.Name%2A> in the logical tree for that element, searching the tree recursively as necessary.</span></span> <span data-ttu-id="6434d-992">または、<xref:System.Windows.LogicalTreeHelper>の <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 静的メソッドを使用して、引数として <xref:System.Windows.FrameworkElement.Name%2A> 文字列を受け取ることもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-992">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a <xref:System.Windows.FrameworkElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="6434d-993">一般的に使用されるルート要素 (<xref:System.Windows.Window>、<xref:System.Windows.Controls.Page> など) は、インターフェイス <xref:System.Windows.Markup.INameScope>を実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-993">Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="6434d-994">このインターフェイスの実装では、その名前がスコープ内で明確になるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-994">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span> <span data-ttu-id="6434d-995">このインターフェイスを定義するルート要素は、関連するすべての Api の名前スコープの動作の境界も定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-995">The root elements that define this interface also define the namescope behavior boundaries for all the related APIs.</span></span>  
  
 <span data-ttu-id="6434d-996"><xref:System.Windows.FrameworkElement.Name%2A> プロパティは、他のプロセスの識別子としても機能します。</span><span class="sxs-lookup"><span data-stu-id="6434d-996">The <xref:System.Windows.FrameworkElement.Name%2A> property also serves as an identifier for other processes.</span></span> <span data-ttu-id="6434d-997">たとえば、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] オートメーションモデルでは、クライアントとプロバイダーの AutomationId として <xref:System.Windows.FrameworkElement.Name%2A> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-997">For instance, the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] automation model will use <xref:System.Windows.FrameworkElement.Name%2A> as the AutomationId for clients and providers.</span></span>  
  
 <span data-ttu-id="6434d-998"><xref:System.Windows.FrameworkElement.Name%2A> に使用される文字列値には、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] の仕様で定義されている、基になる[X:Name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)によって課せられるいくつかの制限があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-998">The string values used for <xref:System.Windows.FrameworkElement.Name%2A> have some restrictions, as imposed by the underlying [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specification.</span></span> <span data-ttu-id="6434d-999">特に、<xref:System.Windows.FrameworkElement.Name%2A> は文字またはアンダースコア (_) で始まり、アルファベット、数字、またはアンダースコアのみで構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-999">Most notably, a <xref:System.Windows.FrameworkElement.Name%2A> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</span></span> <span data-ttu-id="6434d-1000">詳細については、「 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1000">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="6434d-1001"><xref:System.Windows.FrameworkElement.Name%2A> は、アニメーション化できない (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> がメタデータに `true` される) 非常に少ない依存関係プロパティの1つです。これは、アニメーションを対象とするために名前自体が不可欠であるためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1001"><xref:System.Windows.FrameworkElement.Name%2A> is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation.</span></span> <span data-ttu-id="6434d-1002"><xref:System.Windows.FrameworkElement.Name%2A> のデータバインディングは技術的には可能ですが、データバインド <xref:System.Windows.FrameworkElement.Name%2A> は、コードビハインドの識別子接続ポイントを提供するために、プロパティの主な目的を果たすことができないため、非常に一般的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1002">Data binding a <xref:System.Windows.FrameworkElement.Name%2A> is technically possible, but is an extremely uncommon scenario because a data-bound <xref:System.Windows.FrameworkElement.Name%2A> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1003">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1003">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1004">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1004">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.NameProperty>|  
|<span data-ttu-id="6434d-1005">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1005">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1006">次の例では、<xref:System.Windows.FrameworkElement.Name%2A> プロパティをコードで設定し、<xref:System.Windows.FrameworkElement.RegisterName%2A>を呼び出すことによって、新しく作成された <xref:System.Windows.NameScope> に名前を登録します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1006">The following example sets the <xref:System.Windows.FrameworkElement.Name%2A> property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>.</span></span> <span data-ttu-id="6434d-1007">ここで説明する手法は、ストーリーボードを使用してアニメーション化するための要件です。これは、ストーリーボードが <xref:System.Windows.FrameworkElement.Name%2A>によってターゲットにする必要があり、オブジェクト参照の対象にすることができないためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1007">The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <xref:System.Windows.FrameworkElement.Name%2A>, and cannot be targeted by object reference.</span></span>  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1008"><see cref="P:System.Windows.FrameworkElement.Name" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1008">Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-1009">派生クラスでオーバーライドされると、アプリケーション コードまたは内部プロセスが <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> を呼び出すたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1009">When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1010">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1010">This method has no default implementation.</span></span>  
  
 <span data-ttu-id="6434d-1011">テンプレートは、要素に適用される <xref:System.Windows.Style> のテンプレートプロパティから取得される、要素の完了したビジュアルツリーのセクションです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1011">Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element.</span></span> <span data-ttu-id="6434d-1012">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1012">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1013"><see cref="T:System.Windows.FrameworkElement" /> の派生クラスでは、次のようなさまざまなシナリオで、このメソッドを通知として使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1013">Derived classes of <see cref="T:System.Windows.FrameworkElement" /> can use this method as a notification for a variety of possible scenarios:</span></span> 
<span data-ttu-id="6434d-1014">-要素のビジュアルツリーの残りの部分をビルドする独自のコードの実装を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1014">-   You can call your own implementation of code that builds the remainder of an element visual tree.</span></span>  
  
<span data-ttu-id="6434d-1015">-テンプレートから取得した名前付き要素への参照の取得など、テンプレートを適用したビジュアルツリーに依存するコードを実行できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1015">-   You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</span></span>  
  
<span data-ttu-id="6434d-1016">-テンプレートのビジュアルツリーが完成した後に存在するだけの意味のあるサービスを導入することができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1016">-   You can introduce services that only make sense to exist after the visual tree from templates is complete.</span></span>  
  
<span data-ttu-id="6434d-1017">-他の要因に依存するテンプレート内の要素の状態とプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1017">-   You can set states and properties of elements within the template that are dependent on other factors.</span></span> <span data-ttu-id="6434d-1018">たとえば、プロパティ値は、親要素を知っている場合、または特定の派生クラスで共通のテンプレートが使用されている場合にのみ検出できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1018">For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</span></span>  
  
<span data-ttu-id="6434d-1019">実装では、常に、独自の実装の前に基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1019">Implementers should always call the base implementation before their own implementation.</span></span> <span data-ttu-id="6434d-1020"><see cref="T:System.Windows.FrameworkElement" /> 自体には既定の実装はありませんが、介在するクラスが考えられます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1020"><see cref="T:System.Windows.FrameworkElement" /> itself has no default implementation, but intervening classes might.</span></span>  
  
 <span data-ttu-id="6434d-1021"><see cref="T:System.Windows.Controls.Control" /> には、<see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />と同様のオーバーライドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1021"><see cref="T:System.Windows.Controls.Control" /> offers a similar override, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1022">イベントに関するデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1022">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="6434d-1023">未処理の <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1023">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="6434d-1024">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1024">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1025">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1025">This method has no default implementation.</span></span> <span data-ttu-id="6434d-1026">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1026">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="6434d-1027">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。これは、インスタンスハンドラーではなくクラスハンドラーを使用して、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1027">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="6434d-1028">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1028">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6434d-1029">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントが、必ずしもハンドラーを呼び出す要素ではなく、子要素によって発生している可能性があるためです。そのため、実装では、イベント引数のソースプロパティを考慮に入れる必要があります (ほとんどの場合、イベントを再発生させない</span><span class="sxs-lookup"><span data-stu-id="6434d-1029">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="6434d-1030"><xref:System.Windows.FrameworkElement> のサブクラスでは、ルートでイベントを受信したときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1030">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="6434d-1031">考えられるシナリオの1つは、イベントの引数を受け取り、イベントを処理済みとして意図的にマークすることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1031">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1032">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1032">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6434d-1033">未処理の <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1033">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="6434d-1034">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1034">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1035">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1035">This method has no default implementation.</span></span> <span data-ttu-id="6434d-1036">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1036">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="6434d-1037">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。これは、インスタンスハンドラーではなくクラスハンドラーを使用して、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1037">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="6434d-1038">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1038">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6434d-1039">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントが、必ずしもハンドラーを呼び出す要素ではなく、子要素によって発生している可能性があるためです。そのため、実装では、イベント引数のソースプロパティを考慮に入れる必要があります (ほとんどの場合、イベントを再発生させない</span><span class="sxs-lookup"><span data-stu-id="6434d-1039">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="6434d-1040"><xref:System.Windows.FrameworkElement> のサブクラスでは、ルートでイベントを受信したときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1040">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="6434d-1041">考えられるシナリオの1つは、イベントの引数を受け取り、イベントを処理済みとして意図的にマークすることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1041">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1042">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1042">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6434d-1043">未処理の <see cref="E:System.Windows.UIElement.GotFocus" /> イベントが、その経路上でこの要素に到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1043">Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1044">基本要素によって公開されている他のいくつかのメソッドとは異なり、<xref:System.Windows.FrameworkElement.OnGotFocus%2A> には既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1044">Unlike some other On\* methods exposed by the base elements, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> does have a default implementation.</span></span> <span data-ttu-id="6434d-1045">具体的には、<xref:System.Windows.UIElement.OnGotFocus%2A>の基本要素の次のレベルで、null 実装をオーバーライドする実装があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1045">Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>.</span></span> <span data-ttu-id="6434d-1046">呼び出された場合、<xref:System.Windows.FrameworkElement.OnGotFocus%2A> は、キーボードフォーカスが原因で現在の要素からイベントが発生した場合に、この要素に適切なフォーカス動作を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1046">When invoked, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</span></span> <span data-ttu-id="6434d-1047"><xref:System.Windows.FrameworkElement.OnGotFocus%2A> ハンドラーは、フォーカスが現在の要素に設定されている場合でも、イベント引数を処理済みとしてマークしません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1047">The <xref:System.Windows.FrameworkElement.OnGotFocus%2A> handler does not mark the event arguments as handled, even when focus is set to the current element.</span></span> <span data-ttu-id="6434d-1048">イベントのソースが (現在の要素ではなく) ツリー内の別の要素であった場合、ハンドラーは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1048">If the event's source was another element in the tree (not the current element), the handler does nothing.</span></span>  
  
 <span data-ttu-id="6434d-1049">このメソッドは、要素の既定のフォーカス動作を変更するためにオーバーライドできます。ただし、この方法でフォーカス動作を変更すると、要素にフォーカスを設定することができないため、より適切に処理することができます (「<xref:System.Windows.UIElement.Focusable%2A>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1049">You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1050">引数で処理されるイベントをマークする場合は、要素ツリー内の他の親要素でのイベント処理の結果に注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1050">If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</span></span> <span data-ttu-id="6434d-1051">このハンドラーはバブルルーティングを使用するイベントで動作するため、イベント引数ごとに現在の <paramref name="sender" /> にフォーカスを設定することは適切ではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1051">Because this handler acts on an event with a bubbling routing, setting the focus to the current <paramref name="sender" /> per the event arguments may not be appropriate.</span></span> <span data-ttu-id="6434d-1052">フォーカスは、特定のコントロールの複合に応じて、複合子要素または親要素に移動する必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1052">Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</span></span> <span data-ttu-id="6434d-1053">したがって、フォーカスイベントを処理済みとしてマークすることが推奨されるのは、イベントがルーティングされるビジュアルツリー全体が、作成したコントロールの複合の一部である場合のみです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1053">Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1054">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1054">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6434d-1055"><see cref="E:System.Windows.FrameworkElement.Initialized" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1055">Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event.</span></span> <span data-ttu-id="6434d-1056">このメソッドは、<see cref="P:System.Windows.FrameworkElement.IsInitialized" /> が内部で <see langword="true" /> に設定されるたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1056">This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1057">この特定の On \* メソッドは、クラスハンドラーのフックではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1057">This particular On\* method is not a class handler hook.</span></span> <span data-ttu-id="6434d-1058">また、このメソッドは、確立された [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] の \* メソッド規則に厳密に従っていません。このメソッドをオーバーライドすることによって、このメソッドをオーバーライドし、基本実装を呼び出さずに、一致するイベントを抑制する</span><span class="sxs-lookup"><span data-stu-id="6434d-1058">Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] On\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</span></span>  
  
 <span data-ttu-id="6434d-1059"><xref:System.Windows.FrameworkElement.IsInitialized%2A> プロパティは読み取り専用なので、初期化動作を強制するように <xref:System.Windows.FrameworkElement.IsInitialized%2A> を設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1059">Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior.</span></span> <span data-ttu-id="6434d-1060">初期化状態の設定は、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework によってのみ実行されることを意図しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1060">Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1061">この仮想メソッドの既定の実装は、上で説明したようにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1061">The default implementation of this virtual method raises the event as described above.</span></span> <span data-ttu-id="6434d-1062">オーバーライドでは、この動作を保持するために基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1062">Overrides should call the base implementation to preserve this behavior.</span></span> <span data-ttu-id="6434d-1063">基本の実装を呼び出すことができない場合は、<see cref="T:System.Windows.FrameworkElement" /> 派生クラスの <see cref="E:System.Windows.FrameworkElement.Initialized" /> イベントが発生するだけでなく、この基本実装によって実装されている2つの重要なスタイルとテーマスタイルの初期化操作も抑制します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1063">If you fail to call the base implementation, not only will you not raise the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event as is generally expected of a <see cref="T:System.Windows.FrameworkElement" /> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1064">変更されたプロパティと、新旧の値を記述するイベント データ。</span><span class="sxs-lookup"><span data-stu-id="6434d-1064">The event data that describes the property that changed, as well as old and new values.</span></span></param>
        <summary><span data-ttu-id="6434d-1065">この <see cref="T:System.Windows.FrameworkElement" /> の依存関係プロパティの有効値が更新された場合に必ず呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1065">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated.</span></span> <span data-ttu-id="6434d-1066">変更が発生した特定の依存関係プロパティが引数パラメーターで報告されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1066">The specific dependency property that changed is reported in the arguments parameter.</span></span> <span data-ttu-id="6434d-1067"><see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1067">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1068">このメソッドは、一般的にプロパティの変更や無効化を検出するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1068">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="6434d-1069">プロパティの広範な分類に関する特定の情報がわかっている場合は、一般的な無効化パターンを変更することを意図しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1069">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="6434d-1070">このメソッドは、オブジェクトの有効期間中に何度も呼び出される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1070">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="6434d-1071">したがって、特定のプロパティのメタデータをオーバーライドし、個々のプロパティに <xref:System.Windows.CoerceValueCallback> または <xref:System.Windows.PropertyChangedCallback> 関数をアタッチすると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1071">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="6434d-1072">ただし、このメソッドは、<xref:System.Windows.FrameworkElement> に大量の値に関連する依存関係プロパティが含まれている場合、またはプロパティの無効化の複数の関連するケースに対して再実行する必要があるレンダリング動作などのロジックが含まれている場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1072">However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="6434d-1073">さまざまなクラスで使用できるシグネチャが異なる (パラメーターの型が <xref:System.ComponentModel.PropertyChangedEventArgs>) `OnPropertyChanged` メソッドが同じ名前であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1073">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="6434d-1074">この `OnPropertyChanged` は、データオブジェクトの通知に使用され、<xref:System.ComponentModel.INotifyPropertyChanged>のコントラクトに含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1074">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1075">実装の最初の操作として、常に基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1075">Always call the base implementation, as the first operation in your implementation.</span></span> <span data-ttu-id="6434d-1076">この操作を行わないと、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステム全体が大幅に無効になり、間違った値が報告されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1076">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</span></span> <span data-ttu-id="6434d-1077">また、特定の <see cref="T:System.Windows.FrameworkElement" /> 実装は、表示されるユーザーインターフェイスに影響を与えるさまざまなプロパティに対して適切な状態を維持する役割も担います。</span><span class="sxs-lookup"><span data-stu-id="6434d-1077">The specific <see cref="T:System.Windows.FrameworkElement" /> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</span></span> <span data-ttu-id="6434d-1078">これには、適切なタイミングでのスタイルの変更に基づいて、ビジュアルツリーを無効にすることが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1078">These include invalidating the visual tree based on changes to style at appropriate times.</span></span></para></block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo"><span data-ttu-id="6434d-1079">変更に関係する、古いサイズと新しいサイズの詳細。</span><span class="sxs-lookup"><span data-stu-id="6434d-1079">Details of the old and new size involved in the change.</span></span></param>
        <summary><span data-ttu-id="6434d-1080">指定した情報を最終的なイベント データの一部として使用して、<see cref="E:System.Windows.FrameworkElement.SizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1080">Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1081">このメソッドは、<xref:System.Windows.UIElement.OnRenderSizeChanged%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1081">This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>.</span></span> <span data-ttu-id="6434d-1082">このメソッドを呼び出すと、指定された引数の変更内容に応じて、<xref:System.Windows.FrameworkElement.ActualWidth%2A> プロパティ、<xref:System.Windows.FrameworkElement.ActualHeight%2A> プロパティ、またはその両方がリセットされ、常にイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1082">If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1083">一般的なレイアウトシナリオでは、このメソッドをオーバーライドしないでください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1083">Do not override this method for typical layout scenarios.</span></span> <span data-ttu-id="6434d-1084">レイアウトシステムは、考えられるすべてのレイアウトの配置および測定ケースが確実に考慮されるように、意図的に非同期で動作します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1084">The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</span></span> <span data-ttu-id="6434d-1085">レイアウトシステムオーバーライドメソッド <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> と <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> は通常、必要なレイアウトのカスタマイズには十分です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1085">The layout system override methods <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> are usually sufficient for any required layout customization.</span></span> <span data-ttu-id="6434d-1086"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> は仮想として公開されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1086"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> is exposed as a virtual.</span></span> <span data-ttu-id="6434d-1087"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> をオーバーライドして、入力イベントに関連する実行時の動作の変更と、応答の control 再合成との組み合わせによって、レイアウト情報が不正確になる可能性がある例外的なケースを修正できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1087">You can override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</span></span>  
  
<span data-ttu-id="6434d-1088">派生クラスでこのメソッドをオーバーライドすることもできます (プロテクトになっていますが、シールされていません)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1088">You may still override this method in derived classes (it is protected but not sealed).</span></span> <span data-ttu-id="6434d-1089">既定の WPF フレームワークレベルのレンダリング動作を無効にする特別な理由がない限り、常に基本実装を呼び出して、上記の動作を保持します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1089">Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</span></span> <span data-ttu-id="6434d-1090">標準の WPF フレームワークレベルレイアウトシステムの実装を使用している場合、<see cref="E:System.Windows.FrameworkElement.SizeChanged" /> イベントの発生に失敗すると、非標準のレイアウトの動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1090">Failing to raise the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle"><span data-ttu-id="6434d-1091">元のスタイル。</span><span class="sxs-lookup"><span data-stu-id="6434d-1091">The old style.</span></span></param>
        <param name="newStyle"><span data-ttu-id="6434d-1092">新しいスタイル。</span><span class="sxs-lookup"><span data-stu-id="6434d-1092">The new style.</span></span></param>
        <summary><span data-ttu-id="6434d-1093">この要素で使用されているスタイルが変更された場合に呼び出されます。スタイルが変更されるとレイアウトが無効になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1093">Invoked when the style in use on this element changes, which will invalidate the layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1094">このメソッドには、スタイル変更条件を示す内部フラグを設定する既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1094">This method has a default implementation that sets an internal flag that notes the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1095">通常、このメソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1095">You should not typically have to override this method.</span></span> <span data-ttu-id="6434d-1096">メジャーまたは整列の変更に関係するスタイルを変更した場合は、<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />、または既定の実装が一般的に実装されていることを前提として、既に別のレンダリングサイクルがトリガーされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1096">Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, or the defaults.</span></span> <span data-ttu-id="6434d-1097"><see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> のオーバーライドは、<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> の実装が意図的に最適化されているか、部分的な更新をサポートしていても、スタイルに変更を直接適用する必要がある場合に適しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1097">Overrides of <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> might be appropriate if your <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</span></span> <span data-ttu-id="6434d-1098">(部分更新では、複数のインクリメンタル呼び出しを <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> して、任意の子要素で <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1098">(The partial updates would be an attempt to avoid multiple incremental calls to <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> and <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on any child elements).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1099">イベントに関するデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1099">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="6434d-1100">未処理の <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1100">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="6434d-1101">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1101">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1102">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1102">This method has no default implementation.</span></span> <span data-ttu-id="6434d-1103">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1103">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="6434d-1104">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。これは、インスタンスハンドラーではなくクラスハンドラーを使用して、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1104">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="6434d-1105">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1105">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6434d-1106">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントが、必ずしもハンドラーを呼び出す要素ではなく、子要素によって発生している可能性があるためです。そのため、実装では、イベント引数のソースプロパティを考慮に入れる必要があります (ほとんどの場合、イベントを再発生させない</span><span class="sxs-lookup"><span data-stu-id="6434d-1106">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="6434d-1107"><xref:System.Windows.FrameworkElement> のサブクラスでは、ルートでイベントを受信したときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1107">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="6434d-1108">考えられるシナリオの1つは、イベントの引数を受け取り、イベントを処理済みとして意図的にマークすることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1108">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6434d-1109">イベントに関するデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1109">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="6434d-1110"><see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1110">Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="6434d-1111">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1111">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1112">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1112">This method has no default implementation.</span></span> <span data-ttu-id="6434d-1113">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1113">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="6434d-1114">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。これは、インスタンスハンドラーではなくクラスハンドラーを使用して、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1114">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="6434d-1115">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1115">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6434d-1116">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントが、必ずしもハンドラーを呼び出す要素ではなく、子要素によって発生している可能性があるためです。そのため、実装では、イベント引数のソースプロパティを考慮に入れる必要があります (ほとんどの場合、イベントを再発生させない</span><span class="sxs-lookup"><span data-stu-id="6434d-1116">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="6434d-1117"><xref:System.Windows.FrameworkElement> のサブクラスでは、ルートでイベントを受信したときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1117">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="6434d-1118">考えられるシナリオの1つは、イベントの引数を受け取り、そのイベントを処理済みとして意図的に設定して、ルートを短縮することです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1118">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="6434d-1119">前の親要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-1119">The old parent element.</span></span> <span data-ttu-id="6434d-1120">以前、要素にビジュアル親が存在していなかったことを示す <see langword="null" /> である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1120">May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</span></span></param>
        <summary><span data-ttu-id="6434d-1121">ビジュアル ツリー内のこの要素の親が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1121">Invoked when the parent of this element in the visual tree is changed.</span></span> <span data-ttu-id="6434d-1122"><see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1122">Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1123">ビジュアルツリーは、コレクションなどの視覚的に表示されない要素を省略し、テーマやスタイルの合成に基づいて一部の要素を展開するため、論理ツリーとは異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1123">The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</span></span> <span data-ttu-id="6434d-1124">詳細については、「[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1124">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1125">新しい親に対するこの仮想メソッドクエリの既定の実装では、さまざまな初期化イベントが発生し、必要に応じて <see cref="T:System.Windows.FrameworkElement" /> の初期化状態に関する内部フラグが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1125">The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <see cref="T:System.Windows.FrameworkElement" /> as appropriate.</span></span> <span data-ttu-id="6434d-1126">最後に、<see cref="T:System.Windows.UIElement" />によって宣言された一連の基本実装を呼び出し、<see cref="T:System.Windows.Media.Visual" />でそのベースを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1126">Finally, it calls the successive base implementations as declared by <see cref="T:System.Windows.UIElement" />, which in turn calls its base in <see cref="T:System.Windows.Media.Visual" />.</span></span> <span data-ttu-id="6434d-1127">常に基本実装を呼び出してこの動作を保持します。それ以外の場合は、別の要素の子として宣言されている場合、この要素の要素ツリーの動作が想定どおりでない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1127">Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</span></span>  
  
<span data-ttu-id="6434d-1128">いくつかの既存の [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] クラスは、このメソッドをオーバーライドします。たとえば、<see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />、<see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1128">A few existing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classes override this method, for example: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="6434d-1129">最も一般的なシナリオは、新しい親が特定の型であることを強制することです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1129">The most common scenario is to enforce that the new parent must be a particular type.</span></span> <span data-ttu-id="6434d-1130">これには、新しい親が型テストの何らかの方法で失敗した場合に、例外をスローすることが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1130">This might involve throwing an exception if the new parent failed some manner of type test.</span></span> <span data-ttu-id="6434d-1131">このシナリオの特化されたバージョンは、リスト項目およびメニュー項目の実装に存在します。これは、に格納する適切なコレクションを所有する親ビジュアルの外部では意味がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1131">A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</span></span> <span data-ttu-id="6434d-1132">これらのケースでは必ずしも例外が発生するとは限りません。これは、"regular" 親が一時的でない親要素に依存するデザイナーシナリオがある可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1132">Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</span></span>  
  
<span data-ttu-id="6434d-1133">このメソッドは、通常はルート要素である特定の要素 (<see cref="T:System.Windows.Window" />など) でもオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1133">This method is also overridden in certain elements that are typically the root element, such as  <see cref="T:System.Windows.Window" />.</span></span> <span data-ttu-id="6434d-1134">もう1つのケースは、マークアップの明らかなルート要素であり、コンパイルされた論理ツリー (<see cref="T:System.Windows.Controls.Page" />など) でより多くのインフラストラクチャを自動生成する要素です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1134">Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <see cref="T:System.Windows.Controls.Page" />).</span></span> <span data-ttu-id="6434d-1135"><see cref="T:System.Windows.Window" /> と <see cref="T:System.Windows.Controls.Page" /> の実装は、メソッドを意図的に封印します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1135">The <see cref="T:System.Windows.Window" /> and <see cref="T:System.Windows.Controls.Page" /> implementations deliberately seal the method.</span></span></para></block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1136">この要素に、テーマのスタイルのスタイル プロパティが含まれるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1136">Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</span></span></summary>
        <value><span data-ttu-id="6434d-1137">この要素がテーマ スタイル プロパティを使用しない場合は <see langword="true" /> (スタイルが生成するすべてのプロパティは、ローカルのアプリケーション スタイルに起因するため、テーマ スタイル プロパティは適用されません)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1137"><see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span></span> <span data-ttu-id="6434d-1138">まずアプリケーション スタイルを適用してから、アプリケーション スタイルで明確に設定されなかったプロパティに対してテーマ スタイルを適用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1138"><see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span></span> <span data-ttu-id="6434d-1139">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1139">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1140">このプロパティの最も一般的な使用方法は、テーマスタイルを提供するスタイルの setter 内での間接的な使用です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1140">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6434d-1141">コントロールで <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> を `true` に設定した場合は、テーマスタイルによって提供される既定のコントロールテンプレートが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1141">If you set <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> to `true` on a control, you will be suppressing the default control template supplied by the theme styles.</span></span> <span data-ttu-id="6434d-1142">このコントロールテンプレートには、通常、コントロールの基本的な [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 機能と視覚エフェクトを提供するコンテンツプレゼンターとその他の複合要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1142">That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] functionality and visualization for the control.</span></span> <span data-ttu-id="6434d-1143">コントロールで、既定のテーマスタイルと同じ機能を引き続きサポートする場合は、同じ構造体をレプリケートするコントロールテンプレートを使用して、代替スタイルを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1143">If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</span></span> <span data-ttu-id="6434d-1144">詳しくは、「[コントロールの作成の概要](~/docs/framework/wpf/controls/control-authoring-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1144">For more information, see [Control Authoring Overview](~/docs/framework/wpf/controls/control-authoring-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1145">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1145">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1146">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1146">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="6434d-1147">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1147">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1148"><see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1148">Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1149">この要素の論理上の親要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1149">Gets the logical parent  element of this element.</span></span></summary>
        <value><span data-ttu-id="6434d-1150">この要素の論理上の親。</span><span class="sxs-lookup"><span data-stu-id="6434d-1150">This element's logical parent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1151"><xref:System.Windows.FrameworkElement.Parent%2A> は、要素がインスタンス化されていても、最終的にページレベルのルート要素またはアプリケーションオブジェクトに接続する論理ツリーにアタッチされていない場合に `null` できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1151"><xref:System.Windows.FrameworkElement.Parent%2A> may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</span></span>  
  
 <span data-ttu-id="6434d-1152">要素の論理上の親は、アプリケーションの機能によって変わる可能性があります。このプロパティの値を維持しても、その変更は反映されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1152">Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="6434d-1153">通常は、必要な値をすぐに取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1153">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="6434d-1154">論理ツリーの走査の詳細と、親要素の検出の手法として <xref:System.Windows.FrameworkElement.Parent%2A> を使用するシナリオについては、「 [WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md) 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1154">See [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) for more information about logical tree  traversal, and the scenarios where using  <xref:System.Windows.FrameworkElement.Parent%2A> as a technique of parent element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="6434d-1155">プロパティエンジンは、親のときに、要素のすべてのプロパティ値を再計算する可能性があります。これは、一部のプロパティが論理ツリーを通じて値を継承するためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1155">The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="6434d-1156">バインドに適用される <xref:System.Windows.FrameworkElement.DataContext%2A> は、要素が親されたときにも変更できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1156">The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="6434d-1157">通常、要素の親を変更するには、専用の add メソッドまたは remove メソッドを使用するか、要素のコンテンツプロパティを設定することによって、コレクションの操作を行います。</span><span class="sxs-lookup"><span data-stu-id="6434d-1157">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="6434d-1158"><xref:System.Windows.FrameworkElement.Parent%2A> プロパティを使用する最も一般的なシナリオは、参照を取得し、親からさまざまな <xref:System.Windows.FrameworkElement> プロパティ値を取得することです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1158">The most typical scenario for using the <xref:System.Windows.FrameworkElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent.</span></span> <span data-ttu-id="6434d-1159">テンプレートの場合は、最終的にテンプレートの <xref:System.Windows.FrameworkElement.Parent%2A> が `null`されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1159">For templates, the <xref:System.Windows.FrameworkElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="6434d-1160">この点を超えて、テンプレートが実際に適用される論理ツリーに拡張するには、<xref:System.Windows.FrameworkElement.TemplatedParent%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1160">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.</span></span>  
  
 <span data-ttu-id="6434d-1161">このプロパティは、論理ツリーの親とは異なる場合に、ビジュアルツリーの親を報告しないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1161">Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</span></span> <span data-ttu-id="6434d-1162">一般的なアプリケーションの場合、ビジュアルツリーの親は通常は重要ではありませんが、特定のビジュアルレベルのケースに必要な親要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1162">Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</span></span> <span data-ttu-id="6434d-1163">[https://docs.microsoft.com/azure/active-directory/develop/scenario-protected-web-api-overview](<xref:System.Windows.Media.VisualTreeHelper>) をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1163">See <xref:System.Windows.Media.VisualTreeHelper>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1164">次の例では、要素の親を確認し、親のプロパティ値を使用して、一致する子要素のプロパティを設定するコードを示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1164">The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</span></span> <span data-ttu-id="6434d-1165">この場合、表示サイズに影響するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1165">In this case these are properties that affect the rendering size.</span></span>  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="6434d-1166">変更を報告している子要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-1166">The child element reporting the change.</span></span></param>
        <summary><span data-ttu-id="6434d-1167"><see cref="T:System.Windows.FrameworkElement" /> の特殊化されたサブクラスでインクリメンタル レイアウトの実装をサポートします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1167">Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />.</span></span> <span data-ttu-id="6434d-1168">レイアウト中に親のメジャーまたは整列パスに影響を与えるものとしてメタデータ内でマークされているプロパティを子要素が無効にすると、<see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1168"><see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1169">この要素に、いくつかのプロパティが無効にされた子要素があり、プロパティが <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> としてマークされているか、登録時にプロパティメタデータに <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> た場合、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1169">If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked.</span></span> <span data-ttu-id="6434d-1170">この要素でレイアウトの部分的な (増分) 更新がサポートされている場合、メソッドの呼び出しは親要素に対して、特定の子要素を再測定する必要があることを通知します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1170">The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</span></span>  
  
 <span data-ttu-id="6434d-1171">既定では、<xref:System.Windows.FrameworkElement> は増分レイアウトをサポートしておらず、<xref:System.Windows.FrameworkElement> クラスでは、このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1171">By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation.</span></span> <span data-ttu-id="6434d-1172">既定のレイアウトシステムの動作を変更する必要があるため、このメソッドをオーバーライドする必要があるというシナリオは一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1172">The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</span></span>  
  
 <span data-ttu-id="6434d-1173">実装シナリオの例としては、WPF フレームワークレベルのレイアウトシステムよりも制限の厳しい子要素に対して、クラスに型の制限がある場合が考えられます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1173">An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</span></span> <span data-ttu-id="6434d-1174">これらのカスタム要素の性質により、カスタムレイアウト動作を実装すると、プロパティの変更が意図的に遅延される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1174">Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</span></span> <span data-ttu-id="6434d-1175">たとえば、measure/arrange メソッドのオーバーライドでは、子要素の描画パスを最適化しようとしますが、通常は別のレイアウトパスになるような特定の種類の変更に対して遅延が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1175">For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="6434d-1176">予想されるフォーカスの変更を決定する方向。</span><span class="sxs-lookup"><span data-stu-id="6434d-1176">The direction for which a prospective focus change should be determined.</span></span></param>
        <summary><span data-ttu-id="6434d-1177">この要素を基準に、指定したフォーカスの移動方向で次にフォーカスを受け取る要素を特定します。ただし、実際のフォーカスの移動は行われません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1177">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span></span></summary>
        <returns><span data-ttu-id="6434d-1178">フォーカスが実際にスキャンされた場合にフォーカスの移動先となる、次の要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-1178">The next element that focus would move to if focus were actually traversed.</span></span> <span data-ttu-id="6434d-1179">この要素を基準に、指定した方向へフォーカスを移動できない場合は、<see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1179">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1180"><xref:System.Windows.FrameworkElement.MoveFocus%2A> は、実際にフォーカスを移動する関連のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1180"><xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1181">次の例では、いくつかのボタン入力を処理するハンドラーを実装します。各ボタンは、可能な <xref:System.Windows.Input.FocusNavigationDirection>を表します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1181">The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="6434d-1182">ハンドラーは、現在のキーボードフォーカスを持つ要素を追跡し、その要素に対して <xref:System.Windows.FrameworkElement.PredictFocus%2A> を呼び出し、指定された <xref:System.Windows.Input.TraversalRequest> 型パラメーターの初期化として適切な <xref:System.Windows.Input.FocusNavigationDirection> を指定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1182">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.PredictFocus%2A> on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span> <span data-ttu-id="6434d-1183">この要素に移動するのではなく、<xref:System.Windows.FrameworkElement.MoveFocus%2A> のように、ハンドラーは視覚化を目的として予測されたフォーカス先の物理寸法を変更します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1183">Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</span></span>  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="6434d-1184"><see cref="T:System.Windows.Input.TraversalRequest" /> に、<see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.First" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /> のいずれかの方向が指定されました。</span><span class="sxs-lookup"><span data-stu-id="6434d-1184">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span></span> <span data-ttu-id="6434d-1185">これらの方向は、<see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> に対しては有効ではありません (<see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> に対しては有効です)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1185">These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6434d-1186">指定した名前オブジェクトの割り当てに使用する名前。</span><span class="sxs-lookup"><span data-stu-id="6434d-1186">Name to use for the specified name-object mapping.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="6434d-1187">割り当て対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6434d-1187">Object for the mapping.</span></span></param>
        <summary><span data-ttu-id="6434d-1188"><see cref="T:System.Windows.NameScope" /> の登録メソッドへのアクセスを簡略化するアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1188">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1189">このメソッドは、<xref:System.Windows.NameScope.RegisterName%2A>を呼び出すための便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1189">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="6434d-1190">実装では、適用可能な <xref:System.Windows.NameScope> 実装が見つかるまで、連続する親要素がチェックされます。この実装は、<xref:System.Windows.Markup.INameScope>を実装する要素を検索することによって検出されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1190">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="6434d-1191">名前スコープの詳細については、「 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1191">For more information about namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="6434d-1192">コードで作成されたアプリケーションのアニメーションストーリーボードを正しくフックするには、<xref:System.Windows.FrameworkElement.RegisterName%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1192">Calling <xref:System.Windows.FrameworkElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="6434d-1193">これは、キーストーリーボードのプロパティの1つである <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>は、ターゲット要素への参照を取得するのではなく、実行時の名前参照を使用するためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1193">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="6434d-1194">これは、コードから参照によってその要素にアクセスできる場合でも同様です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1194">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="6434d-1195">ストーリーボードターゲットの名前を登録する必要がある理由の詳細については、「[ストーリーボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1195">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="6434d-1196">削除する要素です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1196">The element to remove.</span></span></param>
        <summary><span data-ttu-id="6434d-1197">指定されたオブジェクトをこの要素の論理ツリーから削除します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1197">Removes the provided object from this element's logical tree.</span></span> <span data-ttu-id="6434d-1198"><see cref="T:System.Windows.FrameworkElement" /> は、この削除との同期を維持するために影響を受ける論理ツリーの親ポインターを更新します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1198"><see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1199">このメソッドは、要素の論理的な子を表すオブジェクトのコレクションの実装に使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1199">Use this method for the implementation of collections on objects that represent logical children of an element.</span></span> <span data-ttu-id="6434d-1200">これは、プロパティの getter または setter、`Changed` イベントのクラスハンドラー、コンストラクター、またはコレクション型自体で行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1200">This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="6434d-1201">コントロールの作成者は、指定された基本コントロールクラスのコンテンツモデルが適切でない場合を除き、このレベルで論理ツリーを操作することは推奨されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1201">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</span></span> <span data-ttu-id="6434d-1202"><xref:System.Windows.Controls.ContentControl>、<xref:System.Windows.Controls.ItemsControl>、および <xref:System.Windows.Controls.HeaderedItemsControl>のレベルでサブクラス化することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1202">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="6434d-1203">これらのクラスは、専用の Api を使用して論理的な子の適用を特定するコンテンツモデルを提供します。また、テンプレートを使用したスタイル設定などの [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 制御で通常は望ましい他の機能をサポートします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1203">These classes provide a content model with particular enforcement of logical children through dedicated APIs, as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1204">次の例では、独自のビジュアル層実装を行うカスタム <xref:System.Windows.FrameworkElement> の `Child` プロパティを実装しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1204">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="6434d-1205">プロパティの setter は、値が変更された場合に、クラス固有のビジュアルコレクションだけでなく、論理ツリーから古い値が削除されるように設計されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1205">The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="6434d-1206">値がキャッシュされた後、新しい値が標準の WPF フレームワークレベルの論理ツリーとカスタムビジュアルコレクションの両方に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1206">The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1207">この要素で <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> が呼び出されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1207">Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1208">このイベントは、<xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントを発生させる要素がスクロール可能な領域内に表示される必要があることを親 <xref:System.Windows.Controls.ScrollViewer> (または派生クラス) に示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1208">This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event should be made visible within the scrollable region.</span></span> <span data-ttu-id="6434d-1209"><xref:System.Windows.Controls.ScrollViewer> は、イベントのクラス処理を使用して、<xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1209">The <xref:System.Windows.Controls.ScrollViewer> will then mark the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event as handled, by using class handling of the event.</span></span> <span data-ttu-id="6434d-1210">一般に <xref:System.Windows.FrameworkElement.RequestBringIntoView> イベントデータは、スクロール領域を制御するクラス、または任意のインスタンスハンドラーによって処理されるようにマークすることはできません。これにより、<xref:System.Windows.FrameworkElement.BringIntoView%2A>を呼び出した要素の目的が妨げられる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1210">In general <xref:System.Windows.FrameworkElement.RequestBringIntoView> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.</span></span>  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-1211">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1211">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1212">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1212">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|<span data-ttu-id="6434d-1213">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-1213">Routing strategy</span></span>|<span data-ttu-id="6434d-1214">バブリング</span><span class="sxs-lookup"><span data-stu-id="6434d-1214">Bubbling</span></span>|  
|<span data-ttu-id="6434d-1215">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-1215">Delegate</span></span>|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1216"><see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1216">Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1217">ローカルで定義されたリソース ディクショナリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1217">Gets or sets the locally-defined resource dictionary.</span></span></summary>
        <value><span data-ttu-id="6434d-1218">ローカルで定義された現在のリソース ディクショナリ。各リソースにはキーでアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1218">The current locally-defined dictionary of resources, where each resource can be accessed by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1219">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] で完全または部分的に定義できるリソースディクショナリは、通常、プロパティ要素として作成され、通常は個々のページまたはアプリケーションのルート要素にあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1219">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="6434d-1220">リソースディクショナリをこのレベルに配置すると、ページ内の個々の子要素 (または、アプリケーションケースでは任意のページ) から簡単に検索できるようになります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1220">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="6434d-1221">ほとんどのアプリケーションシナリオでは、スタイルをリソースディクショナリ内のオブジェクト要素として定義するか、または外部リソースとして定義して、スタイルリソース全体を自己完結させることをお勧めします (この方法を使用すると、編集が必要な物理ファイルを分離することによって、開発者の責任からデザイナーの役割を分離</span><span class="sxs-lookup"><span data-stu-id="6434d-1221">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="6434d-1222">このプロパティは、その要素内で直接宣言されたリソースディクショナリだけを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1222">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="6434d-1223">これは、実際のリソース参照プロセスとは異なります。子要素は、各親要素で定義されている任意のリソースにアクセスして、再帰的に検索します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1223">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="6434d-1224">リソースは、コレクション内のコードによって参照することもできますが、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] で作成されたリソースは、ディクショナリを宣言する要素によって <xref:System.Windows.FrameworkElement.Loaded> が発生するまで確実にアクセスできないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1224">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="6434d-1225">実際、リソースは、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 定義されたリソースを参照できる保証であることを <xref:System.Windows.FrameworkElement.Loaded> イベントではなく、非同期的に解析されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1225">In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="6434d-1226">このため、一般に、実行時コードの一部として [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 定義されたリソースにのみアクセスするか、または属性値に対するスタイルやリソース拡張機能の参照などの他の [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 手法を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1226">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="6434d-1227">コードを使用してリソースにアクセスする場合は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]から作成された[Dynamicresource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)参照と基本的に同じです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1227">When you access resources through code, it is essentially equivalent to a [DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="6434d-1228">基になる <xref:System.Windows.ResourceDictionary> は、コードを使用して、コレクション内のリソースの追加、削除、またはクエリを実行するために必要なメソッドをサポートします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1228">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code.</span></span> <span data-ttu-id="6434d-1229"><xref:System.Windows.FrameworkElement.Resources%2A> プロパティは、要素のリソースコレクションを新しいまたは別の <xref:System.Windows.ResourceDictionary>として完全に置き換えるシナリオをサポートするために設定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1229">The <xref:System.Windows.FrameworkElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="6434d-1230">表示される [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文には、<xref:System.Windows.ResourceDictionary>の要素が含まれていないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1230">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="6434d-1231">これは、暗黙的なコレクション構文の例です。コレクション要素を表すタグを省略できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1231">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="6434d-1232">コレクションに項目として追加された要素が代わりに指定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1232">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="6434d-1233">暗黙のコレクションと [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]の詳細については、「 [XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1233">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span> <span data-ttu-id="6434d-1234"><xref:System.Windows.ResourceDictionary> が要素として明示的に指定されている場合、マージされたディクショナリを導入すると、その <xref:System.Windows.ResourceDictionary>の子要素は通常ありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1234">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="6434d-1235">詳細については、「マージされた[リソースディクショナリ](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1235">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-1236">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1236">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-1237">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-1237">XAML Values</span></span>  
 <span data-ttu-id="6434d-1238">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="6434d-1238">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="6434d-1239">1つ以上のオブジェクト要素。それぞれがリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1239">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="6434d-1240">各 <xref:System.Windows.ResourceDictionary> 内の各リソースプロパティ要素には、<xref:System.Windows.ResourceDictionary>から値を取得するときに一意のキーとして機能する、 [X:Key ディレクティブ](~/docs/framework/xaml-services/x-key-directive.md)に対して一意の値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1240">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/docs/framework/xaml-services/x-key-directive.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
        <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248"><span data-ttu-id="6434d-1241">x:Key 属性</span><span class="sxs-lookup"><span data-stu-id="6434d-1241">x:Key Attribute</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6434d-1242">指定した依存関係プロパティのためのバインディングをこの要素に添付します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1242">Attaches a binding to this element for the specified dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6434d-1243">バインディングを確立する必要がある対象のプロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1243">Identifies the destination property where the binding should be established.</span></span></param>
        <param name="path"><span data-ttu-id="6434d-1244">ソース プロパティ名、またはバインドに使用されているプロパティへのパス。</span><span class="sxs-lookup"><span data-stu-id="6434d-1244">The source property name or the path to the property used for the binding.</span></span></param>
        <summary><span data-ttu-id="6434d-1245">指定したソース プロパティ名をデータ ソースへのパスの修飾として使用して、この要素にバインディングを添付します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1245">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span></span></summary>
        <returns><span data-ttu-id="6434d-1246">バインドの条件を記録します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1246">Records the conditions of the binding.</span></span> <span data-ttu-id="6434d-1247">この戻り値は、エラーをチェックするために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1247">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1248">このメソッドは、現在のインスタンスを <xref:System.Windows.DependencyObject>として渡し、指定された `path` パラメーターに基づいて新しい <xref:System.Windows.Data.Binding> を作成する <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>を呼び出すための便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1248">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="6434d-1249">この署名は、単純な既定のバインドを確立する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1249">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="6434d-1250">バインドプロパティを既定以外の条件に指定する必要がある場合、または <xref:System.Windows.Data.MultiBinding> または <xref:System.Windows.Data.PriorityBinding>を使用する場合は、<xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> シグネチャを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1250">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1251">次の例では、特定のパスを使用してバインディングを設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1251">The following example sets a binding using a specific path.</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6434d-1252">バインドを確立する必要があるプロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1252">Identifies the property where the binding should be established.</span></span></param>
        <param name="binding"><span data-ttu-id="6434d-1253">データ バインディングの詳細を表します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1253">Represents the specifics of the data binding.</span></span></param>
        <summary><span data-ttu-id="6434d-1254">指定したバインディング オブジェクトに基づいて、この要素にバインドをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1254">Attaches a binding to this element, based on the provided binding object.</span></span></summary>
        <returns><span data-ttu-id="6434d-1255">バインドの条件を記録します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1255">Records the conditions of the binding.</span></span> <span data-ttu-id="6434d-1256">この戻り値は、エラーをチェックするために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1256">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1257">このメソッドは、現在のインスタンスを <xref:System.Windows.DependencyObject>として渡す <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>を呼び出すための便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1257">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="6434d-1258">フロー方向を指定する要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-1258">The element that specifies a flow direction.</span></span></param>
        <param name="value"><span data-ttu-id="6434d-1259">方向を指定する列挙値。</span><span class="sxs-lookup"><span data-stu-id="6434d-1259">A value of the enumeration, specifying the direction.</span></span></param>
        <summary><span data-ttu-id="6434d-1260">指定された要素の <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 添付プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1260">Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1261">このメソッドは、<xref:System.Windows.FrameworkElement.FlowDirection%2A> プロパティの添付プロパティ構文をサポートしているため、指定された <xref:System.Windows.FrameworkElement> の子要素は、親要素内の配置のフロー方向を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1261">This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="6434d-1262">現在の <xref:System.Windows.FrameworkElement>に値を設定するには、直接 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] アクセサー <xref:System.Windows.FrameworkElement.FlowDirection%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1262">To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6434d-1263">リソースのバインド先のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="6434d-1263">The property to which the resource is bound.</span></span></param>
        <param name="name"><span data-ttu-id="6434d-1264">リソースの名前。</span><span class="sxs-lookup"><span data-stu-id="6434d-1264">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="6434d-1265">指定した名前のリソースを検索し、指定したプロパティにそのリソースへのリソース参照を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1265">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1266">リソース参照は、マークアップで[Dynamicresource マークアップ拡張機能](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)を使用する場合と似ています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1266">A resource reference is similar to the use of a [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) in markup.</span></span> <span data-ttu-id="6434d-1267">リソース参照は、指定されたプロパティの値を実行時の遅延ベースで提供する内部式を作成します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1267">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="6434d-1268">式は、リソースディクショナリが内部イベントによって変更された値を示した場合、または現在の要素が親された場合 (親の変更によって辞書参照パスが変更される場合) は常に再評価されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1268">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-1269">シリアル化プロセスが、<see cref="P:System.Windows.FrameworkElement.Resources" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1269">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</span></span></summary>
        <returns><span data-ttu-id="6434d-1270"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkElement.Resources" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1270"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1271">ローカル <xref:System.Windows.FrameworkElement.Resources%2A>にキー付きリソースが少なくとも1つ存在する限り、`true` が返されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1271">This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-1272">シリアル化プロセスが、<see cref="P:System.Windows.FrameworkElement.Style" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1272">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</span></span></summary>
        <returns><span data-ttu-id="6434d-1273"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkElement.Style" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1273"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1274"><xref:System.Windows.Style> がローカルに設定されている場合は、`true` が返されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1274">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-1275">シリアル化プロセスが、<see cref="P:System.Windows.FrameworkElement.Triggers" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1275">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</span></span></summary>
        <returns><span data-ttu-id="6434d-1276"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkElement.Triggers" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1276"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1277">このメソッドは、<xref:System.Windows.FrameworkElement.Triggers%2A> プロパティがローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1277">This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1278">この要素の <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> プロパティまたは <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> プロパティの値が変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1278">Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1279">ダイレクトルーティングイベントはルートに従わないので、これらのイベントは、発生したものと同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1279">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="6434d-1280">直接ルーティングイベントでは、他のルーティングイベントの動作がサポートされます。これらは、アクセス可能なハンドラーコレクションをサポートし、スタイルの <xref:System.Windows.EventTrigger> として使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1280">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="6434d-1281">レイアウトシステムは、このイベントの <xref:System.Windows.SizeChangedEventArgs> argument クラス内のプロパティを読み取り、報告されたサイズ変更を有意と見なす必要があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1281">The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant.</span></span> <span data-ttu-id="6434d-1282">これにより、レイアウトシステムまたはコントロール固有のレイアウト実装で、古い高さ値と新しい高さ値の間で視覚的になるべくの違いによってレイアウトの変更が強制されないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1282">This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</span></span> <span data-ttu-id="6434d-1283">なるべくの違いは、浮動小数点データ型の丸め処理または計算結果の計算が原因である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1283">The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</span></span>  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-1284">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1284">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1285">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1285">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|<span data-ttu-id="6434d-1286">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-1286">Routing strategy</span></span>|<span data-ttu-id="6434d-1287">直接</span><span class="sxs-lookup"><span data-stu-id="6434d-1287">Direct</span></span>|  
|<span data-ttu-id="6434d-1288">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-1288">Delegate</span></span>|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1289"><see cref="E:System.Windows.FrameworkElement.SizeChanged" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1289">Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1290">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1290">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-1291">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1291">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-1292">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1292">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-1293">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1293">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-1294">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1294">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1295">この要素の既存のプロパティ バインディングのソース値が変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1295">Occurs when the source value changes for any existing property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1296">このイベントは、この要素に関連付けられている <xref:System.Windows.Data.Binding> によって発生する <xref:System.Windows.Data.Binding.SourceUpdated> イベントのエイリアスを作成します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1296">This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-1297">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1297">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1298">この要素が使用するスタイルを、表示されるときに取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1298">Gets or sets the style used by this element when it is rendered.</span></span></summary>
        <value><span data-ttu-id="6434d-1299">要素に適用される既定以外のスタイル (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1299">The applied, nondefault style for the element, if present.</span></span> <span data-ttu-id="6434d-1300">それ以外の場合は、<see langword="null" /> になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1300">Otherwise, <see langword="null" />.</span></span> <span data-ttu-id="6434d-1301">既定で構築された <see cref="T:System.Windows.FrameworkElement" /> の既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1301">The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1302">コントロールの場合、現在のスタイルは、コントロールのテーマからの既定のスタイル、またはページレベルまたはアプリケーションレベルのリソースによってその型のコントロールに一般的に適用されるスタイル (暗黙的なスタイル) によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1302">For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="6434d-1303">このプロパティは、既定 (テーマ) のスタイルを設定または返しませんが、暗黙的なスタイルまたは要素に対して動作する明示的なスタイルのいずれかを返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1303">This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</span></span> <span data-ttu-id="6434d-1304">暗黙的または明示的なスタイルの場合、スタイルがリソースとして指定されているか、ローカルに定義されているかは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1304">In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="6434d-1305">スタイルの設定にはいくつかの制限があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1305">Setting the styles has some restrictions.</span></span> <span data-ttu-id="6434d-1306"><xref:System.Windows.FrameworkElement.Style%2A> のプロパティ全体を、いつでも新しい <xref:System.Windows.Style> にリセットできます。これにより、レイアウト再合成が強制的に適用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1306">You can reset the entire <xref:System.Windows.FrameworkElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="6434d-1307">ただし、読み込まれた要素によってそのスタイルが使用されるとすぐに、<xref:System.Windows.Style> が sealed と見なされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1307">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="6434d-1308">使用中のスタイル (<xref:System.Windows.Style.Setters%2A>のコレクション内にあるものなど) の個々のプロパティを変更しようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1308">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="6434d-1309">マークアップで定義されたスタイルは、リソースディクショナリ (リソースの場合) から読み込まれたとき、またはそれが含まれているページが読み込まれるとすぐに使用中と見なされます (インラインスタイルの場合)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1309">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="6434d-1310"><xref:System.Windows.FrameworkElement.Style%2A> は、特殊な優先順位を持つ依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1310"><xref:System.Windows.FrameworkElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="6434d-1311">ローカルで設定されたスタイルは、一般に、プロパティシステムで最も優先順位が高いものになります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1311">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="6434d-1312">この時点で <xref:System.Windows.FrameworkElement.Style%2A> が null の場合、プロパティシステムの読み込み中に、その型を指定するローカルリソースまたはアプリケーションリソースの暗黙的なスタイルを確認します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1312">If the <xref:System.Windows.FrameworkElement.Style%2A> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</span></span> <span data-ttu-id="6434d-1313">この手順の後でスタイルが null の場合は、通常、プレゼンテーション目的で動作するスタイルは既定 (テーマ) のスタイルから取得されますが、<xref:System.Windows.FrameworkElement.Style%2A> のプロパティ値では既定のスタイルは返されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1313">If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkElement.Style%2A> property value.</span></span> <span data-ttu-id="6434d-1314">「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」 [、「スタイルとテンプレート」を](~/docs/framework/wpf/controls/styling-and-templating.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1314">See [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) or [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-1315">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1315">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-1316">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1316">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-1317">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-1317">XAML Values</span></span>  
 <span data-ttu-id="6434d-1318">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="6434d-1318">*resourceExtension*</span></span>  
 <span data-ttu-id="6434d-1319">次のいずれか:、または。</span><span class="sxs-lookup"><span data-stu-id="6434d-1319">One of the following: , or .</span></span> <span data-ttu-id="6434d-1320">「 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1320">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="6434d-1321">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="6434d-1321">*styleResourceKey*</span></span>  
 <span data-ttu-id="6434d-1322">要求されているスタイルを識別するキー。</span><span class="sxs-lookup"><span data-stu-id="6434d-1322">The key that identifies the style being requested.</span></span> <span data-ttu-id="6434d-1323">キーは、<xref:System.Windows.ResourceDictionary>内の既存のリソースを参照します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1323">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6434d-1324">Property 要素の構文は技術的には可能ですが、ほとんどのスタイルのシナリオでは推奨されません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1324">Property element syntax is technically possible, but not recommended for most style scenarios.</span></span> <span data-ttu-id="6434d-1325">「[インラインスタイルとテンプレート」を](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1325">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="6434d-1326">[TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md)または <xref:System.Windows.Data.Binding> を使用したバインディング参照も可能ですが、一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1326">A binding reference using [TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1327">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1327">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1328">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1328">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|<span data-ttu-id="6434d-1329">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1329">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1330">次の例では、リソースディクショナリでスタイルを定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1330">The following example defines a style in a resource dictionary.</span></span>  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1331"><see cref="P:System.Windows.FrameworkElement.Style" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1331">Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool&#xA;override this.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool" Usage="frameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6434d-1332">要求されたアンビエント プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="6434d-1332">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="6434d-1333">このメンバーの説明については、<see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> メソッドのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1333">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="6434d-1334"><see langword="true" /> を使用できる場合は <paramref name="propertyName" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1334"><see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1335">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1335">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6434d-1336">これは、<xref:System.Windows.FrameworkElement> のインスタンスが <xref:System.Windows.Markup.IQueryAmbient> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1336">It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1337">この要素に関するユーザー定義情報の格納に使用できる任意のオブジェクト値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1337">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span></span></summary>
        <value><span data-ttu-id="6434d-1338">任意の値。</span><span class="sxs-lookup"><span data-stu-id="6434d-1338">The intended value.</span></span> <span data-ttu-id="6434d-1339">このプロパティに既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1339">This property has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1340">このプロパティは、Visual Basic for Applications や Windows フォームなど、他の Microsoft プログラミングモデルのタグプロパティに似ています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1340">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="6434d-1341"><xref:System.Windows.FrameworkElement.Tag%2A> は、既存のプロパティの場所を提供することを目的としています。この場所には、要素をサブクラス化する必要なく、任意の <xref:System.Windows.FrameworkElement> に関する基本的なカスタム情報を格納できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1341"><xref:System.Windows.FrameworkElement.Tag%2A> is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.</span></span>  
  
 <span data-ttu-id="6434d-1342">このプロパティはオブジェクトを取得するため、XAML の <xref:System.Windows.FrameworkElement.Tag%2A> プロパティを、既知の組み込み型コンバーター (文字列など) を持つオブジェクト以外のものに設定するには、プロパティ要素の使用法を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1342">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="6434d-1343">この方法で使用されるオブジェクトは、通常、標準の WPF 名前空間内にはないため、XAML 要素として導入されるためには、外部名前空間への名前空間マッピングが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1343">Objects used in this manner are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span> <span data-ttu-id="6434d-1344">詳細については、「 [WPF xaml および xaml の Xaml 名前空間と名前空間の割り当て](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)」および「 [Wpf のカスタムクラス](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1344">For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) and [XAML and Custom Classes for WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1345">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1345">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1346">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1346">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.TagProperty>|  
|<span data-ttu-id="6434d-1347">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1347">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-1348">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-1348">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1349"><see cref="P:System.Windows.FrameworkElement.Tag" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1349">Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1350">この要素のプロパティ バインディングのターゲット値が変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1350">Occurs when the target value changes for any property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1351">このイベントは、この要素に関連付けられている <xref:System.Windows.Data.Binding> によって発生する <xref:System.Windows.Data.Binding.TargetUpdated> イベントのエイリアスを作成します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1351">This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="6434d-1352">これは、通常、問題のバインディングが双方向のバインディングであり、バインドされた依存関係プロパティが、プロパティまたはデータソースがサポートする検証またはキャッシュスキームに従って、前のプロパティ値が無効であることをものしていることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1352">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</span></span>  
  
 <span data-ttu-id="6434d-1353"><xref:System.Windows.FrameworkElement.TargetUpdated> イベントのイベントデータを使用して、対象の値の更新を報告している特定のプロパティを特定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1353">Use the event data of the <xref:System.Windows.FrameworkElement.TargetUpdated> event to determine the specific property that is reporting the target value update.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-1354">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1354">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1355">この要素の親テンプレートへの参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1355">Gets a reference to the template parent of this element.</span></span> <span data-ttu-id="6434d-1356">このプロパティは、要素がテンプレートによって作成されていない場合は無効です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1356">This property is not relevant if the element was not created through a template.</span></span></summary>
        <value><span data-ttu-id="6434d-1357">この要素が作成される原因となった <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> が属する要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-1357">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span></span> <span data-ttu-id="6434d-1358">多くの場合、この値は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1358">This value is frequently <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1359"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> は、多くの場合、アプリケーションマークアップまたはコードで作成されるオブジェクトに対して `null` ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1359"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> is frequently `null` for objects that are created in your application markup or code.</span></span> <span data-ttu-id="6434d-1360">これは、テンプレートを使用せずに、これらのオブジェクトを直接作成するためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1360">This is because you create those objects directly, not via a template.</span></span> <span data-ttu-id="6434d-1361">ルートまたは一般的な名前参照によって論理ツリーをウォークすることによって取得されたオブジェクト参照は、テンプレートからのものではありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1361">Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</span></span>  
  
 <span data-ttu-id="6434d-1362"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> が `null` されない可能性があるケースとしては、ヒットテスト、特定の低レベルの入力イベントのイベント処理、<xref:System.Windows.Media.VisualTreeHelper>を使用したビジュアルツリーのウォーク、テンプレートからの要素を返す可能性がある列挙子の操作などがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1362">Cases where <xref:System.Windows.FrameworkElement.TemplatedParent%2A> might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates.</span></span> <span data-ttu-id="6434d-1363">また、既存の <xref:System.Windows.FrameworkTemplate> に対して <xref:System.Windows.FrameworkTemplate.FindName%2A> を明示的に呼び出し、返されたオブジェクトを操作する場合もあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1363">Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.</span></span>  
  
 <span data-ttu-id="6434d-1364">テンプレートは実際には共有オブジェクトであり、テンプレートの内容は一度だけ作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1364">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="6434d-1365">したがって、テンプレートからの要素へのオブジェクト参照を取得した場合、見かけ上の論理ツリーがページルートに届かないことがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1365">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="6434d-1366">このようなテンプレート参照をページの論理ツリーに接続するには、<xref:System.Windows.FrameworkElement.TemplatedParent%2A> 値を取得し、必要に応じてその要素ツリー内を移動し続ける必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1366">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1367">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] でこの要素に対して表示されるツールヒント オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1367">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="6434d-1368">ツールヒント オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6434d-1368">The tooltip object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1369">このプロパティの値が <xref:System.Windows.Controls.ToolTip>型の場合、その値は [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]で使用されるツールヒントです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1369">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="6434d-1370">値が他の型の場合は、その値がシステムによって提供 (構築) される <xref:System.Windows.Controls.ToolTip> の*コンテンツ*として使用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1370">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="6434d-1371">詳細については、<xref:System.Windows.Controls.ToolTipService> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1371">For more information, see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="6434d-1372">サービスクラスには、<xref:System.Windows.Controls.ToolTip>をさらにカスタマイズするために使用できる添付プロパティが用意されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1372">The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-1373">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1373">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-1374">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1374">XAML Property Element Usage</span></span>  
  
```xaml 
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>
```

<span data-ttu-id="6434d-1375">または</span><span class="sxs-lookup"><span data-stu-id="6434d-1375">-or-</span></span>

```xaml
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-1376">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-1376">XAML Values</span></span>  
 <span data-ttu-id="6434d-1377">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="6434d-1377">*toolTipContent*</span></span>  
 <span data-ttu-id="6434d-1378"><xref:System.Windows.FrameworkElement.ToolTip%2A>の表示テキストになる文字列。</span><span class="sxs-lookup"><span data-stu-id="6434d-1378">A string that becomes the display text for the <xref:System.Windows.FrameworkElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="6434d-1379">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="6434d-1379">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="6434d-1380">オブジェクト要素の形式で提供される、<xref:System.Windows.FrameworkElement>のコンテンツとして使用されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6434d-1380">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="6434d-1381">通常、これは <xref:System.Windows.FrameworkElement> またはその他の要素の1つであり、最終的には複合内のテキストコンテンツを含む、<xref:System.Windows.FrameworkElement.ToolTip%2A>のレイアウトの複合を作成します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1381">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="6434d-1382">この使用法では、<xref:System.Windows.Controls.ToolTip> 要素が解析された [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]から暗黙的に作成され、 *toolTipObjectContent*コンテンツがその <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> プロパティとして設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1382">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6434d-1383"><`ToolTip`.../></span><span class="sxs-lookup"><span data-stu-id="6434d-1383"><`ToolTip` .../></span></span>  
 <span data-ttu-id="6434d-1384">[https://docs.microsoft.com/azure/active-directory/develop/scenario-protected-web-api-overview](<xref:System.Windows.Controls.ToolTip>) をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1384">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1385">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1385">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1386">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1386">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|<span data-ttu-id="6434d-1387">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1387">Metadata properties set to `true`</span></span>|<span data-ttu-id="6434d-1388">なし</span><span class="sxs-lookup"><span data-stu-id="6434d-1388">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1389">次の例では、コード内に <xref:System.Windows.Controls.ToolTip> を作成し、<xref:System.Windows.Controls.Primitives.StatusBar> コントロールの <xref:System.Windows.FrameworkElement.ToolTip%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1389">The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the <xref:System.Windows.FrameworkElement.ToolTip%2A> property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.</span></span>  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1390">要素のツールヒントが閉じる直前に発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1390">Occurs just before any tooltip on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1391"><xref:System.Windows.FrameworkElement.ToolTipClosing> イベントを処理済みとしてマークしても、ツールヒントの終了はキャンセルされません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1391">Marking the <xref:System.Windows.FrameworkElement.ToolTipClosing> event as handled does not cancel closing the tooltip.</span></span> <span data-ttu-id="6434d-1392">ツールヒントが表示されると、UI を使用したユーザー操作に応答する場合にのみ、ツールヒントが終了します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1392">Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</span></span>  
  
 <span data-ttu-id="6434d-1393">このイベントは、スタイルの <xref:System.Windows.EventTrigger> にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1393">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="6434d-1394">これは、このイベントの識別子フィールドがサービスレベルのイベントの add/remove イベントメソッドを公開しないサービスからの実装を再使用するためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1394">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-1395">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1395">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1396">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1396">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|<span data-ttu-id="6434d-1397">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-1397">Routing strategy</span></span>|<span data-ttu-id="6434d-1398">直接</span><span class="sxs-lookup"><span data-stu-id="6434d-1398">Direct</span></span>|  
|<span data-ttu-id="6434d-1399">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-1399">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="6434d-1400">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1400">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1401"><see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1401">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1402">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1402">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-1403">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1403">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-1404">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1404">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-1405">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1405">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-1406">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1406">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1407">要素のツールヒントが開かれたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1407">Occurs when any tooltip on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1408">UI にツールヒントが表示されないようにするには、<xref:System.Windows.FrameworkElement.ToolTipOpening> のハンドラーで <xref:System.Windows.Controls.ToolTipEventArgs> イベントデータを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1408">To prevent a tooltip from appearing in the UI, your handler for <xref:System.Windows.FrameworkElement.ToolTipOpening> can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled.</span></span> <span data-ttu-id="6434d-1409">それ以外の場合は、<xref:System.Windows.FrameworkElement.ToolTip%2A> プロパティの値をツールヒントの内容として使用して、ツールヒントが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1409">Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content.</span></span> <span data-ttu-id="6434d-1410">もう1つの考えられるシナリオは、ツールヒントが表示される直前に、イベントソースである要素の <xref:System.Windows.FrameworkElement.ToolTip%2A> プロパティの値をリセットするハンドラーを記述できることです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1410">Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.</span></span>  
  
 <span data-ttu-id="6434d-1411"><xref:System.Windows.FrameworkElement.ToolTip%2A> の値が `null` または設定されていない場合、<xref:System.Windows.FrameworkElement.ToolTipOpening> は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1411"><xref:System.Windows.FrameworkElement.ToolTipOpening> will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset.</span></span> <span data-ttu-id="6434d-1412">ツールヒントが開いているとき、または開いている間は、`null` に <xref:System.Windows.FrameworkElement.ToolTip%2A> を意図的に設定しないでください。これには、ツールヒントを閉じる効果がありません。代わりに、UI に望ましくない視覚的な成果物が作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1412">Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</span></span>  
  
 <span data-ttu-id="6434d-1413"><xref:System.Windows.FrameworkElement.ToolTipOpening> イベントをスタイルの <xref:System.Windows.EventTrigger> にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1413">The <xref:System.Windows.FrameworkElement.ToolTipOpening> event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="6434d-1414">これは、このイベントの識別子フィールドがサービスレベルのイベントの add/remove イベントメソッドを公開しないサービスからの実装を再使用するためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1414">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-1415">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1415">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1416">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1416">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="6434d-1417">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-1417">Routing strategy</span></span>|<span data-ttu-id="6434d-1418">直接</span><span class="sxs-lookup"><span data-stu-id="6434d-1418">Direct</span></span>|  
|<span data-ttu-id="6434d-1419">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-1419">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="6434d-1420">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1420">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1421"><see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1421">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1422">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1422">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-1423">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1423">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-1424">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1424">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-1425">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1425">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-1426">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1426">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1427"><see cref="P:System.Windows.FrameworkElement.ToolTip" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1427">Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1428">この要素に直接、または子要素で設定されているトリガーのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1428">Gets the collection of triggers established directly on this element, or in child elements.</span></span></summary>
        <value><span data-ttu-id="6434d-1429">厳密に型指定された <see cref="T:System.Windows.Trigger" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="6434d-1429">A strongly typed collection of <see cref="T:System.Windows.Trigger" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="6434d-1430">このプロパティを設定できるのは、表示されているコレクション構文を使用するか、コレクションオブジェクトにアクセスし、Add などのさまざまなメソッドを使用して [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] だけです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1430">This property can only be set in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</span></span> <span data-ttu-id="6434d-1431">コレクションオブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込み可能です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1431">The property to access the collection object itself is read-only, the collection itself is read-write.</span></span> <span data-ttu-id="6434d-1432">プロパティはルート要素にのみ存在します。検索または他の場所に設定しようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1432">The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="6434d-1433">このプロパティを使用すると、この要素で使用されているスタイルの一部として存在するトリガーを調べることはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1433">This property does not enable you to examine triggers that exist as part of styles in use on this element.</span></span> <span data-ttu-id="6434d-1434">このメソッドは、マークアップまたはコードのいずれかでコレクションに文字どおりに追加されるトリガーのコレクションのみを報告します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1434">It only reports the collection of triggers that are literally added to the collection, either in markup or code.</span></span> <span data-ttu-id="6434d-1435">通常、要素には、既定ではそのような要素が存在しません (インスタンスのテンプレートを使用)。これは、コントロールの複合から、代わりにスタイルで設定されるトリガーの方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1435">Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</span></span>  
  
 <span data-ttu-id="6434d-1436">動作 (および、どの要素が <xref:System.Windows.FrameworkElement.Triggers%2A> コレクションとして宣言されているか) では、トリガー条件とトリガー効果の両方がこの要素上に存在するか、論理ツリー内の子要素上にある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1436">In terms of behavior (and trying to establish which effect came from which element's declared <xref:System.Windows.FrameworkElement.Triggers%2A> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</span></span> <span data-ttu-id="6434d-1437"><xref:System.Windows.FrameworkElement.Loaded> などの有効期間イベントを使用してこのコレクションを取得すると、子要素のトリガーがまだ完全に読み込まれていない可能性があることに注意してください。コレクションは、実際に実行される場合よりも小さくなります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1437">Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</span></span>  
  
 <span data-ttu-id="6434d-1438">要素に対して確立されたトリガーのコレクションでは、プロパティトリガー (<xref:System.Windows.Trigger>) ではなく <xref:System.Windows.EventTrigger>のみがサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1438">Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>).</span></span> <span data-ttu-id="6434d-1439">プロパティトリガーが必要な場合は、これらをスタイルまたはテンプレート内に配置し、<xref:System.Windows.FrameworkElement.Style%2A> プロパティを使用して直接、または暗黙的なスタイル参照を使用してそのスタイルまたはテンプレートを要素に割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1439">If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6434d-1440">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1440">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-1441">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-1441">XAML Values</span></span>  
 <span data-ttu-id="6434d-1442">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="6434d-1442">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="6434d-1443">1つ以上の定義済みの <xref:System.Windows.EventTrigger> 要素。</span><span class="sxs-lookup"><span data-stu-id="6434d-1443">One or more defined <xref:System.Windows.EventTrigger> elements.</span></span> <span data-ttu-id="6434d-1444">このようなトリガーには、有効なストーリーボードアクションと参照が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1444">Each such trigger is expected to contain valid storyboard actions and references.</span></span> <span data-ttu-id="6434d-1445">このコレクションは、ページのルート要素でのみ設定できることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1445">Note that this collection can only be established on the root element of a page.</span></span> <span data-ttu-id="6434d-1446">詳細については、「[ストーリーボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1446">For more information, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="6434d-1447">検索するリソースのキー識別子。</span><span class="sxs-lookup"><span data-stu-id="6434d-1447">The key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="6434d-1448">指定されたキーを使用してリソースを検索し、見つかった場合はそのリソースを返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1448">Searches for a resource with the specified key, and returns that resource if found.</span></span></summary>
        <returns><span data-ttu-id="6434d-1449">見つかったリソース。指定した <see langword="null" /> のリソースが見つからない場合は <paramref name="key" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1449">The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1450">リソースが呼び出し元の要素で見つからない場合は、実行時にキーによってリソースが要求された場合にツリーが検索されるのと同じ方法で、親リソースツリーが上方向に検索されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1450">If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</span></span> <span data-ttu-id="6434d-1451">メソッドは、<xref:System.Windows.FrameworkElement.TryFindResource%2A> が呼び出された時点のツリーの既存の条件に従って、リソースツリー内の任意の場所にそのキーのリソースが存在しない場合にのみ `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1451">The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <xref:System.Windows.FrameworkElement.TryFindResource%2A> is called.</span></span>  
  
 <span data-ttu-id="6434d-1452">通常は、返されたリソース値を使用して設定しようとしていたプロパティの型に戻り値を直ちにキャストします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1452">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="6434d-1453"><xref:System.Windows.FrameworkElement.FindResource%2A> メソッドの動作は似ていますが、指定されたキーを持つリソースが返されなかった場合に例外がスローされる点が異なります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1453">The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1454">次の例は、ボタンハンドラーとして実装されています。ボタンをクリックすると、その背景が、<xref:System.Windows.FrameworkElement.TryFindResource%2A> を呼び出すことによって取得されるリソース定義のブラシに設定されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1454">The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <xref:System.Windows.FrameworkElement.TryFindResource%2A> on itself.</span></span> <span data-ttu-id="6434d-1455">これにより、要素ツリーが表示され、リソースが検索されます (リソース自体は [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] で定義されており、表示されません)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1455">This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and is not shown).</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1456">読み込まれた要素の要素ツリーから要素が削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1456">Occurs when the element is removed from within an element tree of loaded elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1457">ダイレクトルーティングイベントはルートに従わないので、これらのイベントは、発生したものと同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1457">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="6434d-1458">直接ルーティングイベントでは、他のルーティングイベントの動作がサポートされます。これらは、アクセス可能なハンドラーコレクションをサポートし、スタイルの <xref:System.Windows.EventTrigger> として使用できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1458">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="6434d-1459">ユーザーが開始したシステムテーマの変更の結果として、<xref:System.Windows.FrameworkElement.Loaded> と <xref:System.Windows.FrameworkElement.Unloaded> の両方がコントロールで発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1459"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="6434d-1460">テーマを変更すると、コントロールテンプレートとそれに含まれるビジュアルツリーが無効化されます。これにより、コントロール全体がアンロードされ、再読み込みされます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1460">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="6434d-1461">したがって、<xref:System.Windows.FrameworkElement.Unloaded> がページから移動したときにのみ発生することを想定することはできません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1461">Therefore <xref:System.Windows.FrameworkElement.Unloaded> cannot be assumed to occur only on navigation away from the page.</span></span>  
  
 <span data-ttu-id="6434d-1462">アプリケーションのシャットダウンが開始された後に、<xref:System.Windows.FrameworkElement.Unloaded> イベントが発生しないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1462">Note that the <xref:System.Windows.FrameworkElement.Unloaded> event is not raised after an application begins shutting down.</span></span> <span data-ttu-id="6434d-1463">アプリケーションのシャットダウンは、<xref:System.Windows.Application.ShutdownMode%2A> プロパティによって定義された条件が発生したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1463">Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs.</span></span> <span data-ttu-id="6434d-1464"><xref:System.Windows.Window> や <xref:System.Windows.Controls.UserControl>などの <xref:System.Windows.FrameworkElement.Unloaded> イベントのハンドラー内にクリーンアップコードを配置すると、予期したとおりに呼び出されないことがあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1464">If you place cleanup code within a handler for the <xref:System.Windows.FrameworkElement.Unloaded> event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6434d-1465">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1465">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1466">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1466">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|<span data-ttu-id="6434d-1467">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="6434d-1467">Routing strategy</span></span>|<span data-ttu-id="6434d-1468">直接</span><span class="sxs-lookup"><span data-stu-id="6434d-1468">Direct</span></span>|  
|<span data-ttu-id="6434d-1469">デリゲート</span><span class="sxs-lookup"><span data-stu-id="6434d-1469">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1470"><see cref="E:System.Windows.FrameworkElement.Unloaded" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1470">Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1471">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1471">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6434d-1472">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1472">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6434d-1473">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1473">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6434d-1474">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1474">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6434d-1475">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1475">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6434d-1476">現在のスコープから削除する名前とオブジェクトのペアの名前。</span><span class="sxs-lookup"><span data-stu-id="6434d-1476">Name of the name-object pair to remove from the current scope.</span></span></param>
        <summary><span data-ttu-id="6434d-1477"><see cref="T:System.Windows.NameScope" /> の登録解除メソッドへのアクセスを簡略化します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1477">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1478">同じ名前の別の要素を再登録する場合にのみ、名前を登録解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1478">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6434d-1479">現在の <see cref="T:System.Windows.FrameworkElement" /> に既定のスタイルを再度適用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1479">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1480">レイアウトの間に、この要素のサイズおよび位置にレイアウトの丸めを適用するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1480">Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</span></span></summary>
        <value><span data-ttu-id="6434d-1481">レイアウトの丸めを適用する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6434d-1481"><see langword="true" /> if layout rounding is applied; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6434d-1482">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1482">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1483">要素の <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> プロパティが `true`場合、<xref:System.Windows.UIElement.Measure%2A> と <xref:System.Windows.UIElement.Arrange%2A> のパスで計算される整数以外のすべてのピクセル値は、全体のピクセル値に丸められます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1483">When the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.</span></span>  
  
 <span data-ttu-id="6434d-1484">このプロパティは、子要素によって継承されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1484">This property is inherited by child elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6434d-1485">ルート要素で `true` するには、<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1485">You should set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root element.</span></span> <span data-ttu-id="6434d-1486">レイアウトシステムは、親座標に子座標を追加します。したがって、親座標がピクセル境界上にない場合、子座標もピクセル境界上にありません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1486">The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</span></span> <span data-ttu-id="6434d-1487">ルートに <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> を設定できない場合は、必要な効果を得るために、子に <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1487">If <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.</span></span>  
  
 <span data-ttu-id="6434d-1488">ピクセル境界にオブジェクトを描画すると、エッジがデバイスピクセルの途中にあるときに、アンチエイリアシングによって生成される半透明の端が除去されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1488">Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</span></span> <span data-ttu-id="6434d-1489">次の図は、デバイスピクセルの途中にある単一のピクセル幅線の出力を示しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1489">The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</span></span> <span data-ttu-id="6434d-1490">左側の線は、レイアウトの丸め処理を使用せず、アンチエイリアス化されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1490">The line on the left does not use layout rounding and is anti-aliased.</span></span> <span data-ttu-id="6434d-1491">右側の線は、レイアウトの丸め処理を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1491">The line on the right uses layout rounding.</span></span>  
  
 <span data-ttu-id="6434d-1492">![1&#45;つのピクセル線と比較した、アンチエイリアス行。](~/add/media/pixelsnaplinecompare.PNG "単一のピクセル線と比較したアンチエイリアス線。")</span><span class="sxs-lookup"><span data-stu-id="6434d-1492">![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG "Anti-aliased line compared to single pixel line.")</span></span>  
  
 <span data-ttu-id="6434d-1493">レイアウトの丸め処理や <xref:System.Windows.GridUnitType.Star> サイズ変更を使用する場合、サブピクセルレンダリングを避けるために、レイアウトシステムは列または行の測定値に小さいバリエーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1493">When you use layout rounding and <xref:System.Windows.GridUnitType.Star> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</span></span> <span data-ttu-id="6434d-1494">たとえば、1つのグリッドの合計幅が100で、<xref:System.Windows.GridUnitType.Star>サイズがそれぞれ3列に設定されている場合、幅33.3 が等しい3つの列を作成するのではなく、幅が33、幅が34の2つの列がレイアウトシステムによって作成されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1494">For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType.Star>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6434d-1495">.NET 4.6 では、境界があるコントロールでのクリッピングのインスタンスを減らすために、レイアウトの丸め処理が行われました。</span><span class="sxs-lookup"><span data-stu-id="6434d-1495">In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</span></span> <span data-ttu-id="6434d-1496">既定では、ターゲットフレームワークが4.6 以上 .NET Framework 場合、この機能は有効になっています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1496">By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</span></span> <span data-ttu-id="6434d-1497">以前のバージョンのフレームワークを対象とするアプリケーションでは、app.config ファイルに次の設定を追加することで新しい動作を選択できます。 `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` は、アプリケーションが .NET Framework 4.6 で実行されている場合にのみ有効になります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1497">Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1498">次の例は、<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> プロパティが1つのピクセル幅の線に与える影響を示しています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1498">The following example demonstrates the effect that the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property has on a single pixel-width line.</span></span> <span data-ttu-id="6434d-1499">左側の線はレイアウトの丸め処理を使用しないので、右側の線はレイアウトの丸め処理を使用します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1499">The line on the left does not use layout rounding and the line on the right uses layout rounding.</span></span> <span data-ttu-id="6434d-1500">ウィンドウのサイズをゆっくりと変更すると、レイアウトの丸め処理の違いがわかります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1500">If you slowly resize the window, you can see the difference that layout rounding makes.</span></span>  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1501"><see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1501">Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1502">この要素が、Panel またはアイテム コントロールのような親要素内に作成されるときに適用される垂直方向の配置特性を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1502">Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="6434d-1503">垂直方向の配置の設定。</span><span class="sxs-lookup"><span data-stu-id="6434d-1503">A vertical alignment setting.</span></span> <span data-ttu-id="6434d-1504">既定では、 <see cref="F:System.Windows.VerticalAlignment.Stretch" />です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1504">The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1505">要素に対して <xref:System.Windows.FrameworkElement.Height%2A> および <xref:System.Windows.FrameworkElement.Width%2A> プロパティが明示的に設定されている場合、これらの測定はレイアウトの方向をとり、このプロパティを <xref:System.Windows.VerticalAlignment.Stretch>に設定した場合の通常の効果を取り消します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1505">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="6434d-1506"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> は、実際の依存関係プロパティに対する [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] プロパティアクセサーです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1506"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="6434d-1507">この特定の依存関係プロパティは、派生要素クラス (特にコントロール) では、明らかに "既定" 値が異なることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1507">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</span></span> <span data-ttu-id="6434d-1508">これは通常、次の2つの方法のいずれかで発生します。依存関係プロパティは、特定の派生クラスに再登録されますが、既定値を設定するために異なるメタデータを使用します。または、適用される既定のスタイルによって、その依存関係プロパティの値が異なるように設定されています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1508">This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="6434d-1509">たとえば、<xref:System.Windows.Controls.ComboBoxItem> コントロールの <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> の明らかな "既定" は、<xref:System.Windows.FrameworkElement.VerticalAlignment%2A> から <xref:System.Windows.FrameworkElement>直接継承され <xref:System.Windows.Controls.ComboBoxItem> ている場合でも <xref:System.Windows.VerticalAlignment.Center>されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1509">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment.Center>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="6434d-1510">これは、スタイルのコントロールテンプレート内で、<xref:System.Windows.Controls.ComboBoxItem>の既定のスタイルで値がリセットされたためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1510">This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.</span></span>  
  
 <span data-ttu-id="6434d-1511"><xref:System.Windows.Controls.Canvas> は、レイアウトの作成時に <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> を使用しません。 <xref:System.Windows.Controls.Canvas> は絶対配置に基づいているためです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1511"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="6434d-1512"><xref:System.Windows.Controls.ComboBoxItem> または任意の派生クラスによって継承されると、<xref:System.Windows.Controls.ComboBoxItem> このプロパティの既定値を <xref:System.Windows.VerticalAlignment.Center>するように再定義します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1512">When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment.Center>.</span></span>  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1513">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1514">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1514">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|<span data-ttu-id="6434d-1515">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1515">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1516"><see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1516">Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1517">この要素内でビジュアル子要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1517">Gets the number of visual child elements within this element.</span></span></summary>
        <value><span data-ttu-id="6434d-1518">この要素のビジュアル子要素の数。</span><span class="sxs-lookup"><span data-stu-id="6434d-1518">The number of visual child elements for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1519"><xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> の <xref:System.Windows.FrameworkElement> の実装では、常に0または1が返されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1519">The <xref:System.Windows.FrameworkElement> implementation of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> always returns either zero or one.</span></span> <span data-ttu-id="6434d-1520">1つを超える可能性のあるビジュアル子コレクションを保持するクラスは、このプロパティと <xref:System.Windows.FrameworkElement.GetVisualChild%2A>の両方をオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1520">Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 <span data-ttu-id="6434d-1521">このプロパティは、通常、レイアウトのオーバーライド (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>、<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>) を実装するために、現在の子コレクションの上限を決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1521">This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6434d-1522">次の例では、カスタム装飾が、複数のビジュアルな子のために保持している <xref:System.Windows.Media.VisualCollection> によって宣言された値を使用し、<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> と <xref:System.Windows.FrameworkElement.GetVisualChild%2A>のオーバーライドによってこれらの値を報告する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1522">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6434d-1523">クラスで子要素コレクション内の複数のビジュアル子がサポートされている場合は、このプロパティをオーバーライドして、そのコレクション内の要素の数を返します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1523">If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</span></span> <span data-ttu-id="6434d-1524">コレクションオブジェクト自体がカウントを返す場合でも、この操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1524">You must do this even if the collection object itself returns a count.</span></span> <span data-ttu-id="6434d-1525">WPF フレームワークレベルでの要素のレイアウトロジックは、すべての要素が <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> プロパティを通じて有効なカウントを返すことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6434d-1525">Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> property.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1526">要素の幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1526">Gets or sets the width of the element.</span></span></summary>
        <value><span data-ttu-id="6434d-1527">要素の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 単位)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1527">The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="6434d-1528">既定値は <see cref="F:System.Double.NaN" /> です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1528">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="6434d-1529">この値は 0.0 以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1529">This value must be equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-1530">上限については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1530">See Remarks for upper bound information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6434d-1531">これは、幅情報を指定する <xref:System.Windows.FrameworkElement> の3つのプロパティのうちの1つです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1531">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="6434d-1532">もう1つは <xref:System.Windows.FrameworkElement.MinWidth%2A> と <xref:System.Windows.FrameworkElement.MaxWidth%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6434d-1532">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="6434d-1533">これらの値の間に競合がある場合、実際の幅を決定するためのアプリケーションの順序は、最初に <xref:System.Windows.FrameworkElement.MinWidth%2A> する必要があります。次に、<xref:System.Windows.FrameworkElement.MaxWidth%2A>、それぞれが境界内にある場合は <xref:System.Windows.FrameworkElement.Width%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1533">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="6434d-1534">このプロパティの戻り値は、その値に設定されている値と常に同じです。</span><span class="sxs-lookup"><span data-stu-id="6434d-1534">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="6434d-1535">これに対し、<xref:System.Windows.FrameworkElement.ActualWidth%2A> の値は異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1535">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary.</span></span> <span data-ttu-id="6434d-1536">何らかの理由で、レイアウトが提案されたサイズを拒否した可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1536">The layout may have rejected the suggested size for some reason.</span></span> <span data-ttu-id="6434d-1537">また、レイアウトシステム自体は、<xref:System.Windows.FrameworkElement.Width%2A> のプロパティシステムセットに対して非同期的に動作し、特定のサイズ変更プロパティの変更がまだ処理されていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1537">Also, the layout system itself works asynchronously relative to the property system set of <xref:System.Windows.FrameworkElement.Width%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="6434d-1538">許容される <xref:System.Double> 値に加えて、このプロパティを <xref:System.Double.NaN?displayProperty=nameWithType>することもできます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1538">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6434d-1539">ここでは、自動サイズ変更動作を指定します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1539">This is how you specify auto sizing behavior.</span></span> <span data-ttu-id="6434d-1540">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] では、値を文字列 "Auto" (大文字と小文字を区別しない) に設定して、自動サイズ変更動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1540">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="6434d-1541">自動サイズ変更動作とは、使用可能な幅が要素によって塗りつぶされることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1541">Auto sizing behavior implies that the element will fill the width available to it.</span></span> <span data-ttu-id="6434d-1542">ただし、特定のコントロールでは、既定のスタイルで既定値が提供されることがよくあります。これは、明示的に有効にしない限り、自動サイズ変更動作を無効にします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1542">Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="6434d-1543">検証チェックに加えて、レイアウトシステムによって適用される <xref:System.Windows.FrameworkElement.Width%2A> に対して非決定的な上限が設定されています (これは、<xref:System.Single.MaxValue?displayProperty=nameWithType> よりも大きいが <xref:System.Double.MaxValue?displayProperty=nameWithType>よりも小さい非常に大きい数値です)。</span><span class="sxs-lookup"><span data-stu-id="6434d-1543">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Width%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="6434d-1544">この制約を超えた場合、要素はレンダリングされず、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6434d-1544">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="6434d-1545">ビジュアル表示の最大サイズよりも大幅に大きい値に <xref:System.Windows.FrameworkElement.Width%2A> を設定しないか、またはこの非決定的な上限を超えることができます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1545">Do not set <xref:System.Windows.FrameworkElement.Width%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6434d-1546">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="6434d-1546">XAML Attribute Usage</span></span>  
  
```xaml 
<object Width="double"/>  
```

<span data-ttu-id="6434d-1547">または</span><span class="sxs-lookup"><span data-stu-id="6434d-1547">-or-</span></span>

```xaml
<object Width ="qualifiedDouble"/>  
```

<span data-ttu-id="6434d-1548">または</span><span class="sxs-lookup"><span data-stu-id="6434d-1548">-or-</span></span>

```xaml
<object Width ="Auto"/>  
```  

<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6434d-1549">XAML の値</span><span class="sxs-lookup"><span data-stu-id="6434d-1549">XAML Values</span></span>  
 <span data-ttu-id="6434d-1550">*double*</span><span class="sxs-lookup"><span data-stu-id="6434d-1550">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="6434d-1551">0.0 以上の <xref:System.Double> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="6434d-1551">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="6434d-1552">上限については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1552">See Remarks for upper bound information.</span></span> <span data-ttu-id="6434d-1553">この値は、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] の測定値として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1553">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="6434d-1554">文字列には、小数点を明示的に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="6434d-1554">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="6434d-1555">たとえば、`1` の値は許容されます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1555">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="6434d-1556">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="6434d-1556">*qualifiedDouble*</span></span>  
 <span data-ttu-id="6434d-1557">前に説明した*double*値。その後に、`px`、`in`、`cm`、`pt`のいずれかの単位宣言文字列が続きます。</span><span class="sxs-lookup"><span data-stu-id="6434d-1557">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="6434d-1558">`px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="6434d-1558">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="6434d-1559">`in` はインチ。1in==96px</span><span class="sxs-lookup"><span data-stu-id="6434d-1559">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="6434d-1560">`cm` はセンチメートルです。1cm = = (96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="6434d-1560">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="6434d-1561">`pt` はポイント。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="6434d-1561">`pt` is points; 1pt==(96/72) px</span></span>  
  
 `Auto`  
 <span data-ttu-id="6434d-1562">自動サイズ調整の動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6434d-1562">Enables autosizing behavior.</span></span> <span data-ttu-id="6434d-1563">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6434d-1563">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6434d-1564">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6434d-1564">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6434d-1565">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="6434d-1565">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|<span data-ttu-id="6434d-1566">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="6434d-1566">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6434d-1567"><see cref="P:System.Windows.FrameworkElement.Width" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="6434d-1567">Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
