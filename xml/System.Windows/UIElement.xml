<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="da9857d6b3e3cb7e3542c9cf3d403886c43c46f3" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82339800" /></Metadata><TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IInputElement&#xA;    interface IAnimatable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="23e7a-101"><see cref="T:System.Windows.UIElement" /> は、Windows Presentation Foundation (WPF) の要素および基本表示特性における WPF コア レベル実装構築の基底クラスです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-101"><see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-102"><xref:System.Windows.UIElement> は要素のレイアウト特性の出発点となり、派生クラスがオーバーライドできる仮想メソッドも公開します。これにより、要素とその子要素のレイアウトレンダリング動作に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-102"><xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</span></span>  
  
 <span data-ttu-id="23e7a-103">一般的な要素の入力および焦点を当てる動作の多くは、<xref:System.Windows.UIElement> クラスでも定義されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-103">Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="23e7a-104">これには、キーボード、マウスとスタイラスの入力、および関連するステータスプロパティのイベントが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-104">This includes the events for keyboard, mouse and stylus input, and related status properties.</span></span> <span data-ttu-id="23e7a-105">これらのイベントの多くはルーティングイベントであり、入力関連のイベントの多くには、バブルルーティングバージョンと、イベントのトンネリングバージョンの両方があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="23e7a-106">これらのペアのイベントは、通常、コントロールの作成者にとって最も関心のあるイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="23e7a-107"><xref:System.Windows.UIElement> には、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] イベントモデルに関連する Api も含まれます。これには、要素インスタンスから供給される指定されたルーティングイベントを発生させることができるメソッドも含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-107"><xref:System.Windows.UIElement> also includes APIs that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="23e7a-108">アーキテクチャに関しては、<xref:System.Windows.UIElement> は [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] プログラミングのウィンドウハンドル、または [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] プログラミングの要素とほぼ同じように考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-108">In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming.</span></span> <span data-ttu-id="23e7a-109"><xref:System.Windows.UIElement> は、WPF のコアレベルの基本要素です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-109"><xref:System.Windows.UIElement> is a base element at the WPF core level.</span></span>  
  
 <span data-ttu-id="23e7a-110"><xref:System.Windows.UIElement> には、<xref:System.Windows.UIElement> クラスで特に定義された次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-110">A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:</span></span>  
  
-   <span data-ttu-id="23e7a-111">子要素としてレンダリングできます (<xref:System.Windows.UIElement> は、高レベルのグラフィックスクラスである <xref:System.Windows.Media.Visual>から派生します)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-111">Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)</span></span>  
  
-   <span data-ttu-id="23e7a-112"><xref:System.Windows.UIElement> の子要素のサイズと位置を指定するために使用するロジックが含まれます (レイアウトシステムによって解釈される場合)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-112">Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)</span></span>  
  
-   <span data-ttu-id="23e7a-113">ユーザー入力に応答できます (イベントルーティングの処理、またはコマンドのルーティングによって、入力の送信先の制御を含む)</span><span class="sxs-lookup"><span data-stu-id="23e7a-113">Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</span></span>  
  
-   <span data-ttu-id="23e7a-114">論理要素ツリーを介してルートを移動するルーティングイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-114">Can raise routed events that travel a route through the logical element tree</span></span>  
  
-   <span data-ttu-id="23e7a-115">アニメーションシステムのいくつかの側面をサポートします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-115">Supports some aspects of the animation system</span></span>  
  
 <span data-ttu-id="23e7a-116"><xref:System.Windows.FrameworkElement> は、<xref:System.Windows.UIElement>上に構築される WPF フレームワークレベルの実装クラスであり、WPF フレームワークレベルとの特定の対話を追加します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-116"><xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level.</span></span> <span data-ttu-id="23e7a-117"><xref:System.Windows.FrameworkElement> は、次の機能を追加して定義します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-117"><xref:System.Windows.FrameworkElement> adds and defines the following capabilities:</span></span>  
  
-   <span data-ttu-id="23e7a-118">フレームワーク固有のその他のレイアウト特性</span><span class="sxs-lookup"><span data-stu-id="23e7a-118">Additional framework-specific layout characteristics</span></span>  
  
-   <span data-ttu-id="23e7a-119">プロパティに関する豊富なメタデータレポートのサポート</span><span class="sxs-lookup"><span data-stu-id="23e7a-119">Support for richer metadata reporting on properties</span></span>  
  
-   <span data-ttu-id="23e7a-120">特定の入力基本クラスおよびその添付プロパティまたは添付イベントのクラス固有の実装</span><span class="sxs-lookup"><span data-stu-id="23e7a-120">Class-specific implementation of certain input base classes and their attached properties or attached events</span></span>  
  
-   <span data-ttu-id="23e7a-121">スタイルのサポート</span><span class="sxs-lookup"><span data-stu-id="23e7a-121">Style support</span></span>  
  
-   <span data-ttu-id="23e7a-122">その他のアニメーションのサポート</span><span class="sxs-lookup"><span data-stu-id="23e7a-122">Further animation support</span></span>  
  
 <span data-ttu-id="23e7a-123">もう1つの関連するクラスは <xref:System.Windows.ContentElement>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-123">Another related class is <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="23e7a-124"><xref:System.Windows.ContentElement> クラスは、<xref:System.Windows.UIElement>と同じメンバーの多くを実装します。これらの2つのクラスの違いは、コンテンツモデル全体での目的の場所を使用することです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-124">The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model.</span></span> <span data-ttu-id="23e7a-125"><xref:System.Windows.UIElement> 派生クラスは、通常、比較的固定のコンテンツモデルを定義します。つまり、マークアップ内の子要素として使用できる要素には制限があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-125">A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</span></span> <span data-ttu-id="23e7a-126"><xref:System.Windows.UIElement>では、制限の緩い子コンテンツを取得するための容量が必要になる場合がありますが、通常は、指定されたコンテンツプロパティで容量が集中管理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-126">There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties.</span></span> <span data-ttu-id="23e7a-127"><xref:System.Windows.ContentElement> の派生クラスは、通常、フロー形式のドキュメントなどのシナリオをサポートするために、コンテンツに関する制限とは言えません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-127">A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="23e7a-128"><xref:System.Windows.UIElement.Visibility%2A> の状態は、その要素によるすべての入力処理に影響します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-128"><xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="23e7a-129">表示されていない要素は、ヒットテストに関与せず、入力イベントを受け取りません。これは、が表示されている場合に、要素が存在する境界上にマウスがある場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-129">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-130"><see cref="T:System.Windows.UIElement" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-130">Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-131"><xref:System.Windows.UIElement> が基本要素であるため、実際には <xref:System.Windows.UIElement> 型の新しいインスタンスを作成するのは一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-131">Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element.</span></span> <span data-ttu-id="23e7a-132">「[基本要素の概要](~/docs/framework/wpf/advanced/base-elements-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-132">See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="23e7a-133">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-133">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (routedEvent As RoutedEvent, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="23e7a-134">ハンドルするルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="23e7a-134">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="23e7a-135">ハンドラーの実装に対する参照。</span><span class="sxs-lookup"><span data-stu-id="23e7a-135">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="23e7a-136">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-137">同じイベントに対して、例外を発生させることなく同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-137">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="23e7a-138">ただし、ハンドラーは実際にはイベントが処理されるときに複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-138">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="23e7a-139">そのため、この動作がハンドラーの実装で考慮する必要がある副作用について考えてみてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-139">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="23e7a-140">通常、このメソッドを使用して、カスタムルーティングイベントの [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] イベントアクセスパターン用の "add" アクセサーの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-140">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (routedEvent As RoutedEvent, handler As Delegate, handledEventsToo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="23e7a-141">ハンドルするルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="23e7a-141">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="23e7a-142">ハンドラーの実装に対する参照。</span><span class="sxs-lookup"><span data-stu-id="23e7a-142">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="23e7a-143">イベント データ内でルーティング イベントが処理済みとしてマークされている場合でも呼び出されるようにハンドラーを登録するには <see langword="true" />。ルーティング イベントが既に処理済みとしてマークされている場合はハンドラーを呼び出さないという既定の条件を使用してハンドラーを登録する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-143"><see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="23e7a-144">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-144">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="23e7a-145">ルーティング イベントの再処理を機械的に要求しないでください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-145">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="23e7a-146">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-146">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="23e7a-147">イベント ルート上の別の要素により既にハンドル済みとしてマークされているルーティング イベントに対し、指定したハンドラーが呼び出されるようにするには、<paramref name="handledEventsToo" /> を <see langword="true" /> に指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-147">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-148">低レベルの入力イベントを実用的な方法で処理することは、複雑なタスクです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-148">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="23e7a-149">多くのコントロールは、特定のイベントが処理済みとしてマークされている動作を実装し、別の直感的なイベントに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-149">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="23e7a-150">一般に、コントロールは、そのための設計目的がある場合にのみ、プラットフォーム入力イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-150">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="23e7a-151">特定のシナリオでは、これらの設計の意図が、入力イベントの特定の処理に必要なものではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-151">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="23e7a-152">これらのシナリオでは、`true` のように `handledEventsToo` にハンドラーを登録することが適切です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-152">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="23e7a-153">ただし、この作業は定期的に行うべきではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-153">But you should not do this routinely.</span></span> <span data-ttu-id="23e7a-154">処理された場合でも、すべてのイベントに応答してハンドラーを呼び出すと、独自のアプリケーションイベント処理ロジックが複雑になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-154">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="23e7a-155">ハンドラーのロジックが大きくなると、パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-155">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="23e7a-156">開発プロセス中に、アプリケーションロジックで処理するイベントを処理する必要がある場合は、既に処理されているイベントのハンドラーのアタッチを予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-156">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="23e7a-157">特定のイベント制御の組み合わせのクラス処理動作を回避するためのもう1つの方法は、そのイベントのプレビューを使用することです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-157">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="23e7a-158">たとえば、<xref:System.Windows.UIElement.MouseLeftButtonDown> がクラス処理によって処理済みとしてマークされている場合は、代わりに <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> のハンドラーを追加できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-158">For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="23e7a-159">同じイベントに対して、例外を発生させることなく同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-159">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="23e7a-160">ただし、ハンドラーは実際にはイベントが処理されるときに複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-160">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="23e7a-161">そのため、この動作がハンドラーの実装で考慮する必要がある副作用について考えてみてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-161">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="23e7a-162">通常、このメソッドを使用して、カスタムルーティングイベントの [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] イベントアクセスパターン用の "add" アクセサーの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-162">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-163">次の例では、`handledEventsToo` `true`を使用して、定義されたハンドラーをページ上のいずれかの名前付き要素にアタッチするページで <xref:System.Windows.FrameworkElement.Initialized> イベントに対して呼び出されるハンドラーを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-163">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="23e7a-164">このハンドラーは、ルート上の別の要素が、ルートの処理要素に到達する前に、処理された共有イベントデータをマークした場合でも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-164">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="23e7a-165">ハンドラーの追加先のイベント ルート。</span><span class="sxs-lookup"><span data-stu-id="23e7a-165">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="23e7a-166">ハンドラーを追加するために使用されるイベント データ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-166">The event data that is used to add the handlers.</span></span> <span data-ttu-id="23e7a-167">このメソッドは、イベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティを使用してハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-167">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span></span></param>
        <summary><span data-ttu-id="23e7a-168">現在の <see cref="T:System.Windows.EventRoute" /> イベント ハンドラー コレクションのハンドラーを、指定した <see cref="T:System.Windows.UIElement" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-168">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-169">このメソッドは、<xref:System.Windows.EventRoute>に子要素のハンドラーを追加するために、コンテンツホスト要素 (<xref:System.Windows.IContentHost> を実装する要素またはそれ以外の要素のいずれか) によって使用できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-169">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span> <span data-ttu-id="23e7a-170">通常、これは、完了した論理ツリー内のすべての要素に対してハンドラーが自動的に追加されるため、<xref:System.Windows.UIElement>には必要ありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-170">Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree.</span></span> <span data-ttu-id="23e7a-171">ただし、<xref:System.Windows.ContentElement> と <xref:System.Windows.UIElement> がテンプレート化されたツリーに混在している場合は、テンプレートからの介在する要素をルートに追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-171">However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</span></span> <span data-ttu-id="23e7a-172"><xref:System.Windows.ContentElement> と <xref:System.Windows.UIElement> はどちらも、このメソッドのバージョンをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-172">Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-173">この要素をドラッグアンドドロップ操作の対象として使用できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-173">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span></span>  <span data-ttu-id="23e7a-174">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-174">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-175">この要素をドラッグアンドドロップ操作の対象として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-175"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-176">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-176">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-177">ドラッグアンドドロップ操作は、既定では有効になっていません。 <xref:System.Windows.UIElement.AllowDrop%2A> を `true`に設定して、意図的に有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-177">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="23e7a-178">この基本設定以外に、ドラッグアンドドロップ動作は完全に実装固有であり、<xref:System.Windows.UIElement> またはその他の基本要素クラスでは定義されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-178">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class.</span></span> <span data-ttu-id="23e7a-179"><xref:System.Windows.Controls.RichTextBox>などの特定のコントロールには、既定の動作があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-179">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="23e7a-180">ドラッグアンドドロップの詳細については、「[ドラッグアンドドロップの概要](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-180">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="23e7a-181"><xref:System.Windows.FrameworkElement> は、この依存関係プロパティのメタデータを実装でオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-181"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="23e7a-182">具体的には、<xref:System.Windows.FrameworkElement> は、プロパティ値の継承を許可するようにこのプロパティを指定します (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> はメタデータで `true` ます)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-182">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="23e7a-183">このコンテキストでのプロパティ値の継承では、ローカル値またはスタイルによって割り当てられた <xref:System.Windows.UIElement.AllowDrop%2A> の他の値を持たない子要素が存在する場合、この値が割り当てられている最も近い親要素の値 (スタイル、既定値、またはローカル値) が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-183">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</span></span> <span data-ttu-id="23e7a-184">実際には、ルート要素で drop 操作を許可するかどうかを指定し、その値が `false`として明示的に割り当てられていないすべての子要素に反映されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-184">In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-185">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-185">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-186">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-186">Identifier field</span></span>|<xref:System.Windows.UIElement.AllowDropProperty>|  
|<span data-ttu-id="23e7a-187">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-187">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-188">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-188">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-189">次のマークアップの例では、<xref:System.Windows.Controls.TextBox>の属性を使用して <xref:System.Windows.UIElement.AllowDrop%2A> プロパティ `true` を設定しています。また、集計内の他の関連プロパティを設定すると、<xref:System.Windows.Controls.TextBox> を複数行テキストデータオブジェクトのターゲットにすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-189">The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in.</span></span> <span data-ttu-id="23e7a-190">完全なサンプルについては、「削除され[たファイルの読み込みのサンプル](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-190">For the complete sample, see [Load a Dropped File Sample](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).</span></span>  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-191"><see cref="P:System.Windows.UIElement.AllowDrop" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-191">Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="23e7a-192">この要素の指定した依存関係プロパティにアニメーションを適用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-192">Applies an animation to a specified dependency property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-193">このメソッドはシールされているため、オーバーライドできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-193">This method is sealed and cannot be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="23e7a-194">アニメーション化するプロパティの識別子。</span><span class="sxs-lookup"><span data-stu-id="23e7a-194">The identifier for the property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="23e7a-195">アニメーションをコントロールして宣言するアニメーション クロック。</span><span class="sxs-lookup"><span data-stu-id="23e7a-195">The animation clock that controls and declares the animation.</span></span></param>
        <summary><span data-ttu-id="23e7a-196">この要素の指定した依存関係プロパティにアニメーションを適用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-196">Applies an animation to a specified dependency property on this element.</span></span> <span data-ttu-id="23e7a-197">既存のアニメーションは停止され、新しいアニメーションに置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-197">Any existing animations are stopped and replaced with the new animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-198">プロパティからアニメーションを削除するには、そのプロパティの識別子を `dp` として指定し、`clock` を `null`として指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-198">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="23e7a-199">これにより、アニメーションが削除され、アニメーション化されたプロパティがその基本値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-199">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="23e7a-200">ただし、最初に関連付けられたアニメーションクロックは停止しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-200">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="23e7a-201">その時計に割り当てられているその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-201">Any other animations assigned to that clock will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-202">次の例では、<xref:System.Windows.UIElement.ApplyAnimationClock%2A> を呼び出すことによって、<xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` に特定のタイミングアニメーションが適用されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-202">In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock, handoffBehavior As HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="23e7a-203">アニメーション化するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-203">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="23e7a-204">アニメーションをコントロールして宣言するアニメーション クロック。</span><span class="sxs-lookup"><span data-stu-id="23e7a-204">The animation clock that controls and declares the animation.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="23e7a-205">列挙体の値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-205">A value of the enumeration.</span></span> <span data-ttu-id="23e7a-206">既定値は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> で、既存のアニメーションを停止して新しいアニメーションに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-206">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span></span></param>
        <summary><span data-ttu-id="23e7a-207">この要素の指定した依存関係プロパティにアニメーションを適用し、プロパティでアニメーションが既に適用されているときに行われる処理を指定する機能も提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-207">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-208">プロパティからアニメーションを削除するには、そのプロパティの識別子を `dp` として指定し、`clock` を `null`として指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-208">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="23e7a-209">これにより、アニメーションが削除され、アニメーション化されたプロパティがその基本値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-209">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="23e7a-210">ただし、最初に関連付けられたアニメーションクロックは停止しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-210">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="23e7a-211">その時計に割り当てられているその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-211">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-212">少なくとも 1 つのタッチがこの要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-212">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-213">少なくとも 1 つのタッチがこの要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-213"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-214"><see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-214">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-215">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-215">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="23e7a-216">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-216"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-217"><see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-217">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-218">少なくとも 1 つのタッチがこの要素上で押されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-218">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-219">少なくとも 1 つのタッチがこの要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-219"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-220"><see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-220">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-221">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-221">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="23e7a-222">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-222"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-223"><see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-223">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="23e7a-224">親が子要素に対して計算する最終的なサイズ。<see cref="T:System.Windows.Rect" /> のインスタンスを指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-224">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</span></span></param>
        <summary><span data-ttu-id="23e7a-225">子要素を配置し、<see cref="T:System.Windows.UIElement" /> のサイズを決定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-225">Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="23e7a-226">親要素はそれぞれの <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> 実装 (または WPF フレームワーク レベルの同等実装) からこのメソッドを呼び出し、レイアウトを再帰的に更新します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-226">Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</span></span> <span data-ttu-id="23e7a-227">このメソッドは、レイアウト更新の 2 番目のパスを構成します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-227">This method constitutes the second pass of a layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-228">WPF フレームワークレベルの要素を派生させるシナリオでは、<xref:System.Windows.UIElement.Arrange%2A> の動作は必要ありません (シャドウを使用しない場合はできません)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-228">For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="23e7a-229">代わりに、クラスで <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> の実装をオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-229">Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class.</span></span> <span data-ttu-id="23e7a-230"><xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 実装は、WPF フレームワークレベルの既定のレイアウト操作の一部として <xref:System.Windows.UIElement.Arrange%2A> によって内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-230">Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="23e7a-231"><xref:System.Windows.UIElement.ArrangeCore%2A> の実装では、子要素がある場合は、各子要素でも <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-231">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.</span></span>  
  
 <span data-ttu-id="23e7a-232">WPF のコアレベルの要素を派生させるシナリオでは、<xref:System.Windows.UIElement.Arrange%2A> の動作を変更しないようにする必要があります (シャドウを使用しない場合はできません)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-232">For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="23e7a-233">代わりに、クラスの <xref:System.Windows.UIElement.ArrangeCore%2A> をオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-233">Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class.</span></span> <span data-ttu-id="23e7a-234"><xref:System.Windows.UIElement.ArrangeCore%2A> 実装は、WPF フレームワークレベルの既定のレイアウト操作の一部として <xref:System.Windows.UIElement.Arrange%2A> によって内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-234">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="23e7a-235">ただし、これは、WPF フレームワークレベルのレイアウトとそのレイアウトシステムを使用していることを前提としています。これは、特に、<xref:System.Windows.UIElement> 基本要素クラスから WPF のコアレベルで要素を派生させる場合には当てはまりません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-235">However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class.</span></span> <span data-ttu-id="23e7a-236"><xref:System.Windows.UIElement.ArrangeCore%2A> の実装では、子要素がある場合は、各子要素でも <xref:System.Windows.UIElement.Arrange%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-236">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements.</span></span> <span data-ttu-id="23e7a-237">WPF のコアレベルのシナリオでは、<xref:System.Windows.FrameworkElement> 派生クラスを使用していないことが示されています。これは、<xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkElement.ArrangeCore%2A>シールされているためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-237">Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-238">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] での WPF フレームワークレベルのレイアウト配置の計算は、<xref:System.Windows.UIElement.Measure%2A> 呼び出しと <xref:System.Windows.UIElement.Arrange%2A> 呼び出しで構成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-238">Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="23e7a-239"><xref:System.Windows.UIElement.Measure%2A> の呼び出し中に、レイアウトシステムは、指定された <xref:System.Windows.Size> (`availableSize`) 引数を使用して、要素のサイズ要件を決定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-239">During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument.</span></span> <span data-ttu-id="23e7a-240"><xref:System.Windows.UIElement.Arrange%2A> の呼び出し中に、レイアウトシステムによって要素の境界ボックスのサイズと位置がファイナライズされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-240">During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.</span></span>  <span data-ttu-id="23e7a-241">詳細については、「[Layout](~/docs/framework/wpf/advanced/layout.md)」 (レイアウト) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-241">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
 <span data-ttu-id="23e7a-242">`availableSize` 0 から無限大までの任意の数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-242">`availableSize` can be any number from zero to infinity.</span></span> <span data-ttu-id="23e7a-243">レイアウトされる要素は、`availableSize` パラメーターを使用して必要な最小 <xref:System.Windows.Size> を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-243">Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.</span></span>  
  
 <span data-ttu-id="23e7a-244">レイアウトが最初にインスタンス化されると、<xref:System.Windows.UIElement.Arrange%2A>前に常に <xref:System.Windows.UIElement.Measure%2A> 呼び出しを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-244">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="23e7a-245">ただし、最初のレイアウトパスの後に、<xref:System.Windows.UIElement.Measure%2A>を使用せずに <xref:System.Windows.UIElement.Arrange%2A> 呼び出しを受け取る場合があります。これは、<xref:System.Windows.UIElement.Arrange%2A> のみに影響するプロパティ (アラインメントなど) が変更された場合、または親が <xref:System.Windows.UIElement.Measure%2A>のない <xref:System.Windows.UIElement.Arrange%2A> を受け取った場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-245">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="23e7a-246"><xref:System.Windows.UIElement.Measure%2A> の呼び出しは、<xref:System.Windows.UIElement.Arrange%2A> の呼び出しを自動的に無効にします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-246">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="23e7a-247">レイアウトの更新は、通常、(レイアウトシステムによって決定された時間に) 非同期的に行われます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-247">Layout updates generally occur asynchronously (at a time determined by the layout system).</span></span> <span data-ttu-id="23e7a-248">要素には、要素のサイズ変更に影響を与えるプロパティ (<xref:System.Windows.FrameworkElement.Width%2A>など) に対する変更がすぐに反映されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-248">An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e7a-249"><xref:System.Windows.UIElement.UpdateLayout%2A> メソッドを使用して、レイアウトの更新を強制することができます。ただし、通常は不要であり、パフォーマンスが低下する可能性があるため、この関数を呼び出すことは推奨されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-249">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</span></span> <span data-ttu-id="23e7a-250"><xref:System.Windows.UIElement.UpdateLayout%2A> を呼び出すことが適切な状況では、多くの場合、レイアウトシステムは既に更新を処理している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-250">In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates.</span></span> <span data-ttu-id="23e7a-251">レイアウトシステムでは、パッケージの一部として必要なすべての更新を最適化できる方法でレイアウトの変更を処理できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-251">The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</span></span>  
  
 <span data-ttu-id="23e7a-252">レイアウトシステムは、無効なレイアウトの2つの異なるキューを保持します。1つは <xref:System.Windows.UIElement.Measure%2A> 用で、もう1つは <xref:System.Windows.UIElement.Arrange%2A>用です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-252">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="23e7a-253">レイアウトキューは、ビジュアルツリー内の要素の順序に基づいて並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-253">The layout queue is sorted based upon the order of elements in the visual tree.</span></span> <span data-ttu-id="23e7a-254">ツリー内の上位にある要素は、親の繰り返し変更によって発生する冗長レイアウトを回避するために、キューの最上位にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-254">Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="23e7a-255">重複するエントリはキューから自動的に削除され、既に有効になっている場合は、要素がキューから自動的に削除されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-255">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</span></span>  
  
 <span data-ttu-id="23e7a-256">レイアウトを更新すると、最初に <xref:System.Windows.UIElement.Measure%2A> キューが空になり、次に <xref:System.Windows.UIElement.Arrange%2A> キューが空になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-256">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="23e7a-257"><xref:System.Windows.UIElement.Measure%2A> キューに要素がある場合、<xref:System.Windows.UIElement.Arrange%2A> キュー内の要素は配置されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-257">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="23e7a-258">親の末尾の領域。親の要素は要素自体と子を配置するために使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-258">The final area within the parent that element should use to arrange itself and its child elements.</span></span></param>
        <summary><span data-ttu-id="23e7a-259">WPF コア レベルの配置レイアウト定義のテンプレートを定義します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-259">Defines the template for WPF core-level arrange layout definition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="23e7a-260">このメソッドをオーバーライドするのは、WPF のコアレベルで派生していて、WPF フレームワークレベルのレイアウトシステムと <xref:System.Windows.FrameworkElement> 派生クラスを使用していない場合にのみです。これは、<xref:System.Windows.FrameworkElement> が <xref:System.Windows.FrameworkElement.ArrangeCore%2A>シールされているためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-260">Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span> <span data-ttu-id="23e7a-261">WPF フレームワークレベルレイアウトシステムを使用している場合は、クラス固有のレイアウトの配置動作をオーバーライドするための適切なメソッドが <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-261">If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-262"><xref:System.Windows.UIElement.ArrangeCore%2A> の実装では、基本実装を呼び出してサイズを返した後、表示されている各子要素の <xref:System.Windows.UIElement.Arrange%2A> メソッドを呼び出し、これらの <xref:System.Windows.UIElement.Arrange%2A> 呼び出しによって返されるサイズを基本実装のサイズで調整する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-262"><xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation.</span></span> <span data-ttu-id="23e7a-263"><xref:System.Windows.UIElement.ArrangeCore%2A> 実装の調整側面のロジックは、要素のレイアウト特性によって異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-263">The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element.</span></span> <span data-ttu-id="23e7a-264">次のテンプレート例では、`VisualChildren` は、要素がその内容を列挙するために定義できる仮想的なプロパティです。このレベルでコンテンツコレクションを定義していない <xref:System.Windows.UIElement>、WPF フレームワークレベルのアーキテクチャでは、コンテンツの動作が特定のコントロールやコントロールの基本クラスなどの派生要素に延期されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-264">In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-265">WPF のコアレベルで要素を開発している場合は、このメソッドをオーバーライドして、WPF コアレベルの要素に一意の配置レイアウト動作を与えるか、または要素の子要素について適切なレイアウト決定を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-265">If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</span></span> <span data-ttu-id="23e7a-266">これらの子要素が、<see cref="T:System.Windows.Controls.ItemCollection" />などの定義されたパターンから認識されない場合は、オーバーライドが必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-266">An override might be necessary if those child elements are not recognizable from a defined pattern such as an <see cref="T:System.Windows.Controls.ItemCollection" />.</span></span>  
  
<span data-ttu-id="23e7a-267">親要素は、各子要素に対してクラス固有の <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> を呼び出す必要があります。そうでない場合、子要素はレンダリングされません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-267">A parent element must call the class-specific <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child element, otherwise those child elements are not rendered.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="23e7a-268">この要素のアニメーション化対象のプロパティを指定して、アニメーションを開始します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-268">Starts an animation for a specified animated property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="23e7a-269">依存関係プロパティの識別子として指定された、アニメーション化するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-269">The property to animate, which is specified as a dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="23e7a-270">開始するアニメーションのタイムライン。</span><span class="sxs-lookup"><span data-stu-id="23e7a-270">The timeline of the animation to start.</span></span></param>
        <summary><span data-ttu-id="23e7a-271">この要素のアニメーション化対象のプロパティを指定して、アニメーションを開始します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-271">Starts an animation for a specified animated property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-272">プロパティがアニメーション化されているかどうかを確認する場合は、アニメーションが開始され、アニメーション化されていない開始点を超える最初のフレームがレンダリングされると、アニメーションがアニメーション化されたと見なされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-272">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="23e7a-273">`animation` の <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> が `null`場合、現在のアニメーションはすべて削除され、プロパティの現在の値が保持されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-273">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="23e7a-274">`animation` 値全体が `null`場合、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-274">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="23e7a-275">ただし、最初に関連付けられたアニメーションタイムラインは停止しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-275">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="23e7a-276">そのタイムラインに割り当てられたその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-276">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-277">次の例では、アニメーションを作成し、それを割り当ててから、<xref:System.Windows.UIElement.BeginAnimation%2A> を呼び出して開始します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-277">The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline, handoffBehavior As HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="23e7a-278">依存関係プロパティの識別子として指定された、アニメーション化するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-278">The property to animate, which is specified as the dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="23e7a-279">適用されるアニメーションのタイムライン。</span><span class="sxs-lookup"><span data-stu-id="23e7a-279">The timeline of the animation to be applied.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="23e7a-280">プロパティ値に既に影響している現在の (実行中の) アニメーションと新しいアニメーションが対話する方法を指定する列挙値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-280">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="23e7a-281">この要素のアニメーション化対象のプロパティを指定して、特定のアニメーションを開始します。プロパティの既存のアニメーションが実行中である場合の動作も指定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-281">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-282">プロパティがアニメーション化されているかどうかを確認する場合は、アニメーションが開始され、アニメーション化されていない開始点を超える最初のフレームがレンダリングされると、アニメーションがアニメーション化されたと見なされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-282">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="23e7a-283">`animation` の <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> が `null`場合、現在のアニメーションはすべて削除され、プロパティの現在の値が保持されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-283">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="23e7a-284">`animation` 値全体が `null`場合、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-284">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="23e7a-285">ただし、最初に関連付けられたアニメーションタイムラインは停止しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-285">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="23e7a-286">そのタイムラインに割り当てられたその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-286">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-287">次の例では、既存のアニメーションをリソースから取得し、指定されたハンドオフ動作で <xref:System.Windows.UIElement.BeginAnimation%2A> を呼び出すハンドラーを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-287">The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.</span></span>  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-288">この要素に描画された内容に直接適用するビットマップ効果を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-288">Gets or sets a bitmap effect that applies directly to the rendered content for this element.</span></span>  <span data-ttu-id="23e7a-289">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-289">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-290">適用するビットマップ効果。</span><span class="sxs-lookup"><span data-stu-id="23e7a-290">The bitmap effect to apply.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-291"><xref:System.Windows.Media.Effects.BitmapEffect> は抽象型であるため、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] の使用には、実装された <xref:System.Windows.Media.Effects.BitmapEffect>の派生クラス (<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>など) が必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-291"><xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</span></span> <span data-ttu-id="23e7a-292">実装された派生クラスの1つは、入れ子になったタグ構文を使用して複数のシーケンシャル <xref:System.Windows.Media.Effects.BitmapEffect>を指定できるコレクション型であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-292">Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.</span></span>  
  
 <span data-ttu-id="23e7a-293">型コンバーターをサポートしている <xref:System.Windows.Media.Effects.BitmapEffect> の既存の派生クラスがないため、このプロパティに使用する [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文は、一般にプロパティ要素の構文です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-293">No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.</span></span>  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-294">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-294">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-295">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-295">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|<span data-ttu-id="23e7a-296">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-296">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-297">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-297">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-298">次の例では、<xref:System.Windows.Media.Effects.BlurBitmapEffect>を使用してビットマップ効果を設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-298">The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.</span></span>  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-299">この要素に描画された内容に直接適用するビットマップ効果用の入力ソースを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-299">Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</span></span>  <span data-ttu-id="23e7a-300">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-300">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-301">ビットマップ効果のソース。</span><span class="sxs-lookup"><span data-stu-id="23e7a-301">The source for bitmap effects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-302">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-302">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-303">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-303">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|<span data-ttu-id="23e7a-304">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-304">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-305">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-305">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-306"><see cref="P:System.Windows.UIElement.BitmapEffectInput" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-306">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-307"><see cref="P:System.Windows.UIElement.BitmapEffect" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-307">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-308"><see cref="T:System.Windows.UIElement" /> のキャッシュされた表現を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-308">Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <value><span data-ttu-id="23e7a-309"><see cref="T:System.Windows.Media.CacheMode" /> のキャッシュされた表現を保持する <see cref="T:System.Windows.UIElement" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-309">A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-310">レンダリングに時間がかかるコンテンツのパフォーマンスを向上させる必要がある場合は、<xref:System.Windows.UIElement.CacheMode%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-310">Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render.</span></span> <span data-ttu-id="23e7a-311">詳細については、「<xref:System.Windows.Media.BitmapCache>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-311">For more information, see <xref:System.Windows.Media.BitmapCache>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-312"><see cref="P:System.Windows.UIElement.CacheMode" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-312">Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-313">この要素にマウスをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-313">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-314">マウスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-314"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-315">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-315">To be captured, an element must be enabled.</span></span> <span data-ttu-id="23e7a-316"><xref:System.Windows.UIElement.CaptureMouse%2A>を呼び出す前に <xref:System.Windows.UIElement.IsEnabled%2A> が `true` かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-316">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-317"><xref:System.Windows.UIElement.CaptureMouse%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.UIElement.IsMouseCaptured%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-317">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="23e7a-318"><xref:System.Windows.UIElement.CaptureMouse%2A> を呼び出すと `true`が返された場合、<xref:System.Windows.UIElement.GotMouseCapture> および <xref:System.Windows.UIElement.IsMouseCapturedChanged> イベントが発生し、<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> メソッドが呼び出された要素として報告されたイベントデータが <xref:System.Windows.UIElement.CaptureMouse%2A> されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-318">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="23e7a-319">キャプチャを強制的に実行すると、既存のキャプチャに干渉する可能性があります。特に、ドラッグアンドドロップに関連するキャプチャがマウスで発生する場合です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-319">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="23e7a-320">すべての要素からマウスキャプチャをクリアするには、`null`として指定された `element` パラメーターを使用して <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-320">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-321">次の例では、マウスをキャプチャ (および uncapture) し、3D モデルを表示するための特殊なマウスモードを有効にする、マウスとキー入力の組み合わせに対するハンドラーのペアを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-321">The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-322">この要素にスタイラスをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-322">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-323">スタイラスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-323"><see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-324">基になる既定のスタイラスデバイスに基づく既定の実装では、常に `true`が返されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-324">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="23e7a-325">ただし、入力システムのデバイスの実装を提供する入力デバイスを拡張する場合は、異なる結果を返す可能性がある別のスタイラスデバイスの実装でシステムを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-325">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="23e7a-326">要素は、スタイラスをキャプチャすると、スタイラスが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-326">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="23e7a-327">スタイラスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-327">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="23e7a-328">このメソッドを呼び出すと、基になる静的 <xref:System.Windows.Input.Stylus> メソッド <xref:System.Windows.Input.Stylus.Capture%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-328">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="23e7a-329">実際のキャプチャ動作は、アクティブなスタイラスデバイス実装によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-329">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="23e7a-330">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-330">To be captured, an element must be enabled.</span></span> <span data-ttu-id="23e7a-331"><xref:System.Windows.UIElement.CaptureStylus%2A>を呼び出す前に <xref:System.Windows.UIElement.IsEnabled%2A> が返さ `true` かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-331">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-332"><xref:System.Windows.UIElement.CaptureStylus%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.UIElement.IsStylusCaptured%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-332">If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureTouch (touchDevice As TouchDevice) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="23e7a-333">キャプチャの対象となるデバイス。</span><span class="sxs-lookup"><span data-stu-id="23e7a-333">The device to capture.</span></span></param>
        <summary><span data-ttu-id="23e7a-334">この要素にタッチをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-334">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-335">指定したタッチがこの要素にキャプチャされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-335"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-336"><xref:System.Windows.Input.TouchDevice> が現在別の要素にキャプチャされている場合、<xref:System.Windows.UIElement.CaptureTouch%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-336"><xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="23e7a-337"><xref:System.Windows.UIElement.CaptureTouch%2A> が `true`を返す場合、<xref:System.Windows.UIElement.GotTouchCapture> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-337">If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="23e7a-338">この要素から1つのタッチのキャプチャを解放するには、<xref:System.Windows.UIElement.ReleaseTouchCapture%2A> メソッドを使用して、解放するタッチデバイスを指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-338">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="23e7a-339">この要素からのすべてのタッチを解放するには、<xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-339">To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="23e7a-340"><paramref name="touchDevice" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-340"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-341">要素内容の輪郭の定義に使用するジオメトリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-341">Gets or sets the geometry used to define the outline of the contents of an element.</span></span>  <span data-ttu-id="23e7a-342">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-342">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-343">クリッピング領域のサイズ設定に使用するジオメトリ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-343">The geometry to be used for clipping area sizing.</span></span> <span data-ttu-id="23e7a-344">既定値は null <see cref="T:System.Windows.Media.Geometry" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-344">The default is a null <see cref="T:System.Windows.Media.Geometry" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-345">ジオメトリ外の要素は、レンダリングされたレイアウトで視覚的にクリップされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-345">Elements outside the geometry will be visually clipped in the rendered layout.</span></span> <span data-ttu-id="23e7a-346">ジオメトリが四角形である必要はありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-346">The geometry does not have to be rectangular.</span></span>  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-347">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-347">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-348">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-348">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipProperty>|  
|<span data-ttu-id="23e7a-349">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-349">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-350">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-350">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-351">この例では、フレームワーク要素の <xref:System.Windows.UIElement.Clip%2A> 領域を定義する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-351">This example shows how to define a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="23e7a-352">クリップを定義するには、<xref:System.Windows.Media.Geometry> (たとえば、要素の <xref:System.Windows.UIElement.Clip%2A> プロパティを設定する <xref:System.Windows.Media.EllipseGeometry> を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-352">To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry> to set the element's <xref:System.Windows.UIElement.Clip%2A> property.</span></span> <span data-ttu-id="23e7a-353">ジオメトリの領域内にある領域だけが表示されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-353">Only the area that is within the region of the geometry will be visible.</span></span>  
  
 <span data-ttu-id="23e7a-354">次の例は、クリップ領域が定義されていない <xref:System.Windows.Controls.Image> 要素を示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-354">The following example shows an <xref:System.Windows.Controls.Image> element without a defined clip region.</span></span> <span data-ttu-id="23e7a-355">クリップ領域が定義されていないため、イメージ全体が表示されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-355">Because no clip region is defined, the entire image is displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 <span data-ttu-id="23e7a-356">![クリップ領域を適用する前のオブジェクト](~/add/media/mil-task-clip-region-noclip.png "クリップ領域を適用する前のオブジェクト")</span><span class="sxs-lookup"><span data-stu-id="23e7a-356">![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png "An object before applying a clip region")</span></span>  
<span data-ttu-id="23e7a-357">クリップ領域がないイメージ</span><span class="sxs-lookup"><span data-stu-id="23e7a-357">Image with No Clip Region</span></span>  
  
 <span data-ttu-id="23e7a-358">次の例では、同じイメージが作成されますが、クリップ領域が定義されている点が異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-358">In the next example, an identical Image is created, except that it has a defined clip region.</span></span> <span data-ttu-id="23e7a-359"><xref:System.Windows.Media.EllipseGeometry> 領域内のイメージの一部だけが表示されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-359">Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry> will be displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 <span data-ttu-id="23e7a-360">![クリップオブジェクト](~/add/media/mil-task-clip-region-ellispe.PNG "クリップされたオブジェクト")</span><span class="sxs-lookup"><span data-stu-id="23e7a-360">![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG "A clipped object")</span></span>  
<span data-ttu-id="23e7a-361">楕円のクリップ領域を含むイメージ</span><span class="sxs-lookup"><span data-stu-id="23e7a-361">Image with an Elliptical Clip Region</span></span>  
  
 <span data-ttu-id="23e7a-362">次の例は、フレームワーク要素の <xref:System.Windows.UIElement.Clip%2A> 領域をアニメーション化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-362">The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="23e7a-363">この例では、<xref:System.Windows.Controls.Image> 要素の楕円クリップ領域を定義するために <xref:System.Windows.Media.EllipseGeometry> が使用されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-363">In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element.</span></span> <span data-ttu-id="23e7a-364"><xref:System.Windows.Media.Animation.PointAnimation> は、楕円ジオメトリの <xref:System.Windows.Media.EllipseGeometry.Center%2A> プロパティを (0, 0) から (200, 150) までアニメーション化します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-364">A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150).</span></span> <span data-ttu-id="23e7a-365">アニメーションは、イメージが読み込まれた後に再生を開始し、無限に繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-365">The animation starts playing after the image is loaded and repeats indefinitely.</span></span>  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 <span data-ttu-id="23e7a-366">完全なサンプルについては、[クリップ領域のサンプル](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-366">For the full sample, see the [Clip Region Sample](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-367"><see cref="P:System.Windows.UIElement.Clip" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-367">Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-368">親要素のサイズに合わせるために、この要素の内容 (またはこの要素の子要素の内容) を切り取るかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-368">Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</span></span>   <span data-ttu-id="23e7a-369">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-369">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-370">コンテンツをクリップする必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-370"><see langword="true" /> if the content should be clipped; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-371">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-371">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-372">子要素の場合、<xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> または <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>によって親要素の高さと幅が決定されているかどうかによって、<xref:System.Windows.UIElement.ClipToBounds%2A> はレイアウトの動作にさまざまな影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-372">For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span> <span data-ttu-id="23e7a-373">親要素の <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> は、<xref:System.Windows.UIElement.ClipToBounds%2A> の値に関係なく常に尊重されます。有効なクリッピングでは、常にこれらの最大値に基づいてコンテンツがクリップされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums.</span></span> <span data-ttu-id="23e7a-374">親の <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> 設定では <xref:System.Windows.UIElement.ClipToBounds%2A> が `false`されてもコンテンツはクリップされませんが、<xref:System.Windows.UIElement.ClipToBounds%2A> が `true`の場合はコンテンツがクリップされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-374">The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23e7a-375">`false` は、<xref:System.Windows.UIElement> クラスに実装されている一般的な動作であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-375">Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="23e7a-376"><xref:System.Windows.UIElement> から派生した特定の要素は、そのインスタンスのこのプロパティの依存関係プロパティのメタデータをオーバーライドして、代わりに `true` を既定にすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-376">It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead.</span></span> <span data-ttu-id="23e7a-377">いくつかの既存の派生クラスは、このメタデータをオーバーライドするか、依存関係プロパティの既定値を調整します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-377">Several existing derived classes override this metadata and/or adjust the dependency property default value.</span></span>  
  
 <span data-ttu-id="23e7a-378"><xref:System.Windows.Controls.InkCanvas>、<xref:System.Windows.Controls.InkPresenter>、および <xref:System.Windows.Controls.Primitives.Popup> は、`true`する既定値を上書きします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-378"><xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.</span></span>  
  
 <span data-ttu-id="23e7a-379">この依存関係プロパティのメタデータは、<xref:System.Windows.FrameworkElement> によってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-379"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property.</span></span> <span data-ttu-id="23e7a-380">具体的には、<xref:System.Windows.FrameworkElement> は、プロパティ値の継承を許可するようにこのプロパティを指定します (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> はメタデータで `true` ます)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-380">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="23e7a-381">このコンテキストでのプロパティ値の継承では、ローカル値またはスタイルによって割り当てられた <xref:System.Windows.UIElement.ClipToBounds%2A> の他の値を持たない子要素がある場合、この値が割り当てられている最も近い親要素の値 (スタイル、既定値、またはローカル値) が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-381">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="23e7a-382">実際には、ルート要素でのクリッピングを許可するかどうかを指定でき、その値は `false`として明示的に割り当てられていないすべての子要素に反映されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-382">In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-383">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-383">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-384">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-384">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|<span data-ttu-id="23e7a-385">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-385">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-386">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-386">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-387"><see cref="P:System.Windows.UIElement.ClipToBounds" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-387">Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-388">この要素に関連付けられている <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-388">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span></span> <span data-ttu-id="23e7a-389"><see cref="T:System.Windows.Input.CommandBinding" /> は、この要素のコマンド処理を有効にし、コマンド、コマンドのイベント、およびこの要素によってアタッチされるハンドラーの間の関連を宣言します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-389">A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-390">すべての <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="23e7a-390">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-391"><xref:System.Windows.UIElement.CommandBindings%2A> コレクションを設定するための一般的な方法として、<xref:System.Windows.Input.CommandManager> メソッドをプログラムによって使用する方法があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-391">Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="23e7a-392">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="23e7a-392">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="23e7a-393">XAML 値</span><span class="sxs-lookup"><span data-stu-id="23e7a-393">XAML Values</span></span>  
 <span data-ttu-id="23e7a-394">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="23e7a-394">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="23e7a-395">1つ以上の <xref:System.Windows.Input.CommandBinding> 要素。</span><span class="sxs-lookup"><span data-stu-id="23e7a-395">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="23e7a-396">これらのそれぞれには、既知のコマンドに設定された <xref:System.Windows.Input.CommandBinding.Command%2A> 属性と、<xref:System.Windows.Input.CommandBinding.CanExecute> および <xref:System.Windows.Input.CommandBinding.Executed> ハンドラーの実装に対して設定された属性が必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-396">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="23e7a-397">詳細については、「<xref:System.Windows.Input.CommandBinding>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-397">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-398">次の例では、マークアップを使用して、<xref:System.Windows.Input.CommandBinding> をウィンドウに追加します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-398">The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup.</span></span> <span data-ttu-id="23e7a-399">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]では、<xref:System.Windows.Input.CommandBindingCollection> がマークアップで要素として宣言されていないことに注意してください。コレクションオブジェクトは、プロパティが受け取る型によって推論され、プロパティ要素に1つ以上の <xref:System.Windows.Input.CommandBinding> 要素を設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-399">Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 <span data-ttu-id="23e7a-400">コレクションの [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文の詳細については、「 [XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-400">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 <span data-ttu-id="23e7a-401">次の例では、基本的にコード内で同じことを行います。</span><span class="sxs-lookup"><span data-stu-id="23e7a-401">The following example does essentially the same thing in code:</span></span>  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-402">レイアウト処理の測定パスの実行中に、この要素が計算したサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-402">Gets the size that this element computed during the measure pass of the layout process.</span></span></summary>
        <value><span data-ttu-id="23e7a-403">計算されたサイズ。これが、配置パスの目的のサイズになります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-403">The computed size, which becomes the desired size for the arrange pass.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-404">このプロパティによって返される値は、<xref:System.Windows.UIElement.IsMeasureValid%2A> プロパティの値が `true`の場合にのみ有効な測定値になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-404">The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="23e7a-405"><xref:System.Windows.UIElement.DesiredSize%2A> は通常、<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>、<xref:System.Windows.FrameworkElement.MeasureOverride%2A>、<xref:System.Windows.UIElement.OnRender%2A> などのレイアウト動作のオーバーライドを実装するときに、測定要因の1つとしてチェックされます (<xref:System.Windows.UIElement.OnRender%2A> の場合は、代わりに <xref:System.Windows.UIElement.RenderSize%2A> を確認することができますが、これは実装によって異なります)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-405"><xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation).</span></span> <span data-ttu-id="23e7a-406">シナリオによっては、<xref:System.Windows.UIElement.DesiredSize%2A> が実装ロジックによって完全に尊重され、<xref:System.Windows.UIElement.DesiredSize%2A> に対する制約が適用される可能性があります。また、このような制約によって、親要素または子要素のその他の特性も変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-406">Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</span></span> <span data-ttu-id="23e7a-407">たとえば、スクロール可能な領域をサポートするコントロール (ただし、スクロール可能な領域が既に有効になっている WPF フレームワークレベルのコントロールから派生しないことを選択) は、使用可能なサイズを <xref:System.Windows.UIElement.DesiredSize%2A>と比較できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-407">For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="23e7a-408">コントロールは、そのコントロールの [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] でスクロールバーを有効にした内部状態を設定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-408">The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control.</span></span> <span data-ttu-id="23e7a-409">また、<xref:System.Windows.UIElement.DesiredSize%2A> によっては、特定のシナリオでは無視される可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-409">Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-410">次の例では、<xref:System.Windows.FrameworkElement.MeasureOverride%2A> 実装の一部として <xref:System.Windows.UIElement.DesiredSize%2A> を示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-410">The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation.</span></span> <span data-ttu-id="23e7a-411"><xref:System.Windows.UIElement.DesiredSize%2A>を取得する直前に <xref:System.Windows.UIElement.Measure%2A> が呼び出されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-411">Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="23e7a-412">これにより、<xref:System.Windows.UIElement.DesiredSize%2A> が正当な値を保持することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-412">This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.</span></span>  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-413">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-413">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-414">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-414">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-415"><xref:System.Windows.UIElement.DragEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-415">Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-416">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-417">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-417">Identifier field</span></span>|<xref:System.Windows.UIElement.DragEnterEvent>|  
|<span data-ttu-id="23e7a-418">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-418">Routing strategy</span></span>|<span data-ttu-id="23e7a-419">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-419">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-420">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-420">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-421">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewDragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-421">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="23e7a-422">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnDragEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-422">Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-423"><see cref="E:System.Windows.UIElement.DragEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-423">Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-424">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-424">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-425">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-425">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-426">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-426">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-427">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-427">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-428">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-428">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-429">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-429">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-430">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-430">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-431"><xref:System.Windows.UIElement.DragLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-431">Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-432">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-432">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-433">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-433">Identifier field</span></span>|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|<span data-ttu-id="23e7a-434">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-434">Routing strategy</span></span>|<span data-ttu-id="23e7a-435">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-435">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-436">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-436">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-437">対応するトンネリングイベントは <xref:System.Windows.DragDrop.PreviewDragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-437">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="23e7a-438">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnDragLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-438">Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-439"><see cref="E:System.Windows.UIElement.DragLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-439">Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-440">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-440">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-441">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-441">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-442">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-442">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-443">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-443">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-444">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-444">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-445">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-445">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-446">このイベントは、要素の境界内でドラッグが発生した場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-446">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="23e7a-447">ドラッグが境界の外側で開始された後、内を移動すると、このイベントも発生し、<xref:System.Windows.UIElement.DragEnter> および関連するプレビューイベントも発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-447">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="23e7a-448">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-448">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-449"><xref:System.Windows.UIElement.DragOver> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-449">Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-450">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-450">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-451">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-451">Identifier field</span></span>|<xref:System.Windows.UIElement.DragOverEvent>|  
|<span data-ttu-id="23e7a-452">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-452">Routing strategy</span></span>|<span data-ttu-id="23e7a-453">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-453">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-454">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-454">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-455">対応するトンネリングイベントは <xref:System.Windows.DragDrop.PreviewDragOver>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-455">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="23e7a-456">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnDragOver%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-456">Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-457"><see cref="E:System.Windows.UIElement.DragOver" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-457">Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-458">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-458">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-459">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-459">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-460">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-460">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-461">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-461">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-462">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-462">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-463">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-463">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-464">このイベントは、このクラスの <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-464">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-465"><xref:System.Windows.UIElement.Drop> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-465">Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-466">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-467">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-467">Identifier field</span></span>|<xref:System.Windows.UIElement.DropEvent>|  
|<span data-ttu-id="23e7a-468">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-468">Routing strategy</span></span>|<span data-ttu-id="23e7a-469">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-469">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-470">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-470">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-471">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewDrop>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="23e7a-472">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnDrop%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-472">Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-473"><see cref="E:System.Windows.UIElement.Drop" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-473">Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-474">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-475">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-476">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-477">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-478">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-479"><see cref="T:System.Windows.UIElement" /> に適用するビットマップ効果を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-479">Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="23e7a-480">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-480">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-481">ビットマップ効果を表す <see cref="T:System.Windows.Media.Effects.Effect" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-481">An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-482"><xref:System.Windows.UIElement>にビットマップ効果を適用するには、<xref:System.Windows.UIElement.Effect%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-482">Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.</span></span>  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-483">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-483">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-484">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-484">Identifier field</span></span>|<xref:System.Windows.UIElement.EffectProperty>|  
|<span data-ttu-id="23e7a-485">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-485">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-486">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-486">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-487">次の XAML は、カスタム <xref:System.Windows.Media.Effects.ShaderEffect> を <xref:System.Windows.UIElement.Effect%2A> プロパティに割り当てる方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-487">The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.</span></span>  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-488"><see cref="P:System.Windows.UIElement.Effect" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-488">Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-489">この要素にフォーカスを設定することを試みます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-489">Attempts to set focus to this element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-490">この要素にキーボード フォーカスと論理フォーカスの両方が設定された場合は <see langword="true" />。論理フォーカスのみが設定された場合、またはこのメソッドの呼び出しによってフォーカスの変更が強制されない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-490"><see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-491">フォーカスを設定できるようにするには、<xref:System.Windows.UIElement.Focusable%2A> と <xref:System.Windows.UIElement.IsEnabled%2A> を両方とも `true`する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-491">To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="23e7a-492">要素がフォーカス可能で有効な場合でも、`Focus` preview イベントは特定のツリーで処理される可能性があり、その要素にフォーカスすることはできません (複合コントロールなど)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-492">Even if the element is focusable and valid, the `Focus` preview events may be processed in a specific tree, and focus on that element may not be allowed (for example, in a composite control).</span></span>
<span data-ttu-id="23e7a-493">このような場合、このメソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-493">In such a case, this method returns `false`.</span></span>
 
 <span data-ttu-id="23e7a-494">一般的に、フォーカスは、キーボードフォーカスと論理フォーカスという2つの異なる概念によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-494">In general, focus is controlled by two different concepts: keyboard focus and logical focus.</span></span> <span data-ttu-id="23e7a-495">これらの2つの概念は、常に同じであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-495">These two concepts are not always the same.</span></span> <span data-ttu-id="23e7a-496">詳細については、「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」と「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-496">For more information, see [Focus summary](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>
 
 <span data-ttu-id="23e7a-497"><xref:System.Windows.UIElement.Focus%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.UIElement.IsKeyboardFocused%2A> と <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-497">If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="23e7a-498">関連するプロパティがまだ `true`ていない場合、<xref:System.Windows.UIElement.Focus%2A>を呼び出すと、次の1つ以上のイベントが次の順序で発生します。 <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>、<xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (ソースは新しいフォーカスターゲット)、<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>、<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>、<xref:System.Windows.UIElement.LostKeyboardFocus>、<xref:System.Windows.UIElement.GotKeyboardFocus> (ソースは新しいフォーカスターゲット) です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-498">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="23e7a-499">この呼び出しを成功させるには、アプリケーション内の他の要素が前にフォーカスを持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-499">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-500">次の例では、<xref:System.Windows.FrameworkElement.Name%2A>によって参照される <xref:System.Windows.Controls.TextBox> にフォーカスを設定し、<xref:System.Windows.Controls.TextBox>内のカーソルの位置を調整します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-500">The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-501">要素がフォーカスを得ることができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-501">Gets or sets a value that indicates whether the element can receive focus.</span></span>  <span data-ttu-id="23e7a-502">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-502">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-503">要素がフォーカス可能な場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-503"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="23e7a-504">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-504">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-505">フォーカスがある要素のみがキーボード入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-505">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="23e7a-506"><xref:System.Windows.UIElement.Focusable%2A> は、実際の依存関係プロパティに対する [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] プロパティアクセサーです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-506"><xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="23e7a-507">この特定の依存関係プロパティは、派生要素クラスでは特にコントロールで、明確な "既定" 値が設定されていることが非常によくあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-507">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</span></span> <span data-ttu-id="23e7a-508">これは、通常、次の2つの方法のいずれかで発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-508">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="23e7a-509">依存関係プロパティは特定の派生クラスによって継承されますが、その派生クラスは依存関係プロパティのメタデータをオーバーライドし、プロパティの既定値を変更します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-509">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
-   <span data-ttu-id="23e7a-510">スタイルまたはテンプレートが要素に適用され、その依存関係プロパティの値が別に設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-510">A style or template is applied to an element, which sets that dependency property value differently.</span></span>  
  
 <span data-ttu-id="23e7a-511">たとえば、<xref:System.Windows.Controls.Button> が <xref:System.Windows.UIElement.Focusable%2A> から [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] のプロパティとして <xref:System.Windows.UIElement>を直接継承していても、<xref:System.Windows.Controls.Button> コントロールの <xref:System.Windows.UIElement.Focusable%2A> の明らかな "既定" は `true`されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-511">For example, the apparent "default" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="23e7a-512">これは、<xref:System.Windows.UIElement.Focusable%2A> 依存関係プロパティに適用されるメタデータ値が、クラス階層の <xref:System.Windows.Controls.Button> と <xref:System.Windows.UIElement> の間にある <xref:System.Windows.Controls.Control> 基底クラスの静的コンストラクター内でオーバーライドされたためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-512">This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.</span></span>  
  
 <span data-ttu-id="23e7a-513"><xref:System.Windows.Controls.Control> またはその派生クラスによって継承されると、<xref:System.Windows.Controls.Control> このプロパティの既定値を `true`に再定義します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-513">When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.</span></span>  
  
 <span data-ttu-id="23e7a-514"><xref:System.Windows.Controls.Label> (<xref:System.Windows.Controls.Control> 派生クラス) によって継承されると、既定値が再定義され、`false`されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-514">When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-515">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-515">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-516">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-516">Identifier field</span></span>|<xref:System.Windows.UIElement.FocusableProperty>|  
|<span data-ttu-id="23e7a-517">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-517">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-518">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-518">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-519">次のコード例は、テンプレート内の要素の1つに <xref:System.Windows.UIElement.Focusable%2A> `false` を設定する、特定のカスタムコントロールのコントロールテンプレートを示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-519">The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.</span></span>  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-520">(<see cref="T:System.Windows.Controls.Control" />からではなく) <see cref="T:System.Windows.UIElement" /> から直接派生する場合は、既定では要素にフォーカスを設定できないため、要素にフォーカスを設定するかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-520">When deriving from <see cref="T:System.Windows.UIElement" /> directly (as opposed to from <see cref="T:System.Windows.Controls.Control" />), consider whether you wish your element to be focusable, because by default the element will not be focusable.</span></span> <span data-ttu-id="23e7a-521">要素にフォーカスを設定する場合は、次のように、型の静的コンストラクター内でこのプロパティのメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-521">If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</span></span> 
<span data-ttu-id="23e7a-522">[! code-csharp[CorePseudocode # UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)][! code-vb[CorePseudocode # UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span><span class="sxs-lookup"><span data-stu-id="23e7a-522">[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span></span> 
<span data-ttu-id="23e7a-523">ここで <paramref name="myElement" /> には、メタデータ値をオーバーライドする型のクラス名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-523">where <paramref name="myElement" /> should be the class name of the type that you are overriding the metadata value on.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-524"><see cref="P:System.Windows.UIElement.Focusable" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-524">Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-525">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-525">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-526"><see cref="P:System.Windows.UIElement.Focusable" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-526">Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="23e7a-527">照合する対象の依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-527">The dependency property to check.</span></span></param>
        <summary><span data-ttu-id="23e7a-528">この要素の、指定したプロパティの基本プロパティ値を返します。実行中または停止済みのアニメーションでアニメーション化される値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-528">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span></span></summary>
        <returns><span data-ttu-id="23e7a-529">指定した依存関係プロパティにアニメーションが添付されていないような場合のプロパティ値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-529">The property value as if no animations are attached to the specified dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-530">プロパティにアニメーションがアタッチされていない場合、<xref:System.Windows.UIElement.GetAnimationBaseValue%2A> 戻り値は常に <xref:System.Windows.DependencyObject.GetValue%2A> 戻り値と同じになります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-530">If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="23e7a-531">アニメーションがアタッチされている場合、開始値と停止値を含むすべての可能なアニメーションの派生値は無視され、プロパティ値は他のすべての入力に基づいて決定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-531">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="23e7a-532">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-532">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-533">次の例では、<xref:System.Windows.Controls.Button>のアニメーション化された <xref:System.Windows.FrameworkElement.Width%2A> プロパティの基本値と、変換の基本値を報告するハンドラーを実装しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-533">The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="23e7a-534">要素によって提供される使用可能なサイズ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-534">The available size provided by the element.</span></span></param>
        <summary><span data-ttu-id="23e7a-535"><see cref="P:System.Windows.UIElement.ClipToBounds" /> が <see langword="true" /> に設定される場合にクリップされる領域を表す代替クリッピング ジオメトリを返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-535">Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="23e7a-536">潜在的なクリッピング ジオメトリ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-536">The potential clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-537">既定の実装では、正当な値が返されますが、その計算では `layoutSlotSize` パラメーターを使用しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-537">The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations.</span></span> <span data-ttu-id="23e7a-538">代わりに、<xref:System.Windows.UIElement.RenderSize%2A>の値を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-538">Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-539">このメソッドは、すぐに派生した <xref:System.Windows.FrameworkElement> クラスによってオーバーライドされ、<xref:System.Windows.FrameworkElement> オーバーライドにより、WPF フレームワークレベルの一般的な要素に対してより高度な動作が生成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-539">This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements.</span></span> <span data-ttu-id="23e7a-540">詳細については、「<xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-540">For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-541">派生クラスでオーバーライドされると、ビジュアル親が存在しない場合に、この要素の代替[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] の親を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-541">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="23e7a-542">報告する代替の親接続を派生クラスの実装が持つ場合のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="23e7a-542">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-543">このメソッドの既定の仮想実装では、`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-543">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="23e7a-544"><xref:System.Windows.FrameworkElement> は、実際の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-544"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="23e7a-545">代替の親は、イベントのルーティングに使用されます。これは、要素が、ビジュアルツリーを、標準の親にルーティングするための標準的なパターンとは別の方法でルーティングされるようにする場合、またはプレビュールーティング方式で下に移動する場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-545">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-546">入力システムがこの要素を対象とするドラッグ アンド ドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-546">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-547"><xref:System.Windows.UIElement.GiveFeedback> イベントを使用すると、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、ドラッグイベントのソースでマウスポインターの外観を変更できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-547">The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="23e7a-548">視覚的なフィードバックにより、ドラッグアンドドロップ操作が進行中であることが強調されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-548">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="23e7a-549">このイベントは、このクラスの <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.GiveFeedback> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-549">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-550"><xref:System.Windows.UIElement.GiveFeedback> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-550">Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-551">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-551">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-552">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-552">Identifier field</span></span>|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|<span data-ttu-id="23e7a-553">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-553">Routing strategy</span></span>|<span data-ttu-id="23e7a-554">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-554">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-555">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-555">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="23e7a-556">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewGiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-556">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="23e7a-557">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnGiveFeedback%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-557">Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-558"><see cref="E:System.Windows.UIElement.GiveFeedback" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-558">Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-559">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-559">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-560">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-560">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-561">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-561">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-562">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-562">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-563">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-563">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-564">この要素が論理フォーカスを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-564">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-565">メソッド呼び出しを使用してフォーカスが意図的に強制されていても、前のキーボードフォーカスが別のスコープに存在する場合、論理フォーカスはキーボードフォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-565">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="23e7a-566">このシナリオでは、キーボードフォーカスはそのままで、<xref:System.Windows.UIElement.Focus%2A> メソッドが呼び出される要素は引き続き論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-566">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="23e7a-567">このイベントをより正確に解釈することは、ルート内の要素の <xref:System.Windows.UIElement.IsFocused%2A> プロパティの値が `false` から `true`に変更されたときに発生することです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-567">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="23e7a-568">このイベントはバブルルーティングを使用するため、フォーカスを受け取る要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-568">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-569">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを取得した実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-569">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-570">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-570">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-571">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-571">Identifier field</span></span>|<xref:System.Windows.UIElement.GotFocusEvent>|  
|<span data-ttu-id="23e7a-572">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-572">Routing strategy</span></span>|<span data-ttu-id="23e7a-573">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-573">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-574">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-574">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="23e7a-575">対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-575">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-576">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnGotFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-576">Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-577"><see cref="E:System.Windows.UIElement.GotFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-577">Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-578">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-578">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-579">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-579">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-580">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-580">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-581">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-581">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-582">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-582">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-583">この要素にキーボード フォーカスが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-583">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-584"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> は、要素のフォーカス状態を保持するプロパティの状態の変化を追跡する類似したイベントです。<xref:System.Windows.UIElement.GotKeyboardFocus> イベントは、同じ状況の多くで発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-584"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="23e7a-585">このイベントはバブルルーティングを使用するため、フォーカスがある要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-585">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-586">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-586">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="23e7a-587">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.GotKeyboardFocus> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-587">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-588"><xref:System.Windows.UIElement.GotKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-588">Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-589">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-589">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-590">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-590">Identifier field</span></span>|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="23e7a-591">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-591">Routing strategy</span></span>|<span data-ttu-id="23e7a-592">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-592">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-593">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-593">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="23e7a-594">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-594">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="23e7a-595">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-595">Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-596"><see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-596">Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-597">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-597">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-598">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-598">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-599">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-599">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-600">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-600">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-601">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-601">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-602">この要素がマウスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-602">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-603">要素がマウスをキャプチャすると、マウスポインターが境界の外側にある場合でもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-603">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="23e7a-604">マウスは、通常、ドラッグアンドドロップ操作中にキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャされたままになります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-604">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="23e7a-605">このイベントはバブルルーティングを使用するため、キャプチャを持つ要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-605">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-606">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、マウスキャプチャを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-606">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="23e7a-607">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.GotMouseCapture> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-607">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-608"><xref:System.Windows.UIElement.GotMouseCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-608">Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-609">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-609">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-610">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-610">Identifier field</span></span>|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="23e7a-611">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-611">Routing strategy</span></span>|<span data-ttu-id="23e7a-612">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-612">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-613">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-613">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="23e7a-614">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-614">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-615">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnGotMouseCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-615">Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-616"><see cref="E:System.Windows.UIElement.GotMouseCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-616">Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-617">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-617">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-618">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-618">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-619">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-619">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-620">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-620">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-621">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-621">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-622">この要素がスタイラスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-622">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-623">要素がスタイラスをキャプチャすると、ポインターが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-623">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="23e7a-624">スタイラスは、通常、ドラッグアンドドロップ操作中にキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャを保持します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-624">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="23e7a-625">このイベントはバブルルーティングを使用するため、キャプチャを持つ要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-625">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-626">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、capture を持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-626">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="23e7a-627">このイベントは、このクラスの添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.GotStylusCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-627">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-628"><xref:System.Windows.UIElement.GotStylusCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-628">Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-629">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-629">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-630">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-630">Identifier field</span></span>|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="23e7a-631">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-631">Routing strategy</span></span>|<span data-ttu-id="23e7a-632">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-632">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-633">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-633">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-634">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-634">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-635">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnGotStylusCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-635">Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-636"><see cref="E:System.Windows.UIElement.GotStylusCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-636">Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-637">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-637">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-638">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-638">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-639">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-639">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-640">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-640">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-641">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-641">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-642">タッチがこの要素にキャプチャされると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-642">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-643">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-643">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-644">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-644">Identifier field</span></span>|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="23e7a-645">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-645">Routing strategy</span></span>|<span data-ttu-id="23e7a-646">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-646">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-647">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-647">Delegate</span></span>|<span data-ttu-id="23e7a-648"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-648"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-649">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnGotTouchCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-649">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-650"><see cref="E:System.Windows.UIElement.GotTouchCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-650">Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-651">この要素にアニメーション化されたプロパティがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-651">Gets a value indicating whether this element has any animated properties.</span></span></summary>
        <value><span data-ttu-id="23e7a-652">プロパティのいずれかに添付されたアニメーションをこの要素が持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-652"><see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-653">このプロパティは、永続的な (ロックされていない、常に実行されている) アニメーション、または特定のタイムラインを持つアニメーションに対して `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-653">This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-654"><see cref="T:System.Windows.UIElement" /> にフォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-654">Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</span></span></summary>
        <value><span data-ttu-id="23e7a-655"><see cref="T:System.Windows.UIElement" /> にフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-655"><see langword="true" /> if the <see cref="T:System.Windows.UIElement" /> has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-656">サブクラスは、このプロパティをオーバーライドして、要素にキーボードフォーカスがあることを指定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-656">Subclasses can override this property to specify when the element has keyboard focus.</span></span>  <span data-ttu-id="23e7a-657">これは、<xref:System.Windows.UIElement> にキーボードフォーカスを持つことができる要素が含まれていて、要素にフォーカスがあることを報告する必要がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-657">This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="23e7a-658"><see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> を実装して、基本要素のヒット テスト動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-658">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters"><span data-ttu-id="23e7a-659">実行するヒット テストについて、初期ヒット ポイントも含めて、記述します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-659">Describes the hit test to perform, including the initial hit point.</span></span></param>
        <summary><span data-ttu-id="23e7a-660"><see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> を実装して、要素のヒット テストの基本動作を提供します (<see cref="T:System.Windows.Media.GeometryHitTestResult" /> を返します)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-660">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</span></span></summary>
        <returns><span data-ttu-id="23e7a-661">評価されたジオメトリを含むテスト結果。</span><span class="sxs-lookup"><span data-stu-id="23e7a-661">Results of the test, including the evaluated geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-662">このメソッドをさらに派生クラスでオーバーライドする方法については、「元の仮想メソッド <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-662">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="23e7a-663">いくつかの特定のコントロール (<xref:System.Windows.Controls.TextBlock>など) には個別の実装があり、これをオーバーライドすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-663">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.</span></span>  
  
 <span data-ttu-id="23e7a-664">このメソッドは、アプリケーションコードから呼び出すためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-664">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="23e7a-665">このメソッドは、入力システムのさまざまな側面によって公開される内部ヒットテスト動作 (マウスポインターが要素の上にあるかどうかなど) をサポートします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-665">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters"><span data-ttu-id="23e7a-666">実行するヒット テストについて、初期ヒット ポイントも含めて、記述します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-666">Describes the hit test to perform, including the initial hit point.</span></span></param>
        <summary><span data-ttu-id="23e7a-667"><see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> を実装して、要素のヒット テストの基本動作を提供します (<see cref="T:System.Windows.Media.HitTestResult" /> を返します)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-667">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</span></span></summary>
        <returns><span data-ttu-id="23e7a-668">評価されたポイントを含む、テストの結果。</span><span class="sxs-lookup"><span data-stu-id="23e7a-668">Results of the test, including the evaluated point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-669">このメソッドをさらに派生クラスでオーバーライドする方法については、「元の仮想メソッド <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-669">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="23e7a-670">いくつかの特定のコントロール (<xref:System.Windows.Controls.TextBlock>など) には、<xref:System.Windows.UIElement>で定義されている <xref:System.Windows.UIElement.HitTestCore%2A> をオーバーライドする個別の実装があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-670">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-671">このメソッドは、アプリケーションコードから呼び出すためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-671">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="23e7a-672">このメソッドは、入力システムのさまざまな側面によって公開される内部ヒットテスト動作 (マウスポインターが要素の上にあるかどうかなど) をサポートします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-672">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-673">この要素に関連付けられている入力バインドのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-673">Gets the collection of input bindings associated with this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-674">入力バインディングのコレクション。</span><span class="sxs-lookup"><span data-stu-id="23e7a-674">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-675">入力バインドでは、入力デバイスへのコマンドのバインドがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-675">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="23e7a-676">たとえば、<xref:System.Windows.Input.MouseBinding> は、マウスデバイスに固有のプロパティを含む入力バインドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-676">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="23e7a-677">入力バインディングのコレクションには、その型に関連する入力バインドと、インスタンスで宣言されている入力バインドの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-677">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="23e7a-678">関連するプロパティ <xref:System.Windows.UIElement.CommandBindings%2A>は、コマンドバインドのコレクションを保持します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-678">A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="23e7a-679">これらは、コマンド処理の次のレベルを表すという点で入力バインドとは異なります。これは、既知のコマンドに関連付けられているアクションです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-679">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="23e7a-680">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="23e7a-680">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="23e7a-681">XAML 値</span><span class="sxs-lookup"><span data-stu-id="23e7a-681">XAML Values</span></span>  
 <span data-ttu-id="23e7a-682">*Oneor、Inputbindings*</span><span class="sxs-lookup"><span data-stu-id="23e7a-682">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="23e7a-683">1つ以上の <xref:System.Windows.Input.InputBinding> 要素 (通常は <xref:System.Windows.Input.KeyBinding> または <xref:System.Windows.Input.MouseBinding> 派生クラス)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-683">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="23e7a-684">これらのそれぞれには、<xref:System.Windows.Input.InputBinding.Command%2A> と <xref:System.Windows.Input.InputBinding.Gesture%2A> 属性が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-684">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-685">次の例では、1つの <xref:System.Windows.Input.KeyBinding>を使用して、<xref:System.Windows.Window>にこのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-685">The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.</span></span>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="23e7a-686">コレクションの [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文の詳細については、「 [XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-686">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputHitTest (point As Point) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="23e7a-687">この要素内のオフセット座標。</span><span class="sxs-lookup"><span data-stu-id="23e7a-687">The offset coordinates within this element.</span></span></param>
        <summary><span data-ttu-id="23e7a-688">現在の要素の原点からの指定した相対座標にある、現在の要素内の入力要素を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-688">Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</span></span></summary>
        <returns><span data-ttu-id="23e7a-689">指定した位置にある子要素。</span><span class="sxs-lookup"><span data-stu-id="23e7a-689">The element child that is located at the given position.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-690"><xref:System.Windows.IInputElement> が戻り値の型として返されるのは、その型が <xref:System.Windows.UIElement> と <xref:System.Windows.ContentElement>の両方に共通のインターフェイスであるためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-690"><xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="23e7a-691">次に、戻り値の型を適切にキャストするか、<xref:System.Windows.IInputElement> インターフェイスで定義されている特定のメンバーに対してインターフェイスインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-691">You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.</span></span>  
  
 <span data-ttu-id="23e7a-692">このメソッドは、通常、アプリケーションコードからは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-692">This method typically is not called from your application code.</span></span> <span data-ttu-id="23e7a-693">このメソッドを呼び出すことができるのは、マウスデバイスロジックの再作成など、既に存在する低レベルの入力特徴を大量に再実装する場合のみです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-693">Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</span></span>  
  
 <span data-ttu-id="23e7a-694"><xref:System.Windows.IContentHost> は、同じシグネチャを持つ <xref:System.Windows.IContentHost.InputHitTest%2A> メソッドをコントラクトします。これは、一部の要素が明示的に実装することを選択します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-694"><xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-695">要素の配置状態 (レイアウト) を無効にします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-695">Invalidates the arrange state (layout) for the element.</span></span> <span data-ttu-id="23e7a-696">無効にした後、要素のレイアウトが更新されます。更新は、<see cref="M:System.Windows.UIElement.UpdateLayout" /> によって強制されない限り非同期に行われます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-696">After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-697"><xref:System.Windows.UIElement.InvalidateArrange%2A> を頻繁に呼び出す場合や、特に <xref:System.Windows.UIElement.UpdateLayout%2A> する場合は、パフォーマンスに大きな影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-697">Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="23e7a-698">したがって、コード内の他の Api への後続の呼び出しに対して正確なレイアウトの状態を絶対に必要としない限り、このメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-698">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other APIs in your code.</span></span> <span data-ttu-id="23e7a-699"><xref:System.Windows.UIElement.InvalidateArrange%2A> を呼び出す可能性がある高度なシナリオでは、<xref:System.Windows.Freezable> または <xref:System.Windows.FrameworkElement> 派生クラスにはない依存関係プロパティの <xref:System.Windows.PropertyChangedCallback> を作成している場合に、レイアウトの配置パスが変更されても影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-699">An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-700">要素の測定状態 (レイアウト) を無効にします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-700">Invalidates the measurement state (layout) for the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-701">このメソッドを呼び出すと、内部的に <xref:System.Windows.UIElement.InvalidateArrange%2A> も呼び出され、<xref:System.Windows.UIElement.InvalidateMeasure%2A> を呼び出し、連続して <xref:System.Windows.UIElement.InvalidateArrange%2A> する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-701">Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession.</span></span> <span data-ttu-id="23e7a-702">無効化の後、要素のレイアウトが更新されます。これは、同期レイアウトの変更を強制するために <xref:System.Windows.UIElement.UpdateLayout%2A> が呼び出されない限り、非同期的に行われます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-702">After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.</span></span>  
  
 <span data-ttu-id="23e7a-703">WPF フレームワークレベルのレイアウトシステムでは、要素のビジュアルツリー内の変更に対して独自の処理が行われます。また、ほとんどのレイアウトの無効化の場合、レイアウトシステムは必要に応じて、このメソッドに相当するものを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-703">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</span></span> <span data-ttu-id="23e7a-704">このメソッドは、要素ツリーを直接操作するレイアウトの完全な実装を生成する場合、または同様の高度なシナリオを行う場合にのみ呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-704">You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</span></span> <span data-ttu-id="23e7a-705">このような高度なシナリオの1つは、<xref:System.Windows.Freezable> ではない依存関係プロパティの <xref:System.Windows.PropertyChangedCallback> を作成する場合、または、変更時にレイアウトの測定パスに影響を与える派生クラス <xref:System.Windows.FrameworkElement> する場合です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-705">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.</span></span>  
  
 <span data-ttu-id="23e7a-706"><xref:System.Windows.UIElement.InvalidateMeasure%2A> を頻繁に呼び出す場合や、特に <xref:System.Windows.UIElement.UpdateLayout%2A> する場合は、パフォーマンスに大きな影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-706">Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="23e7a-707">したがって、コード内の他の Api への後続の呼び出しに対して正確なレイアウトの状態を絶対に必要としない限り、このメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-707">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other APIs in your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-708">要素の描画を無効にして、新しい完全なレイアウト パスを強制します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-708">Invalidates the rendering of the element, and forces a complete new layout pass.</span></span> <span data-ttu-id="23e7a-709">レイアウト サイクルが完了した後に、<see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-709"><see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-710">このメソッドは <xref:System.Windows.UIElement.InvalidateArrange%2A> を内部的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-710">This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.</span></span>  
  
 <span data-ttu-id="23e7a-711">このメソッドは、通常、アプリケーションコードからは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-711">This method is not generally called from your application code.</span></span> <span data-ttu-id="23e7a-712">WPF フレームワークレベルのレイアウトシステムは、要素のビジュアルツリー内の変更に対して独自の処理を行います。また、必要に応じて、このメソッドに相当するものを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-712">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</span></span> <span data-ttu-id="23e7a-713">このメソッドの呼び出しは、高度なシナリオに対してのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-713">Calling this method is necessary only for advanced scenarios.</span></span> <span data-ttu-id="23e7a-714">このような高度なシナリオの1つとして、<xref:System.Windows.Freezable> にない依存関係プロパティの <xref:System.Windows.PropertyChangedCallback> を作成する場合や、変更時にレイアウトに影響を与える派生クラス <xref:System.Windows.FrameworkElement> する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-714">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-715">この要素のレイアウトにおける子要素の計算済みのサイズと位置が有効かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-715">Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</span></span></summary>
        <value><span data-ttu-id="23e7a-716">レイアウトのサイズと位置が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-716"><see langword="true" /> if the size and position of layout are valid; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-717">この要素 (またはその親) で <xref:System.Windows.UIElement.InvalidateArrange%2A> を呼び出すことによって、強制的に配置を無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-717">You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents).</span></span> <span data-ttu-id="23e7a-718">これにより、レイアウトシステムによって決定されるときに、再合成のレイアウトにフラグが設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-718">This flags the layout for recomposition at such time as the layout system determines.</span></span> <span data-ttu-id="23e7a-719">または、<xref:System.Windows.UIElement.UpdateLayout%2A> を直接呼び出すこともできますが、それ以上の無効化が行われていないことが明らかな場合にのみ行う必要があります (大量の不要な更新によってパフォーマンスが低下することがあります)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-719">Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</span></span>  
  
 <span data-ttu-id="23e7a-720"><xref:System.Windows.UIElement.IsArrangeValid%2A> を <xref:System.Windows.UIElement.IsMeasureValid%2A> `true` することはできません (レイアウトプロセスでは、最初は測定 `true` が有効になっていないため、配置を有効にすることはできません)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-720"><xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-721">この要素が [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] で有効かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-721">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="23e7a-722">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-722">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-723">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-723"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-724">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-724">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-725">このプロパティは、特定の要素に対する <xref:System.Windows.UIElement.IsEnabledCore%2A> のクラス固有の実装 (実行時) によって影響を受けることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-725">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="23e7a-726">そのため、ここに記載されている既定値は有効でないことがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-726">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="23e7a-727">たとえば、スクロールバーをサポートする必要がないと判断された場合、<xref:System.Windows.Controls.Primitives.ScrollBar> は `false` <xref:System.Windows.UIElement.IsEnabled%2A> されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-727">For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar.</span></span> <span data-ttu-id="23e7a-728">この値を設定しようとすると、<xref:System.Windows.UIElement.IsEnabledCore%2A>によって返された値によってオーバーライドされる可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-728">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-729">有効になっていない要素はヒットテストまたはフォーカスに含まれないため、入力イベントのソースにはなりません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-729">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-730">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-730">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-731">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-731">Identifier field</span></span>|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|<span data-ttu-id="23e7a-732">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-732">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-733">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-733">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-734">次の例は、1つのボタンのハンドラーを示しています。このハンドラーを実行すると、別の名前付きボタン `b1`に <xref:System.Windows.UIElement.IsEnabled%2A> `false` が設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-734">The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.</span></span>  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-735">この要素の <see cref="P:System.Windows.UIElement.IsEnabled" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-735">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-736">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-736">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-737">派生クラス内で <see cref="P:System.Windows.UIElement.IsEnabled" /> の戻り値になる値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-737">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="23e7a-738">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-738"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-739">このプロパティの既定の実装では、値がキャッシュされ、この要素の親要素が有効になっているかどうかも計算されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-739">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="23e7a-740">(親が有効になっていない場合、子要素を実用的な [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]で効果的に有効にすることはできません)。この実装をオーバーライドする場合は、この動作を維持するために基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-740">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span>  
  
<span data-ttu-id="23e7a-741"><see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> クラスは、このプロパティの既存のオーバーライド実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-741">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class provides an existing override implementation of this property.</span></span> <span data-ttu-id="23e7a-742">この上書きは、コンテンツプレゼンテーション領域内のコンテンツが使用可能な領域を超えているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-742">This override determines whether the content inside the content presentation area exceeds the available area.</span></span> <span data-ttu-id="23e7a-743">コンテンツが領域を超えている場合は、スクロールバーの部分が有効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-743">If the content does exceed the area, the scrollbar portion is enabled.</span></span> <span data-ttu-id="23e7a-744">それ以外の場合、スクロールバーは有効になりません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-744">Otherwise, the scrollbar is not enabled.</span></span></para></block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-745"><see cref="P:System.Windows.UIElement.IsEnabled" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-745">Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-746">この要素に論理フォーカスがあるかどうかを判断する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-746">Gets a value that determines whether this element has logical focus.</span></span>  <span data-ttu-id="23e7a-747">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-747">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-748">この要素に論理フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-748"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-749">アプリケーションに複数のフォーカス区分 (メニューコンテンツとアプリケーションの残りの部分など) がある場合、論理フォーカスはキーボードフォーカスとは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-749">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="23e7a-750">このシナリオでは、キーボードフォーカスはアプリケーション UI の1つの要素にしか配置できませんが、他のフォーカス区分内の特定の要素は引き続き論理フォーカスを保持する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-750">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="23e7a-751">論理フォーカスの詳細については、「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-751">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="23e7a-752">このプロパティを設定することによってフォーカスを設定しません (読み取り専用)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-752">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="23e7a-753">このプロパティの一般的な用途は、<xref:System.Windows.Setter> または <xref:System.Windows.EventTrigger>の依存関係プロパティとして使用することです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-753">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="23e7a-754">プログラムによってフォーカスを設定するには、<xref:System.Windows.UIElement.Focus%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-754">To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>.</span></span> <span data-ttu-id="23e7a-755">フォーカスは、ユーザー操作またはコントロールの実装によって設定することもできます。これには、マウスキャプチャの動作が含まれる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-755">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-756">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-756">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-757">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-757">Identifier field</span></span>|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|<span data-ttu-id="23e7a-758">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-758">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-759">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-759">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-760">次の例は、フォーカスされたときにコントロールの背景を変更するコードハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-760">The following example is a code handler that changes the background of a control when it is focused.</span></span>  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 <span data-ttu-id="23e7a-761">これと同じ効果を得るためのもう1つの一般的な方法は、コントロールの <xref:System.Windows.Style> に <xref:System.Windows.Trigger> を配置することです。この方法では、分離コードを使用して特定のイベントを処理する必要はありません。また、デザイナーでは、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]の対話形式とグラフィカルな性質によりアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-761">Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="23e7a-762">例については、「[方法: 外側のグロー効果を作成する](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-762">For an example, see [How to: Create an Outer Glow Effect](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-763"><see cref="P:System.Windows.UIElement.IsFocused" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-763">Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-764">この要素が、表示される内容のある部分からのヒット テストの結果として返されるかどうかを宣言する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-764">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span></span> <span data-ttu-id="23e7a-765">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-765">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-766">少なくとも 1 つの点からヒット テストの結果としてこの要素が返される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-766"><see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-767">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-767">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-768">このプロパティの有効値は、論理ツリー内のヒットテスト可能な要素の相対位置によって影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-768">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="23e7a-769">たとえば、要素がヒットテストで表示されない要素の子要素である場合、その値をローカルに設定しようとしても、子のプロパティの有効値は `false`のままになります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-769">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="23e7a-770">このため、コントロールに対して入力またはヒットテストを行わない場合は、複合コントロールで `false` するように <xref:System.Windows.UIElement.IsHitTestVisible%2A> を設定しないことが重要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-770">For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="23e7a-771">ヒット テストについて詳しくは、「[ビジュアル層でのヒット テスト](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-771">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-772">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-772">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-773">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-773">Identifier field</span></span>|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|<span data-ttu-id="23e7a-774">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-774">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-775">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-775">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-776">この要素の <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-776">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-777">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-777">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-778"><see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-778">Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-779">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] などの入力方式システムがこの要素への入力の処理に対して有効になっているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-779">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-780">入力方式がアクティブである場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-780"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-781">基礎となる添付プロパティの既定値は <see langword="true;" /> ですが、この値は実行時の入力方式の実際の状態の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-781">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-782">このプロパティは、現在有効になっている入力方法 (キーボード、音声、およびその他の入力デバイス) に対して、添付プロパティ <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> によって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-782">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-783">この要素にキーボード フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-783">Gets a value indicating whether this element has keyboard focus.</span></span>  <span data-ttu-id="23e7a-784">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-784">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-785">この要素にキーボード フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-785"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-786">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-786">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-787">このプロパティの特定値に対する変更は、フォーカス関連のイベントと共に発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-787">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="23e7a-788"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> と <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> は、他の入力関連のイベントのクラスイベントハンドラー内で一般的に使用されます。たとえば、要素に既にキーボードフォーカスがあるかどうかを判断したり、マウスイベントとキーボードイベントの組み合わせが発生したときに決定したりします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-788"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-789">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-789">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-790">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-790">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="23e7a-791">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-791">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-792">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-792">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-793">この要素の <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-793">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-794">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-794">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-795"><see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-795">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-796">キーボード フォーカスがその要素またはそのビジュアル ツリーの子要素内の任意の場所にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-796">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span></span>  <span data-ttu-id="23e7a-797">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-797">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-798">キーボード フォーカスがその要素またはその子要素にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-798"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-799">このプロパティの値を変更すると、通常は、派生クラスによってイベントを抑制する <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> がオーバーライドされていない限り、<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-799">Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="23e7a-800">このプロパティは直接設定しませんが、<xref:System.Windows.UIElement.Focus%2A>を呼び出すか、<xref:System.Windows.UIElement.MoveFocus%2A> 要求を行うことによって、要素にフォーカスを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-800">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="23e7a-801">これらのいずれかのメソッド呼び出しによって、このプロパティ値が変更する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-801">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="23e7a-802"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> と <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> は通常、他の入力関連のイベントのクラスイベントハンドラー内で使用されます。たとえば、要素に既にキーボードフォーカスがあるかどうかを判断したり、マウスイベントやキーボードイベントが組み合わせて発生したときに判断したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-802"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-803">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-803">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-804">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-804">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="23e7a-805">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-805">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-806">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-806">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-807">この要素の <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-807">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-808">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-808">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-809"><see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-809">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-810">この <see cref="T:System.Windows.UIElement" /> で操作イベントが有効かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-810">Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <value><span data-ttu-id="23e7a-811">この <see cref="T:System.Windows.UIElement" /> で操作イベントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-811"><see langword="true" /> if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-812">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-812">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-813"><xref:System.Windows.UIElement> が <xref:System.Windows.UIElement.ManipulationStarting>、<xref:System.Windows.UIElement.ManipulationStarted>、<xref:System.Windows.UIElement.ManipulationDelta>、<xref:System.Windows.UIElement.ManipulationInertiaStarting>、<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>、および <xref:System.Windows.UIElement.ManipulationCompleted> イベントを受け取るようにする場合は、このプロパティを [true] に設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-813">Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events.</span></span> <span data-ttu-id="23e7a-814">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-814">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="23e7a-815">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-815">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-816">次の例では、赤い四角形を持つアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-816">The following example creates an application that has a red Rectangle.</span></span>  <span data-ttu-id="23e7a-817">四角形の <xref:System.Windows.UIElement.IsManipulationEnabled%2A> プロパティは true に設定され、アプリケーションのウィンドウは <xref:System.Windows.UIElement.ManipulationStarting>、<xref:System.Windows.UIElement.ManipulationDelta>、および <xref:System.Windows.UIElement.ManipulationInertiaStarting> イベントをサブスクライブします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-817">The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events.</span></span> <span data-ttu-id="23e7a-818">この例は、 [「チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」の大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-818">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-819"><see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-819">Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-820">レイアウト測定パスから返された現在のサイズが有効かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-820">Gets a value indicating whether the current size returned by layout measure is valid.</span></span></summary>
        <value><span data-ttu-id="23e7a-821">レイアウトの測定パスから有効な現在値が返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-821"><see langword="true" /> if the measure pass of layout returned a valid and current value; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-822">この要素 (またはビジュアルツリーの上にある任意の親要素) で <xref:System.Windows.UIElement.InvalidateMeasure%2A> を呼び出すことにより、測定と配置を強制的に無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-822">You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree).</span></span> <span data-ttu-id="23e7a-823">これにより、レイアウトシステムによって決定された時間に発生する再合成のレイアウトが非同期的に指定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-823">This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</span></span> <span data-ttu-id="23e7a-824">または、<xref:System.Windows.UIElement.UpdateLayout%2A>を直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-824">Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>.</span></span> <span data-ttu-id="23e7a-825">ただし、それ以上の無効化が保留されていない可能性がある場合にのみ <xref:System.Windows.UIElement.UpdateLayout%2A> を呼び出す必要があります (大量の不要な更新によってパフォーマンスが低下する可能性があります)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-825">However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</span></span>  
  
 <span data-ttu-id="23e7a-826"><xref:System.Windows.UIElement.IsMeasureValid%2A> が `false`場合、<xref:System.Windows.UIElement.IsArrangeValid%2A> も `false` である必要があります (レイアウトプロセスの適用されたロジックによって、測定が最初に有効になっていない配置は有効ではありません)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-826">If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-827">この要素にマウスがキャプチャされるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-827">Gets a value indicating whether the mouse is captured to this element.</span></span>  <span data-ttu-id="23e7a-828">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-828">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-829">要素にマウス キャプチャがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-829"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-830">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-830">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-831">マウスキャプチャの状態は、インプロセスのドラッグアンドドロップ操作に関連しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-831">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-832">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-832">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-833">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-833">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="23e7a-834">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-834">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-835">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-835">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-836">次の例では、マウスが要素に対して既にキャプチャされているかどうかに基づいて、マウスキャプチャの状態をオンまたはオフにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-836">The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</span></span>  
  
 <span data-ttu-id="23e7a-837">マウスキャプチャが他の場所にある場合は、その要素にマウスのキャプチャが設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-837">If mouse capture is elsewhere, the mouse capture is set to that element.</span></span> <span data-ttu-id="23e7a-838">要素にマウスキャプチャがある場合は、null 入力で <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> を呼び出すことによってクリアされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-838">If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with a null input.</span></span>  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-839">この要素の <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-839">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-840">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-840">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-841"><see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-841">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-842">この要素またはビジュアル ツリー内の子要素がマウスのキャプチャを保持するかどうかを決定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-842">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span></span> <span data-ttu-id="23e7a-843">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-843">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-844">この要素または格納されている要素がマウス キャプチャを持つ場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-844"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-845">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-845">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-846">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-846">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="23e7a-847">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-847">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-848">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-848">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-849">この要素の <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> の値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-849">Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-850">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-850">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-851"><see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-851">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-852">マウス ポインターの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-852">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span>  <span data-ttu-id="23e7a-853">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-853">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-854">マウス ポインターがヒット テストと同じ要素の結果上にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-854"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-855">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-855">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-856"><xref:System.Windows.UIElement.IsMouseOver%2A>とは異なり、このプロパティは、マウスポインターがヒットテストの場合と同様に、リテラル要素の上にある場合にのみ `true` ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-856">Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="23e7a-857">マウスポインターが子要素の上にある場合、特に、要素の深いテンプレートと複合要素の一部である要素に対しては、このプロパティは `false`されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-857">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="23e7a-858">コントロールがどのように合成されているかわからない場合 (たとえば、定義したコントロールのカスタムコントロールテンプレートでこのプロパティを使用する場合)、このプロパティは予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-858">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="23e7a-859">コントロールを作成しないほとんどのシナリオでは、代わりに <xref:System.Windows.UIElement.IsMouseOver%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-859">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="23e7a-860">この要素によってマウスがキャプチャされ、このプロパティがキャプチャ時に `true` された場合、このプロパティは、マウスキャプチャが失われ、ポインターがその境界を越えていなくなるまで、`true` を返し続けます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-860">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-861">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-861">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-862">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-862">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="23e7a-863">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-863">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-864">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-864">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-865">この要素の <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-865">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-866">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-866">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-867"><see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-867">Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-868">マウス ポインターがこの要素 (ビジュアル ツリー内の子要素を含む) の上にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-868">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span></span>  <span data-ttu-id="23e7a-869">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-869">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-870">マウス ポインターが要素またはその子要素の上にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-870"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-871">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-871">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-872">通常、コントロールは複合コントロールであり、コントロール内のさまざまな要素 (ビジュアルツリー) は、格納しているコントロールのマウス状態をすべて報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-872">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="23e7a-873">たとえば、<xref:System.Windows.Controls.ListBox> スタイルコントロールは、<xref:System.Windows.Controls.ListBoxItem>を含めて、そのジオメトリの上にマウスがある場合に `true` として <xref:System.Windows.UIElement.IsMouseOver%2A> を報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-873">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="23e7a-874">似た "IsMouseOverChanged" イベントは存在しませんが、いくつかの類似イベントがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-874">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="23e7a-875">たとえば、<xref:System.Windows.UIElement.MouseEnter>、<xref:System.Windows.UIElement.MouseMove>、および <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>を処理できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-875">For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="23e7a-876">この要素がマウスをキャプチャすると、マウスのキャプチャが失われ、マウスポインターが要素の境界内から出るまで、このプロパティは `true` のままになります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-876">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="23e7a-877">一部のコントロールでは、マウスを直接操作しないように見えない特定のアクションに対して、意図的にマウスをキャプチャしています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-877">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="23e7a-878">これにより、マウスが一見移動されていなくても、<xref:System.Windows.UIElement.IsMouseOver%2A> が `true` される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-878">This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-879">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-879">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-880">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-880">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|<span data-ttu-id="23e7a-881">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-881">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-882">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-882">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-883">次の例では、\<スタイルの一部である <xref:System.Windows.Trigger>のプロパティの型として、このプロパティを参照しています。トリガー > ブロックです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-883">The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \<Style.Triggers> block.</span></span> <span data-ttu-id="23e7a-884">マウスがコントロールの上にある場合は、コントロールのテキストが青に変わり、カーソルが手の形になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-884">If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</span></span>  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-885"><see cref="P:System.Windows.UIElement.IsMouseOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-885">Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-886">この要素によってスタイラスがキャプチャされるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-886">Gets a value indicating whether the stylus is captured by this element.</span></span>  <span data-ttu-id="23e7a-887">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-887">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-888">要素にスタイラスのキャプチャがある場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-888"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-889">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-889">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-890">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-890">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-891">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-891">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-892">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-892">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-893">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-893">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="23e7a-894">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-894">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-895">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-895">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-896">この要素の <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-896">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-897">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-897">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-898"><see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-898">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-899">この要素、または要素の境界とそのビジュアル ツリー内の要素がスタイラス キャプチャを保持するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-899">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span></span> <span data-ttu-id="23e7a-900">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-900">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-901">この要素または格納されている要素がスタイラスのキャプチャを持つ場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-901"><see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-902">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-902">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-903">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-903">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-904">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-904">For more information, see [Touch Input Support in Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-905">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-905">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-906">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-906">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="23e7a-907">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-907">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-908">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-908">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-909">この要素の <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-909">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-910">これは、ルーティングイベントではなく、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-910">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-911"><see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-911">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-912">スタイラスの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-912">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span>  <span data-ttu-id="23e7a-913">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-913">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-914">スタイラス ポインターがヒット テストの結果と同じ要素上にある場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-914"><see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-915">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-915">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-916"><xref:System.Windows.UIElement.IsStylusOver%2A>とは異なり、このプロパティは、スタイラスが要素上にある場合にのみ `true` ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-916">Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="23e7a-917">スタイラスが子要素または要素のより深い合成 (ビジュアルツリー) の一部である要素上にある場合、このプロパティは `false`されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-917">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="23e7a-918">コントロールがどのように合成されているかわからない場合 (たとえば、定義したコントロールのカスタムコントロールテンプレートでこのプロパティを使用する場合)、このプロパティは予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-918">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="23e7a-919">コントロールを作成しないほとんどのシナリオでは、代わりに <xref:System.Windows.UIElement.IsStylusOver%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-919">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="23e7a-920">この要素にスタイラスのキャプチャが含まれており、このプロパティがキャプチャ時に `true` 場合、スタイラスのキャプチャが失われ、スタイラスがその境界を越えない限り、このプロパティは `true` のままです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-920">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="23e7a-921">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-921">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-922">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-922">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-923">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-923">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-924">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-924">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="23e7a-925">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-925">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-926">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-926">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-927">この要素の <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-927">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-928">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-928">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-929"><see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-929">Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-930">スタイラスのカーソルがこの要素 (子ビジュアル要素を含む) の上にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-930">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span></span>  <span data-ttu-id="23e7a-931">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-931">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-932">スタイラスのカーソルが要素またはその子要素の上にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-932"><see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-933">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-933">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-934">この要素にスタイラスのキャプチャがある場合、スタイラスのキャプチャが失われ、ポインターが境界外になるまで、このプロパティは引き続き `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-934">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="23e7a-935">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-935">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-936">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-936">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-937">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-937">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-938">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-938">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|<span data-ttu-id="23e7a-939">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-939">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-940">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-940">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-941"><see cref="P:System.Windows.UIElement.IsStylusOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-941">Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-942">この要素が [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] に表示されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-942">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="23e7a-943">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-943">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-944">要素が表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-944"><see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-945"><xref:System.Windows.UIElement.IsVisible%2A> 値の決定には、レイアウトのすべての要素が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-945">Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account.</span></span> <span data-ttu-id="23e7a-946">これに対し、設定可能なプロパティである <xref:System.Windows.UIElement.Visibility%2A>は、プログラムによって要素を表示または非表示にするという意図を示すだけです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-946">In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="23e7a-947"><xref:System.Windows.UIElement.IsVisible%2A> が `false` されている要素は入力イベント (またはコマンド) に参加していません。レイアウトのメジャーまたは配置パスに影響を与えることはなく、フォーカスを設定できず、タブシーケンスにも含まれず、ヒットテストでは報告されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-947">Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="23e7a-948">これに対し、<xref:System.Windows.UIElement.IsEnabled%2A> が `false` されている要素は、引き続きイベントとコマンドに参加し、ヒットテストを行いますが、フォーカスを与えることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-948">In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-949">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-949">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-950">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-950">Identifier field</span></span>|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|<span data-ttu-id="23e7a-951">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-951">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-952">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-952">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-953">この要素の <see cref="P:System.Windows.UIElement.IsVisible" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-953">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-954">このイベントは、要素がレイアウトシステムによってレンダリングされていない場合、<xref:System.Windows.UIElement.IsVisible%2A> プロパティの値以外の理由で発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-954">This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property.</span></span> <span data-ttu-id="23e7a-955">たとえば、要素にビジュアルが関連付けられていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-955">For example, the element might not have an associated visual.</span></span>  
  
 <span data-ttu-id="23e7a-956">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-956">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-957"><see cref="P:System.Windows.UIElement.IsVisible" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-957">Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-958">この要素にフォーカスがある状態でキーが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-958">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-959">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-959">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="23e7a-960"><xref:System.Windows.UIElement.KeyDown> イベントは、特定のコントロールで想定どおりに動作しない可能性がある下位レベルのテキスト入力イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-960">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="23e7a-961">これは、一部のコントロールには、テキスト入力処理と関連イベントの上位レベルのバージョンを提供するコントロールの複合またはクラス処理があるためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-961">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="23e7a-962">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.KeyDown> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-962">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-963"><xref:System.Windows.UIElement.KeyDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-963">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-964">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-964">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-965">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-965">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyDownEvent>|  
|<span data-ttu-id="23e7a-966">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-966">Routing strategy</span></span>|<span data-ttu-id="23e7a-967">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-967">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-968">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-968">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="23e7a-969">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewKeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-969">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-970">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnKeyDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-970">Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-971"><see cref="E:System.Windows.UIElement.KeyDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-971">Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-972">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-972">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-973">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-973">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-974">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-974">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-975">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-975">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-976">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-976">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-977">この要素にフォーカスがあるときにキーが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-977">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-978">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に <xref:System.Windows.UIElement.KeyUp> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-978">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-979"><xref:System.Windows.UIElement.KeyUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-979">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-980">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-980">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-981">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-981">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyUpEvent>|  
|<span data-ttu-id="23e7a-982">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-982">Routing strategy</span></span>|<span data-ttu-id="23e7a-983">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-983">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-984">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-984">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="23e7a-985">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewKeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-985">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-986">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnKeyUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-986">Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-987"><see cref="E:System.Windows.UIElement.KeyUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-987">Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-988">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-988">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-989">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-989">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-990">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-990">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-991">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-991">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-992">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-992">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-993">現在の <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられた各種ビジュアル要素のレイアウトが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-993">Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-994">レイアウトの更新は、プロパティの変更、ウィンドウのサイズ変更、または明示的なユーザー要求の結果として発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-994">A layout update can occur as a result of a property change, a window resize, or an explicit user request.</span></span>  
  
 <span data-ttu-id="23e7a-995">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-995">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-996">この要素が論理フォーカスを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-996">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-997">メソッド呼び出しを使用して意図的にフォーカスを外しているにもかかわらず、直前のキーボード フォーカスが異なるスコープ内に存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-997">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="23e7a-998">このシナリオでは、キーボードフォーカスはそのまま残り、<xref:System.Windows.UIElement.Focus%2A> メソッドが呼び出される要素は論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-998">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="23e7a-999">このイベントをより正確に解釈することは、ルートの要素の <xref:System.Windows.UIElement.IsFocused%2A> プロパティの値が `true` から `false`に変化したときに発生することです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-999">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="23e7a-1000">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1000">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-1001">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを取得した実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1001">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1002">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1002">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1003">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1003">Identifier field</span></span>|<xref:System.Windows.UIElement.LostFocusEvent>|  
|<span data-ttu-id="23e7a-1004">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1004">Routing strategy</span></span>|<span data-ttu-id="23e7a-1005">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1005">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1006">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1006">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="23e7a-1007">対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1007">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-1008">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnLostFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1008">Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1009"><see cref="E:System.Windows.UIElement.LostFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1009">Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1010">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1010">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1011">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1011">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1012">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1012">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1013">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1013">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1014">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1014">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1015">この要素からキーボード フォーカスが離れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1015">Occurs when the keyboard is no longer focused on this element,.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1016">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1016">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-1017">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1017">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="23e7a-1018">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.LostKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1018">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1019"><xref:System.Windows.UIElement.LostKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1019">Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1020">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1020">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1021">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1021">Identifier field</span></span>|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="23e7a-1022">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1022">Routing strategy</span></span>|<span data-ttu-id="23e7a-1023">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1023">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1024">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1024">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="23e7a-1025">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1025">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="23e7a-1026">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1026">Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1027"><see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1027">Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1028">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1028">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1029">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1029">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1030">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1030">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1031">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1031">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1032">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1032">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1033">この要素がマウス キャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1033">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1034">要素がマウスをキャプチャすると、ポインターが境界の外側にある場合でもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1034">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="23e7a-1035">マウスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1035">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="23e7a-1036">このイベントはバブルルーティングを使用するため、キャプチャを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1036">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-1037">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、キャプチャを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1037">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="23e7a-1038">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.LostMouseCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1038">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1039"><xref:System.Windows.UIElement.LostMouseCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1039">Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1040">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1040">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1041">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1041">Identifier field</span></span>|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="23e7a-1042">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1042">Routing strategy</span></span>|<span data-ttu-id="23e7a-1043">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1043">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1044">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1044">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="23e7a-1045">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1045">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-1046">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnLostMouseCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1046">Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1047"><see cref="E:System.Windows.UIElement.LostMouseCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1047">Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1048">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1048">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1049">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1049">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1050">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1050">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1051">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1051">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1052">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1052">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1053">この要素がスタイラス キャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1053">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1054">要素がスタイラスをキャプチャすると、ポインターが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1054">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="23e7a-1055">スタイラスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1055">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="23e7a-1056">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1056">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-1057">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1057">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="23e7a-1058">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.LostStylusCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1058">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1059"><xref:System.Windows.UIElement.LostStylusCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1059">Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1060">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1060">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1061">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1061">Identifier field</span></span>|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="23e7a-1062">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1062">Routing strategy</span></span>|<span data-ttu-id="23e7a-1063">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1063">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1064">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1064">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-1065">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1065">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-1066">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnLostStylusCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1066">Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1067"><see cref="E:System.Windows.UIElement.LostStylusCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1067">Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1068">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1068">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1069">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1069">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1070">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1070">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1071">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1071">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1072">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1072">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1073">この要素がタッチのキャプチャを失うと発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1073">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1074">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1074">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1075">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1075">Identifier field</span></span>|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="23e7a-1076">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1076">Routing strategy</span></span>|<span data-ttu-id="23e7a-1077">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1077">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1078">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1078">Delegate</span></span>|<span data-ttu-id="23e7a-1079"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1079"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-1080">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnLostTouchCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1080">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1081"><see cref="E:System.Windows.UIElement.LostTouchCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1081">Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1082">操作中に境界に到達したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1082">Occurs when the manipulation encounters a boundary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1083">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1083">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1084">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1084">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|<span data-ttu-id="23e7a-1085">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1085">Routing strategy</span></span>|<span data-ttu-id="23e7a-1086">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1086">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1087">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1087">Delegate</span></span>|<span data-ttu-id="23e7a-1088"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1088"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1089"><see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1089">Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1090"><see cref="T:System.Windows.UIElement" /> オブジェクトの操作および慣性による処理が完了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1090">Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1091">このイベントを使用すると、完了時に操作に関する情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1091">You can use this event to get information about the manipulation when it completes.</span></span>  <span data-ttu-id="23e7a-1092">たとえば、<xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> プロパティを使用して、操作の位置を変更した合計金額を確認できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1092">For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> property to determine the total amount the position of the manipulation changed.</span></span>  
  
 <span data-ttu-id="23e7a-1093">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1093">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="23e7a-1094">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1094">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1095">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1095">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1096">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1096">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|<span data-ttu-id="23e7a-1097">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1097">Routing strategy</span></span>|<span data-ttu-id="23e7a-1098">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1098">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1099">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1099">Delegate</span></span>|<span data-ttu-id="23e7a-1100"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1100"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1101"><see cref="E:System.Windows.UIElement.ManipulationCompleted" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1101">Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1102">操作中に入力デバイスが位置を変更したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1102">Occurs when the input device changes position during a manipulation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1103"><xref:System.Windows.UIElement.ManipulationDelta> イベントは、ユーザーが操作中に画面上に指をドラッグしたとき、または慣性が発生したときに、複数回発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1103">The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</span></span>  <span data-ttu-id="23e7a-1104"><xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> プロパティを使用して、慣性中にイベントが発生しているかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1104">You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.</span></span>  
  
 <span data-ttu-id="23e7a-1105">イベントが発生したときに、<xref:System.Windows.UIElement.ManipulationDelta> イベントが発生した要素は影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1105">The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.</span></span>  <span data-ttu-id="23e7a-1106">操作する要素にロジックを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1106">You must provide the logic to the element that is to be manipulated.</span></span>  <span data-ttu-id="23e7a-1107"><xref:System.Windows.Input.ManipulationDelta>型の <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> および <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> プロパティには、操作の位置がどのように変化し、オブジェクトの移動、サイズ変更、または回転として解釈されるかに関するデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1107">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</span></span>  <span data-ttu-id="23e7a-1108">この情報は、操作対象の要素に適用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1108">You apply that information to the element that is to be manipulated.</span></span>  
  
 <span data-ttu-id="23e7a-1109">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1109">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="23e7a-1110">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1110">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1111">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1111">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1112">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1112">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|<span data-ttu-id="23e7a-1113">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1113">Routing strategy</span></span>|<span data-ttu-id="23e7a-1114">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1114">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1115">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1115">Delegate</span></span>|<span data-ttu-id="23e7a-1116"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationDeltaEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1116"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-1117">次の例は、<xref:System.Windows.UIElement.ManipulationDelta> イベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1117">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="23e7a-1118">この例では、<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> プロパティを使用して、<xref:System.Windows.Shapes.Rectangle>の移動、サイズ変更、および回転を行います。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1118">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span>  <span data-ttu-id="23e7a-1119">また、この例では、慣性中に <xref:System.Windows.UIElement.ManipulationDelta> イベントが発生したかどうかと、四角形がウィンドウの端に接しているかどうかも確認します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1119">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span>  <span data-ttu-id="23e7a-1120">そのような場合、アプリケーションは、四角形がアプリケーションの可視領域から離れるのを防ぐために、操作を停止します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1120">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="23e7a-1121">この例は、 [「チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」の大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1121">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1122"><see cref="E:System.Windows.UIElement.ManipulationDelta" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1122">Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1123">入力デバイスが操作中に <see cref="T:System.Windows.UIElement" /> オブジェクトとの接続を失い、慣性による処理が開始されると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1123">Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1124"><xref:System.Windows.UIElement.ManipulationInertiaStarting> イベントは、操作中にユーザーが画面から指をすべて離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1124">The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation.</span></span> <span data-ttu-id="23e7a-1125">たとえば、ユーザーが画面全体で <xref:System.Windows.UIElement> を "スロー" した場合、ユーザーは <xref:System.Windows.UIElement> をタッチして操作を開始し、短い距離、画面上で指を動かして、<xref:System.Windows.UIElement>を離します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1125">For example, if a user "throws" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="23e7a-1126">ユーザーが要素を解放すると、慣性が開始され、<xref:System.Windows.UIElement.ManipulationInertiaStarting> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1126">When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.</span></span>  <span data-ttu-id="23e7a-1127"><xref:System.Windows.UIElement> は、慣性が要素で発生していることを示す <xref:System.Windows.UIElement.ManipulationDelta> イベントを引き続き受信します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1127">The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.</span></span>  
  
 <span data-ttu-id="23e7a-1128">このイベントを使用して、慣性の動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1128">You can use this event to specify the behavior of the inertia.</span></span>  <span data-ttu-id="23e7a-1129">たとえば、慣性の開始時に使用される初期速度を設定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1129">For example, you can set the initial velocity that is used when inertia begins.</span></span>  <span data-ttu-id="23e7a-1130">また、必要な減速を設定するか、目的の位置を設定することによって、慣性の量を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1130">You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</span></span>  <span data-ttu-id="23e7a-1131">これらの値は、操作の種類 (平行移動、展開、または回転) ごとに個別に設定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1131">You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</span></span>  <span data-ttu-id="23e7a-1132">詳細については、「<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1132">For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>  
  
 <span data-ttu-id="23e7a-1133">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1133">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="23e7a-1134">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1134">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1135">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1135">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1136">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1136">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|<span data-ttu-id="23e7a-1137">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1137">Routing strategy</span></span>|<span data-ttu-id="23e7a-1138">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1138">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1139">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1139">Delegate</span></span>|<span data-ttu-id="23e7a-1140"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1140"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-1141">次の例は、<xref:System.Windows.UIElement.ManipulationInertiaStarting> イベントハンドラーを示し、慣性中に使用される平行移動、拡大、および回転のために必要な減速を設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1141">The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</span></span> <span data-ttu-id="23e7a-1142">この例は、 [「チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」の大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1142">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1143"><see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1143">Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1144">入力デバイスで <see cref="T:System.Windows.UIElement" /> オブジェクトの操作を開始すると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1144">Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1145"><xref:System.Windows.UIElement.ManipulationStarted> イベントは、<xref:System.Windows.UIElement.ManipulationStarting> イベントの後に発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1145">The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span>  <span data-ttu-id="23e7a-1146"><xref:System.Windows.Input.ManipulationStartedEventArgs>では、次の操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1146">You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span></span>  
  
-   <span data-ttu-id="23e7a-1147"><xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> プロパティを使用して、操作の位置を基準とする要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1147">Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="23e7a-1148"><xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> プロパティを使用して、操作の配信元を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1148">Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.</span></span>  
  
-   <span data-ttu-id="23e7a-1149"><xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> メソッドを呼び出して、操作を取り消します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1149">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.</span></span>  
  
 <span data-ttu-id="23e7a-1150">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1150">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="23e7a-1151">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1151">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1152">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1152">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1153">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1153">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|<span data-ttu-id="23e7a-1154">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1154">Routing strategy</span></span>|<span data-ttu-id="23e7a-1155">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1155">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1156">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1156">Delegate</span></span>|<span data-ttu-id="23e7a-1157"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationStartedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1157"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1158"><see cref="E:System.Windows.UIElement.ManipulationStarted" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1158">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1159">操作プロセッサを初めて作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1159">Occurs when the manipulation processor is first created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1160"><xref:System.Windows.UIElement.ManipulationStarting> イベントは、ユーザーが指を置いたときに <xref:System.Windows.UIElement.IsManipulationEnabled%2A> プロパティが `true` に設定されている要素で発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1160">The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it.</span></span> <span data-ttu-id="23e7a-1161">既定では、後続の操作イベントは、`true`に設定 <xref:System.Windows.UIElement.IsManipulationEnabled%2A> れている要素を基準とした操作の位置を報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1161">By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.</span></span>  <span data-ttu-id="23e7a-1162"><xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> プロパティを設定することによって、別の要素に対して相対的な位置を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1162">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="23e7a-1163">たとえば、要素の親を基準として操作を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1163">For example, you can make the manipulation relative to the parent of the element.</span></span>  
  
 <span data-ttu-id="23e7a-1164"><xref:System.Windows.UIElement.ManipulationStarting>のイベントハンドラーで、次の操作を行うこともできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1164">You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:</span></span>  
  
-   <span data-ttu-id="23e7a-1165"><xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> プロパティを設定することにより、ユーザーが複数の指で操作を実行する必要があるかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1165">Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="23e7a-1166"><xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> プロパティを <xref:System.Windows.Input.ManipulationModes> 列挙体に設定して、有効にする操作の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1166">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="23e7a-1167"><xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> プロパティを設定して、1本の指による回転の中心を指定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1167">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="23e7a-1168"><xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> メソッドを呼び出して、操作を取り消します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1168">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="23e7a-1169">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1169">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="23e7a-1170">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1170">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1171">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1171">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1172">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1172">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|<span data-ttu-id="23e7a-1173">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1173">Routing strategy</span></span>|<span data-ttu-id="23e7a-1174">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1174">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1175">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1175">Delegate</span></span>|<span data-ttu-id="23e7a-1176"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1176"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-1177">次の例では、<xref:System.Windows.UIElement.ManipulationStarting> イベントのイベントハンドラーを示し、操作の座標が親要素に対して相対的になるように操作イベントを受け取る親要素に <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1177">The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</span></span>  <span data-ttu-id="23e7a-1178">この例は、 [「チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」の大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1178">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1179"><see cref="E:System.Windows.UIElement.ManipulationStarting" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1179">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="23e7a-1180">親要素が子要素を割り当てることができる使用可能な領域。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1180">The available space that a parent element can allocate a child element.</span></span> <span data-ttu-id="23e7a-1181">子要素は使用可能な空間よりも大きな空間を要求できます。現在の要素のコンテンツ モデルでスクロールが可能な場合、指定されたサイズに対応できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1181">A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</span></span></param>
        <summary><span data-ttu-id="23e7a-1182"><see cref="T:System.Windows.UIElement" /> の <see cref="P:System.Windows.UIElement.DesiredSize" /> を更新します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1182">Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="23e7a-1183">親要素は、独自の <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> 実装からこのメソッドを呼び出し、レイアウトを再帰的に更新します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1183">Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update.</span></span> <span data-ttu-id="23e7a-1184">このメソッドの呼び出しは、レイアウト更新の最初のパス (「メジャー」パス) となります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1184">Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1185">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] でのレイアウト配置の計算は、<xref:System.Windows.UIElement.Measure%2A> 呼び出しと <xref:System.Windows.UIElement.Arrange%2A> 呼び出しで構成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1185">Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="23e7a-1186"><xref:System.Windows.UIElement.Measure%2A> の呼び出し中に、要素は `availableSize` 入力を使用してサイズ要件を決定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1186">During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input.</span></span> <span data-ttu-id="23e7a-1187"><xref:System.Windows.UIElement.Arrange%2A> の呼び出し中に、要素のサイズが終了します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1187">During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.</span></span>  
  
 <span data-ttu-id="23e7a-1188">`availableSize` 0 から無限までの任意の数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1188">`availableSize` can be any number from zero to infinite.</span></span> <span data-ttu-id="23e7a-1189">レイアウトに参加する要素は、特定の `availableSize`に必要な最小 <xref:System.Windows.Size> を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1189">Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.</span></span>  
  
 <span data-ttu-id="23e7a-1190">レイアウトが最初にインスタンス化されると、<xref:System.Windows.UIElement.Arrange%2A>前に常に <xref:System.Windows.UIElement.Measure%2A> 呼び出しを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1190">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="23e7a-1191">ただし、最初のレイアウトパスの後に、<xref:System.Windows.UIElement.Measure%2A>を使用せずに <xref:System.Windows.UIElement.Arrange%2A> 呼び出しを受け取る場合があります。これは、<xref:System.Windows.UIElement.Arrange%2A> のみに影響するプロパティ (アラインメントなど) が変更された場合、または親が <xref:System.Windows.UIElement.Measure%2A>のない <xref:System.Windows.UIElement.Arrange%2A> を受け取った場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1191">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="23e7a-1192"><xref:System.Windows.UIElement.Measure%2A> の呼び出しは、<xref:System.Windows.UIElement.Arrange%2A> の呼び出しを自動的に無効にします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1192">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="23e7a-1193">レイアウトの更新は、メインスレッドが可能なすべてのレイアウト変更を待機していないように、非同期的に行われます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1193">Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</span></span> <span data-ttu-id="23e7a-1194">プロパティ値の分離コードチェックによって要素にクエリを実行すると、サイズ変更やレイアウトの特性と対話するプロパティ (<xref:System.Windows.FrameworkElement.Width%2A> プロパティなど) に対する変更がすぐに反映されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1194">Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e7a-1195"><xref:System.Windows.UIElement.UpdateLayout%2A> メソッドを使用して、レイアウトの更新を強制することができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1195">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method.</span></span> <span data-ttu-id="23e7a-1196">ただし、通常、このメソッドを呼び出す必要はなく、パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1196">However, calling this method is usually unnecessary and can cause poor performance.</span></span>  
  
 <span data-ttu-id="23e7a-1197">レイアウトシステムは、無効なレイアウトの2つの異なるキューを保持します。1つは <xref:System.Windows.UIElement.Measure%2A> 用で、もう1つは <xref:System.Windows.UIElement.Arrange%2A>用です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1197">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="23e7a-1198">レイアウトキューは、レイアウトを実行している要素のビジュアルツリー内の要素の順序に基づいて並べ替えられます。ツリー内の上位にある要素はキューの最上位にあり、親の繰り返し変更によって発生する冗長レイアウトを回避します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1198">The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="23e7a-1199">重複するエントリはキューから自動的に削除され、既にレイアウトが検証されている場合、要素はキューから自動的に削除されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1199">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</span></span>  
  
 <span data-ttu-id="23e7a-1200">レイアウトを更新すると、最初に <xref:System.Windows.UIElement.Measure%2A> キューが空になり、次に <xref:System.Windows.UIElement.Arrange%2A> キューが空になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1200">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="23e7a-1201"><xref:System.Windows.UIElement.Measure%2A> キューに要素がある場合、<xref:System.Windows.UIElement.Arrange%2A> キュー内の要素は配置されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1201">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="23e7a-1202">親要素が子に割り当てることができる、使用可能なサイズ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1202">The available size that the parent element can allocate for the child.</span></span></param>
        <summary><span data-ttu-id="23e7a-1203">派生クラスでオーバーライドされると、子要素のコンテンツのサイズも考慮して、この要素のサイズを適切に設定するための測定ロジックを提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1203">When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</span></span></summary>
        <returns><span data-ttu-id="23e7a-1204">レイアウト内のこの要素の必要なサイズ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1204">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1205"><xref:System.Windows.UIElement>ではなく <xref:System.Windows.FrameworkElement> から要素を派生させる方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1205">It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="23e7a-1206"><xref:System.Windows.FrameworkElement>から派生する場合は、<xref:System.Windows.FrameworkElement> の <xref:System.Windows.UIElement.MeasureCore%2A> のオーバーライドによって <xref:System.Windows.UIElement.MeasureCore%2A> メソッドがシールされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1206">If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method.</span></span> <span data-ttu-id="23e7a-1207">したがって、<xref:System.Windows.FrameworkElement>を含まない継承によって <xref:System.Windows.UIElement> から派生する場合、レイアウトメジャーの特性を変更する手段として <xref:System.Windows.UIElement.MeasureCore%2A> のみをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1207">Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="23e7a-1208">これは、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] コアレベルで独自の実装をビルドしようとした場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1208">This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level.</span></span> <span data-ttu-id="23e7a-1209">それ以外の場合、<xref:System.Windows.FrameworkElement>から派生する場合、メジャー動作の実装テンプレートはの <xref:System.Windows.FrameworkElement> の実装になります。<xref:System.Windows.FrameworkElement.MeasureOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1209">Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-1210">子要素を持つ親要素は、各子の <xref:System.Windows.UIElement.Measure%2A> を呼び出す必要があります。そうしないと、これらの子要素のサイズや配置が行われず、レイアウトから効果的に非表示になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1210">A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-1211"><xref:System.Windows.UIElement.MeasureCore%2A> の一般的なオーバーライドは、この概数パターンに従います (`VisualChildren`と呼ばれる組み込みコレクションはありません。 `VisualChildren` は、要素が保持する任意の子コレクションを表すプレースホルダーです)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1211">A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   <span data-ttu-id="23e7a-1212">各子要素で <xref:System.Windows.UIElement.Measure%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1212">You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
-   <span data-ttu-id="23e7a-1213">通常、実装では、<xref:System.Windows.UIElement.MeasureCore%2A> と <xref:System.Windows.UIElement.ArrangeCore%2A> メソッド呼び出しの間の測定情報を同じ要素内にキャッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1213">Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.</span></span>  
  
-   <span data-ttu-id="23e7a-1214"><xref:System.Windows.UIElement.MeasureCore%2A> の基本実装を呼び出す必要はありませんが、基本実装によって目的のレイアウト機能が提供される場合に適しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1214">Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.</span></span>  
  
-   <span data-ttu-id="23e7a-1215">子要素で <xref:System.Windows.UIElement.Measure%2A> を呼び出す場合は、親要素がサポートするレイアウトの種類に応じて、親と同じ `availableSize` または領域のサブセットのいずれかを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1215">Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports.</span></span> <span data-ttu-id="23e7a-1216">たとえば、要素固有の境界線、埋め込み、スクロールバー、またはカスタムコントロールの領域を削除できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1216">For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1217">実装では、無限の <paramref name="availableSize" /> に提供された値を処理できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1217">Implementations must be able to process a value provided for <paramref name="availableSize" /> that is infinite.</span></span> <span data-ttu-id="23e7a-1218">無限値は、要求された制約がないことを示します。また、反復的なメジャー呼び出しを通じて、測定の選択を親要素に対して実質的に延期します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1218">An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</span></span>  
  
<span data-ttu-id="23e7a-1219">実装では、<paramref name="availableSize" /> に指定された値をソフト制約と見なすことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1219">Implementations can consider the value provided for <paramref name="availableSize" /> to be a soft constraint.</span></span> <span data-ttu-id="23e7a-1220">子要素は、アプリケーションコードの他の側面が親要素の現在の実際のサイズを判断できた場合でも、より大きなサイズを指定することがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1220">The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</span></span> <span data-ttu-id="23e7a-1221">大きいサイズの要求は、親要素がコンテンツ表示領域内でのコンテンツのスクロールをサポートできるかどうかを子要素が照会していることを示す規則です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1221">The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1222">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1222">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1223">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.MouseDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1223">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1224"><xref:System.Windows.UIElement.MouseDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1224">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-1225"><xref:System.Windows.UIElement.MouseDown> イベントは、多くの場合、<xref:System.Windows.UIElement.MouseLeftButtonDown> または <xref:System.Windows.UIElement.MouseRightButtonDown>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1225">The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="23e7a-1226"><xref:System.Windows.UIElement.MouseLeftButtonDown> と <xref:System.Windows.UIElement.MouseRightButtonDown> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1226"><xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="23e7a-1227"><xref:System.Windows.UIElement.MouseLeftButtonDown> または <xref:System.Windows.UIElement.MouseRightButtonDown>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1227">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="23e7a-1228">一部のコントロールには、マウスボタンイベントに固有のクラス処理が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1228">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="23e7a-1229">マウスの左ボタンダウンイベントは、コントロールでクラス処理を行う最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1229">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="23e7a-1230">クラスの処理では、多くの場合、基になる <xref:System.Windows.Input.Mouse> クラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1230">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="23e7a-1231">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1231">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="23e7a-1232">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1232">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="23e7a-1233">前の「」で説明されている問題を解決しても、次のいずれかの方法を使用してクラスを処理する派生クラスで、マウスの左ボタンダウンイベントの <xref:System.Windows.UIElement.MouseDown> イベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1233">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="23e7a-1234"><xref:System.Windows.UIElement.PreviewMouseDown> イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1234">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="23e7a-1235">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1235">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="23e7a-1236"><xref:System.Windows.UIElement.AddHandler%2A> を呼び出し、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1236">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1237">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1237">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1238">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1238">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseDownEvent>|  
|<span data-ttu-id="23e7a-1239">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1239">Routing strategy</span></span>|<span data-ttu-id="23e7a-1240">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1240">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1241">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1241">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-1242">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewMouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1242">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-1243">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1243">Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1244"><see cref="E:System.Windows.UIElement.MouseDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1244">Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1245">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1245">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1246">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1246">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1247">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1247">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1248">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1248">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1249">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1249">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1250">マウス ポインターがこの要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1250">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1251"><xref:System.Windows.UIElement.MouseEnter> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1251"><xref:System.Windows.UIElement.MouseEnter> is a [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="23e7a-1252">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1252">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="23e7a-1253">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1253">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="23e7a-1254"><xref:System.Windows.UIElement.MouseEnter> はマウスポインターが要素の境界内に入ったことを追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement.IsMouseOver%2A> プロパティ値が `false` からこの要素の `true` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1254">Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="23e7a-1255">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.MouseEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1255">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1256"><xref:System.Windows.UIElement.MouseEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1256">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-1257"><xref:System.Windows.Controls.Button> (または任意の <xref:System.Windows.Controls.Primitives.ButtonBase> 派生クラス) は、ボタンにフォーカスがあるときに <xref:System.Windows.UIElement.KeyDown> イベントをネイティブに処理し、押されたキーがスペースバーになります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1257">A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar.</span></span> <span data-ttu-id="23e7a-1258">ネイティブ処理では、ソースとしてボタンを使用して <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントが発生し、マウスポインターが移動しないように見えてもマウスがキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1258">The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</span></span> <span data-ttu-id="23e7a-1259">マウスキャプチャの結果として、ソースとしてボタンを使用して <xref:System.Windows.UIElement.MouseEnter> イベントも発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1259">As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source.</span></span> <span data-ttu-id="23e7a-1260">一般に、要素がマウスをキャプチャすると、<xref:System.Windows.UIElement.MouseEnter> が発生し、他のコントロール固有のイベントも <xref:System.Windows.UIElement.GotMouseCapture> ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1260">In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1261">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1261">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1262">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1262">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|<span data-ttu-id="23e7a-1263">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1263">Routing strategy</span></span>|<span data-ttu-id="23e7a-1264">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-1264">Direct</span></span>|  
|<span data-ttu-id="23e7a-1265">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1265">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="23e7a-1266">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1266">Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1267"><see cref="E:System.Windows.UIElement.MouseEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1267">Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1268">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1268">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1269">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1269">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1270">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1270">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1271">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1271">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1272">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1272">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1273">マウス ポインターがこの要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1273">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1274"><xref:System.Windows.UIElement.MouseLeave> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1274"><xref:System.Windows.UIElement.MouseLeave> is a [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="23e7a-1275">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1275">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="23e7a-1276">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1276">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="23e7a-1277"><xref:System.Windows.UIElement.MouseLeave> はマウスが要素から離れたことを追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement.IsMouseOver%2A> プロパティ値が `true` からこの要素の `false` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1277">Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="23e7a-1278">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.MouseLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1278">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1279"><xref:System.Windows.UIElement.MouseLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1279">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1280">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1280">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1281">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1281">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|<span data-ttu-id="23e7a-1282">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1282">Routing strategy</span></span>|<span data-ttu-id="23e7a-1283">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-1283">Direct</span></span>|  
|<span data-ttu-id="23e7a-1284">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1284">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="23e7a-1285">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1285">Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1286"><see cref="E:System.Windows.UIElement.MouseLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1286">Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1287">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1287">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1288">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1288">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1289">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1289">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1290">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1290">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1291">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1291">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1292">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1292">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1293">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1293">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-1294">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1294">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-1295">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1295">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-1296">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1296">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-1297"><xref:System.Windows.UIElement.MouseLeftButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1297">If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="23e7a-1298">これには、<xref:System.Windows.Controls.Control.MouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1298">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="23e7a-1299">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1299">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-1300">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1300">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-1301">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1301">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="23e7a-1302">一部のコントロールクラスには、マウスボタンイベントに固有のクラス処理が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1302">Some control classes might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="23e7a-1303">マウスの左ボタンダウンイベントは、コントロールでクラス処理を行う最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1303">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="23e7a-1304">クラスの処理では、多くの場合、基になる <xref:System.Windows.Input.Mouse> クラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1304">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="23e7a-1305">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1305">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="23e7a-1306">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1306">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="23e7a-1307">前の「」で説明されている問題を解決しても、次のいずれかの方法を使用してクラスを処理する派生クラスで、マウスの左ボタンダウンイベントの <xref:System.Windows.UIElement.MouseLeftButtonDown> イベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1307">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="23e7a-1308"><xref:System.Windows.UIElement.PreviewMouseDown> イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1308">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="23e7a-1309">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1309">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="23e7a-1310"><xref:System.Windows.UIElement.AddHandler%2A> を呼び出し、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1310">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1311">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1312">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1312">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="23e7a-1313">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1313">Routing strategy</span></span>|<span data-ttu-id="23e7a-1314">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-1314">Direct</span></span>|  
|<span data-ttu-id="23e7a-1315">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1315">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-1316">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1316">Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1317"><see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1317">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1318">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1318">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1319">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1319">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1320">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1320">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1321">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1321">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1322">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1322">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1323">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1323">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1324">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1324">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-1325">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1325">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-1326">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1326">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-1327">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1327">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-1328"><xref:System.Windows.UIElement.MouseLeftButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1328">If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="23e7a-1329">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1329">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-1330">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1330">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-1331">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1331">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1332">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1332">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1333">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1333">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="23e7a-1334">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1334">Routing strategy</span></span>|<span data-ttu-id="23e7a-1335">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-1335">Direct</span></span>|  
|<span data-ttu-id="23e7a-1336">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1336">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-1337">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1337">Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1338"><see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1338">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1339">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1339">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1340">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1340">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1341">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1341">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1342">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1342">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1343">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1343">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1344">この要素の上でマウス ポインターが動かされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1344">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1345">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.MouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1345">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1346"><xref:System.Windows.UIElement.MouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1346">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1347">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1347">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1348">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1348">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|<span data-ttu-id="23e7a-1349">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1349">Routing strategy</span></span>|<span data-ttu-id="23e7a-1350">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1350">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1351">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1351">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="23e7a-1352">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewMouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1352">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-1353">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1353">Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1354"><see cref="E:System.Windows.UIElement.MouseMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1354">Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1355">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1355">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1356">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1356">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1357">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1357">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1358">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1358">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1359">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1359">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1360">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1360">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1361">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1361">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-1362">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1362">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-1363">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1363">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-1364">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1364">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-1365"><xref:System.Windows.UIElement.MouseRightButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1365">If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="23e7a-1366">これには、<xref:System.Windows.Controls.Control.MouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1366">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="23e7a-1367">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1367">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-1368">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1368">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-1369">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1369">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-1370">右ボタンマウスイベントは、多くの場合、アプリケーションシナリオでネイティブに処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1370">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="23e7a-1371">たとえば、マウスの右ボタンを押すと、コンテキストメニューが表示する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1371">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="23e7a-1372">「 [ContextMenu の概要](~/docs/framework/wpf/controls/contextmenu-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1372">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1373">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1373">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1374">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1374">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="23e7a-1375">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1375">Routing strategy</span></span>|<span data-ttu-id="23e7a-1376">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-1376">Direct</span></span>|  
|<span data-ttu-id="23e7a-1377">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1377">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-1378">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1378">Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1379"><see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1379">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1380">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1380">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1381">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1382">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1382">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1383">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1383">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1384">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1384">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1385">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1385">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1386">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1386">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-1387">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1387">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-1388">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1388">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-1389">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1389">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-1390"><xref:System.Windows.UIElement.MouseRightButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1390">If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="23e7a-1391">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1391">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-1392">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1392">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-1393">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1393">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1394">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1394">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1395">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1395">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="23e7a-1396">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1396">Routing strategy</span></span>|<span data-ttu-id="23e7a-1397">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-1397">Direct</span></span>|  
|<span data-ttu-id="23e7a-1398">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1398">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-1399">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1399">Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1400"><see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1400">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1401">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1401">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1402">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1402">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1403">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1403">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1404">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1404">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1405">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1405">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1406">この要素の上でいずれかのマウス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1406">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1407">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.MouseUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1407">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1408"><xref:System.Windows.UIElement.MouseUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1408">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-1409"><xref:System.Windows.UIElement.MouseUp> イベントは、多くの場合、<xref:System.Windows.UIElement.MouseLeftButtonUp> または <xref:System.Windows.UIElement.MouseRightButtonUp>と共に発生します。これは、2つの標準マウスボタンのいずれかのリリースに対応します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1409">The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="23e7a-1410"><xref:System.Windows.UIElement.MouseLeftButtonUp> と <xref:System.Windows.UIElement.MouseRightButtonUp> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1410"><xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="23e7a-1411"><xref:System.Windows.UIElement.MouseLeftButtonUp> または <xref:System.Windows.UIElement.MouseRightButtonUp>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1411">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1412">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1412">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1413">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1413">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseUpEvent>|  
|<span data-ttu-id="23e7a-1414">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1414">Routing strategy</span></span>|<span data-ttu-id="23e7a-1415">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1415">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1416">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1416">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-1417">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewMouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1417">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-1418">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1418">Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1419"><see cref="E:System.Windows.UIElement.MouseUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1419">Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1420">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1420">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1421">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1421">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1422">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1422">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1423">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1423">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1424">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1424">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1425">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1425">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1426">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素から <xref:System.Windows.UIElement.MouseWheel> イベントを受け取った場合、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1426">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="23e7a-1427">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.MouseWheel> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1427">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-1428"><xref:System.Windows.UIElement.MouseWheel> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1428">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-1429">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-1429">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-1430">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-1430">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|<span data-ttu-id="23e7a-1431">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-1431">Routing strategy</span></span>|<span data-ttu-id="23e7a-1432">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-1432">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-1433">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-1433">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="23e7a-1434">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewMouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1434">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="23e7a-1435">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnMouseWheel%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1435">Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-1436"><see cref="E:System.Windows.UIElement.MouseWheel" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1436">Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1437">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1437">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-1438">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1438">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-1439">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1439">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-1440">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1440">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-1441">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1441">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="23e7a-1442">既存のタブ オーダーを検査するモード、または視覚的な移動方向を示すプロパティを含む検査要求。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1442">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="23e7a-1443">この要素から別の要素へのフォーカスの移動を試みます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1443">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="23e7a-1444">フォーカスの移動方向は、ガイドラインの方向によって指定され、この要素のビジュアル親の編成内で解釈されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1444">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-1445">要求した検査が実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1445"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1446">このメソッドの戻り値を必ず確認してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1446">Make sure you check the return value of this method.</span></span> <span data-ttu-id="23e7a-1447">コントロールのコンポジションで定義されているタブストップに走査を実行し、トラバーサル要求がラップを要求しなかった場合、`false` の戻り値が返されることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1447">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1448">アクセス キー イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1448">The event data to the access key event.</span></span> <span data-ttu-id="23e7a-1449">イベント データは、呼び出されたキーを報告し、これらのイベントの送信を制御する <see cref="T:System.Windows.Input.AccessKeyManager" /> オブジェクトが、このアクセス キーの呼び出しを他の要素にも送信したかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1449">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span></span></param>
        <summary><span data-ttu-id="23e7a-1450">この要素に対して有効なアクセス キーが呼び出されたときのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1450">Provides class handling for when an access key that is meaningful for this element is invoked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1451"><xref:System.Windows.UIElement> クラス、またはその他の場所に実際の AccessKey イベントは存在しません。これは、のハンドラーを発生させたりアタッチしたりすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1451">There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="23e7a-1452">代わりに、イベントは専用のマネージャークラス (<xref:System.Windows.Input.AccessKeyManager>) によって生成されます。このクラスは、入力モデル全体に適用されるアクセスキーを検索するためにすべての入力を後処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1452">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1453"><see cref="T:System.Windows.UIElement" /> でのこのメソッドの既定の実装では、<see cref="M:System.Windows.UIElement.Focus" />を呼び出すことによって、この要素にキーボードフォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1453">The default implementation of this method in <see cref="T:System.Windows.UIElement" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement.Focus" />).</span></span> <span data-ttu-id="23e7a-1454">ユーザー補助のシナリオでは想定される動作なので、フォーカスがある場合、実装はこの動作を perpetuate 必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1454">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span></span> <span data-ttu-id="23e7a-1455">基本実装では、渡されたイベントデータに対しては何も実行されず、それ以上イベントは発生しません。フォーカスを設定するだけです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1455">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="23e7a-1456">サイズが変更される子要素。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1456">The child element that is being resized.</span></span></param>
        <summary><span data-ttu-id="23e7a-1457">子要素のサイズが変更されるときのレイアウト動作をサポートします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1457">Supports layout behavior when a child element is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1458">通常、このメソッドはアプリケーションコードによって呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1458">This method is typically not called by your application code.</span></span> <span data-ttu-id="23e7a-1459">これは、派生要素クラスが、実際には無効なレイアウト状態をさらにチェックできるように公開されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1459">It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</span></span> <span data-ttu-id="23e7a-1460">また、子要素のサイズ変更に基づいて、レイアウトパスの処理時間を最小限に抑えるために、最適化を試行することもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1460">Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</span></span> <span data-ttu-id="23e7a-1461"><xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> を実装する派生要素クラスの例は、<xref:System.Windows.Controls.Grid> コントロールです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1461">An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1462"><see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> メソッドには、それ自体で <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> を呼び出すための既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1462">The <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> method has the default implementation of calling <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> on itself.</span></span> <span data-ttu-id="23e7a-1463">一般的な実装は次のようになります。独自の要素がサポートする最適化を実行し、通常は少なくとも1つのコード分岐から基本 <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> を呼び出します (独自のメジャーキャッシュロジックによって "ダーティ" 状態を示したもの)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1463">A typical implementation would be: do whatever optimization your own element supports, and then typically call base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</span></span>  
  
<span data-ttu-id="23e7a-1464">このメソッドは、サイズ変更の元となった子である場合にのみ、レイアウト処理で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1464">This method is only called in the layout processing if it was the child itself that originated the size changes.</span></span> <span data-ttu-id="23e7a-1465">それ以外の場合、親要素がレイアウトシステムの規則に従って <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> パスを開始すると、親は既にレイアウトを再計算しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1465">Otherwise, if the parent element initiates the <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pass, according to the layout system rules, the parent is recalculating layout already.</span></span> <span data-ttu-id="23e7a-1466">レイアウトシステムは、親子の順序でレイアウトを処理するので、子要素のレイアウト呼び出しからの親要素のサイズ変更は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1466">The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-1467">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャの、クラス固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1467">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span></summary>
        <returns><span data-ttu-id="23e7a-1468">型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1468">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1469">このメソッドの実装は、通常、特定の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装のコンストラクターを呼び出し、それを戻り値として返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1469">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span></span>  
  
<span data-ttu-id="23e7a-1470">すべての <see cref="T:System.Windows.UIElement" /> 派生クラスは、独自の特定の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装を [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャに提供するために、このメソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1470">All <see cref="T:System.Windows.UIElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span> <span data-ttu-id="23e7a-1471">このパターンの実装の詳細については、「<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1471">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1472">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1472">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1473">未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1473">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1474">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1474">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1475">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1475">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1476">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1476">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1477">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1477">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1478">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1478">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1479">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1479">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1480">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1480">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1481">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1481">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1482">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1482">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1483">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1483">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1484">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1484">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1485">未処理の <see cref="E:System.Windows.DragDrop.DragLeave" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1485">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1486">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1486">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1487">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1487">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1488">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1488">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1489">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1489">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1490">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1490">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1491">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1491">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1492">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1492">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1493">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1493">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1494">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1494">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1495">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1495">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1496">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1496">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1497">未処理の <see cref="E:System.Windows.DragDrop.DragOver" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1497">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1498">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1498">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1499">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1499">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1500">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1500">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1501">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1501">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1502">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1502">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1503">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1503">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1504">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1504">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1505">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1505">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1506">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1506">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1507">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1507">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1508">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1508">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1509">未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1509">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1510">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1510">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1511">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1511">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1512">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1512">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1513">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1513">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1514">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1514">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1515">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1515">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1516">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1516">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1517">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1517">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1518">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1518">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1519">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1519">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1520">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1520">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1521">未処理の <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1521">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1522">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1522">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1523">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1523">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1524">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1524">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1525">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1525">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1526">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1526">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1527">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1527">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1528">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1528">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1529">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1529">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1530">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1530">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1531">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1531">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1532">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1532">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="23e7a-1533">このイベント データには、<see cref="E:System.Windows.UIElement.GotFocus" /> イベントの識別子が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1533">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1534">提供されたイベント データを使用して、<see cref="E:System.Windows.UIElement.GotFocus" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1534">Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1535">このメソッドには、仮想には、イベントを発生させる既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1535">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="23e7a-1536">この On \* メソッドの実装は、イベントを発生させることを目的としています。このメソッドの実装は、<xref:System.Windows.UIElement.IsFocused%2A> プロパティの値が変更されたときにイベントを発生させるために、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1536">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="23e7a-1537"><xref:System.Windows.UIElement.OnGotFocus%2A> 実装は、そのイベントのクラス処理を追加するための便利な方法を提供するだけの、他の [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] \* 実装とは異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1537">The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1538">意図的に、または異常なイベントを発生させない必要がある場合を除き、実装が基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1538">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="23e7a-1539">そうしないと、通常のユーザー操作では、通常はこの要素にフォーカスが設定されているため、<see cref="E:System.Windows.UIElement.GotFocus" /> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1539">Otherwise, the <see cref="E:System.Windows.UIElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="23e7a-1540">要素にフォーカスを設定しない場合は、<see cref="P:System.Windows.UIElement.Focusable" /> を <see langword="false" />に設定することによって、要素がフォーカスされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1540">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1541">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1541">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1542">未処理の <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1542">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1543">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1543">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1544">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1544">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1545">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1545">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1546">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1546">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1547">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1547">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1548">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1548">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1549">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1549">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1550">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1550">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1551">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1551">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1552">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1552">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1553">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1553">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1554">未処理の <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1554">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1555">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1555">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1556">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1556">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1557">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1557">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1558">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1558">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1559">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1559">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1560">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1560">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1561">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1561">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1562">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1562">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1563">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1563">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1564">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1564">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1565">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1565">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1566">未処理の <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1566">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1567">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1567">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1568">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1568">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1569">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1569">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1570">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1570">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1571">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1571">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1572">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1572">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1573">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1573">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1574">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1574">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1575">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1575">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1576">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1576">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1577">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1577">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1578">タッチがこの要素にキャプチャされているときに発生する <see cref="E:System.Windows.UIElement.GotTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1578">Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1579"><xref:System.Windows.UIElement.OnGotTouchCapture%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1579">The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1580">派生クラスの <xref:System.Windows.UIElement.OnGotTouchCapture%2A> をオーバーライドして、<xref:System.Windows.UIElement.GotTouchCapture> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1580">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event.</span></span> <span data-ttu-id="23e7a-1581">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnGotTouchCapture%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1581">Be sure to call the base class' <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1582">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1582">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1583">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1583">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1584">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1584">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1585">この仮想メソッドは、<xref:System.Windows.UIElement.IsKeyboardFocused%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1585">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="23e7a-1586">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1586">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1587">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsKeyboardFocusedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1587">Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1588"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1588">Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="23e7a-1589">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1589">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1590">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1590">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1591">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1591">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1592">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1592">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1593">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1593">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1594">この要素によって <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> イベントが発生する直前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1594">Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="23e7a-1595">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1595">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1596">この仮想メソッドは、<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1596">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes.</span></span> <span data-ttu-id="23e7a-1597">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1597">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1598">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1598">Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1599"><xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1599">Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="23e7a-1600">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1600">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1601">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1601">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1602">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1602">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1603">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1603">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1604">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1604">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1605">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1605">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1606">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1606">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1607">この仮想メソッドは、<xref:System.Windows.UIElement.IsMouseCaptured%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1607">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="23e7a-1608">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1608">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1609">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsMouseCapturedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1609">Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1610"><xref:System.Windows.UIElement.IsMouseCapturedChanged> イベントがルーティングイベントではないことに注意してください。したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1610">Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1611">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1611">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1612">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1612">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1613">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1613">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1614">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1614">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1615">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1615">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1616">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1616">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1617">この仮想メソッドは、<see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1617">This virtual method is raised when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="23e7a-1618">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1618">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1619">その後、同じイベントデータインスタンスを使用して、<see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1619">Then the <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1620">イベントがルーティングイベントではないことに注意してください。したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1620">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="23e7a-1621">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1621">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1622">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1622">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1623">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1623">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1624">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1624">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1625">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1625">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1626">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1626">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1627">この仮想メソッドは、<xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1627">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="23e7a-1628">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1628">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1629">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1629">Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1630"><xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1630">Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="23e7a-1631">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1631">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1632">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1632">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1633">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1633">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1634">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1634">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1635">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1635">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1636">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1636">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1637">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1637">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1638">この仮想メソッドは、<xref:System.Windows.UIElement.IsStylusCaptured%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1638">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="23e7a-1639">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1639">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1640">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsStylusCapturedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1640">Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1641">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1641">Notice that the event is not a routed event.</span></span> <span data-ttu-id="23e7a-1642">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1642">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1643">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1643">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1644">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1644">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1645">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1645">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1646">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1646">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1647">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1647">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1648">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1648">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1649">この仮想メソッドは、<xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1649">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="23e7a-1650">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1650">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1651">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1651">Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1652">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1652">Notice that the event is not a routed event.</span></span> <span data-ttu-id="23e7a-1653">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1653">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1654">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1654">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1655">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1655">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1656">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1656">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1657">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1657">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1658">この要素上で未処理の <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1658">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="23e7a-1659">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1659">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1660">この仮想メソッドは、<xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1660">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="23e7a-1661">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1661">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="23e7a-1662">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1662">Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="23e7a-1663">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1663">Notice that the event is not a routed event.</span></span> <span data-ttu-id="23e7a-1664">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1664">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="23e7a-1665">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1665">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1666">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1666">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1667">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1667">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1668">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1668">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1669">未処理の <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1669">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1670">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1670">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1671">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1671">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="23e7a-1672">入力やコマンドのバインドなど、キーストロークに依存するその他のプログラミング機能は、通常のキーストロークとして公開される前に、キーストロークを処理することがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1672">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="23e7a-1673">これらの入力システム機能によってイベントが処理済みとしてマークされている場合、<xref:System.Windows.UIElement.OnKeyDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1673">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1674">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1674">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1675">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1675">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1676">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1676">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1677">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1677">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1678">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1678">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1679">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1679">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1680">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1680">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1681">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1681">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1682">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1682">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1683">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1683">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1684">未処理の <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1684">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1685">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1685">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1686">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1686">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="23e7a-1687">入力やコマンドのバインドなど、キーストロークに依存するその他のプログラミング機能は、通常のキーストロークとして公開される前に、キーストロークを処理することがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1687">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="23e7a-1688">これらの入力システム機能によってイベントが処理済みとしてマークされている場合、<xref:System.Windows.UIElement.OnKeyUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1688">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1689">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1689">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1690">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1690">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1691">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1691">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1692">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1692">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1693">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1693">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1694">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1694">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1695">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1695">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1696">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1696">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1697">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1697">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1698">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1698">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="23e7a-1699">このイベント データには、<see cref="E:System.Windows.UIElement.LostFocus" /> イベントの識別子が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1699">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1700">提供されたイベント データを使って、<see cref="E:System.Windows.UIElement.LostFocus" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1700">Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1701">このメソッドには、仮想には、イベントを発生させる既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1701">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="23e7a-1702">この On \* メソッドの実装は、イベントを発生させることを目的としています。このメソッドの実装は、<xref:System.Windows.UIElement.IsFocused%2A> プロパティの値が変更されたときにイベントを発生させるために、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1702">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="23e7a-1703">この実装は、そのイベントのクラス処理を追加するのに便利な方法のみを提供する、他の [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] \* 実装とは異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1703">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-1704">意図的に、または異常なイベントを発生させない必要がある場合を除き、実装が基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1704">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="23e7a-1705">そうしないと、通常のユーザー操作では、通常はこの要素にフォーカスが設定されているため、<see cref="E:System.Windows.UIElement.LostFocus" /> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1705">Otherwise, the <see cref="E:System.Windows.UIElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="23e7a-1706">要素にフォーカスを設定しない場合は、<see cref="P:System.Windows.UIElement.Focusable" /> を <see langword="false" />に設定することによって、要素がフォーカスされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1706">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1707">イベント データを格納する <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1707">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1708">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1708">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1709">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1709">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1710">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1710">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1711">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1711">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1712">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1712">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1713">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1713">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1714">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1714">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1715">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1715">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1716">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1716">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1717">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1717">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1718">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1718">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1719">イベント データを格納する <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1719">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1720">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1720">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1721">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1721">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1722">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1722">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1723">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1723">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1724">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1724">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1725">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1725">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1726">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1726">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1727">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1727">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1728">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1728">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1729">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1729">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1730">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1730">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1731">イベント データを格納する <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1731">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1732">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1732">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1733">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1733">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1734">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1734">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1735">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1735">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1736">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1736">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1737">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1737">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1738">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1738">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1739">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1739">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1740">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1740">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1741">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1741">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1742">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1742">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1743">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1743">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1744">この要素がタッチのキャプチャを失ったときに発生する <see cref="E:System.Windows.UIElement.LostTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1744">Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1745"><xref:System.Windows.UIElement.OnLostTouchCapture%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1745">The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1746">派生クラスの <xref:System.Windows.UIElement.OnLostTouchCapture%2A> をオーバーライドして、<xref:System.Windows.UIElement.LostTouchCapture> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1746">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event.</span></span> <span data-ttu-id="23e7a-1747">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnLostTouchCapture%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1747">Be sure to call the base class' <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1748">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1748">The data for the event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1749"><see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> イベントが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1749">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1750"><xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1750">The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1751">派生クラスの <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> をオーバーライドして、<xref:System.Windows.UIElement.ManipulationBoundaryFeedback> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1751">Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event.</span></span> <span data-ttu-id="23e7a-1752">基底クラスの <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> メソッドを呼び出して、基本クラスがイベントを受け取るようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1752">Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1753">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1753">The data for the event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1754"><see cref="E:System.Windows.UIElement.ManipulationCompleted" /> イベントが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1754">Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1755"><xref:System.Windows.UIElement.OnManipulationCompleted%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1755">The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1756">派生クラスの <xref:System.Windows.UIElement.OnManipulationCompleted%2A> をオーバーライドして、<xref:System.Windows.UIElement.ManipulationCompleted> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1756">Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event.</span></span> <span data-ttu-id="23e7a-1757">基底クラスの <xref:System.Windows.UIElement.OnManipulationCompleted%2A> メソッドを呼び出して、基本クラスがイベントを受け取るようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1757">Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1758">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1758">The data for the event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1759"><see cref="E:System.Windows.UIElement.ManipulationDelta" /> イベントが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1759">Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1760"><xref:System.Windows.UIElement.OnManipulationDelta%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1760">The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1761">派生クラスの <xref:System.Windows.UIElement.OnManipulationDelta%2A> をオーバーライドして、<xref:System.Windows.UIElement.ManipulationDelta> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1761">Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="23e7a-1762">基底クラスの <xref:System.Windows.UIElement.OnManipulationDelta%2A> メソッドを呼び出して、基本クラスがイベントを受け取るようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1762">Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1763">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1763">The data for the event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1764"><see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> イベントが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1764">Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1765"><xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1765">The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1766">派生クラスの <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> をオーバーライドして、<xref:System.Windows.UIElement.ManipulationInertiaStarting> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1766">Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event.</span></span> <span data-ttu-id="23e7a-1767">基底クラスの <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> メソッドを呼び出して、基本クラスがイベントを受け取るようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1767">Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1768">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1768">The data for the event.</span></span></param>
        <summary><span data-ttu-id="23e7a-1769"><see cref="E:System.Windows.UIElement.ManipulationStarted" /> イベントが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1769">Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1770"><xref:System.Windows.UIElement.OnManipulationStarted%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1770">The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1771">派生クラスの <xref:System.Windows.UIElement.OnManipulationStarted%2A> をオーバーライドして、<xref:System.Windows.UIElement.ManipulationStarted> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1771">Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event.</span></span> <span data-ttu-id="23e7a-1772">基底クラスの <xref:System.Windows.UIElement.OnManipulationStarted%2A> メソッドを呼び出して、基本クラスがイベントを受け取るようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1772">Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1773">イベント データを格納している <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1773">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1774">操作プロセッサを初めて作成するときに発生する <see cref="E:System.Windows.UIElement.ManipulationStarting" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1774">Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1775"><xref:System.Windows.UIElement.OnManipulationStarting%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1775">The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-1776">派生クラスの <xref:System.Windows.UIElement.OnManipulationStarting%2A> をオーバーライドして、<xref:System.Windows.UIElement.ManipulationStarting> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1776">Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span> <span data-ttu-id="23e7a-1777">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnManipulationStarting%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1777">Be sure to call the base class' <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1778">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1778">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-1779">このイベント データは、押されたマウス ボタンおよび処理済み状態に関する詳細を報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1779">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="23e7a-1780">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1780">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1781">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1781">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1782">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1782">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="23e7a-1783">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1783">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="23e7a-1784">これらの入力システム機能が <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement.OnMouseDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1784">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1785">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement.MouseLeftButtonDown> と <xref:System.Windows.UIElement.MouseRightButtonDown>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1785">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="23e7a-1786">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1786">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="23e7a-1787">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1787">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="23e7a-1788">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1788">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="23e7a-1789">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1789">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="23e7a-1790"><xref:System.Windows.UIElement.OnMouseDown%2A>を処理することで、すべての潜在的なマウスボタンのダウンアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1790">By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="23e7a-1791">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1791">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="23e7a-1792">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1792">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="23e7a-1793">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1793">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1794">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1794">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1795">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1795">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1796">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1796">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1797">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1797">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1798">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1798">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1799">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1799">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1800">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1800">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1801">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1801">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1802">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1802">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1803">未処理の <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1803">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="23e7a-1804">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1804">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1805">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1805">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1806">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1806">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1807">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1807">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="23e7a-1808">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1808">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1809">この場合、一致イベントはルーティングイベントで、直接ルーティング方法が使用されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1809">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="23e7a-1810">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1810">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1811">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1811">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1812">未処理の <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1812">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="23e7a-1813">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1813">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1814">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1814">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1815">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1815">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-1816">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1816">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="23e7a-1817">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1817">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1818">この場合、一致イベントはルーティングイベントで、直接ルーティング方法が使用されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1818">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="23e7a-1819">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1819">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1820">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1820">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-1821">このイベント データは、マウスの左ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1821">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="23e7a-1822">この要素上で未処理の <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> ルーティング イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1822">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="23e7a-1823">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1823">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1824"><xref:System.Windows.UIElement.MouseLeftButtonDown> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1824">The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-1825"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.MouseLeftButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1825"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="23e7a-1826">この要素の目的のために <xref:System.Windows.UIElement.MouseLeftButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1826">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-1827">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1827">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1828"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1828">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-1829">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1829">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-1830">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1830">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-1831"><xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1831">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-1832">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1832">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="23e7a-1833">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1833">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="23e7a-1834">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1834">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="23e7a-1835">たとえば、<xref:System.Windows.Controls.Button> から派生させ、基本実装を呼び出さずに派生クラスの <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドによって <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントは無効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1835">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1836">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1836">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-1837">このイベント データは、マウスの左ボタンが放されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1837">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="23e7a-1838">未処理の <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1838">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1839">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1839">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1840"><xref:System.Windows.UIElement.MouseLeftButtonUp> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1840">The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-1841"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.MouseLeftButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1841"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="23e7a-1842">この要素の目的のために <xref:System.Windows.UIElement.MouseLeftButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1842">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-1843">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1843">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1844"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1844">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-1845">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1845">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-1846">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1846">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-1847"><xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1847">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1848">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1848">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1849">未処理の <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1849">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1850">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1850">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1851">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1851">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1852">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1852">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1853">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1853">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1854">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1854">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1855">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1855">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1856">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1856">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1857">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1857">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1858">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1858">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1859">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1859">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1860">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1860">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-1861">このイベント データは、マウスの右ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1861">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="23e7a-1862">未処理の <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1862">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1863">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1863">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1864"><xref:System.Windows.UIElement.MouseRightButtonDown> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1864">The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-1865"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.MouseRightButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1865"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="23e7a-1866">この要素の目的のために <xref:System.Windows.UIElement.MouseRightButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1866">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-1867">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1867">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1868"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1868">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-1869">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1869">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-1870">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1870">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-1871"><xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1871">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-1872">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1872">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="23e7a-1873">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1873">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="23e7a-1874">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1874">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="23e7a-1875">たとえば、<xref:System.Windows.Controls.Control> から派生させ、base を呼び出さずに派生クラスの <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドにより、<xref:System.Windows.Controls.Control> の既定の動作の一部であるコントロールのコンテキストメニューサービスが無効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1875">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1876">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1876">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-1877">このイベント データは、マウスの右ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1877">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="23e7a-1878">ハンドルされない <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1878">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1879">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1879">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1880"><xref:System.Windows.UIElement.MouseRightButtonUp> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1880">The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-1881"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.MouseRightButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1881"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="23e7a-1882">この要素の目的のために <xref:System.Windows.UIElement.MouseRightButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1882">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-1883">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1883">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1884"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1884">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-1885">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1885">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-1886">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1886">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-1887"><xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1887">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1888">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1888">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-1889">このイベント データは、マウス ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1889">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="23e7a-1890">未処理の <see cref="E:System.Windows.Input.Mouse.MouseUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1890">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1891">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1891">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1892">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1892">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="23e7a-1893">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1893">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="23e7a-1894">これらの入力システム機能が <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement.OnMouseUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1894">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="23e7a-1895">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement.MouseLeftButtonUp> と <xref:System.Windows.UIElement.MouseRightButtonUp>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1895">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="23e7a-1896">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1896">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="23e7a-1897">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1897">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="23e7a-1898">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1898">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="23e7a-1899">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1899">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="23e7a-1900"><xref:System.Windows.UIElement.OnMouseUp%2A>を処理することで、すべてのマウスボタンのアップアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1900">By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="23e7a-1901">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1901">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="23e7a-1902">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1902">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="23e7a-1903">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1903">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1904">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1904">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1905">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1905">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1906">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1906">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1907">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1907">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1908">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1908">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1909">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1909">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1910">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1910">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1911">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1911">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1912">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1912">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1913">未処理の <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1913">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1914">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1914">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1915">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1915">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1916">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1916">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1917">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1917">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1918">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1918">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1919">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1919">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1920">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1920">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1921">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1921">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1922">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1922">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1923">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1923">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1924">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1924">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1925">未処理の <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1925">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1926">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1926">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1927">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1927">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1928">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1928">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1929">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1929">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1930">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1930">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1931">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1931">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1932">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1932">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1933">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1933">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1934">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1934">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1935">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1935">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-1936">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1936">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1937">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1937">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1938">未処理の <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1938">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1939">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1939">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1940">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1940">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1941">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1941">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1942">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1942">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1943">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1943">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1944">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1944">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1945">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1945">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1946">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1946">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1947">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1947">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1948">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1948">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-1949">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1949">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1950">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1950">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1951">未処理の <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1951">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1952">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1952">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1953">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1953">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1954">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1954">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1955">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1955">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1956">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1956">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1957">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1957">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1958">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1958">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1959">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1959">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1960">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1960">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1961">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1961">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-1962">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1962">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1963">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1963">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1964">未処理の <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1964">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1965">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1965">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1966">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1966">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1967">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1967">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1968">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1968">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1969">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1969">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1970">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1970">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1971">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1971">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1972">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1972">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1973">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1973">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1974">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1974">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-1975">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1975">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1976">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1976">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1977">未処理の <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1977">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1978">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1978">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1979">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1979">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1980">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1980">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1981">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1981">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1982">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1982">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1983">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1983">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1984">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1984">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1985">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1985">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1986">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1986">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-1987">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1987">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-1988">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1988">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-1989">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1989">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-1990">未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1990">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-1991">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1991">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-1992">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1992">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-1993">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1993">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-1994">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1994">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-1995">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1995">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-1996">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1996">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-1997">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1997">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-1998">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1998">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-1999">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-1999">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2000">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2000">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2001">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2001">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2002">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2002">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2003">未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2003">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2004">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2004">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2005">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2005">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2006">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2006">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2007">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2007">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2008">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2008">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2009">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2009">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2010">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2010">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2011">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2011">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2012">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2012">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2013">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2013">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2014">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2014">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2015">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2015">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2016">未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2016">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2017">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2017">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2018">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2018">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2019">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2019">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2020">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2020">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2021">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2021">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2022">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2022">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2023">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2023">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2024">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2024">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2025">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2025">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2026">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2026">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2027">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2027">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2028">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2028">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2029">未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2029">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2030">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2030">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2031">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2031">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2032">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2032">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2033">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2033">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2034">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2034">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2035">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2035">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2036">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2036">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2037">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2037">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2038">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2038">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2039">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2039">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2040">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2040">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2041">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2041">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-2042">このイベント データは、1 つ以上のマウス ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2042">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="23e7a-2043">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2043">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2044">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2044">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2045">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2045">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="23e7a-2046">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2046">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="23e7a-2047">これらの入力システム機能が <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement.OnPreviewMouseDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2047">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="23e7a-2048">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> と <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2048">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="23e7a-2049">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2049">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="23e7a-2050">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2050">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="23e7a-2051">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2051">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="23e7a-2052">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2052">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="23e7a-2053"><xref:System.Windows.UIElement.OnPreviewMouseDown%2A>を処理することで、すべての潜在的なマウスボタンのダウンアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2053">By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="23e7a-2054">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2054">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="23e7a-2055">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2055">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="23e7a-2056">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2056">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2057">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2057">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2058">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2058">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2059">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2059">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2060">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2060">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2061">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2061">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2062">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2062">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2063">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2063">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2064">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2064">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2065">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2065">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2066">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2066">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-2067">このイベント データは、マウスの左ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2067">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="23e7a-2068">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2068">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2069">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2069">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2070"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2070">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-2071"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2071"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="23e7a-2072">この要素の目的のために <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2072">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-2073">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2073">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-2074"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2074">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-2075">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2075">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-2076">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2076">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-2077"><xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2077">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-2078">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2078">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="23e7a-2079">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2079">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="23e7a-2080">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2080">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="23e7a-2081">たとえば、<xref:System.Windows.Controls.Button> から派生させ、基本実装を呼び出さずに派生クラスの <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドによって <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントは無効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2081">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2082">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2082">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-2083">このイベント データは、マウスの左ボタンが放されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2083">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="23e7a-2084">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2084">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2085">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2085">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2086"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2086">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-2087"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2087"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="23e7a-2088">この要素の目的のために <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2088">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-2089">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2089">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-2090"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2090">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-2091">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2091">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-2092">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2092">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-2093"><xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2093">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2094">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2094">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2095">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2095">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2096">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2096">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2097">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2097">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2098">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2098">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2099">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2099">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2100">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2100">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2101">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2101">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2102">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2102">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2103">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2103">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2104">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2104">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2105">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2105">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2106">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2106">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2107">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2107">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-2108">このイベント データは、マウスの右ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2108">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="23e7a-2109">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2109">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2110">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2110">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2111"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2111">The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-2112"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.MouseRightButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2112"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="23e7a-2113">この要素の目的のために <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2113">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-2114">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2114">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-2115"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2115">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-2116">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2116">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-2117">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2117">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-2118"><xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2118">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-2119">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2119">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="23e7a-2120">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2120">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="23e7a-2121">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2121">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="23e7a-2122">たとえば、<xref:System.Windows.Controls.Control> から派生させ、base を呼び出さずに派生クラスの <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドにより、<xref:System.Windows.Controls.Control> の既定の動作の一部であるコントロールのコンテキストメニューサービスが無効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2122">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2123">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2123">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-2124">このイベント データは、マウスの右ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2124">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="23e7a-2125">ハンドルされない <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2125">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2126">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2126">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2127"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2127">The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="23e7a-2128"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.UIElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2128"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="23e7a-2129">この要素の目的のために <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2129">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="23e7a-2130">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2130">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="23e7a-2131"><xref:System.Windows.UIElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2131">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="23e7a-2132">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2132">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="23e7a-2133">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2133">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e7a-2134"><xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.UIElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2134">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2135">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2135">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="23e7a-2136">このイベント データは、1 つ以上のマウス ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2136">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="23e7a-2137">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2137">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2138">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2138">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2139">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2139">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="23e7a-2140">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2140">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="23e7a-2141">これらの入力システム機能が <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.UIElement.OnPreviewMouseUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2141">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="23e7a-2142">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> と <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2142">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="23e7a-2143">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2143">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="23e7a-2144">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2144">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="23e7a-2145">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2145">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="23e7a-2146">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2146">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="23e7a-2147"><xref:System.Windows.UIElement.OnPreviewMouseUp%2A>を処理することで、すべてのマウスボタンのアップアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2147">By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="23e7a-2148">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2148">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="23e7a-2149">ボタン固有の各ダイレクトイベントには、virtual On \* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2149">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="23e7a-2150">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2150">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2151">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2151">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2152">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2152">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2153">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2153">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2154">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2154">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2155">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2155">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2156">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2156">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2157">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2157">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2158">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2158">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2159">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2159">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2160">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2160">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2161">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2161">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2162">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2162">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2163">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2163">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2164">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2164">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2165">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2165">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2166">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2166">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2167">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2167">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2168">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2168">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2169">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2169">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2170">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2170">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2171">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2171">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2172">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2172">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2173">未処理の <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2173">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2174">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2174">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2175">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2175">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2176">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2176">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2177">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2177">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2178">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2178">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2179">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2179">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2180">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2180">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2181">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2181">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2182">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2182">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2183">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2183">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2184">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2184">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2185">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2185">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2186">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2186">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2187">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2187">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2188">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2188">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2189">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2189">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2190">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2190">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2191">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2191">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2192">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2192">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2193">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2193">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2194">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2194">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2195">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2195">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2196">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2196">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2197">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2197">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2198">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2198">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2199">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2199">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2200">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2200">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2201">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2201">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2202">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2202">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2203">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2203">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2204">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2204">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2205">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2205">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2206">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2206">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2207">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2207">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2208">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2208">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2209">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2209">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2210">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2210">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2211">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2211">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2212">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2212">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2213">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2213">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2214">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2214">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2215">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2215">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2216">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2216">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2217">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2217">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2218">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2218">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2219">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2219">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2220">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2220">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2221">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2221">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2222">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2222">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2223">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2223">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2224">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2224">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2225">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2225">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2226">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2226">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2227">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2227">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2228">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2228">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2229">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2229">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2230">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2230">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2231">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2231">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2232">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2232">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2233">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2233">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2234">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2234">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2235">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2235">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2236">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2236">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2237">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2237">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2238">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2238">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2239">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2239">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2240">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2240">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2241">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2241">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2242">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2242">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2243">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2243">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2244">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2244">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2245">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2245">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2246">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2246">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2247">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2247">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2248">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2248">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2249">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2249">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2250">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2250">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2251">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2251">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2252">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2252">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2253">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2253">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2254">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2254">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2255">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2255">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2256">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2256">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2257">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2257">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2258">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2258">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2259">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2259">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2260">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2260">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2261">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2261">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2262">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2262">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2263">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2263">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2264">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2264">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2265">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2265">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2266">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2266">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2267">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2267">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2268">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2268">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2269">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2269">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2270">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2270">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2271">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2271">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2272">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2272">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2273">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2273">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2274">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2274">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2275">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2275">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2276">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2276">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2277">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2277">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2278">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2278">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2279">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2279">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2280">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2280">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2281">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2281">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2282">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2282">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2283">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2283">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2284">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2284">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2285">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2285">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2286">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2286">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2287">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2287">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2288">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2288">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2289">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2289">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2290">未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2290">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2291">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2291">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2292">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2292">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2293">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2293">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2294">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2294">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2295">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2295">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2296">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2296">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2297">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2297">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2298">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2298">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2299">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2299">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2300">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2300">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2301">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2301">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2302">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2302">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2303">未処理の <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2303">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2304">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2304">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2305">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2305">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2306">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2306">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2307">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2307">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2308">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2308">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2309">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2309">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2310">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2310">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2311">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2311">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2312">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2312">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2313">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2313">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="23e7a-2314">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2314">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2315">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2315">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2316">この要素がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2316">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2317"><xref:System.Windows.UIElement.OnPreviewTouchDown%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2317">The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2318">派生クラスの <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> をオーバーライドして、<xref:System.Windows.UIElement.PreviewTouchDown> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2318">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="23e7a-2319">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2319">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2320">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2320">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2321">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2321">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2322"><xref:System.Windows.UIElement.OnPreviewTouchMove%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2322">The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2323">派生クラスの <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> をオーバーライドして、<xref:System.Windows.UIElement.PreviewTouchMove> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2323">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="23e7a-2324">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2324">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2325">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2325">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2326">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2326">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2327"><xref:System.Windows.UIElement.OnPreviewTouchUp%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2327">The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2328">派生クラスの <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> をオーバーライドして、<xref:System.Windows.UIElement.PreviewTouchUp> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2328">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="23e7a-2329">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2329">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2330">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2330">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2331">未処理の <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2331">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2332">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2332">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2333">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2333">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2334">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2334">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2335">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2335">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2336">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2336">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2337">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2337">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2338">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2338">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2339">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2339">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2340">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2340">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2341">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2341">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2342">イベント データを格納している <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2342">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2343">未処理の <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2343">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2344">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2344">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2345">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2345">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2346">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2346">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2347">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2347">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2348">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2348">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2349">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2349">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2350">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2350">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2351">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2351">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2352">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2352">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2353">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2353">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRender (drawingContext As DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext"><span data-ttu-id="23e7a-2354">特定の要素に対する描画命令。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2354">The drawing instructions for a specific element.</span></span> <span data-ttu-id="23e7a-2355">このコンテキストはレイアウト システムに提供されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2355">This context is provided to the layout system.</span></span></param>
        <summary><span data-ttu-id="23e7a-2356">派生クラスでオーバーライドされると、レイアウト システムの指示で行われるレンダリング操作に参加します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2356">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span></span> <span data-ttu-id="23e7a-2357">この要素に対するレンダリング指示は、このメソッドの呼び出し時に直接使用されるわけではなく、後からレイアウト処理や描画処理で非同期に使用されるときまで保存されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2357">The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2358">このメソッドには、<xref:System.Windows.UIElement> クラスに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2358">This method has no default implementation in the <xref:System.Windows.UIElement> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-2359">次のコード例は、panel 派生クラスの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2359">The following code example shows a possible implementation for a panel derived class.</span></span>  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-2360"><see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> メソッドをオーバーライドして、レンダリングされた要素 (特に論理ツリーで定義されていない) に、効果や装飾などのグラフィカル要素を追加することができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2360">The <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</span></span> <span data-ttu-id="23e7a-2361"><see cref="T:System.Windows.Media.DrawingContext" /> オブジェクトは、図形、テキスト、イメージ、またはビデオを描画するためのメソッドを提供する引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2361">A <see cref="T:System.Windows.Media.DrawingContext" /> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="23e7a-2362">パッケージ化されたパラメーター (<see cref="T:System.Windows.SizeChangedInfo" />)。これには、新旧のサイズと、どのディメンションが実際に変更されたかが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2362">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</span></span></param>
        <summary><span data-ttu-id="23e7a-2363">派生クラスでオーバーライドされると、レイアウト システムの指示で行われるレンダリング操作に参加します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2363">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span></span> <span data-ttu-id="23e7a-2364">レイアウトの更新の結果として要素の <see cref="P:System.Windows.UIElement.RenderSize" /> が変化した場合、このメソッドはレイアウトが更新されてからレンダリングが行われるまでの間に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2364">This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2365">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2365">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2366">一般的な WPF フレームワークレベルの要素では、<xref:System.Windows.FrameworkElement>からのオーバーライド実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2366">A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="23e7a-2367"><xref:System.Windows.FrameworkElement> の実装では <xref:System.Windows.FrameworkElement.Width%2A> と <xref:System.Windows.FrameworkElement.Height%2A> のプロパティが無効になり、レイアウトの remaking の基本が処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2367">The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout.</span></span> <span data-ttu-id="23e7a-2368"><xref:System.Windows.UIElement> レベルで <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> をオーバーライドすることは、要素の実装が WPF フレームワークレベルの実装を意図的に使用しないことを意味します。したがって、要素はレイアウトロジックをより直接処理する必要があります。通常は、置換レイアウトシステムを記述します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2368">Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2369">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2369">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2370">未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2370">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2371">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2371">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2372">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2372">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2373">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2373">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2374">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2374">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2375">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2375">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2376">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2376">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2377">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2377">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2378">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2378">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2379">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2379">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2380">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2380">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2381">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2381">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2382">未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2382">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2383">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2383">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2384">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2384">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2385">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2385">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2386">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2386">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2387">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2387">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2388">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2388">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2389">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2389">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2390">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2390">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2391">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2391">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2392">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2392">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2393">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2393">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2394">未処理の <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2394">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2395">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2395">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2396">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2396">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2397">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2397">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2398">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2398">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2399">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2399">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2400">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2400">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2401">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2401">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2402">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2402">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2403">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2403">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2404">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2404">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2405">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2405">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2406">未処理の <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2406">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="23e7a-2407">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2407">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2408">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2408">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2409">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2409">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-2410">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2410">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="23e7a-2411">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2411">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2412">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2412">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2413">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2413">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2414">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2414">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2415">未処理の <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2415">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2416">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2416">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2417">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2417">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2418">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2418">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2419">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2419">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2420">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2420">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2421">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2421">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2422">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2422">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2423">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2423">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2424">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2424">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2425">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2425">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2426">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2426">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2427">未処理の <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2427">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2428">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2428">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2429">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2429">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2430">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2430">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2431">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2431">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2432">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2432">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2433">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2433">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2434">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2434">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2435">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2435">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2436">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2436">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2437">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2437">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2438">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2438">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2439">未処理の <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2439">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="23e7a-2440">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2440">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2441">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2441">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2442">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2442">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="23e7a-2443">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2443">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="23e7a-2444">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2444">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2445">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2445">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2446">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2446">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2447">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2447">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2448">未処理の <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2448">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2449">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2449">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2450">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2450">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2451">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2451">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2452">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2452">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2453">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2453">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2454">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2454">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2455">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2455">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2456">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2456">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2457">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2457">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2458">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2458">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2459">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2459">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2460">未処理の <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2460">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2461">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2461">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2462">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2462">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2463">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2463">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2464">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2464">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2465">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2465">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2466">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2466">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2467">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2467">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2468">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2468">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2469">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2469">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2470">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2470">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2471">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2471">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2472">未処理の <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2472">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2473">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2473">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2474">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2474">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2475">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2475">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2476">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2476">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2477">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2477">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2478">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2478">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2479">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2479">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2480">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2480">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2481">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2481">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2482">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2482">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2483">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2483">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2484">未処理の <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2484">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2485">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2485">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2486">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2486">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2487">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2487">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2488">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2488">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2489">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2489">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2490">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2490">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2491">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2491">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2492">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2492">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2493">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2493">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2494">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2494">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2495">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2495">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2496">未処理の <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 添付イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2496">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="23e7a-2497">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2497">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2498">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2498">This method has no default implementation.</span></span> <span data-ttu-id="23e7a-2499">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2499">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="23e7a-2500">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2500">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="23e7a-2501">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2501">In this case the matching event is a routed event.</span></span> <span data-ttu-id="23e7a-2502">On \* メソッドの実装パターンは、ルーティングイベントによって異なります。これは、ルーティングイベントは子要素によって発生する可能性があるためです。これは、必ずしもハンドラーを呼び出す要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2502">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="23e7a-2503">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2503">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="23e7a-2504">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2504">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="23e7a-2505">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.UIElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2505">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="23e7a-2506">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2506">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2507">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2507">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2508">この要素の内部がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement.TouchDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2508">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2509"><xref:System.Windows.UIElement.OnTouchDown%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2509">The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2510">派生クラスの <xref:System.Windows.UIElement.OnTouchDown%2A> をオーバーライドして、<xref:System.Windows.UIElement.TouchDown> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2510">Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event.</span></span> <span data-ttu-id="23e7a-2511">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnTouchDown%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2511">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2512">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2512">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2513">この要素の境界の外部から内部にタッチが移動したときに発生する <see cref="E:System.Windows.UIElement.TouchEnter" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2513">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2514"><xref:System.Windows.UIElement.OnTouchEnter%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2514">The <xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2515">派生クラスの <xref:System.Windows.UIElement.OnTouchEnter%2A> をオーバーライドして、<xref:System.Windows.UIElement.TouchEnter> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2515">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event.</span></span> <span data-ttu-id="23e7a-2516">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnTouchEnter%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2516">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2517">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2517">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2518">タッチがこの <see cref="E:System.Windows.UIElement.TouchLeave" /> の境界の内部から外部に移動したときに発生する <see cref="T:System.Windows.UIElement" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2518">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2519"><xref:System.Windows.UIElement.OnTouchLeave%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2519">The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2520">派生クラスの <xref:System.Windows.UIElement.OnTouchLeave%2A> をオーバーライドして、<xref:System.Windows.UIElement.TouchLeave> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2520">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event.</span></span> <span data-ttu-id="23e7a-2521">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnTouchLeave%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2521">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2522">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2522">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2523">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement.TouchMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2523">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2524"><xref:System.Windows.UIElement.OnTouchMove%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2524">The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2525">派生クラスの <xref:System.Windows.UIElement.OnTouchMove%2A> をオーバーライドして、<xref:System.Windows.UIElement.TouchMove> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2525">Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event.</span></span> <span data-ttu-id="23e7a-2526">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnTouchMove%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2526">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-2527">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2527">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="23e7a-2528">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement.TouchUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2528">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2529"><xref:System.Windows.UIElement.OnTouchUp%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2529">The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="23e7a-2530">派生クラスの <xref:System.Windows.UIElement.OnTouchUp%2A> をオーバーライドして、<xref:System.Windows.UIElement.TouchUp> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2530">Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event.</span></span> <span data-ttu-id="23e7a-2531">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.UIElement.OnTouchUp%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2531">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="23e7a-2532">直前の親。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2532">The previous parent.</span></span> <span data-ttu-id="23e7a-2533"><see cref="T:System.Windows.DependencyObject" /> に直前の親要素がなかった場合は、<see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2533">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span></span></param>
        <summary><span data-ttu-id="23e7a-2534">この <see cref="T:System.Windows.UIElement" /> の親要素によって、基になるビジュアル親に対する変更が報告されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2534">Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23e7a-2535">このメソッドをオーバーライドする場合は、常に基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2535">If you override this method, always call the base implementation.</span></span> <span data-ttu-id="23e7a-2536">既定の基本実装では、逆継承されたプロパティ状態の内部メンテナンスが実行されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2536">The default base implementation performs some internal maintenance of reverse-inherited property state.</span></span> <span data-ttu-id="23e7a-2537">基本実装を呼び出さないと、この状態は無効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2537">Failing to call the base implementation will invalidate this state.</span></span>  
  
<span data-ttu-id="23e7a-2538">このメソッドは、<see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2538">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="23e7a-2539">また、<see cref="T:System.Windows.FrameworkElement" /> と <see cref="T:System.Windows.Window" /> は両方とも <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />の <see cref="T:System.Windows.UIElement" /> の実装をオーバーライドし、シールする <see cref="T:System.Windows.Window" /> ます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2539"><see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement" /> implementation of <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2540"><see cref="T:System.Windows.UIElement" /> を [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] に表示する際に、その全体に適用される不透明度率を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2540">Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="23e7a-2541">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2541">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-2542">不透明度率。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2542">The opacity factor.</span></span> <span data-ttu-id="23e7a-2543">既定の不透明度は 1.0 です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2543">Default opacity is 1.0.</span></span> <span data-ttu-id="23e7a-2544">予期される値は 0 0 ～ 1.0 です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2544">Expected values are between 0.0 and 1.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2545">1.0 既定値は、<xref:System.Windows.UIElement> クラスのこの依存関係プロパティの初期メタデータによって提供される既定値です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2545">The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="23e7a-2546">その他の派生クラスは、クラスコンストラクター内からメタデータをオーバーライドすることによって、この既定値を変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2546">Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</span></span>  
  
 <span data-ttu-id="23e7a-2547">要素が表示されている場合 (<xref:System.Windows.UIElement.IsVisible%2A> は `true`) を除き、<xref:System.Windows.UIElement.Opacity%2A> の値は実際のレイアウトには適用されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2547">The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).</span></span>  
  
 <span data-ttu-id="23e7a-2548"><xref:System.Windows.UIElement.Opacity%2A> は、要素ツリーの下位にある親要素から子要素に適用されますが、入れ子になった不透明度設定の可視効果は、個々の子要素のプロパティ値には示されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2548"><xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</span></span> <span data-ttu-id="23e7a-2549">たとえば、リストに 50% (0.5) の不透明度が設定されており、そのリストアイテムのいずれかに独自の不透明度が 20% (0.2) に設定されている場合、そのリストアイテムの [net visible opacity] は 10% (0.1) のようにレンダリングされますが、クエリを実行すると、リスト項目の <xref:System.Windows.UIElement.Opacity%2A> 0.2 プロパティの</span><span class="sxs-lookup"><span data-stu-id="23e7a-2549">For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.</span></span>  
  
 <span data-ttu-id="23e7a-2550">宣言または評価された不透明度が0の場合でも、要素は入力イベントとコマンドに参加し、フォーカスを決定できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2550">Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</span></span> <span data-ttu-id="23e7a-2551">この側面は便利な場合があります。たとえば、不透明度ゼロのオブジェクト (図形など) を使用して、透明な要素を持つ基になるオブジェクトをマスクすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2551">This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</span></span> <span data-ttu-id="23e7a-2552">不透明度ゼロオブジェクトは、基になる領域のすべての入力イベント処理を処理できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2552">The opacity-zero object can then handle all the input event processing for an underlying area.</span></span> <span data-ttu-id="23e7a-2553">ただし、オブジェクトまたは図形の `Background` または `Fill` は、<xref:System.Windows.Media.Brushes.Transparent%2A>ている場合でも値に設定する必要があります。そうしないと、ヒットテストが有効にならず、イベントは受け取りません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2553">However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.</span></span>  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-2554">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2555">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2555">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityProperty>|  
|<span data-ttu-id="23e7a-2556">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-2556">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-2557">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-2557">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2558">この要素の描画されるコンテンツのアルファ チャネル マスクに適用される <see cref="T:System.Windows.Media.Brush" /> 実装として、不透明マスクを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2558">Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.</span></span>  <span data-ttu-id="23e7a-2559">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2559">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-2560">不透明マスクに使用するブラシ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2560">The brush to use for opacity masking.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2561">このプロパティは、指定された <xref:System.Windows.Media.Brush>に対して、アルファチャネルの値が何であるかのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2561">This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>.</span></span> <span data-ttu-id="23e7a-2562"><xref:System.Windows.Media.Brush>の表示コンテンツ (赤、緑、または青) のその他のチャネルは無視されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2562">The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.</span></span>  
  
 <span data-ttu-id="23e7a-2563">この目的に最も一般的な <xref:System.Windows.Media.Brush> は <xref:System.Windows.Media.ImageBrush>であり、vignette などのさまざまな写真マスキング手法に使用できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2563">The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette.</span></span> <span data-ttu-id="23e7a-2564">ただし、定義された <xref:System.Windows.Media.Brush> (<xref:System.Windows.Media.LinearGradientBrush>など) はすべて使用できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2564">But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.</span></span>  
  
 <span data-ttu-id="23e7a-2565">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]では、このプロパティ値は、<xref:System.Windows.Media.Brush> 抽象クラスの各実装に固有のインライン構文を使用できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2565">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class.</span></span> <span data-ttu-id="23e7a-2566">詳細については、「[純色とグラデーションによる塗りつぶしの概要](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2566">For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-2567">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2567">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2568">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2568">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|<span data-ttu-id="23e7a-2569">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-2569">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-2570">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-2570">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-2571">次のマークアップの例は、別の <xref:System.Windows.Controls.Image>に適用された <xref:System.Windows.Media.ImageBrush> 不透明度マスクを示しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2571">The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.</span></span>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2572"><see cref="P:System.Windows.UIElement.OpacityMask" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2572">Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2573"><see cref="P:System.Windows.UIElement.Opacity" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2573">Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2574">この要素を一意に識別する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2574">Gets a value that uniquely identifies this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-2575">この要素の一意の識別子。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2575">The unique identifier for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2576"><xref:System.Windows.UIElement.PersistId%2A> は、各要素を一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2576"><xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element.</span></span> <span data-ttu-id="23e7a-2577">要素は、同じ [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] が読み込まれるたびに (バイナリ表現を含む) 同じ <xref:System.Windows.UIElement.PersistId%2A> を保持します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2577">An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations).</span></span> <span data-ttu-id="23e7a-2578">この識別子は、内部の読み込み、解析、およびシリアル化の要件に使用されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2578">This identifier is used for internal loading, parsing and serialization requirements.</span></span> <span data-ttu-id="23e7a-2579">アプリケーションコードで使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2579">It is not intended to be used by your application code.</span></span>  
  
 <span data-ttu-id="23e7a-2580">このプロパティには、特定のインスタンスの <xref:System.Object.GetHashCode%2A> の結果との関係はありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2580">This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="23e7a-2581">要求したフォーカス検査の方向。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2581">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="23e7a-2582">派生クラスでオーバーライドされると、指定したフォーカス検査方向のフォーカスを受け取ることになる要素を返します。実際にはフォーカスはその要素に移動しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2582">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-2583"><see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> が実際に呼び出された場合にフォーカスを受け取る要素。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2583">The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2584">このクラスでのこのメソッドの既定の実装は不完全であり、常に `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2584">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2585">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2585">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2586">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewDragEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2586">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2587"><xref:System.Windows.UIElement.PreviewDragEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2587">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2588">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2588">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2589">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2589">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="23e7a-2590">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2590">Routing strategy</span></span>|<span data-ttu-id="23e7a-2591">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2591">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2592">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2592">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-2593">対応するバブルイベントは <xref:System.Windows.UIElement.DragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2593">The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="23e7a-2594">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewDragEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2594">Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2595"><see cref="E:System.Windows.UIElement.PreviewDragEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2595">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2596">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2596">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2597">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2597">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2598">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2598">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2599">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2599">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2600">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2600">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2601">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2601">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2602">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewDragLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2602">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2603"><xref:System.Windows.UIElement.PreviewDragLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2603">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2604">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2604">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2605">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2605">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="23e7a-2606">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2606">Routing strategy</span></span>|<span data-ttu-id="23e7a-2607">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2607">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2608">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2608">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-2609">対応するバブルイベントは <xref:System.Windows.UIElement.DragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2609">The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="23e7a-2610">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewDragLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2610">Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2611"><see cref="E:System.Windows.UIElement.PreviewDragLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2611">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2612">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2612">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2613">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2613">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2614">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2614">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2615">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2615">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2616">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2616">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2617">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2617">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2618">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewDragOver> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2618">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2619"><xref:System.Windows.UIElement.PreviewDragOver> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2619">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2620">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2620">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2621">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2621">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|<span data-ttu-id="23e7a-2622">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2622">Routing strategy</span></span>|<span data-ttu-id="23e7a-2623">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2623">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2624">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2624">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-2625">対応するバブルイベントは <xref:System.Windows.UIElement.DragOver>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2625">The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="23e7a-2626">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewDragOver%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2626">Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2627"><see cref="E:System.Windows.UIElement.PreviewDragOver" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2627">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2628">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2628">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2629">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2629">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2630">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2630">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2631">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2631">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2632">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2632">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2633">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2633">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2634">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewDrop> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2634">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2635"><xref:System.Windows.UIElement.PreviewDrop> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2635">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2636">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2636">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2637">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2637">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|<span data-ttu-id="23e7a-2638">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2638">Routing strategy</span></span>|<span data-ttu-id="23e7a-2639">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2639">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2640">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2640">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="23e7a-2641">対応するバブルイベントは <xref:System.Windows.UIElement.Drop>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2641">The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.</span></span>  
  
-   <span data-ttu-id="23e7a-2642">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewDrop%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2642">Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2643"><see cref="E:System.Windows.UIElement.PreviewDrop" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2643">Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2644">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2644">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2645">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2645">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2646">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2646">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2647">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2647">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2648">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2648">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2649">ドラッグ アンド ドロップ操作が開始されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2649">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2650"><xref:System.Windows.UIElement.PreviewGiveFeedback> イベントを使用すると、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、ドラッグイベントのソースでマウスポインターの外観を変更できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2650">The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="23e7a-2651">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewGiveFeedback> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2651">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2652"><xref:System.Windows.UIElement.PreviewGiveFeedback> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2652">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2653">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2653">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2654">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2654">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="23e7a-2655">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2655">Routing strategy</span></span>|<span data-ttu-id="23e7a-2656">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2656">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2657">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2657">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="23e7a-2658">対応するバブルイベントは <xref:System.Windows.UIElement.GiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2658">The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="23e7a-2659">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2659">Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2660"><see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2660">Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2661">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2661">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2662">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2662">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2663">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2663">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2664">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2664">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2665">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2665">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2666">この要素にキーボード フォーカスが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2666">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2667">このイベントではトンネリングルーティングが使用されるため、フォーカスがある要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2667">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-2668">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2668">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="23e7a-2669">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewGotKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2669">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2670"><xref:System.Windows.UIElement.PreviewGotKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2670">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2671">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2671">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2672">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2672">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="23e7a-2673">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2673">Routing strategy</span></span>|<span data-ttu-id="23e7a-2674">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2674">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2675">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2675">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="23e7a-2676">対応するバブルイベントは <xref:System.Windows.UIElement.GotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2676">The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="23e7a-2677">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2677">Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2678"><see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2678">Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2679">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2679">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2680">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2680">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2681">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2681">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2682">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2682">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2683">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2683">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2684">この要素にフォーカスがある状態でキーが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2684">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2685">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2685">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="23e7a-2686"><xref:System.Windows.UIElement.KeyDown> イベントは、特定のコントロールで想定どおりに動作しない可能性がある下位レベルのテキスト入力イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2686">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="23e7a-2687">これは、一部のコントロールには、テキスト入力処理と関連イベントの上位レベルのバージョンを提供するコントロールの複合またはクラス処理があるためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2687">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="23e7a-2688">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewKeyDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2688">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2689"><xref:System.Windows.UIElement.PreviewKeyDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2689">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2690">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2690">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2691">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2691">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="23e7a-2692">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2692">Routing strategy</span></span>|<span data-ttu-id="23e7a-2693">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2693">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2694">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2694">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="23e7a-2695">対応するバブルイベントは <xref:System.Windows.UIElement.KeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2695">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-2696">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewKeyDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2696">Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2697"><see cref="E:System.Windows.UIElement.PreviewKeyDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2697">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2698">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2698">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2699">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2699">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2700">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2700">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2701">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2701">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2702">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2702">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2703">この要素にフォーカスがあるときにキーが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2703">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2704">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2704">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="23e7a-2705"><xref:System.Windows.UIElement.KeyUp> イベントは、特定のコントロールで想定どおりに動作しない可能性がある下位レベルのテキスト入力イベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2705">The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="23e7a-2706">これは、一部のコントロールには、テキスト入力処理と関連イベントの上位レベルのバージョンを提供するコントロールの複合またはクラス処理があるためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2706">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="23e7a-2707">詳細については、個々のコントロールのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2707">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="23e7a-2708">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewKeyUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2708">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2709"><xref:System.Windows.UIElement.PreviewKeyUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2709">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2710">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2710">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2711">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2711">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="23e7a-2712">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2712">Routing strategy</span></span>|<span data-ttu-id="23e7a-2713">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2713">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2714">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2714">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="23e7a-2715">対応するバブルイベントは <xref:System.Windows.UIElement.KeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2715">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-2716">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewKeyUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2716">Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2717"><see cref="E:System.Windows.UIElement.PreviewKeyUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2717">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2718">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2718">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2719">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2719">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2720">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2720">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2721">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2721">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2722">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2722">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2723">この要素からキーボード フォーカスが離れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2723">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2724">このイベントではトンネリングルーティングが使用されるため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2724">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="23e7a-2725">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2725">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="23e7a-2726">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewLostKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2726">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2727"><xref:System.Windows.UIElement.PreviewLostKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2727">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2728">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2728">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2729">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2729">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="23e7a-2730">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2730">Routing strategy</span></span>|<span data-ttu-id="23e7a-2731">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2731">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2732">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2732">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="23e7a-2733">対応するバブルイベントは <xref:System.Windows.UIElement.LostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2733">The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="23e7a-2734">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2734">Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2735"><see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2735">Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2736">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2736">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2737">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2737">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2738">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2738">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2739">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2739">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2740">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2740">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2741">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2741">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2742">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewMouseDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2742">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2743"><xref:System.Windows.UIElement.PreviewMouseDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2743">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2744"><xref:System.Windows.UIElement.PreviewMouseDown> イベントは、多くの場合、<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> または <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2744">The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="23e7a-2745"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> と <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2745"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="23e7a-2746"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> または <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2746">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2747">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2747">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2748">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2748">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="23e7a-2749">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2749">Routing strategy</span></span>|<span data-ttu-id="23e7a-2750">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2750">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2751">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2751">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2752">対応するバブルイベントは <xref:System.Windows.UIElement.MouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2752">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-2753">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2753">Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2754"><see cref="E:System.Windows.UIElement.PreviewMouseDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2754">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2755">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2755">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2756">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2756">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2757">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2757">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2758">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2758">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2759">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2759">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2760">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2760">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2761">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2761">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-2762">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2762">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-2763">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2763">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-2764">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2764">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-2765"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2765">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="23e7a-2766">これには、<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2766">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="23e7a-2767">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2767">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-2768">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2768">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-2769">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2769">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2770">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2770">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2771">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2771">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="23e7a-2772">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2772">Routing strategy</span></span>|<span data-ttu-id="23e7a-2773">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-2773">Direct</span></span>|  
|<span data-ttu-id="23e7a-2774">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2774">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2775">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2775">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2776"><see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2776">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2777">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2777">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2778">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2778">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2779">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2779">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2780">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2780">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2781">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2781">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2782">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2782">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2783">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2783">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-2784">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2784">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-2785">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2785">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-2786">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2786">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-2787"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2787">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="23e7a-2788">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2788">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-2789">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2789">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-2790">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2790">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2791">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2791">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2792">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2792">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="23e7a-2793">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2793">Routing strategy</span></span>|<span data-ttu-id="23e7a-2794">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-2794">Direct</span></span>|  
|<span data-ttu-id="23e7a-2795">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2795">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2796">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2796">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2797"><see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2797">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2798">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2798">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2799">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2799">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2800">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2800">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2801">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2801">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2802">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2802">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2803">この要素上でマウス ポインターが動かされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2803">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2804">このイベントは、マウスポインターが要素の境界内に最初に入ってから、マウスポインターが要素の境界内に残ったままになると、両方とも発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2804">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="23e7a-2805">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewMouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2805">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2806"><xref:System.Windows.UIElement.PreviewMouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2806">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2807">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2807">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2808">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2808">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="23e7a-2809">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2809">Routing strategy</span></span>|<span data-ttu-id="23e7a-2810">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2810">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2811">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2811">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="23e7a-2812">対応するバブルイベントは <xref:System.Windows.UIElement.MouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2812">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-2813">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2813">Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2814"><see cref="E:System.Windows.UIElement.PreviewMouseMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2814">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2815">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2815">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2816">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2816">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2817">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2817">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2818">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2818">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2819">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2819">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2820">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2820">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2821">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2821">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-2822">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2822">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-2823">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2823">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-2824">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2824">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-2825"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2825">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="23e7a-2826">これには、<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>などのクラスハンドラーで生成されたイベントが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2826">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="23e7a-2827">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2827">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-2828">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2828">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-2829">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2829">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2830">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2830">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2831">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2831">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="23e7a-2832">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2832">Routing strategy</span></span>|<span data-ttu-id="23e7a-2833">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-2833">Direct</span></span>|  
|<span data-ttu-id="23e7a-2834">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2834">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2835">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2835">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2836"><see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2836">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2837">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2837">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2838">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2838">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2839">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2839">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2840">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2840">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2841">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2841">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2842">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2842">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2843">この[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従っているように見えますが、実際には、各 <xref:System.Windows.UIElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2843">Although this [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-2844">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2844">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="23e7a-2845">このイベントのイベントデータは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのイベントデータを公開します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2845">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="23e7a-2846">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.UIElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2846">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="23e7a-2847"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp> 処理済みとしてマークした場合、基本的には、ルートに沿ったすべてのリスナーと関連するすべてのイベントに対して <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2847">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="23e7a-2848">概念的には、このイベント (および <xref:System.Windows.UIElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2848">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="23e7a-2849">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2849">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="23e7a-2850">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.UIElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2850">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2851">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2851">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2852">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2852">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="23e7a-2853">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2853">Routing strategy</span></span>|<span data-ttu-id="23e7a-2854">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-2854">Direct</span></span>|  
|<span data-ttu-id="23e7a-2855">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2855">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2856">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2856">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2857"><see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2857">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2858">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2858">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2859">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2859">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2860">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2860">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2861">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2861">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2862">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2862">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2863">この要素の上にマウス ポインターがある状態でいずれかのマウス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2863">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2864">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewMouseUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2864">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2865"><xref:System.Windows.UIElement.PreviewMouseUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2865">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2866"><xref:System.Windows.UIElement.PreviewMouseUp> イベントは、多くの場合、<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> または <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2866">The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="23e7a-2867"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> と <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2867"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="23e7a-2868"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> または <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2868">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2869">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2869">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2870">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2870">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="23e7a-2871">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2871">Routing strategy</span></span>|<span data-ttu-id="23e7a-2872">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2872">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2873">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2873">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2874">対応するバブルイベントは <xref:System.Windows.UIElement.MouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2874">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-2875">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2875">Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2876"><see cref="E:System.Windows.UIElement.PreviewMouseUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2876">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2877">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2877">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2878">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2878">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2879">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2879">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2880">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2880">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2881">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2881">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2882">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2882">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2883">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素からこのイベントを受け取った場合、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2883">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="23e7a-2884">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewMouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2884">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2885"><xref:System.Windows.UIElement.PreviewMouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2885">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2886">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2886">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2887">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2887">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="23e7a-2888">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2888">Routing strategy</span></span>|<span data-ttu-id="23e7a-2889">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2889">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2890">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2890">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="23e7a-2891">対応するバブルイベントは <xref:System.Windows.UIElement.MouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2891">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="23e7a-2892">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2892">Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2893"><see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2893">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2894">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2894">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2895">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2895">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2896">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2896">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2897">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2897">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2898">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2898">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2899">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2899">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2900"><xref:System.Windows.UIElement.PreviewQueryContinueDrag> イベントを使用すると、ドラッグ元はドラッグアンドドロップ操作をキャンセルする必要があるかどうかを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2900">The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="23e7a-2901">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewQueryContinueDrag> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2901">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2902"><xref:System.Windows.UIElement.PreviewQueryContinueDrag> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2902">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2903">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2903">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2904">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2904">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="23e7a-2905">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2905">Routing strategy</span></span>|<span data-ttu-id="23e7a-2906">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2906">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2907">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2907">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="23e7a-2908">対応するバブルイベントは <xref:System.Windows.UIElement.QueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2908">The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="23e7a-2909">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2909">Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2910"><see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2910">Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2911">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2911">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2912">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2912">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2913">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2913">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2914">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2914">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2915">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2915">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2916">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2916">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2917">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusButtonDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2917">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2918"><xref:System.Windows.UIElement.PreviewStylusButtonDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2918">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2919">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2919">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-2920">詳細については、「 [Windows Vista でのタッチ入力のサポート](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)」および「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2920">For more information, see [Touch Input Support in Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2921">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2921">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2922">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2922">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="23e7a-2923">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2923">Routing strategy</span></span>|<span data-ttu-id="23e7a-2924">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2924">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2925">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2925">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2926">対応するバブルイベントは <xref:System.Windows.UIElement.StylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2926">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-2927">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2927">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2928"><see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2928">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2929">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2929">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2930">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2930">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2931">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2931">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2932">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2932">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2933">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2933">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2934">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2934">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2935">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusButtonUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2935">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2936"><xref:System.Windows.UIElement.PreviewStylusButtonUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2936">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2937">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2937">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-2938">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2938">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2939">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2939">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2940">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2940">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="23e7a-2941">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2941">Routing strategy</span></span>|<span data-ttu-id="23e7a-2942">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2942">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2943">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2943">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-2944">対応するバブルイベントは <xref:System.Windows.UIElement.StylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2944">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-2945">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2945">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2946"><see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2946">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2947">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2947">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2948">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2948">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2949">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2949">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2950">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2950">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2951">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2951">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2952">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2952">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2953">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2953">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2954"><xref:System.Windows.UIElement.PreviewStylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2954">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2955">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2955">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-2956">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2956">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2957">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2957">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2958">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2958">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="23e7a-2959">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2959">Routing strategy</span></span>|<span data-ttu-id="23e7a-2960">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2960">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2961">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2961">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="23e7a-2962">対応するバブルイベントは <xref:System.Windows.UIElement.StylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2962">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-2963">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2963">Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2964"><see cref="E:System.Windows.UIElement.PreviewStylusDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2964">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2965">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2965">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2966">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2966">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2967">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2967">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2968">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2968">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2969">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2969">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2970">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2970">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2971">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusInAirMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2971">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2972"><xref:System.Windows.UIElement.PreviewStylusInAirMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2972">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2973">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2973">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-2974">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2974">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2975">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2975">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2976">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2976">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="23e7a-2977">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2977">Routing strategy</span></span>|<span data-ttu-id="23e7a-2978">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2978">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2979">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2979">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-2980">対応するバブルイベントは <xref:System.Windows.UIElement.StylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2980">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-2981">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2981">Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2982"><see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2982">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2983">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2983">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-2984">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2984">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-2985">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2985">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-2986">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2986">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-2987">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2987">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-2988">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2988">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-2989">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusInRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2989">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-2990"><xref:System.Windows.UIElement.PreviewStylusInRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2990">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-2991">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2991">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-2992">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2992">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-2993">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-2993">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-2994">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-2994">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="23e7a-2995">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-2995">Routing strategy</span></span>|<span data-ttu-id="23e7a-2996">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-2996">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-2997">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-2997">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-2998">対応するバブルイベントは <xref:System.Windows.UIElement.StylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2998">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="23e7a-2999">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-2999">Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3000"><see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3000">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3001">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3001">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3002">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3002">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3003">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3003">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3004">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3004">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3005">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3005">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3006">スタイラスが要素上にあるときにスタイラスが移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3006">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="23e7a-3007">このイベントを発生させるためには、デジタイザーによって検出されている間にスタイラスが移動する必要があります。それ以外の場合には、代わりに <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> が発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3007">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3008">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3008">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3009"><xref:System.Windows.UIElement.PreviewStylusMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3009">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3010">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3010">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3011">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3011">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3012">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3012">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3013">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3013">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="23e7a-3014">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3014">Routing strategy</span></span>|<span data-ttu-id="23e7a-3015">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3015">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3016">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3016">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3017">対応するバブルイベントは <xref:System.Windows.UIElement.StylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3017">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-3018">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3018">Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3019"><see cref="E:System.Windows.UIElement.PreviewStylusMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3019">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3020">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3020">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3021">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3021">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3022">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3022">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3023">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3023">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3024">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3024">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3025">スタイラスがデジタイザーから離れすぎているために検出されないときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3025">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3026">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusOutOfRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3026">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3027"><xref:System.Windows.UIElement.PreviewStylusOutOfRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3027">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3028">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3028">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3029">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3029">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3030">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3030">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3031">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3031">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="23e7a-3032">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3032">Routing strategy</span></span>|<span data-ttu-id="23e7a-3033">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3033">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3034">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3034">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3035">対応するバブルイベントは <xref:System.Windows.UIElement.StylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3035">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="23e7a-3036">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3036">Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3037"><see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3037">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3038">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3038">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3039">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3039">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3040">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3040">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3041">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3041">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3042">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3042">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3043">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3043">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3044">スタイラスジェスチャの詳細については、「<xref:System.Windows.Input.SystemGesture>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3044">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="23e7a-3045">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusSystemGesture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3045">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3046"><xref:System.Windows.UIElement.PreviewStylusSystemGesture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3046">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3047">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3047">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3048">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3048">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3049">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3049">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3050">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3050">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="23e7a-3051">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3051">Routing strategy</span></span>|<span data-ttu-id="23e7a-3052">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3052">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3053">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3053">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="23e7a-3054">対応するバブルイベントは <xref:System.Windows.UIElement.StylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3054">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="23e7a-3055">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3055">Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3056"><see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3056">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3057">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3057">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3058">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3058">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3059">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3059">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3060">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3060">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3061">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3061">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3062">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3062">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3063">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewStylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3063">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3064"><xref:System.Windows.UIElement.PreviewStylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3064">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3065">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3065">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3066">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3066">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3067">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3067">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3068">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3068">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="23e7a-3069">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3069">Routing strategy</span></span>|<span data-ttu-id="23e7a-3070">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3070">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3071">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3071">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3072">対応するバブルイベントは <xref:System.Windows.UIElement.StylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3072">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-3073">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewStylusUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3073">Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3074"><see cref="E:System.Windows.UIElement.PreviewStylusUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3074">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3075">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3075">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3076">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3076">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3077">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3077">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3078">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3078">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3079">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3079">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3080">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3080">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3081"><xref:System.Windows.UIElement.PreviewTextInput> イベントを使用すると、コンポーネントまたはアプリケーションは、デバイスに依存しない方法でテキスト入力をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3081">The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="23e7a-3082">キーボードは <xref:System.Windows.UIElement.PreviewTextInput>の主な手段です。ただし、音声、手書き、およびその他の入力デバイスでも <xref:System.Windows.UIElement.PreviewTextInput>が生成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3082">The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="23e7a-3083">キーの組み合わせ (既定のキーボードまたは入力方式のエディター) では、複数のキーイベントによってテキスト入力イベントが1つだけ発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3083">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="23e7a-3084">このイベントは、このクラスの <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.PreviewTextInput> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3084">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3085"><xref:System.Windows.UIElement.PreviewTextInput> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3085">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3086">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3086">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3087">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3087">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|<span data-ttu-id="23e7a-3088">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3088">Routing strategy</span></span>|<span data-ttu-id="23e7a-3089">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3089">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3090">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3090">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="23e7a-3091">対応するバブルイベントは <xref:System.Windows.UIElement.TextInput>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3091">The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="23e7a-3092">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewTextInput%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3092">Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3093"><see cref="E:System.Windows.UIElement.PreviewTextInput" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3093">Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3094">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3094">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3095">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3095">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3096">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3096">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3097">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3097">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3098">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3098">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3099">指がこの要素の上にある間に、その指で画面に触れると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3099">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3100">既定では、<xref:System.Windows.UIElement.PreviewTouchDown> イベントと <xref:System.Windows.UIElement.TouchDown> イベントは、指が画面に触れると移動するまで発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3100">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="23e7a-3101">画面上で指を押しながら移動せずに押すと、<xref:System.Windows.Input.Stylus>のプレスアンドホールド動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3101">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="23e7a-3102">プレスアンドホールドの動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3102">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="23e7a-3103">指が画面に触れるとすぐに <xref:System.Windows.UIElement.PreviewTouchDown> および <xref:System.Windows.UIElement.TouchDown> イベントが発生するようにするには、この要素の <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 添付プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3103">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3104">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3104">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3105">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3105">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="23e7a-3106">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3106">Routing strategy</span></span>|<span data-ttu-id="23e7a-3107">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3107">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3108">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3108">Delegate</span></span>|<span data-ttu-id="23e7a-3109"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3109"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3110">対応するバブルイベントは <xref:System.Windows.UIElement.TouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3110">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-3111">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewTouchDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3111">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3112"><see cref="E:System.Windows.UIElement.PreviewTouchDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3112">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3113">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3113">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3114">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3114">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3115">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3115">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="23e7a-3116">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3116">Routing strategy</span></span>|<span data-ttu-id="23e7a-3117">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3117">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3118">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3118">Delegate</span></span>|<span data-ttu-id="23e7a-3119"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3119"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3120">対応するバブルイベントは <xref:System.Windows.UIElement.TouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3120">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-3121">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewTouchMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3121">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3122"><see cref="E:System.Windows.UIElement.PreviewTouchMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3122">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3123">この要素の上に指があるときに、その指が画面から離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3123">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3124">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3124">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3125">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3125">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="23e7a-3126">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3126">Routing strategy</span></span>|<span data-ttu-id="23e7a-3127">トンネリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3127">Tunneling</span></span>|  
|<span data-ttu-id="23e7a-3128">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3128">Delegate</span></span>|<span data-ttu-id="23e7a-3129"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3129"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3130">対応するバブルイベントは <xref:System.Windows.UIElement.TouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3130">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-3131">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnPreviewTouchUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3131">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3132"><see cref="E:System.Windows.UIElement.PreviewTouchUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3132">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3133">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3133">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3134"><xref:System.Windows.UIElement.QueryContinueDrag> イベントは、ドラッグ元がドラッグアンドドロップ操作をキャンセルする必要があるかどうかを判断するために使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3134">The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="23e7a-3135">このイベントは、このクラスの <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.QueryContinueDrag> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3135">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3136"><xref:System.Windows.UIElement.QueryContinueDrag> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3136">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3137">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3137">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3138">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3138">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|<span data-ttu-id="23e7a-3139">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3139">Routing strategy</span></span>|<span data-ttu-id="23e7a-3140">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3140">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3141">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3141">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="23e7a-3142">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewQueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3142">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="23e7a-3143">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnQueryContinueDrag%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3143">Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3144"><see cref="E:System.Windows.UIElement.QueryContinueDrag" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3144">Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3145">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3145">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3146">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3146">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3147">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3147">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3148">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3148">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3149">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3149">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3150">カーソルの表示が要求されると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3150">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="23e7a-3151">このイベントは、マウス ポインターが別の位置へ移動するたびに要素上で発生します。したがって、場合によってはカーソル オブジェクトを移動先の位置に基づいて変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3151">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3152">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.QueryCursor> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3152">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3153"><xref:System.Windows.UIElement.QueryCursor> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3153">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3154">このイベント名によって参照されているカーソルは、必ずしもテキストカーソル (挿入ポイントとも呼ばれます) ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3154">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="23e7a-3155">代わりに、このコンテキストのカーソルは、Windows プログラミングにおけるいくつかの入力関連のデバイスまたは概念に関連する、画面上のグラフィカルな表示を宣言するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3155">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="23e7a-3156">このオブジェクトは、WPF の <xref:System.Windows.Input.Cursor> クラスによって表されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3156">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="23e7a-3157">WPF 入力システムでは、マウスポインターの画面上の位置を表すときに、このカーソルを変更できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3157">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="23e7a-3158"><xref:System.Windows.Input.Cursors> 列挙体の定義済みの値を使用することも、カスタムカーソルをイメージファイルとして宣言することもできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3158">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="23e7a-3159"><xref:System.Windows.UIElement.QueryCursor> イベントのリッスンは、カーソル管理の効率的な手法ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3159">Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="23e7a-3160">代わりに、各要素は <xref:System.Windows.FrameworkContentElement.Cursor%2A> と <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>を使用して独自のカーソル動作を定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3160">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="23e7a-3161"><xref:System.Windows.UIElement.QueryCursor> に依存するのは、WPF フレームワークレベルの基本要素を使用していない場合、または要素単位でカーソル動作を定義するときにニーズを満たしていない特殊な状況においてのみです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3161">You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="23e7a-3162"><xref:System.Windows.UIElement.QueryCursor>に応答してカーソル動作を実装する方法の詳細については、「<xref:System.Windows.Input.QueryCursorEventHandler>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3162">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3163">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3163">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3164">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3164">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|<span data-ttu-id="23e7a-3165">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3165">Routing strategy</span></span>|<span data-ttu-id="23e7a-3166">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3166">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3167">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3167">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="23e7a-3168">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3168">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="23e7a-3169">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnQueryCursor%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3169">Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3170"><see cref="E:System.Windows.UIElement.QueryCursor" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3170">Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3171">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3171">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3172">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3172">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3173">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3173">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3174">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3174">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3175">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3175">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="23e7a-3176">イベント データを格納し、発生するイベントを識別する <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3176">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="23e7a-3177">特定のルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3177">Raises a specific routed event.</span></span> <span data-ttu-id="23e7a-3178">発生する <see cref="T:System.Windows.RoutedEvent" /> は、提供された <see cref="T:System.Windows.RoutedEventArgs" /> インスタンス内で識別されます (そのイベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティとして)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3178">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3179">`e` パラメーターは、すべてのルーティングイベントデータの共通基本型として型指定されます。ただし、イベントデータは、発生したイベントに対して使用できる最も具体的なイベントデータ型として指定する必要があります。これは <xref:System.Windows.RoutedEventArgs> 派生クラスに、発生時に特定のイベントを想定した実際のデータプロパティが含まれているためです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3179">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="23e7a-3180"><xref:System.Windows.RoutedEventArgs> は、イベントの状態プロパティではありません。また、どのルーティングイベントを発生させるかも識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3180"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="23e7a-3181">このイベント発生パターンとルーティングイベントデータはどちらも、イベントに関連するプロパティだけを含む [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントとデータクラスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3181">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-3182">次の例では、イベントデータを作成し、イベント識別子をデータに追加した後、イベントデータインスタンスを使用してカスタムルーティングイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3182">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-3183">キャプチャされているすべてのタッチ デバイスをこの要素から解放します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3183">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-3184">この要素がマウス キャプチャを保持していた場合、キャプチャを解放します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3184">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3185">この要素がキャプチャを保持していない場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3185">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="23e7a-3186">このメソッドを呼び出す前に、<xref:System.Windows.UIElement.IsMouseCaptured%2A> の値を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3186">Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-3187">次の例は <xref:System.Windows.UIElement.CaptureMouse%2A>に対して指定されている例と並行しています。マウスのキャプチャを解放するマウスボタンを処理し、マウスの移動を再び有効にします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3187">The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-3188">この要素がスタイラス デバイス キャプチャを保持していた場合、キャプチャを解放します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3188">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3189">この要素がキャプチャを保持していない場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3189">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="23e7a-3190">このメソッドを呼び出す前に、<xref:System.Windows.UIElement.IsStylusCaptured%2A> の値を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3190">Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseTouchCapture (touchDevice As TouchDevice) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="23e7a-3191">解放の対象となるデバイス。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3191">The device to release.</span></span></param>
        <summary><span data-ttu-id="23e7a-3192">指定されたタッチ デバイスをこの要素から解放することを試みます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3192">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-3193">タッチ デバイスが解放された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3193"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="23e7a-3194"><paramref name="touchDevice" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3194"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (routedEvent As RoutedEvent, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="23e7a-3195">ハンドラーがアタッチされているルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3195">The identifier of the routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="23e7a-3196">この要素のイベント ハンドラー コレクションから削除する特定のハンドラー実装。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3196">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="23e7a-3197">指定したルーティング イベント ハンドラーをこの要素から削除します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3197">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3198">この API を使用する最も一般的なシナリオは、カスタムルーティングイベントに関連付けられた [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "ラッパー" イベントを実装する場合です。具体的には、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] レベルでハンドラーの "削除" ロジックを実装する場合です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3198">The most common scenario for using this API is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="23e7a-3199">この例では、このシナリオについて説明します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3199">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="23e7a-3200">メソッド呼び出しの入力パラメーターと一致する条件に登録されたハンドラーがない場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3200">Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="23e7a-3201">条件に一致する複数のハンドラーがアタッチされている場合は、イベントハンドラーストア内の最初のハンドラーだけが削除されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3201">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="23e7a-3202">この動作は、`-=` 演算子の [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] の動作と一致します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3202">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="23e7a-3203">`routedEvent` も `handler` も `null`ない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3203">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="23e7a-3204">いずれかの値を `null` として指定しようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3204">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="23e7a-3205">このメソッドは `handledEventsToo` パラメーター情報を無視します。これは、既に処理されたイベントの処理を可能にする <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャを使用してハンドラーが最初に追加された場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3205">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="23e7a-3206">どちらの種類のハンドラーも削除されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3206">Either type of handler is removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-3207">次の例では、イベントラッパー定義の一部として <xref:System.Windows.UIElement.RemoveHandler%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3207">The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.</span></span>  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3208">この要素の最終的な描画サイズを取得します (または、設定します)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3208">Gets (or sets) the final render size of this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-3209">この要素の描画のサイズ。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3209">The rendered size for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="23e7a-3210">WPF フレームワークレベルのレイアウトシステムを使用している場合は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] またはコードでこのプロパティを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3210">Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system.</span></span> <span data-ttu-id="23e7a-3211">ほとんどの一般的なアプリケーションシナリオでは、このレイアウトシステムを使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3211">Nearly all typical application scenarios will use this layout system.</span></span> <span data-ttu-id="23e7a-3212">レイアウトシステムは、<xref:System.Windows.UIElement.RenderSize%2A> プロパティで設定されているサイズを直接考慮しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3212">The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly.</span></span> <span data-ttu-id="23e7a-3213"><xref:System.Windows.UIElement.RenderSize%2A> プロパティは、<xref:System.Windows.Documents.Adorner> クラスのサポートなど、一般的なレイアウトプロトコルを意図的に回避する特定の WPF コアレベルのブリッジケースを有効にするために、書き込み専用として宣言されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3213">The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.</span></span>  
  
 <span data-ttu-id="23e7a-3214">このプロパティを使用すると、<xref:System.Windows.UIElement.OnRender%2A> や <xref:System.Windows.UIElement.GetLayoutClip%2A>などのレイアウトシステムのオーバーライド内で適用されるレンダリングサイズを確認できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3214">This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.</span></span>  
  
 <span data-ttu-id="23e7a-3215">より一般的なシナリオは、クラスハンドラーのオーバーライドまたは <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> イベントを使用して <xref:System.Windows.FrameworkElement.SizeChanged> イベントを処理することです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3215">A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.</span></span>  
  
## Examples  
 <span data-ttu-id="23e7a-3216">次の例では、<xref:System.Windows.UIElement.OnRender%2A> 実装の一部として、装飾を定義する四角形グラフィックを作成およびサイズ変更するために、カスタムガイドで <xref:System.Windows.UIElement.RenderSize%2A> 値を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3216">The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A> implementation.</span></span>  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3217">この要素の描画位置に影響する変換情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3217">Gets or sets transform information that affects the rendering position of this element.</span></span>  <span data-ttu-id="23e7a-3218">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3218">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-3219">必要な描画変換の詳細を記述します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3219">Describes the specifics of the desired render transform.</span></span> <span data-ttu-id="23e7a-3220">既定値は、<see cref="P:System.Windows.Media.Transform.Identity" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3220">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3221">レンダー変換では、レイアウトサイズや表示サイズ情報は再生成されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3221">A render transform does not regenerate layout size or render size information.</span></span> <span data-ttu-id="23e7a-3222">レンダー変換は、通常、要素に対して一時的な効果を適用するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3222">Render transforms are typically intended for animating or applying a temporary effect to an element.</span></span> <span data-ttu-id="23e7a-3223">たとえば、要素は、フォーカスまたはマウスしたときにズームしたり、[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]のその部分に目を向けるために負荷をジッターしたりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3223">For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-3224">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3224">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3225">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3225">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|<span data-ttu-id="23e7a-3226">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-3226">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-3227">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-3227">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3228"><see cref="P:System.Windows.UIElement.RenderTransform" /> によって宣言されるすべての使用可能な表示変換の中心点を、要素の境界からの相対位置で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3228">Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.</span></span>  <span data-ttu-id="23e7a-3229">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3229">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-3230">描画変換を宣言する値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3230">The value that declares the render transform.</span></span> <span data-ttu-id="23e7a-3231">既定値は座標が (0, 0) の <see cref="T:System.Windows.Point" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3231">The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3232"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> には、<xref:System.Windows.Point> 構造体の値が多少非標準で使用されています。これは、<xref:System.Windows.Point> が座標系の絶対位置を表していないという点です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3232"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system.</span></span> <span data-ttu-id="23e7a-3233">代わりに、0 ~ 1 の値は、x, y 軸の現在の要素の範囲の係数として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3233">Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</span></span> <span data-ttu-id="23e7a-3234">たとえば、(0.5, 0.5) を指定すると、レンダリング変換が要素の中央に配置されます。または、(1, 1) は、要素の右下隅に描画変換を配置します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3234">For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</span></span> <span data-ttu-id="23e7a-3235"><xref:System.Double.NaN> が許容される値ではありません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3235"><xref:System.Double.NaN> is not an accepted value.</span></span>  
  
 <span data-ttu-id="23e7a-3236">0と1以外の値も受け入れられます。これにより、変換効果が従来より多くなります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3236">Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</span></span> <span data-ttu-id="23e7a-3237">たとえば、<xref:System.Windows.UIElement.RenderTransformOrigin%2A> を (5, 5) に設定し、<xref:System.Windows.Media.RotateTransform>を適用した場合、回転ポイントは要素自体の境界の外側に配置されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3237">For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself.</span></span> <span data-ttu-id="23e7a-3238">変換により、要素は、右下にある大きな円の周りで回転します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3238">The transform will spin your element around in a big circle that originates beyond bottom right.</span></span> <span data-ttu-id="23e7a-3239">原点は親要素内にある場合があり、フレームやビューから外れている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3239">The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</span></span> <span data-ttu-id="23e7a-3240">負の値は似ていますが、上から左の範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3240">Negative point values are similar, these will go beyond the top left bounds.</span></span>  
  
 <span data-ttu-id="23e7a-3241">レンダリングの変換はレイアウトに影響しません。通常、要素に一時的な効果を適用したり適用したりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3241">Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</span></span>  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="23e7a-3242">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3242">XAML Attribute Usage</span></span>  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="23e7a-3243">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="23e7a-3243">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="23e7a-3244">XAML 値</span><span class="sxs-lookup"><span data-stu-id="23e7a-3244">XAML Values</span></span>  
 <span data-ttu-id="23e7a-3245">*xOrigin*</span><span class="sxs-lookup"><span data-stu-id="23e7a-3245">*xOrigin*</span></span>  
 <span data-ttu-id="23e7a-3246">水平方向の原点係数。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3246">The horizontal origin factor.</span></span> <span data-ttu-id="23e7a-3247">通常、これは 0 ~ 1 の値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3247">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="23e7a-3248">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3248">See Remarks.</span></span>  
  
 <span data-ttu-id="23e7a-3249">*yOrigin*</span><span class="sxs-lookup"><span data-stu-id="23e7a-3249">*yOrigin*</span></span>  
 <span data-ttu-id="23e7a-3250">垂直原点の係数。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3250">The vertical origin factor.</span></span> <span data-ttu-id="23e7a-3251">通常、これは 0 ~ 1 の値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3251">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="23e7a-3252">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3252">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-3253">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3253">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3254">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3254">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|<span data-ttu-id="23e7a-3255">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-3255">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-3256">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-3256">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-3257">次の例では、コード内に要素を構築し、<xref:System.Windows.UIElement.RenderTransformOrigin%2A>を適用して、<xref:System.Windows.UIElement.RenderTransform%2A>を適用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3257">The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.</span></span>  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3258"><see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3258">Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3259"><see cref="P:System.Windows.UIElement.RenderTransform" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3259">Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-3260">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement.CommandBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3260">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="23e7a-3261"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement.CommandBindings" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3261"><see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3262">これは、<xref:System.Windows.UIElement.CommandBindings%2A> がローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3262">This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="23e7a-3263">この `ShouldSerialize` メソッドは、<xref:System.Windows.UIElement.CommandBindings%2A> プロパティに単純な既定値がないために用意されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3263">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="23e7a-3264">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3264">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="23e7a-3265">通常、このメソッドは、デザイナーを開発しているか、<xref:System.Windows.UIElement>を組み込んだ独自のコントロールを開発している場合に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3265">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-3266">詳細については、「 [ShouldSerialize メソッドと Reset メソッドによる既定値の定義](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3266">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-3267">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement.InputBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3267">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="23e7a-3268"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement.InputBindings" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3268"><see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3269">これは、<xref:System.Windows.UIElement.InputBindings%2A> がローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3269">This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="23e7a-3270">この `ShouldSerialize` メソッドは、<xref:System.Windows.UIElement.InputBindings%2A> プロパティに単純な既定値がないために用意されています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3270">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="23e7a-3271">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3271">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="23e7a-3272">通常、このメソッドは、デザイナーを開発しているか、<xref:System.Windows.UIElement>を組み込んだ独自のコントロールを開発している場合に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3272">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="23e7a-3273">詳細については、「 [ShouldSerialize メソッドと Reset メソッドによる既定値の定義](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3273">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3274">この要素のレンダリングがレンダリング中にデバイスに固有のピクセルの設定を使用するかどうかを決定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3274">Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</span></span>  <span data-ttu-id="23e7a-3275">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3275">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-3276">デバイスのピクセルに従って要素を描画する場合は<see langword="true" /> 、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3276"><see langword="true" /> if the element should render in accordance to device pixels; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23e7a-3277"><see cref="T:System.Windows.UIElement" /> で宣言された既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3277">The default as declared on <see cref="T:System.Windows.UIElement" /> is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3278">このプロパティをルート要素で `true` に設定すると、UI 全体でピクセルスナップレンダリングを有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3278">You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI.</span></span> <span data-ttu-id="23e7a-3279">96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]より大きいデバイスでは、ピクセルスナップレンダリングを使用すると、単一行の実線の中で、アンチエイリアシングの視覚的成果物を最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3279">For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</span></span>  
  
 <span data-ttu-id="23e7a-3280"><xref:System.Windows.FrameworkElement> または考えられる派生クラスによって継承されると、<xref:System.Windows.FrameworkElement> この依存関係プロパティのメタデータをオーバーライドして、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> メタデータプロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3280">When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`.</span></span> <span data-ttu-id="23e7a-3281">これによって実現されるのは、サブツリー内の最も外側の要素だけが `true`として <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> を指定する必要があり、そのサブツリーのすべての子要素が `true` として <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> を報告し、視覚効果が <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> されることです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3281">What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.</span></span>  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-3282">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3282">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3283">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3283">Identifier field</span></span>|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|<span data-ttu-id="23e7a-3284">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-3284">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-3285">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-3285">None</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970908(v=vs.90)"><span data-ttu-id="23e7a-3286">WPF アプリケーションのピクセルスナップ</span><span class="sxs-lookup"><span data-stu-id="23e7a-3286">Pixel Snapping in WPF Applications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3287"><see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3287">Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3288">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3288">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3289">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusButtonDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3289">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3290"><xref:System.Windows.UIElement.StylusButtonDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3290">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3291">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3291">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3292">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3292">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3293">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3293">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3294">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3294">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|<span data-ttu-id="23e7a-3295">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3295">Routing strategy</span></span>|<span data-ttu-id="23e7a-3296">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3296">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3297">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3297">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-3298">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3298">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-3299">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3299">Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3300"><see cref="E:System.Windows.UIElement.StylusButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3300">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3301">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3301">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3302">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3302">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3303">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3303">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3304">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3304">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3305">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3305">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3306">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3306">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3307">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusButtonUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3307">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3308"><xref:System.Windows.UIElement.StylusButtonUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3308">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3309">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3309">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3310">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3310">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3311">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3312">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3312">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|<span data-ttu-id="23e7a-3313">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3313">Routing strategy</span></span>|<span data-ttu-id="23e7a-3314">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3314">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3315">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3315">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="23e7a-3316">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3316">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-3317">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3317">Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3318"><see cref="E:System.Windows.UIElement.StylusButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3318">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3319">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3319">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3320">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3320">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3321">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3321">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3322">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3322">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3323">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3323">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3324">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3324">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3325">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3325">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3326"><xref:System.Windows.UIElement.StylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3326">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3327">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3327">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3328">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3328">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3329">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3330">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3330">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusDownEvent>|  
|<span data-ttu-id="23e7a-3331">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3331">Routing strategy</span></span>|<span data-ttu-id="23e7a-3332">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3332">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3333">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3333">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="23e7a-3334">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3334">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-3335">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3335">Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3336"><see cref="E:System.Windows.UIElement.StylusDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3336">Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3337">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3337">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3338">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3338">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3339">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3339">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3340">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3340">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3341">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3341">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3342">スタイラスがこの要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3342">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3343"><xref:System.Windows.UIElement.StylusEnter> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3343"><xref:System.Windows.UIElement.StylusEnter> is a [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="23e7a-3344">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3344">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="23e7a-3345">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3345">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="23e7a-3346"><xref:System.Windows.UIElement.StylusEnter> は、スタイラスが要素の境界内に入るタイミングを追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement.IsStylusOver%2A> プロパティ値が `false` からこの要素の `true` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3346">Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="23e7a-3347">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3347">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3348"><xref:System.Windows.UIElement.StylusEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3348">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3349">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3349">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3350">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3350">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3351">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3352">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3352">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|<span data-ttu-id="23e7a-3353">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3353">Routing strategy</span></span>|<span data-ttu-id="23e7a-3354">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-3354">Direct</span></span>|  
|<span data-ttu-id="23e7a-3355">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3355">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3356">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3356">Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3357"><see cref="E:System.Windows.UIElement.StylusEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3357">Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3358">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3359">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3360">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3361">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3362">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3363">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3363">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3364">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusInAirMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3364">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3365"><xref:System.Windows.UIElement.StylusInAirMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3365">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3366">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3366">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3367">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3367">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3368">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3368">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3369">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3369">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="23e7a-3370">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3370">Routing strategy</span></span>|<span data-ttu-id="23e7a-3371">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3371">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3372">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3372">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3373">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3373">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-3374">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusInAirMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3374">Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3375"><see cref="E:System.Windows.UIElement.StylusInAirMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3375">Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3376">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3376">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3377">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3377">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3378">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3378">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3379">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3379">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3380">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3380">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3381">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3381">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3382">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusInRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3382">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3383"><xref:System.Windows.UIElement.StylusInRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3383">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3384">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3384">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3385">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3385">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3386">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3386">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3387">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3387">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|<span data-ttu-id="23e7a-3388">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3388">Routing strategy</span></span>|<span data-ttu-id="23e7a-3389">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3389">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3390">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3390">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3391">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3391">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="23e7a-3392">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusInRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3392">Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3393"><see cref="E:System.Windows.UIElement.StylusInRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3393">Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3394">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3394">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3395">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3395">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3396">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3396">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3397">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3397">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3398">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3398">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3399">スタイラスが要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3399">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3400"><xref:System.Windows.UIElement.StylusLeave> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベント](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3400"><xref:System.Windows.UIElement.StylusLeave> is a [routed event](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="23e7a-3401">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3401">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="23e7a-3402">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3402">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="23e7a-3403"><xref:System.Windows.UIElement.StylusLeave> はスタイラスが要素の境界内から出たときに追跡しますが、このイベントはさらに、<xref:System.Windows.UIElement.IsStylusOver%2A> プロパティ値が `true` からこの要素の `false` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3403">Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="23e7a-3404">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3404">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3405"><xref:System.Windows.UIElement.StylusLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3405">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3406">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3406">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3407">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3407">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3408">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3408">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3409">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3409">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|<span data-ttu-id="23e7a-3410">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3410">Routing strategy</span></span>|<span data-ttu-id="23e7a-3411">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-3411">Direct</span></span>|  
|<span data-ttu-id="23e7a-3412">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3412">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3413">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3413">Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3414"><see cref="E:System.Windows.UIElement.StylusLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3414">Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3415">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3415">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3416">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3416">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3417">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3417">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3418">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3418">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3419">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3419">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3420">スタイラスがこの要素上を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3420">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="23e7a-3421">このイベントを発生させるには、デジタイザー上でスタイラスを移動する必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3421">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="23e7a-3422">それ以外の場合は、代わりに <see cref="E:System.Windows.UIElement.StylusInAirMove" /> が発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3422">Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3423">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3423">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3424"><xref:System.Windows.UIElement.StylusMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3424">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3425">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3425">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3426">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3426">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3427">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3427">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3428">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3428">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|<span data-ttu-id="23e7a-3429">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3429">Routing strategy</span></span>|<span data-ttu-id="23e7a-3430">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3430">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3431">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3431">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3432">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3432">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-3433">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3433">Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3434"><see cref="E:System.Windows.UIElement.StylusMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3434">Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3435">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3435">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3436">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3436">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3437">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3437">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3438">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3438">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3439">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3439">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3440">この要素上でスタイラスが検出可能になるにはデジタイザーから離れすぎているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3440">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3441">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusOutOfRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3441">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3442"><xref:System.Windows.UIElement.StylusOutOfRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3442">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3443">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3443">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3444">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3444">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3445">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3445">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3446">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3446">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="23e7a-3447">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3447">Routing strategy</span></span>|<span data-ttu-id="23e7a-3448">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3448">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3449">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3449">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3450">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3450">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="23e7a-3451">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusOutOfRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3451">Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3452"><see cref="E:System.Windows.UIElement.StylusOutOfRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3452">Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3453">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3453">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3454">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3454">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3455">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3455">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3456">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3456">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3457">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3457">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3458">この要素に関連付けられているすべてのスタイラス プラグイン (カスタマイズ) オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3458">Gets a collection of all stylus plug-in (customization) objects associated with this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-3459">特殊なコレクションである、スタイラス プラグインのコレクション。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3459">The collection of stylus plug-ins, as a specialized collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3460">このコレクションを設定するコントロールの例としては、<xref:System.Windows.Controls.InkCanvas>があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3460">An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>.</span></span> <span data-ttu-id="23e7a-3461"><xref:System.Windows.Controls.InkCanvas> は、<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> をコレクション項目として追加します。これにより、<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> はスタイラス入力と対話し、スタイラスドリブンイベントに応答して一意のレンダリングを生成できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3461"><xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.</span></span>  
  
 <span data-ttu-id="23e7a-3462">スタイラス入力を受信して解釈できるカスタムプラグインの作成の詳細については、「[スタイラスからの入力のインターセプト](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3462">For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-3463">次の例では、<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> インスタンスを作成し、カスタムインク処理コントロールの <xref:System.Windows.UIElement.StylusPlugIns%2A> コレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3463">The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.</span></span>  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3464">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3464">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3465">スタイラスジェスチャの詳細については、「<xref:System.Windows.Input.SystemGesture>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3465">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="23e7a-3466">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusSystemGesture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3466">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3467"><xref:System.Windows.UIElement.StylusSystemGesture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3467">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3468">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3468">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3469">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3469">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3470">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3470">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3471">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3471">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="23e7a-3472">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3472">Routing strategy</span></span>|<span data-ttu-id="23e7a-3473">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3473">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3474">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3474">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="23e7a-3475">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3475">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="23e7a-3476">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusSystemGesture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3476">Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3477"><see cref="E:System.Windows.UIElement.StylusSystemGesture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3477">Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3478">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3478">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3479">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3479">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3480">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3480">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3481">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3481">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3482">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3482">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3483">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3483">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3484">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.StylusUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3484">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3485"><xref:System.Windows.UIElement.StylusUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3485">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="23e7a-3486">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3486">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="23e7a-3487">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3487">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3488">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3488">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3489">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3489">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusUpEvent>|  
|<span data-ttu-id="23e7a-3490">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3490">Routing strategy</span></span>|<span data-ttu-id="23e7a-3491">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3491">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3492">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3492">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="23e7a-3493">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewStylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3493">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-3494">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnStylusUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3494">Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3495"><see cref="E:System.Windows.UIElement.StylusUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3495">Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3496">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3496">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3497">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3497">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3498">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3498">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3499">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3499">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3500">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3500">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3501">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3501">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="23e7a-3502">このイベントは、複合コントロールの内部実装によって処理済みとして既にマークされている場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3502">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="23e7a-3503">以下の注釈を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3503">See Remark below.</span></span>  
  
 <span data-ttu-id="23e7a-3504"><xref:System.Windows.UIElement.TextInput> イベントは、複合コントロールの内部実装によって処理済みとして既にマークされている場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3504">The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="23e7a-3505">たとえば、<xref:System.Windows.Controls.TextBox> は、<xref:System.Windows.UIElement.TextInput> イベントが既に処理済みとしてマークされている複合コントロールです。その複合内。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3505">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="23e7a-3506">コントロールは、方向キーなど、一部の種類の入力をそのコントロールに対して特別な意味を持つものとして解釈する必要があるため、これを行います。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3506">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="23e7a-3507">テキスト入力のハンドラーをアタッチするイベントとして <xref:System.Windows.UIElement.PreviewTextInput> を使用すると、より良い結果が得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3507">If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="23e7a-3508">この手法を使用すると、コントロールの構成によってこのイベントが既に処理済みとしてマークされている場合は、イベントルートに沿ってハンドラーがイベントを受信できなくなります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3508">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="23e7a-3509"><xref:System.Windows.UIElement.TextInput> イベントを使用すると、コンポーネントまたはアプリケーションは、デバイスに依存しない方法でテキスト入力をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3509">The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="23e7a-3510">キーボードは <xref:System.Windows.UIElement.TextInput>の主な手段ですが、音声、手書き、およびその他の入力デバイスも <xref:System.Windows.UIElement.TextInput>を発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3510">The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
 <span data-ttu-id="23e7a-3511">キーの組み合わせにより、既定のキーボードまたは入力方式のエディターによって、複数のキーイベントによってテキスト入力イベントが1つだけ発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3511">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="23e7a-3512">このイベントは、このクラスの <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.UIElement> が基本要素として継承されている場合に、<xref:System.Windows.UIElement.TextInput> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3512">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="23e7a-3513"><xref:System.Windows.UIElement.TextInput> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3513">Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3514">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3514">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3515">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3515">Identifier field</span></span>|<xref:System.Windows.UIElement.TextInputEvent>|  
|<span data-ttu-id="23e7a-3516">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3516">Routing strategy</span></span>|<span data-ttu-id="23e7a-3517">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3517">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3518">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3518">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="23e7a-3519">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewTextInput>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3519">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="23e7a-3520">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnTextInput%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3520">Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3521"><see cref="E:System.Windows.UIElement.TextInput" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3521">Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3522">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3522">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="23e7a-3523">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3523">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="23e7a-3524">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3524">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="23e7a-3525">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3525">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="23e7a-3526">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3526">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3527">指がこの要素の上にある間に、その指で画面に触れると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3527">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3528">既定では、<xref:System.Windows.UIElement.PreviewTouchDown> イベントと <xref:System.Windows.UIElement.TouchDown> イベントは、指が画面に触れると移動するまで発生しません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3528">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="23e7a-3529">画面上で指を押しながら移動せずに押すと、<xref:System.Windows.Input.Stylus>のプレスアンドホールド動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3529">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="23e7a-3530">プレスアンドホールドの動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3530">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="23e7a-3531">指が画面に触れるとすぐに <xref:System.Windows.UIElement.PreviewTouchDown> および <xref:System.Windows.UIElement.TouchDown> イベントが発生するようにするには、この要素の <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 添付プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3531">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3532">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3532">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3533">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3533">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchDownEvent>|  
|<span data-ttu-id="23e7a-3534">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3534">Routing strategy</span></span>|<span data-ttu-id="23e7a-3535">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3535">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3536">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3536">Delegate</span></span>|<span data-ttu-id="23e7a-3537"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3537"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3538">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewTouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3538">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="23e7a-3539">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnTouchDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3539">Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3540"><see cref="E:System.Windows.UIElement.TouchDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3540">Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3541">タッチがこの要素の境界の外部から内部に移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3541">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3542">このイベントは、タッチデバイスがこの要素にキャプチャされているかどうかにかかわらず、常に発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3542">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3543">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3543">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3544">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3544">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|<span data-ttu-id="23e7a-3545">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3545">Routing strategy</span></span>|<span data-ttu-id="23e7a-3546">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-3546">Direct</span></span>|  
|<span data-ttu-id="23e7a-3547">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3547">Delegate</span></span>|<span data-ttu-id="23e7a-3548"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3548"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3549">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnTouchEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3549">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3550"><see cref="E:System.Windows.UIElement.TouchEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3550">Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3551">この要素にキャプチャされているすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3551">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-3552">この要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3552">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3553">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3553">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="23e7a-3554">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3554">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3555">この要素上にあるすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3555">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="23e7a-3556">この要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3556">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3557">この要素またはそのビジュアル ツリー内のいずれかの子要素上にあるすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3557">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="23e7a-3558">この要素またはそのビジュアル ツリー内のいずれかの子要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3558">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3559">タッチがこの要素の境界の内部から外部に移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3559">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3560">このイベントは、タッチデバイスがこの要素にキャプチャされているかどうかにかかわらず、常に発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3560">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3561">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3561">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3562">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3562">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|<span data-ttu-id="23e7a-3563">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3563">Routing strategy</span></span>|<span data-ttu-id="23e7a-3564">直接</span><span class="sxs-lookup"><span data-stu-id="23e7a-3564">Direct</span></span>|  
|<span data-ttu-id="23e7a-3565">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3565">Delegate</span></span>|<span data-ttu-id="23e7a-3566"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3566"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3567">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnTouchLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3567">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3568"><see cref="E:System.Windows.UIElement.TouchLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3568">Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3569">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3569">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3570">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3570">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3571">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3571">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|<span data-ttu-id="23e7a-3572">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3572">Routing strategy</span></span>|<span data-ttu-id="23e7a-3573">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3573">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3574">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3574">Delegate</span></span>|<span data-ttu-id="23e7a-3575"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3575"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3576">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewTouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3576">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="23e7a-3577">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnTouchMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3577">Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3578"><see cref="E:System.Windows.UIElement.TouchMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3578">Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3579">この要素の上に指があるときに、その指が画面から離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3579">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="23e7a-3580">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3580">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3581">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3581">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchUpEvent>|  
|<span data-ttu-id="23e7a-3582">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="23e7a-3582">Routing strategy</span></span>|<span data-ttu-id="23e7a-3583">バブリング</span><span class="sxs-lookup"><span data-stu-id="23e7a-3583">Bubbling</span></span>|  
|<span data-ttu-id="23e7a-3584">Delegate</span><span class="sxs-lookup"><span data-stu-id="23e7a-3584">Delegate</span></span>|<span data-ttu-id="23e7a-3585"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3585"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="23e7a-3586">対応するトンネリングイベントは <xref:System.Windows.UIElement.PreviewTouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3586">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="23e7a-3587">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.UIElement.OnTouchUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3587">Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3588"><see cref="E:System.Windows.UIElement.TouchUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3588">Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslatePoint (point As Point, relativeTo As UIElement) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="23e7a-3589">この要素に相対的なポイント値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3589">The point value, as relative to this element.</span></span></param>
        <param name="relativeTo"><span data-ttu-id="23e7a-3590">指定したポイントに変換する要素。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3590">The element to translate the given point into.</span></span></param>
        <summary><span data-ttu-id="23e7a-3591">この要素に相対的なポイントを、指定した要素に対する相対座標に変換します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3591">Translates a point relative to this element to coordinates that are relative to the specified element.</span></span></summary>
        <returns><span data-ttu-id="23e7a-3592">元の要素ではなく変換先の要素に相対的なポイント値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3592">A point value, now relative to the target element rather than this source element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3593">`relativeTo` に `null` を渡すことができます。また、座標は、この要素が属する論理ツリーのルート要素に対して相対的である必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3593">Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</span></span>  
  
 <span data-ttu-id="23e7a-3594">このメソッドは、ヒットテストポイントの値を変換するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3594">This method is used for translating hit test point values.</span></span> <span data-ttu-id="23e7a-3595">このメソッドの呼び出しは、コントロールを作成していて、より低いレベルで入力を処理する必要がある場合に主に関連します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3595">Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</span></span> <span data-ttu-id="23e7a-3596">既存のコントロールを使用している場合は、通常、完了したコントロールが正しく変換されたヒットテストの結果を報告すると想定できます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3596">If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3597">この要素の一意の識別子 (ローカライズ用) を設定または取得します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3597">Gets or sets the unique identifier (for localization) for this element.</span></span> <span data-ttu-id="23e7a-3598">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3598">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-3599">この要素の一意識別子である文字列。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3599">A string that is the unique identifier for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3600">`x:Uid` 値を取得するためにデザイナーによって使用されます (詳細については、「 [WPF のグローバリゼーションとローカリゼーションの概要](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3600">Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-3601">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3601">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3602">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3602">Identifier field</span></span>|<xref:System.Windows.UIElement.UidProperty>|  
|<span data-ttu-id="23e7a-3603">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-3603">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-3604">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-3604">None</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/81defade-483b-4a89-b76d-9b25bba34010"><span data-ttu-id="23e7a-3605">x:Uid 属性</span><span class="sxs-lookup"><span data-stu-id="23e7a-3605">x:Uid Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3606"><see cref="P:System.Windows.UIElement.Uid" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3606">Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23e7a-3607">この要素のすべての子ビジュアル要素のレイアウトが正常に更新されるようにします。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3607">Ensures that all visual child elements of this element are properly updated for layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3608">このメソッドを呼び出すと、<xref:System.Windows.UIElement.IsMeasureValid%2A>`false` または <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` を持つ要素は、要素固有の <xref:System.Windows.UIElement.MeasureCore%2A> メソッドを呼び出し、レイアウトの更新を強制的に実行して、すべての計算されたサイズを検証します。<xref:System.Windows.UIElement.ArrangeCore%2A></span><span class="sxs-lookup"><span data-stu-id="23e7a-3608">When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.</span></span>  
  
 <span data-ttu-id="23e7a-3609">レイアウトが変更されていない場合、またはレイアウトの配置と測定の状態のどちらも無効である場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3609">Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</span></span> <span data-ttu-id="23e7a-3610">ただし、いずれの場合でもレイアウトが無効である場合、<xref:System.Windows.UIElement.UpdateLayout%2A> の呼び出しによってレイアウト全体が再実行されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3610">However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout.</span></span> <span data-ttu-id="23e7a-3611">したがって、要素ツリーの増分および軽微な変更が発生するたびに <xref:System.Windows.UIElement.UpdateLayout%2A> を呼び出さないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3611">Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree.</span></span> <span data-ttu-id="23e7a-3612">レイアウトシステムは、パフォーマンスと通貨のバランスを取るアルゴリズムを使用して、要素のレイアウトを遅延的に実行します。また、すべての子要素が有効になるまで、ルートへの変更を遅延する重み付け戦略を使用します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3612">The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</span></span> <span data-ttu-id="23e7a-3613"><xref:System.Windows.UIElement.UpdateLayout%2A> を呼び出す必要があるのは、サイズと位置を更新する必要がある場合だけです。また、制御して、レイアウトに影響を与える可能性のあるプロパティに対するすべての変更が完了したことを確認した後にのみ呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3613">You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3614">この要素の [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 可視性を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3614">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span></span>  <span data-ttu-id="23e7a-3615">これは依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3615">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="23e7a-3616">列挙体の値。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3616">A value of the enumeration.</span></span> <span data-ttu-id="23e7a-3617">既定値は <see cref="F:System.Windows.Visibility.Visible" /> です。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3617">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e7a-3618">このプロパティを設定すると、<xref:System.Windows.UIElement.IsVisible%2A>の値に影響します。これにより、<xref:System.Windows.UIElement.IsVisibleChanged> イベントが発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3618">Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event.</span></span> <span data-ttu-id="23e7a-3619">ただし、<xref:System.Windows.UIElement.IsVisible%2A> には、それを含む親の可視性の設定など、それに影響を与える他の要因があります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3619">However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="23e7a-3620"><xref:System.Windows.UIElement.Visibility%2A> が <xref:System.Windows.Visibility.Visible> されていない要素は、入力イベント (またはコマンド) に参加しません。レイアウトのメジャーまたは配置パスに影響を与えることはなく、タブシーケンスには含まれず、ヒットテストでは報告されません。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3620">Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</span></span>  
  
 <span data-ttu-id="23e7a-3621"><xref:System.Windows.Window> またはその派生クラスによって継承されると、<xref:System.Windows.Window> このプロパティの既定値を <xref:System.Windows.Visibility.Collapsed>に再定義します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3621">When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="23e7a-3622">これにより、最初に作成された <xref:System.Windows.Window>でレイアウトの測定パスが実行されず、<xref:System.Windows.UIElement.RenderSize%2A> (0, 0) が返されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3622">This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0).</span></span> <span data-ttu-id="23e7a-3623">詳細については、「<xref:System.Windows.Window>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3623">For details, see <xref:System.Windows.Window>.</span></span> <span data-ttu-id="23e7a-3624">また <xref:System.Windows.Controls.Primitives.Popup> によって、既定値が <xref:System.Windows.Visibility.Collapsed>に再定義され、<xref:System.Windows.Controls.Primitives.Popup> とその派生クラスの動作も同様になります。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3624"><xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="23e7a-3625">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="23e7a-3625">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="23e7a-3626">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="23e7a-3626">Identifier field</span></span>|<xref:System.Windows.UIElement.VisibilityProperty>|  
|<span data-ttu-id="23e7a-3627">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="23e7a-3627">Metadata properties set to `true`</span></span>|<span data-ttu-id="23e7a-3628">None</span><span class="sxs-lookup"><span data-stu-id="23e7a-3628">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="23e7a-3629">次の例では、ユーザーインターフェイスで相互に排他的なペアとして使用する2つの異なる名前付きボタンを参照するハンドラーを実装しています。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3629">The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</span></span> <span data-ttu-id="23e7a-3630">ボタンに関連付けられている実際のプログラムロジックを実行する前に、ボタン自体が <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>に設定され、ペアのもう1つのボタンが <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3630">Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, and the other button in the pair is set to <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23e7a-3631"><see cref="P:System.Windows.UIElement.Visibility" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="23e7a-3631">Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
