<Type Name="RoutedEventHandler" FullName="System.Windows.RoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63fd3aa099bc13b7bdcf30cff4537cc4f3f42522" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83919961" /></Metadata><TypeSignature Language="C#" Value="public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RoutedEventHandler(sender As Object, e As RoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RoutedEventHandler(System::Object ^ sender, RoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RoutedEventHandler = delegate of obj * RoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="1cabb-101">イベント ハンドラーがアタッチされるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1cabb-101">The object where the event handler is attached.</span></span></param>
    <param name="e"><span data-ttu-id="1cabb-102">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="1cabb-102">The event data.</span></span></param>
    <summary><span data-ttu-id="1cabb-103">すべてのルーティング イベントに共通なデータ以外の特定のイベント データを持たない、さまざまなルーティング イベントを処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="1cabb-103">Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cabb-104"><xref:System.Windows.RoutedEventHandler> デリゲートは、イベントデータ内のイベント固有の情報を報告しないルーティングイベントに使用されます。</span><span class="sxs-lookup"><span data-stu-id="1cabb-104">The <xref:System.Windows.RoutedEventHandler> delegate is used for any routed event that does not report event-specific information in the event data.</span></span> <span data-ttu-id="1cabb-105">このようなルーティングイベントは多数あります。例として、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> や <xref:System.Windows.FrameworkElement.Loaded>などがあります。</span><span class="sxs-lookup"><span data-stu-id="1cabb-105">There are many such routed events; prominent examples include <xref:System.Windows.Controls.Primitives.ButtonBase.Click> and <xref:System.Windows.FrameworkElement.Loaded>.</span></span>  
  
 <span data-ttu-id="1cabb-106">一般的な [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントではなく、ルーティングイベントのハンドラーを記述する場合の最も顕著な違いは、イベントの `sender` (ハンドラーがアタッチされて呼び出される要素) がイベントのソースであるとは限らないということです。</span><span class="sxs-lookup"><span data-stu-id="1cabb-106">The most noteworthy difference between writing a handler for a routed event as opposed to a general [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event is that the `sender` of the event (the element where the handler is attached and invoked) cannot be considered to necessarily be the source of the event.</span></span> <span data-ttu-id="1cabb-107">ソースは、イベントデータ (<xref:System.Windows.RoutedEventArgs.Source%2A>) のプロパティとして報告されます。</span><span class="sxs-lookup"><span data-stu-id="1cabb-107">The source is reported as a property in the event data (<xref:System.Windows.RoutedEventArgs.Source%2A>).</span></span> <span data-ttu-id="1cabb-108">`sender` と <xref:System.Windows.RoutedEventArgs.Source%2A> の違いは、要素ツリーを介したルーティングイベントの走査中に、異なる要素にルーティングされるイベントの結果です。</span><span class="sxs-lookup"><span data-stu-id="1cabb-108">A difference between `sender` and <xref:System.Windows.RoutedEventArgs.Source%2A> is the result of the event being routed to different elements, during the traversal of the routed event through an element tree.</span></span>  
  
 <span data-ttu-id="1cabb-109">ダイレクトまたはバブルルーティングイベントのルーティング動作に関心がなく、最初に発生した要素に対してのみルーティングイベントを処理する場合は、オブジェクト参照に `sender` または <xref:System.Windows.RoutedEventArgs.Source%2A> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="1cabb-109">You can use either `sender` or <xref:System.Windows.RoutedEventArgs.Source%2A> for an object reference if you are deliberately not interested in the routing behavior of a direct or bubbling routed event and you only intend to handle routed events on the elements where they are first raised.</span></span> <span data-ttu-id="1cabb-110">この場合、`sender` と <xref:System.Windows.RoutedEventArgs.Source%2A> は同じオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="1cabb-110">In this circumstance, `sender` and <xref:System.Windows.RoutedEventArgs.Source%2A> are the same object.</span></span>  
  
 <span data-ttu-id="1cabb-111">ルーティングイベントの固有の機能を利用し、それに応じてハンドラーを記述する場合は、イベントハンドラーの記述時に使用するイベントデータの最も重要な2つのプロパティが <xref:System.Windows.RoutedEventArgs.Source%2A> および <xref:System.Windows.RoutedEventArgs.Handled%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="1cabb-111">If you do intend to take advantage of the inherent features of routed events and write your handlers accordingly, the two most important properties of the event data that you will work with when writing event handlers are <xref:System.Windows.RoutedEventArgs.Source%2A> and <xref:System.Windows.RoutedEventArgs.Handled%2A>.</span></span>  
  
 <span data-ttu-id="1cabb-112">入力イベントと [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] コントロールクラスの特定の組み合わせでは、イベントを発生させる要素は、それを処理する機会を持つ最初の要素ではありません。</span><span class="sxs-lookup"><span data-stu-id="1cabb-112">For certain combinations of input events and [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control classes, the element that raises the event is not the first element that has the opportunity to handle it.</span></span> <span data-ttu-id="1cabb-113">入力イベントにイベントのプレビューバージョンがある場合、要素ツリーのルートは最初の機会を持ち、共有イベントデータ内で `true` するように <xref:System.Windows.RoutedEventArgs.Handled%2A> を設定できます。また、イベントルートの残りの要素に入力イベントがどのように報告されるかに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1cabb-113">If the input event has a Preview version of the event, then the root of the element tree has first opportunity, can set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true` in the shared event data, and can influence how the input event is reported to remaining elements in its event route.</span></span> <span data-ttu-id="1cabb-114">プレビュー処理の動作では、特定のルーティングイベントが想定どおりに発生しないという外観を与えることができます。</span><span class="sxs-lookup"><span data-stu-id="1cabb-114">The Preview handling behavior can give the appearance that a particular routed event is not raised as expected.</span></span> <span data-ttu-id="1cabb-115">詳細については、「[プレビューイベント](/dotnet/framework/wpf/advanced/preview-events)と[入力の概要](/dotnet/framework/wpf/advanced/input-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1cabb-115">For more information, see [Preview Events](/dotnet/framework/wpf/advanced/preview-events) and [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
