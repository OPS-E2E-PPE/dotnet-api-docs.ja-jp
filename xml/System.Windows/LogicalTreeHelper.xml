<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dca55f9434f76e3f097d5bdddc958b0aeb80c5ca" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82444671" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="55188-101">論理ツリー内のオブジェクトのクエリを実行するために静的ヘルパー メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="55188-101">Provides static helper methods for querying objects in the logical tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55188-102"><xref:System.Windows.LogicalTreeHelper> クラスには、オブジェクトの子コレクションを返すために使用するメソッド、または論理ツリーのサブノード内から特定のオブジェクトを返すメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="55188-102">The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree.</span></span> <span data-ttu-id="55188-103">ただし、通常実行するオブジェクトツリー操作の多くは、<xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>の同様のメソッドまたはプロパティによっても公開されます。</span><span class="sxs-lookup"><span data-stu-id="55188-103">However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="55188-104">たとえば、次のようにしてみます。</span><span class="sxs-lookup"><span data-stu-id="55188-104">For example, try the following:</span></span>  
  
-   <span data-ttu-id="55188-105">論理子オブジェクトの列挙子を返す静的な <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> メソッドを呼び出す代わりに、そのオブジェクトのコンテンツモデルで公開されている専用のコレクションを使用します。</span><span class="sxs-lookup"><span data-stu-id="55188-105">Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object.</span></span> <span data-ttu-id="55188-106">コンテンツモデルをサポートするほとんどすべてのオブジェクトは、子オブジェクトのコレクションを含むいくつかのプロパティを公開し、そのコレクションに直接コレクションインターフェイスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="55188-106">Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.</span></span>  
  
-   <span data-ttu-id="55188-107">静的 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> メソッドを呼び出して、名前を指定して子オブジェクトを取得するのではなく、特定のオブジェクトに対して <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> または <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="55188-107">Instead of calling the static <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> method to obtain a child object by specifying its name, call the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> or <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> method on specific objects.</span></span>  
  
 <span data-ttu-id="55188-108"><xref:System.Windows.LogicalTreeHelper> は、論理ツリーを複数のレベルで再帰的に上または下に移動し、さまざまな親または子オブジェクトを検査するための一貫した方法を使用する分析シナリオに最も役立ちます。</span><span class="sxs-lookup"><span data-stu-id="55188-108"><xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects.</span></span> <span data-ttu-id="55188-109">この場合、コンテンツモデルが混在していて、より多くのコンテンツモデル固有の Api を使用すると、複雑になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="55188-109">In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current"><span data-ttu-id="55188-110">表示する UI 要素。</span><span class="sxs-lookup"><span data-stu-id="55188-110">The UI element to bring into view.</span></span></param>
        <summary><span data-ttu-id="55188-111">要求された UI 要素の表示を試行して、結果を報告するためにターゲット上で <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="55188-111">Attempts to bring the requested UI element into view and raises the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> event on the target in order to report the results.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55188-112">通常、この静的ユーティリティメソッドではなく <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> または <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> インスタンスメソッドを呼び出す方が便利です。</span><span class="sxs-lookup"><span data-stu-id="55188-112">It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> rather than this static utility method.</span></span> <span data-ttu-id="55188-113">インスタンスメソッドの動作は、静的メソッドの動作と同じです。</span><span class="sxs-lookup"><span data-stu-id="55188-113">The behavior of the instance methods is equivalent to the behavior of the static method.</span></span>  
  
 <span data-ttu-id="55188-114">指定された `current` UI 要素が <xref:System.Windows.FrameworkContentElement>であっても、生成されたイベントは同じ <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> イベントになります。イベントのイベントデータを確認することによって、元の <xref:System.Windows.FrameworkContentElement> を識別できます。</span><span class="sxs-lookup"><span data-stu-id="55188-114">Even if the `current` UI element provided was a <xref:System.Windows.FrameworkContentElement>, the resulting event is still the same <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> event, with the originating <xref:System.Windows.FrameworkContentElement> identifiable by checking the event data of the event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode"><span data-ttu-id="55188-115">検索を開始するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55188-115">The object to start searching from.</span></span> <span data-ttu-id="55188-116">このオブジェクトは、<see cref="T:System.Windows.FrameworkElement" /> と <see cref="T:System.Windows.FrameworkContentElement" /> のどちらかである必要があります。</span><span class="sxs-lookup"><span data-stu-id="55188-116">This object must be either a <see cref="T:System.Windows.FrameworkElement" /> or a <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></param>
        <param name="elementName"><span data-ttu-id="55188-117">検索するオブジェクトの名前。</span><span class="sxs-lookup"><span data-stu-id="55188-117">The name of the object to find.</span></span></param>
        <summary><span data-ttu-id="55188-118">指定された名前を持つオブジェクトを検索して返します。</span><span class="sxs-lookup"><span data-stu-id="55188-118">Attempts to find and return an object that has the specified name.</span></span> <span data-ttu-id="55188-119">検索は指定されたオブジェクトから開始され、論理ツリーのサブノードに続きます。</span><span class="sxs-lookup"><span data-stu-id="55188-119">The search starts from the specified object and continues into subnodes of the logical tree.</span></span></summary>
        <returns><span data-ttu-id="55188-120">一致する名前が見つかった場合は、その名前を持つオブジェクト。論理ツリー内に一致する名前が見つからなかった場合は、<see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="55188-120">The object with the matching name, if one is found; returns <see langword="null" /> if no matching name was found in the logical tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55188-121"><xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> と <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> のメソッドは、<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>に似ていますが、さまざまなロジックによって動作します。</span><span class="sxs-lookup"><span data-stu-id="55188-121">The methods <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> and <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> are superficially similar to <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, but operate by different logic:</span></span>  
  
-   <span data-ttu-id="55188-122"><xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> の検索方向は、子オブジェクト (ツリーの下) に向かっています。`FindName` メソッドの検索方向は、親オブジェクト (ツリーの上) に向かっています。</span><span class="sxs-lookup"><span data-stu-id="55188-122">The search direction for <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> is toward child objects (down the tree); the search direction for the `FindName` methods is towards parent objects (up the tree).</span></span>  
  
-   <span data-ttu-id="55188-123">`FindName` メソッドは、XAML 名前スコープの概念によって管理されます。</span><span class="sxs-lookup"><span data-stu-id="55188-123">The `FindName` methods are governed by the concept of a XAML namescope.</span></span> <span data-ttu-id="55188-124">`FindName` を使用すると、XAML 名前空間に一意性が適用されるため、その名前のオブジェクトが1つだけ存在することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="55188-124">Using `FindName` you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness.</span></span> <span data-ttu-id="55188-125">これに対し、<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> では XAML 名前スコープが無視され、検索中に XAML 名前スコープの境界を越える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="55188-125">In contrast, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignores XAML namescope and might cross XAML namescope boundaries during the search.</span></span> <span data-ttu-id="55188-126">そのため、境界を越えた場合は、`elementName` 名の一意性は保証されません。</span><span class="sxs-lookup"><span data-stu-id="55188-126">As such, there is no guarantee of uniqueness of the `elementName` name once boundaries are crossed.</span></span> <span data-ttu-id="55188-127">XAML 名前スコープの詳細については、「 [WPF Xaml 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="55188-127">For more information about XAML namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="55188-128">論理ツリーを処理して、指定したオブジェクトの直接の子オブジェクトのコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="55188-128">Returns the collection of immediate child objects of the specified object by processing the logical tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current"><span data-ttu-id="55188-129">論理ツリーの処理の起点になるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55188-129">The object from which to start processing the logical tree.</span></span> <span data-ttu-id="55188-130">これは、<see cref="T:System.Windows.FrameworkElement" /> か <see cref="T:System.Windows.FrameworkContentElement" /> のいずれかにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="55188-130">This is expected to be either a <see cref="T:System.Windows.FrameworkElement" /> or <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></param>
        <summary><span data-ttu-id="55188-131">論理ツリーを処理して、指定したオブジェクトの直接の子オブジェクトのコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="55188-131">Returns the collection of immediate child objects of the specified object, by processing the logical tree.</span></span></summary>
        <returns><span data-ttu-id="55188-132">指定したオブジェクトの論理ツリーに属する直接の子オブジェクトの列挙可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="55188-132">The enumerable collection of immediate child objects from the logical tree of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55188-133">このシグネチャとヘルパーメソッドは、主に `current` が <xref:System.Windows.FrameworkElement> であるか <xref:System.Windows.FrameworkContentElement> であるかわからない場合に使用します。また、そのオブジェクトのクラスが独自のコンテンツモデルコレクションをサポートしているかどうかわからない場合にもよく使用します。</span><span class="sxs-lookup"><span data-stu-id="55188-133">Use this signature and helper method primarily when you are unsure whether `current` is a <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> and are also unsure whether that object's class supports its own content model collection.</span></span> <span data-ttu-id="55188-134">クエリを実行するオブジェクトの種類を特定できる場合は、その型に存在することがわかっている特定のコンテンツプロパティを確認します。</span><span class="sxs-lookup"><span data-stu-id="55188-134">If you can determine the type of the object you are querying, check the specific content property that you know exists on that type.</span></span> <span data-ttu-id="55188-135">たとえば、クエリを実行するオブジェクトが <xref:System.Windows.Controls.ItemsControl>であることがわかっている場合は、<xref:System.Windows.Controls.ItemsControl.Items%2A> プロパティをチェックして、コレクションインターフェイスをサポートする厳密に型指定されたコレクションを取得します。これは、列挙子よりも便利です。</span><span class="sxs-lookup"><span data-stu-id="55188-135">For example, if you know that the object you are querying is an <xref:System.Windows.Controls.ItemsControl>, check the <xref:System.Windows.Controls.ItemsControl.Items%2A> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current"><span data-ttu-id="55188-136">論理ツリーの処理の起点になるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55188-136">The object from which to start processing the logical tree.</span></span></param>
        <summary><span data-ttu-id="55188-137">論理ツリーを処理して、指定した <see cref="T:System.Windows.FrameworkContentElement" /> の直接の子オブジェクトのコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="55188-137">Returns the collection of immediate child objects of the specified <see cref="T:System.Windows.FrameworkContentElement" /> by processing the logical tree.</span></span></summary>
        <returns><span data-ttu-id="55188-138">論理ツリー内の <paramref name="current" /> から始まる、直接の子オブジェクトの列挙可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="55188-138">The enumerable collection of immediate child objects starting from <paramref name="current" /> in the logical tree.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current"><span data-ttu-id="55188-139">論理ツリーの処理の起点になるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55188-139">The object from which to start processing the logical tree.</span></span></param>
        <summary><span data-ttu-id="55188-140">論理ツリーを処理して、指定した <see cref="T:System.Windows.FrameworkElement" /> の直接の子オブジェクトのコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="55188-140">Returns the collection of immediate child objects of the specified <see cref="T:System.Windows.FrameworkElement" /> by processing the logical tree.</span></span></summary>
        <returns><span data-ttu-id="55188-141">論理ツリー内の <paramref name="current" /> から始まる、直接の子オブジェクトの列挙可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="55188-141">The enumerable collection of immediate child objects starting from <paramref name="current" /> in the logical tree.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current"><span data-ttu-id="55188-142">親オブジェクトを検索する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55188-142">The object to find the parent object for.</span></span> <span data-ttu-id="55188-143">これは、<see cref="T:System.Windows.FrameworkElement" /> または <see cref="T:System.Windows.FrameworkContentElement" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="55188-143">This is expected to be either a <see cref="T:System.Windows.FrameworkElement" /> or a <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></param>
        <summary><span data-ttu-id="55188-144">論理ツリーを処理して、指定したオブジェクトの親オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="55188-144">Returns the parent object of the specified object by processing the logical tree.</span></span></summary>
        <returns><span data-ttu-id="55188-145">要求された親オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55188-145">The requested parent object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55188-146">このメソッドは、<xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> または <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> プロパティの適切な型バージョン (<xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>) を取得するラッパーにすぎません。したがって、`current` の種類を判断できない場合は、代わりにそれぞれのインスタンスのプロパティを確認することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="55188-146">This method is merely a wrapper that gets the appropriate type version (<xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>) of the <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> or <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> property; so unless you are unable to determine the `current` type, you might want to check the respective instance properties instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
