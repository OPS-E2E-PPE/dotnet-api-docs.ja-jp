<Type Name="Rect" FullName="System.Windows.Rect">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77c96c18b9e71f3b2364bfd8d8618137f355e98b" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83488503" /></Metadata><TypeSignature Language="C#" Value="public struct Rect : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Rect extends System.ValueType implements class System.IFormattable" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Rect" />
  <TypeSignature Language="VB.NET" Value="Public Structure Rect&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Rect : IFormattable" />
  <TypeSignature Language="F#" Value="type Rect = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Rect extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2cfc3-101">四角形の幅、高さ、場所を記述します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-101">Describes the width, height, and location of a rectangle.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_Duration"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="2cfc3-102">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="2cfc3-102">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y,width,height"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2cfc3-103">XAML の値</span><span class="sxs-lookup"><span data-stu-id="2cfc3-103">XAML Values</span></span>  
 <span data-ttu-id="2cfc3-104">*x*</span><span class="sxs-lookup"><span data-stu-id="2cfc3-104">*x*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="2cfc3-105">四角形の左辺の x 座標位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-105">The x-coordinate location of the left side of the rectangle.</span></span>  
  
 <span data-ttu-id="2cfc3-106">*y*</span><span class="sxs-lookup"><span data-stu-id="2cfc3-106">*y*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="2cfc3-107">四角形の上辺の y 座標位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-107">The y-coordinate location of the top side of the rectangle.</span></span>  
  
 <span data-ttu-id="2cfc3-108">*width*</span><span class="sxs-lookup"><span data-stu-id="2cfc3-108">*width*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="2cfc3-109">四角形の <xref:System.Windows.Rect.Width%2A> を表す負以外の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-109">A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle.</span></span>  
  
 <span data-ttu-id="2cfc3-110">*上下*</span><span class="sxs-lookup"><span data-stu-id="2cfc3-110">*height*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="2cfc3-111">四角形の <xref:System.Windows.Rect.Height%2A> を表す負以外の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-111">A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-112">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-112">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-113">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-113">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-114">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-114">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-115"><see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-115">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Size -&gt; System.Windows.Rect" Usage="new System.Windows.Rect size" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="2cfc3-116">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-116">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-117">指定したサイズを持ち、座標 (0,0) に位置する <see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-117">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is of the specified size and is located at (0,0).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-118">次の例では、<xref:System.Windows.Rect.%23ctor%28System.Windows.Size%29> コンストラクターを使用して、新しい <xref:System.Windows.Rect> 構造体を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-118">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Size%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample2_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As Point, point2 As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Point * System.Windows.Point -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (point1, point2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1"><span data-ttu-id="2cfc3-119">新しい四角形に格納する必要がある最初の点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-119">The first point that the new rectangle must contain.</span></span></param>
        <param name="point2"><span data-ttu-id="2cfc3-120">新しい四角形に格納する必要がある 2 番目の点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-120">The second point that the new rectangle must contain.</span></span></param>
        <summary><span data-ttu-id="2cfc3-121">指定した 2 つの点をちょうど格納できる大きさを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-121">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-122">次の例では、<xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Point%29> コンストラクターを使用して、新しい <xref:System.Windows.Rect> 構造体を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-122">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Point%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample3_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point location, System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point location, valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (location As Point, size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Point location, System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Point * System.Windows.Size -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (location, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="location" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="2cfc3-123">四角形の左上隅の場所を指定する点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-123">A point that specifies the location of the top-left corner of the rectangle.</span></span></param>
        <param name="size"><span data-ttu-id="2cfc3-124">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-124">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-125">指定した左上隅の位置および指定した幅と高さを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-125">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified top-left corner location and the specified width and height.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-126">次の例では、<xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Size%29> コンストラクターを使用して、新しい <xref:System.Windows.Rect> 構造体を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-126">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Size%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample4_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point As Point, vector As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Point point, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Point * System.Windows.Vector -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (point, vector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="2cfc3-127">四角形に格納する必要がある最初の点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-127">The first point the rectangle must contain.</span></span></param>
        <param name="vector"><span data-ttu-id="2cfc3-128">指定した点をオフセットする量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-128">The amount to offset the specified point.</span></span> <span data-ttu-id="2cfc3-129">結果として得られる四角形は、2 つの点をちょうど格納できる大きさになります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-129">The resulting rectangle will be exactly large enough to contain both points.</span></span></param>
        <summary><span data-ttu-id="2cfc3-130">指定した点および指定した点とベクターの和をちょうど格納できる大きさを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-130">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-131">次の例では、<xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Vector%29> コンストラクターを使用して、新しい <xref:System.Windows.Rect> 構造体を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-131">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Vector%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample5_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample5_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (double x, double y, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double, width As Double, height As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(double x, double y, double width, double height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : double * double * double * double -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (x, y, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="2cfc3-132">四角形の左上隅の X 座標。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-132">The x-coordinate of the top-left corner of the rectangle.</span></span></param>
        <param name="y"><span data-ttu-id="2cfc3-133">四角形の左上隅の y 座標。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-133">The y-coordinate of the top-left corner of the rectangle.</span></span></param>
        <param name="width"><span data-ttu-id="2cfc3-134">四角形の幅。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-134">The width of the rectangle.</span></span></param>
        <param name="height"><span data-ttu-id="2cfc3-135">四角形の高さ。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-135">The height of the rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-136">指定した x 座標、y 座標、幅、および高さを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-136">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-137">次の例では、<xref:System.Windows.Rect.%23ctor%28System.Double%2CSystem.Double%2CSystem.Double%2CSystem.Double%29> コンストラクターを使用して、新しい <xref:System.Windows.Rect> 構造体を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-137">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Double%2CSystem.Double%2CSystem.Double%2CSystem.Double%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample6_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample6_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cfc3-138"><paramref name="width" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-138"><paramref name="width" /> is a negative value.</span></span>  
  
<span data-ttu-id="2cfc3-139">または</span><span class="sxs-lookup"><span data-stu-id="2cfc3-139">-or-</span></span> 
 <span data-ttu-id="2cfc3-140"><paramref name="height" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-140"><paramref name="height" /> is a negative value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public double Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Bottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bottom As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Bottom { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Bottom : double" Usage="System.Windows.Rect.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-141">四角形の底辺の y 軸の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-141">Gets the y-axis value of the bottom of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-142">四角形の底辺の y 軸の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-142">The y-axis value of the bottom of the rectangle.</span></span> <span data-ttu-id="2cfc3-143">四角形が空の場合、値は <see cref="F:System.Double.NegativeInfinity" /> になります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-143">If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-144">四角形の下端の y 軸の値は、<xref:System.Windows.Rect.Y%2A> と <xref:System.Windows.Rect.Height%2A> の各プロパティの合計と同じになります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-144">The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-145">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-145">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-146">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-146">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomLeft">
      <MemberSignature Language="C#" Value="public System.Windows.Point BottomLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BottomLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.BottomLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BottomLeft As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point BottomLeft { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.BottomLeft : System.Windows.Point" Usage="System.Windows.Rect.BottomLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-147">四角形の左下隅の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-147">Gets the position of the bottom-left corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-148">四角形の左下隅の位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-148">The position of the bottom-left corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-149">四角形の左下隅の位置は、(<xref:System.Windows.Rect.X%2A>、<xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>) と同じです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-149">The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-150">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-150">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-151">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-151">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomRight">
      <MemberSignature Language="C#" Value="public System.Windows.Point BottomRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BottomRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.BottomRight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BottomRight As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point BottomRight { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.BottomRight : System.Windows.Point" Usage="System.Windows.Rect.BottomRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-152">四角形の右下隅の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-152">Gets the position of the bottom-right corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-153">四角形の右下隅の位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-153">The position of the bottom-right corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-154">四角形の右下隅の位置は、(<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>、<xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>) と同じになります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-154">The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-155">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-155">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-156">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-156">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-157">指定した点または四角形が、四角形に含まれているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-157">Indicates whether the rectangle contains the specified point or rectangle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Contains(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (point As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Point -&gt; bool" Usage="rect.Contains point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="2cfc3-158">確認対象の点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-158">The point to check.</span></span></param>
        <summary><span data-ttu-id="2cfc3-159">四角形に指定した点が含まれているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-159">Indicates whether the rectangle contains the specified point.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-160">指定した点が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-160"><see langword="true" /> if the rectangle contains the specified point; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-161">次の例は、<xref:System.Windows.Rect.Contains%28System.Windows.Point%29> メソッドを使用して、指定した <xref:System.Windows.Point>が四角形に含まれているかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-161">The following example shows how to use the <xref:System.Windows.Rect.Contains%28System.Windows.Point%29> method to determine if the rectangle contains the specified <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[RectExamples_snip#ContainsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#containsexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Contains(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (rect As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Rect -&gt; bool" Usage="rect.Contains rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-162">確認対象の四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-162">The rectangle to check.</span></span></param>
        <summary><span data-ttu-id="2cfc3-163">指定した四角形が、四角形に含まれているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-163">Indicates whether the rectangle contains the specified rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-164"><paramref name="rect" /> 全体が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-164"><see langword="true" /> if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-165">次の例は、<xref:System.Windows.Rect.Contains%28System.Windows.Rect%29> メソッドを使用して、ある四角形が別の四角形に含まれているかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-165">The following example shows how to use the <xref:System.Windows.Rect.Contains%28System.Windows.Rect%29> method to determine if one rectangle is contained by another rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#ContainsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#containsexample2_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Contains(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (x As Double, y As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(double x, double y);" />
      <MemberSignature Language="F#" Value="member this.Contains : double * double -&gt; bool" Usage="rect.Contains (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="2cfc3-166">確認対象の点の x 座標。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-166">The x-coordinate of the point to check.</span></span></param>
        <param name="y"><span data-ttu-id="2cfc3-167">確認対象の点の y 座標。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-167">The y-coordinate of the point to check.</span></span></param>
        <summary><span data-ttu-id="2cfc3-168">指定した x 座標と y 座標が、四角形に含まれているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-168">Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-169">(<paramref name="x" />,<paramref name="y" />) の座標が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-169"><see langword="true" /> if (<paramref name="x" />, <paramref name="y" />) is contained by the rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-170">次の例は、<xref:System.Windows.Rect.Contains%28System.Double%2CSystem.Double%29> メソッドを使用して、指定した x 座標と y 座標で指定した点が四角形に含まれているかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-170">The following example shows how to use the <xref:System.Windows.Rect.Contains%28System.Double%2CSystem.Double%29> method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.</span></span>  
  
 [!code-csharp[RectExamples_snip#ContainsExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#containsexample3_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Rect Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Rect Empty { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Rect" Usage="System.Windows.Rect.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-171">位置や領域を持たない四角形を表す特殊な値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-171">Gets a special value that represents a rectangle with no position or area.</span></span></summary>
        <value><span data-ttu-id="2cfc3-172"><see cref="P:System.Windows.Rect.X" /> の <see cref="P:System.Windows.Rect.Y" /> および <see cref="F:System.Double.PositiveInfinity" /> 値を持ち、<see cref="P:System.Windows.Rect.Width" /> の <see cref="P:System.Windows.Rect.Height" /> および <see cref="F:System.Double.NegativeInfinity" /> 値を持つ空の四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-172">The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-173">空の四角形を含む数学的計算は避けてください。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-173">Avoid mathematical computations involving empty rectangles.</span></span> <span data-ttu-id="2cfc3-174"><xref:System.Windows.Rect.X%2A> と <xref:System.Windows.Rect.Y%2A> はどちらも無限値なので、これらの操作によってプロセッサ操作が深刻に損なわれます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-174">Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations.</span></span> <span data-ttu-id="2cfc3-175">これらの値を含む比較は、アプリケーションのパフォーマンスには影響しません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-175">Comparisons involving these values will not affect application performance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.IsEmpty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-176">2 つの四角形が等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-176">Indicates whether two rectangles are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="rect.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="2cfc3-177">現在の四角形と比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-177">The object to compare to the current rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-178">指定したオブジェクトが現在の四角形と等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-178">Indicates whether the specified object is equal to the current rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-179"><paramref name="o" /> が <see cref="T:System.Windows.Rect" /> で、現在の四角形と同じ <see cref="P:System.Windows.Rect.Location" /> および <see cref="P:System.Windows.Rect.Size" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-179"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-180">この操作では、オブジェクトの等価性をテストします。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-180">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="2cfc3-181">この比較では、<xref:System.Double.NaN?displayProperty=nameWithType> の2つのインスタンスが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-181">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cfc3-182">四角形の位置と次元は <xref:System.Double> 値によって記述されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-182">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="2cfc3-183"><xref:System.Double> 値は、操作時に精度が失われる可能性があるため、論理的に等しい2つの値の比較は失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-183">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-184">次の例は、<xref:System.Windows.Rect.Equals%28System.Object%29> メソッドを使用して、四角形が指定したオブジェクトと等しいかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-184">The following example shows how to use the <xref:System.Windows.Rect.Equals%28System.Object%29> method to determine if a rectangle is equal to a specified object.</span></span>  
  
 [!code-csharp[RectExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
        <altmember cref="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Rect value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Rect value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Equals(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Rect value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Rect -&gt; bool" Usage="rect.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cfc3-185">現在の四角形と比較する対象の四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-185">The rectangle to compare to the current rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-186">指定した四角形が現在の四角形と等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-186">Indicates whether the specified rectangle is equal to the current rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-187">指定した四角形が現在の四角形と同じ <see cref="P:System.Windows.Rect.Location" /> および <see cref="P:System.Windows.Rect.Size" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-187"><see langword="true" /> if the specified rectangle has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-188">この操作では、オブジェクトの等価性をテストします。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-188">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="2cfc3-189">この比較では、<xref:System.Double.NaN?displayProperty=nameWithType> の2つのインスタンスが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-189">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cfc3-190">四角形の位置と次元は <xref:System.Double> 値によって記述されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-190">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="2cfc3-191"><xref:System.Double> 値は、操作時に精度が失われる可能性があるため、論理的に等しい2つの値の比較は失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-191">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-192">次の例は、<xref:System.Windows.Rect.Equals%28System.Windows.Rect%29> メソッドを使用して、四角形が指定した四角形と等しいかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-192">The following example shows how to use the <xref:System.Windows.Rect.Equals%28System.Windows.Rect%29> method to determine if a rectangle is equal to a specified rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
        <altmember cref="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (rect1 As Rect, rect2 As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Rect * System.Windows.Rect -&gt; bool" Usage="System.Windows.Rect.Equals (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="2cfc3-193">最初に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-193">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="2cfc3-194">2 番目に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-194">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="2cfc3-195">指定した四角形が等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-195">Indicates whether the specified rectangles are equal.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-196">四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-196"><see langword="true" /> if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-197">この操作では、オブジェクトの等価性をテストします。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-197">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="2cfc3-198">この比較では、<xref:System.Double.NaN?displayProperty=nameWithType> の2つのインスタンスが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-198">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cfc3-199">四角形の位置と次元は <xref:System.Double> 値によって記述されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-199">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="2cfc3-200"><xref:System.Double> 値は、操作時に精度が失われる可能性があるため、論理的に等しい2つの値の比較は失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-200">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-201">次の例は、<xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29> メソッドを使用して、ある四角形が別の四角形と等しいかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-201">The following example shows how to use the <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29> method to determine if one rectangle is equal to another.</span></span>  
  
 [!code-csharp[RectExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
        <altmember cref="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="rect.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cfc3-202">四角形のハッシュ コードを作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-202">Creates a hash code for the rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-203">現在の <see cref="T:System.Windows.Rect" /> 構造体のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-203">A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-204">このメソッドは、<xref:System.Windows.Rect.X%2A>、<xref:System.Windows.Rect.Y%2A>、<xref:System.Windows.Rect.Width%2A>、および <xref:System.Windows.Rect.Height%2A> プロパティ値を使用してハッシュコードを作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-204">This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-205">次の例は、<xref:System.Windows.Rect.GetHashCode%2A> メソッドを使用して <xref:System.Windows.Rect>のハッシュコードを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-205">The following example shows how to use the <xref:System.Windows.Rect.GetHashCode%2A> method to get the hash code of a <xref:System.Windows.Rect>.</span></span>  
  
 [!code-csharp[RectExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.Rect.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-206">四角形の高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-206">Gets or sets the height of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-207">四角形の高さを表す正の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-207">A positive number that represents the height of the rectangle.</span></span> <span data-ttu-id="2cfc3-208">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-208">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-209"><xref:System.Windows.Rect.Empty%2A> 四角形には <xref:System.Double.NegativeInfinity>の <xref:System.Windows.Rect.Height%2A> があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-209">The <xref:System.Windows.Rect.Empty%2A> rectangle has a <xref:System.Windows.Rect.Height%2A> of <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="2cfc3-210"><xref:System.Windows.Rect.Empty%2A> 四角形は読み取り専用です。<xref:System.Windows.Rect.Height%2A> を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-210">The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its <xref:System.Windows.Rect.Height%2A> cannot not be changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-211">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-211">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-212">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-212">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-213">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-213">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cfc3-214"><see cref="P:System.Windows.Rect.Height" /> に負の数が設定されています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-214"><see cref="P:System.Windows.Rect.Height" /> is set to a negative value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-215"><see cref="P:System.Windows.Rect.Height" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-215"><see cref="P:System.Windows.Rect.Height" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.Width" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Inflate">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-216">指定した量だけ四角形を拡大または縮小した四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-216">Creates a rectangle that results from expanding or shrinking a rectangle by the specified amount.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public void Inflate (System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Inflate(valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Inflate (size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Inflate(System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="member this.Inflate : System.Windows.Size -&gt; unit" Usage="rect.Inflate size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="2cfc3-217">四角形を拡大する量を指定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-217">Specifies the amount to expand the rectangle.</span></span> <span data-ttu-id="2cfc3-218"><see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Width" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Left" /> プロパティと <see cref="P:System.Windows.Rect.Right" /> プロパティの増分量を指定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-218">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties.</span></span> <span data-ttu-id="2cfc3-219"><see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Height" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Top" /> プロパティと <see cref="P:System.Windows.Rect.Bottom" /> プロパティの増分量を指定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-219">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</span></span></param>
        <summary><span data-ttu-id="2cfc3-220">すべての方向に、指定した <see cref="T:System.Windows.Size" /> を使用して四角形を拡大します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-220">Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />, in all directions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-221">四角形の左側と右側の両方が大きくなっているため、結果として得られる四角形の <xref:System.Windows.Rect.Width%2A> は、指定された <xref:System.Windows.Size> 構造体の <xref:System.Windows.Size.Width%2A> の2倍増加します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-221">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated.</span></span> <span data-ttu-id="2cfc3-222">同様に、結果として得られる四角形の <xref:System.Windows.Rect.Height%2A> は、指定された <xref:System.Windows.Size> 構造体の <xref:System.Windows.Size.Height%2A> の2倍増加します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-222">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-223">次の例は、<xref:System.Windows.Rect.Inflate%28System.Windows.Size%29> メソッドを使用して四角形のサイズを増やす方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-223">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Windows.Size%29> method to increase the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-224">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-224">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public void Inflate (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Inflate(float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Inflate (width As Double, height As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Inflate(double width, double height);" />
      <MemberSignature Language="F#" Value="member this.Inflate : double * double -&gt; unit" Usage="rect.Inflate (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width"><span data-ttu-id="2cfc3-225">四角形の左辺と右辺を拡大または縮小する量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-225">The amount by which to expand or shrink the left and right sides of the rectangle.</span></span></param>
        <param name="height"><span data-ttu-id="2cfc3-226">四角形の上辺と底辺を拡大または縮小する量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-226">The amount by which to expand or shrink the top and bottom sides of the rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-227">すべての方向に、指定した幅および高さの量を使用して四角形を拡大または縮小します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-227">Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-228">四角形の左右両方に適用されるため、結果として得られる四角形の <xref:System.Windows.Rect.Width%2A> は、指定された幅オフセットの2倍増加または縮小されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-228">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle.</span></span> <span data-ttu-id="2cfc3-229">同様に、結果として得られる四角形の <xref:System.Windows.Rect.Height%2A> は、指定された高さの2倍に増加または減少します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-229">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.</span></span>  
  
 <span data-ttu-id="2cfc3-230">指定した幅または高さが、現在の <xref:System.Windows.Rect.Width%2A> よりも四角形を小さくしたり、四角形を負の領域にしたりすると、四角形が <xref:System.Windows.Rect.Empty%2A> 四角形になり <xref:System.Windows.Rect.Height%2A> ます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-230">If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A> - giving the rectangle a negative area - the rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-231">次の例は、<xref:System.Windows.Rect.Inflate%28System.Double%2CSystem.Double%29> メソッドを使用して四角形のサイズを変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-231">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Double%2CSystem.Double%29> method to change the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-232">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-232">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Inflate(valuetype System.Windows.Rect rect, valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Inflate (rect As Rect, size As Size) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Inflate(System::Windows::Rect rect, System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="static member Inflate : System.Windows.Rect * System.Windows.Size -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Inflate (rect, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-233">変更する対象の <see cref="T:System.Windows.Rect" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-233">The <see cref="T:System.Windows.Rect" /> structure to modify.</span></span></param>
        <param name="size"><span data-ttu-id="2cfc3-234">四角形を拡大する量を指定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-234">Specifies the amount to expand the rectangle.</span></span> <span data-ttu-id="2cfc3-235"><see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Width" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Left" /> プロパティと <see cref="P:System.Windows.Rect.Right" /> プロパティの増分量を指定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-235">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties.</span></span> <span data-ttu-id="2cfc3-236"><see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Height" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Top" /> プロパティと <see cref="P:System.Windows.Rect.Bottom" /> プロパティの増分量を指定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-236">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</span></span></param>
        <summary><span data-ttu-id="2cfc3-237">指定した四角形を、すべての方向に指定した <see cref="T:System.Windows.Size" /> だけ拡大した四角形を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-237">Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />, in all directions.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-238">結果として得られる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-238">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-239">四角形の左側と右側の両方が大きくなっているため、結果として得られる四角形の <xref:System.Windows.Rect.Width%2A> は、指定された <xref:System.Windows.Size> 構造体の <xref:System.Windows.Size.Width%2A> の2倍増加します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-239">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated.</span></span> <span data-ttu-id="2cfc3-240">同様に、結果として得られる四角形の <xref:System.Windows.Rect.Height%2A> は、指定された <xref:System.Windows.Size> 構造体の <xref:System.Windows.Size.Height%2A> の2倍増加します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-240">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-241">次の例は、<xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Windows.Size%29> メソッドを使用して四角形のサイズを変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-241">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Windows.Size%29> method to change the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-242"><paramref name="rect" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-242"><paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Inflate(valuetype System.Windows.Rect rect, float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Inflate (rect As Rect, width As Double, height As Double) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Inflate(System::Windows::Rect rect, double width, double height);" />
      <MemberSignature Language="F#" Value="static member Inflate : System.Windows.Rect * double * double -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Inflate (rect, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-243">変更する対象の <see cref="T:System.Windows.Rect" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-243">The <see cref="T:System.Windows.Rect" /> structure to modify.</span></span></param>
        <param name="width"><span data-ttu-id="2cfc3-244">四角形の左辺と右辺を拡大または縮小する量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-244">The amount by which to expand or shrink the left and right sides of the rectangle.</span></span></param>
        <param name="height"><span data-ttu-id="2cfc3-245">四角形の上辺と底辺を拡大または縮小する量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-245">The amount by which to expand or shrink the top and bottom sides of the rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-246">指定した四角形を、すべての方向に指定した幅および高さの量だけ拡大または縮小した四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-246">Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-247">結果として得られる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-247">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-248">四角形の左右両方に適用されるため、結果として得られる四角形の <xref:System.Windows.Rect.Width%2A> は、指定された幅オフセットの2倍増加または縮小されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-248">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle.</span></span> <span data-ttu-id="2cfc3-249">同様に、結果として得られる四角形の <xref:System.Windows.Rect.Height%2A> は、指定された高さの2倍に増加または減少します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-249">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.</span></span>  
  
 <span data-ttu-id="2cfc3-250">指定された幅または高さの修飾子が現在の <xref:System.Windows.Rect.Width%2A> よりも四角形を縮小する場合、または四角形を負の領域にする場合は、このメソッド <xref:System.Windows.Rect.Height%2A> は <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-250">If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A> - giving the rectangle a negative area - this method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-251">次の例は、<xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> メソッドを使用して四角形のサイズを変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-251">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> method to change the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-252"><paramref name="rect" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-252"><paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-253">2 つの四角形の交差部分を求めます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-253">Finds the intersection of two rectangles.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Intersect(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Intersect (rect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Intersect(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Windows.Rect -&gt; unit" Usage="rect.Intersect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-254">現在の四角形と交差する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-254">The rectangle to intersect with the current rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-255">現在の四角形と指定した四角形の交差部分を求め、結果を現在の四角形として保存します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-255">Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-256">交差部分が存在しない場合は、現在の四角形が <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-256">If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-257">次の例は、<xref:System.Windows.Rect.Intersect%28System.Windows.Rect%29> メソッドを使用して2つの四角形の交差部分を検索し、その結果を四角形として格納する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-257">The following example shows how to use the <xref:System.Windows.Rect.Intersect%28System.Windows.Rect%29> method to find the intersection of two rectangles and store the result as a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#IntersectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#intersectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Intersect(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intersect (rect1 As Rect, rect2 As Rect) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Intersect(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member Intersect : System.Windows.Rect * System.Windows.Rect -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Intersect (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="2cfc3-258">最初に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-258">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="2cfc3-259">2 番目に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-259">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="2cfc3-260">指定した四角形の交差部分を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-260">Returns the intersection of the specified rectangles.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-261">2 つの四角形が交差する場合はその交差部分。交差しない場合は <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-261">The intersection of the two rectangles, or <see cref="P:System.Windows.Rect.Empty" /> if no intersection exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-262">次の例では、<xref:System.Windows.Rect.Intersect%28System.Windows.Rect%2CSystem.Windows.Rect%29> メソッドを使用して、2つの四角形の交差部分を検索する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-262">The following example shows how to use the <xref:System.Windows.Rect.Intersect%28System.Windows.Rect%2CSystem.Windows.Rect%29> method to find the intersection of two rectangles.</span></span>  
  
 [!code-csharp[RectExamples_snip#IntersectExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#intersectexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="IntersectsWith">
      <MemberSignature Language="C#" Value="public bool IntersectsWith (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IntersectsWith(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntersectsWith (rect As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IntersectsWith(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectsWith : System.Windows.Rect -&gt; bool" Usage="rect.IntersectsWith rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-263">確認対象の四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-263">The rectangle to check.</span></span></param>
        <summary><span data-ttu-id="2cfc3-264">指定した四角形が、現在の四角形と交差するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-264">Indicates whether the specified rectangle intersects with the current rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-265">指定した四角形が現在の四角形と交差する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-265"><see langword="true" /> if the specified rectangle intersects with the current rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-266">次の例では、<xref:System.Windows.Rect.IntersectsWith%2A> メソッドを使用して、2つの四角形が交差するかどうかを判断する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-266">The following example shows how to use the <xref:System.Windows.Rect.IntersectsWith%2A> method to determine if two rectangles intersect.</span></span>  
  
 [!code-csharp[RectExamples_snip#IntersectsWithExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#intersectswithexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.Rect.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-267">四角形が <see cref="P:System.Windows.Rect.Empty" /> の四角形かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-267">Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-268">四角形が <see cref="P:System.Windows.Rect.Empty" /> の四角形の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-268"><see langword="true" /> if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-269">このプロパティを使用してゼロ領域をテストすることはできません。領域がゼロの四角形は、必ずしも <xref:System.Windows.Rect.Empty%2A> の四角形とは限りません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-269">Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle.</span></span> <span data-ttu-id="2cfc3-270">詳細については、<xref:System.Windows.Rect.Empty%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-270">For more information, see the <xref:System.Windows.Rect.Empty%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.Empty" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : double" Usage="System.Windows.Rect.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-271">四角形の左辺の x 軸の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-271">Gets the x-axis value of the left side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-272">四角形の左辺の x 軸の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-272">The x-axis value of the left side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-273">このプロパティを取得することは、<xref:System.Windows.Rect.X%2A> プロパティを取得することと同じです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-273">Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-274">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-274">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-275">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-275">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.X" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Windows.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Location { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Windows.Point with get, set" Usage="System.Windows.Rect.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-276">四角形の左上隅の位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-276">Gets or sets the position of the top-left corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-277">四角形の左上隅の位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-277">The position of the top-left corner of the rectangle.</span></span> <span data-ttu-id="2cfc3-278">既定値は (0, 0) です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-278">The default is (0, 0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-279">四角形の左上隅の位置は、(<xref:System.Windows.Rect.X%2A>、<xref:System.Windows.Rect.Y%2A>) と同じになります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-279">The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-280">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-280">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-281">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-281">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-282">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-282">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-283"><see cref="P:System.Windows.Rect.Location" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-283"><see cref="P:System.Windows.Rect.Location" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Offset">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-284">指定した量だけ四角形を移動します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-284">Moves a rectangle by the specified amount.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (System.Windows.Vector offsetVector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(valuetype System.Windows.Vector offsetVector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Offset (offsetVector As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Offset(System::Windows::Vector offsetVector);" />
      <MemberSignature Language="F#" Value="member this.Offset : System.Windows.Vector -&gt; unit" Usage="rect.Offset offsetVector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetVector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="offsetVector"><span data-ttu-id="2cfc3-285">四角形を水平方向および垂直方向に移動する量を指定するベクター。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-285">A vector that specifies the horizontal and vertical amounts to move the rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-286">指定したベクターだけ四角形を移動します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-286">Moves the rectangle by the specified vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-287">空の四角形 (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) に対してこのメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-287">Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
 <span data-ttu-id="2cfc3-288"><xref:System.Windows.Rect.Offset%2A> メソッドを呼び出すことができるのは、<xref:System.Windows.Rect.X%2A> と <xref:System.Windows.Rect.Y%2A> プロパティを直接変更できる場合だけです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-288">Note that calling the <xref:System.Windows.Rect.Offset%2A> method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly.</span></span> <span data-ttu-id="2cfc3-289"><xref:System.Windows.Rect> は値型であるため、プロパティまたはインデクサーを使用して <xref:System.Windows.Rect> オブジェクトを参照する場合は、オブジェクトへの参照ではなく、オブジェクトのコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-289">Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object.</span></span> <span data-ttu-id="2cfc3-290">プロパティまたはインデクサー参照で <xref:System.Windows.Rect.X%2A> または <xref:System.Windows.Rect.Y%2A> を変更しようとすると、コンパイラエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-290">If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs.</span></span> <span data-ttu-id="2cfc3-291">同様に、プロパティまたはインデクサーで <xref:System.Windows.Rect.Offset%2A> を呼び出すと、基になるオブジェクトが変更されません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-291">Similarly, calling <xref:System.Windows.Rect.Offset%2A> on the property or indexer will not change the underlying object.</span></span>  <span data-ttu-id="2cfc3-292">プロパティまたはインデクサーとして参照されている <xref:System.Windows.Rect> の値を変更する場合は、新しい <xref:System.Windows.Rect>を作成し、そのフィールドを変更してから、その <xref:System.Windows.Rect> をプロパティまたはインデクサーに割り当て直します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-292">If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-293">次の例は、<xref:System.Windows.Rect.Offset%28System.Windows.Vector%29> メソッドを使用して四角形の位置を変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-293">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Windows.Vector%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-294">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-294">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Offset (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Offset(double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="member this.Offset : double * double -&gt; unit" Usage="rect.Offset (offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX"><span data-ttu-id="2cfc3-295">四角形の水平方向の移動量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-295">The amount to move the rectangle horizontally.</span></span></param>
        <param name="offsetY"><span data-ttu-id="2cfc3-296">四角形の垂直方向の移動量。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-296">The amount to move the rectangle vertically.</span></span></param>
        <summary><span data-ttu-id="2cfc3-297">四角形を水平方向および垂直方向に指定した量だけ移動します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-297">Moves the rectangle by the specified horizontal and vertical amounts.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-298">空の四角形 (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) に対してこのメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-298">Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
 <span data-ttu-id="2cfc3-299"><xref:System.Windows.Rect.Offset%2A> メソッドを呼び出すことができるのは、<xref:System.Windows.Rect.X%2A> と <xref:System.Windows.Rect.Y%2A> プロパティを直接変更できる場合だけです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-299">Note that calling the <xref:System.Windows.Rect.Offset%2A> method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly.</span></span> <span data-ttu-id="2cfc3-300"><xref:System.Windows.Rect> は値型であるため、プロパティまたはインデクサーを使用して <xref:System.Windows.Rect> オブジェクトを参照する場合は、オブジェクトへの参照ではなく、オブジェクトのコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-300">Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object.</span></span> <span data-ttu-id="2cfc3-301">プロパティまたはインデクサー参照で <xref:System.Windows.Rect.X%2A> または <xref:System.Windows.Rect.Y%2A> を変更しようとすると、コンパイラエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-301">If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs.</span></span> <span data-ttu-id="2cfc3-302">同様に、プロパティまたはインデクサーで <xref:System.Windows.Rect.Offset%2A> を呼び出すと、基になるオブジェクトが変更されません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-302">Similarly, calling <xref:System.Windows.Rect.Offset%2A> on the property or indexer will not change the underlying object.</span></span>  <span data-ttu-id="2cfc3-303">プロパティまたはインデクサーとして参照されている <xref:System.Windows.Rect> の値を変更する場合は、新しい <xref:System.Windows.Rect>を作成し、そのフィールドを変更してから、その <xref:System.Windows.Rect> をプロパティまたはインデクサーに割り当て直します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-303">If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-304">次の例は、<xref:System.Windows.Rect.Offset%28System.Double%2CSystem.Double%29> メソッドを使用して四角形の位置を変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-304">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Double%2CSystem.Double%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-305">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-305">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Offset(valuetype System.Windows.Rect rect, valuetype System.Windows.Vector offsetVector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Offset (rect As Rect, offsetVector As Vector) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Offset(System::Windows::Rect rect, System::Windows::Vector offsetVector);" />
      <MemberSignature Language="F#" Value="static member Offset : System.Windows.Rect * System.Windows.Vector -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Offset (rect, offsetVector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="offsetVector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-306">元の四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-306">The original rectangle.</span></span></param>
        <param name="offsetVector"><span data-ttu-id="2cfc3-307">新しい四角形の水平方向および垂直方向のオフセットを指定するベクター。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-307">A vector that specifies the horizontal and vertical offsets for the new rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-308">指定したベクターを使用して、指定した四角形からのオフセットである四角形を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-308">Returns a rectangle that is offset from the specified rectangle by using the specified vector.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-309">結果として得られる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-309">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-310">空の四角形 (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) を指定してこのメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-310">Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-311">次の例は、<xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Windows.Vector%29> メソッドを使用して四角形の位置を変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-311">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Windows.Vector%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-312"><paramref name="rect" /> が <see cref="P:System.Windows.Rect.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-312"><paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Offset(valuetype System.Windows.Rect rect, float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Offset (rect As Rect, offsetX As Double, offsetY As Double) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Offset(System::Windows::Rect rect, double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="static member Offset : System.Windows.Rect * double * double -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Offset (rect, offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-313">移動対象の四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-313">The rectangle to move.</span></span></param>
        <param name="offsetX"><span data-ttu-id="2cfc3-314">新しい四角形の水平方向のオフセット。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-314">The horizontal offset for the new rectangle.</span></span></param>
        <param name="offsetY"><span data-ttu-id="2cfc3-315">新しい四角形の垂直方向のオフセット。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-315">The vertical offset for the new rectangle.</span></span></param>
        <summary><span data-ttu-id="2cfc3-316">指定した水平方向および垂直後方の量を使用して、指定した四角形からのオフセットである四角形を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-316">Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-317">結果として得られる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-317">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-318">空の四角形 (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) を指定してこのメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-318">Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-319">次の例は、<xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> メソッドを使用して四角形の位置を変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-319">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-320"><paramref name="rect" /> が <see cref="P:System.Windows.Rect.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-320"><paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (rect1 As Rect, rect2 As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Rect * System.Windows.Rect -&gt; bool" Usage="rect1 = rect2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="2cfc3-321">最初に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-321">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="2cfc3-322">2 番目に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-322">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="2cfc3-323">2 つの四角形を比較し、完全に等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-323">Compares two rectangles for exact equality.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-324">四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-324"><see langword="true" /> if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-325">この操作では、オブジェクトの等価性をテストします。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-325">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="2cfc3-326">この比較では、<xref:System.Double.NaN?displayProperty=nameWithType> の2つのインスタンスが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-326">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cfc3-327">四角形の位置と次元は <xref:System.Double> 値によって記述されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-327">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="2cfc3-328"><xref:System.Double> 値は、操作時に精度が失われる可能性があるため、論理的に等しい2つの値の比較は失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-328">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
 <span data-ttu-id="2cfc3-329">この演算子の同等のメソッドは <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2cfc3-329">The equivalent method for this operator is <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="2cfc3-330">次の例では、<xref:System.Windows.Rect.op_Equality%2A> 演算子を使用して、2つの四角形が正確に等しいかどうかを判断する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-330">The following example shows how to use the <xref:System.Windows.Rect.op_Equality%2A> operator to determine if two rectangles are exactly equal.</span></span>  
  
 [!code-csharp[RectExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[RectExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RectExamples_snip/visualbasic/rectexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (rect1 As Rect, rect2 As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Rect * System.Windows.Rect -&gt; bool" Usage="System.Windows.Rect.op_Inequality (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="2cfc3-331">最初に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-331">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="2cfc3-332">2 番目に比較する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-332">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="2cfc3-333">2 つの四角形を比較し、等しくないかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-333">Compares two rectangles for inequality.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-334">四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持たない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-334"><see langword="true" /> if the rectangles do not have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-335">この操作では、オブジェクトが等しくないかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-335">This operation tests for object inequality.</span></span>  
  
 <span data-ttu-id="2cfc3-336">この比較では、<xref:System.Double.NaN?displayProperty=nameWithType> の2つのインスタンスが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-336">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cfc3-337">四角形の位置と次元は <xref:System.Double> 値によって記述されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-337">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="2cfc3-338"><xref:System.Double> 値は、操作時に精度が失われる可能性があるため、論理的に等しい2つの値の比較は失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-338">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
 <span data-ttu-id="2cfc3-339">この演算子の同等のメソッドは <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2cfc3-339">The equivalent method for this operator is <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="2cfc3-340">次の例では、<xref:System.Windows.Rect.op_Inequality%2A> 演算子を使用して、2つの四角形が正確に等しくないかどうかを判断する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-340">The following example shows how to use the <xref:System.Windows.Rect.op_Inequality%2A> operator to determine if two rectangles are not exactly equal.</span></span>  
  
 [!code-csharp[RectExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[RectExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RectExamples_snip/visualbasic/rectexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="2cfc3-341">"x, y, width, height" の形式の四角形の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-341">The string representation of the rectangle, in the form "x, y, width, height".</span></span></param>
        <summary><span data-ttu-id="2cfc3-342">指定した文字列形式から新しい四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-342">Creates a new rectangle from the specified string representation.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-343">結果として得られる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-343">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-344">次の例では、<xref:System.Windows.Rect.Parse%2A> メソッドを使用して、四角形の文字列形式を <xref:System.Windows.Rect> 構造体に変換する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-344">The following example shows how to use the <xref:System.Windows.Rect.Parse%2A> method to convert a string representation of a rectangle into a <xref:System.Windows.Rect> structure.</span></span>  
  
 [!code-csharp[RectExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#parseexample)]
 [!code-vb[RectExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RectExamples_snip/visualbasic/rectexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public double Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Right { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : double" Usage="System.Windows.Rect.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-345">四角形の右辺の x 軸の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-345">Gets the x-axis value of the right side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-346">四角形の右辺の x 軸の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-346">The x-axis value of the right side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-347">四角形の右側の x 軸の値は、<xref:System.Windows.Rect.X%2A> プロパティと <xref:System.Windows.Rect.Width%2A> プロパティの合計と同じになります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-347">The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-348">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-348">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-349">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-349">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float64 scaleX, float64 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (scaleX As Double, scaleY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(double scaleX, double scaleY);" />
      <MemberSignature Language="F#" Value="member this.Scale : double * double -&gt; unit" Usage="rect.Scale (scaleX, scaleY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX"><span data-ttu-id="2cfc3-350">x 方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-350">The scale factor in the x-direction.</span></span></param>
        <param name="scaleY"><span data-ttu-id="2cfc3-351">y 方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-351">The scale factor in the y-direction.</span></span></param>
        <summary><span data-ttu-id="2cfc3-352">現在の四角形のサイズと指定した x および y の値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-352">Multiplies the size of the current rectangle by the specified x and y values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-353">次の例では、<xref:System.Windows.Rect.Scale%2A> メソッドを使用して、四角形の幅と高さを指定した量だけ乗算する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-353">The following example shows how to use the <xref:System.Windows.Rect.Scale%2A> method to multiply the width and height of a rectangle by the specified amount.</span></span>  
  
 [!code-csharp[RectExamples_snip#ScaleExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#scaleexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Inflate(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Windows.Size with get, set" Usage="System.Windows.Rect.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-354">四角形の幅および高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-354">Gets or sets the width and height of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-355">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-355">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-356">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-356">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-357">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-357">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-358">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-358">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-359"><see cref="P:System.Windows.Rect.Size" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-359"><see cref="P:System.Windows.Rect.Size" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IFormattable.ToString : string * IFormatProvider -&gt; string&#xA;override this.System.IFormattable.ToString : string * IFormatProvider -&gt; string" Usage="rect.System.IFormattable.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2cfc3-360">使用する書式です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-360">The format to use.</span></span>  
  
<span data-ttu-id="2cfc3-361">または</span><span class="sxs-lookup"><span data-stu-id="2cfc3-361">-or-</span></span> 
<span data-ttu-id="2cfc3-362"><see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の形式を使用するには null 参照 (Visual Basic では<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-362">A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="2cfc3-363">値の書式設定に使用するプロバイダーです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-363">The provider to use to format the value.</span></span>  
  
<span data-ttu-id="2cfc3-364">または</span><span class="sxs-lookup"><span data-stu-id="2cfc3-364">-or-</span></span> 
<span data-ttu-id="2cfc3-365">オペレーティング システムの現在のロケール設定から数値形式の情報を取得するための null 参照 (Visual Basic では <see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-365">A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="2cfc3-366">指定した書式を使用して現在のインスタンスの値を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-366">Formats the value of the current instance using the specified format.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-367">四角形の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-367">A string representation of the rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-368">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-368">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2cfc3-369">これは、<xref:System.Windows.Rect> のインスタンスが <xref:System.IFormattable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-369">It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Top" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Top : double" Usage="System.Windows.Rect.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-370">四角形の上辺の y 軸の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-370">Gets the y-axis position of the top of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-371">四角形の上辺の y 軸の位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-371">The y-axis position of the top of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-372">このプロパティを取得することは、<xref:System.Windows.Rect.Y%2A> プロパティを取得することと同じです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-372">Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-373">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-373">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-374">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-374">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.Y" />
      </Docs>
    </Member>
    <Member MemberName="TopLeft">
      <MemberSignature Language="C#" Value="public System.Windows.Point TopLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point TopLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.TopLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopLeft As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point TopLeft { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.TopLeft : System.Windows.Point" Usage="System.Windows.Rect.TopLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-375">四角形の左上隅の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-375">Gets the position of the top-left corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-376">四角形の左上隅の位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-376">The position of the top-left corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-377">四角形の左上隅の位置は、(<xref:System.Windows.Rect.X%2A>、<xref:System.Windows.Rect.Y%2A>) と同じになります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-377">The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-378">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-378">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-379">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-379">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopRight">
      <MemberSignature Language="C#" Value="public System.Windows.Point TopRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point TopRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.TopRight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopRight As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point TopRight { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.TopRight : System.Windows.Point" Usage="System.Windows.Rect.TopRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-380">四角形の右上隅の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-380">Gets the position of the top-right corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-381">四角形の右上隅の位置。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-381">The position of the top-right corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-382">四角形の右上隅の位置は、(<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>、<xref:System.Windows.Rect.Y%2A>) と同じです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-382">The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-383">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-383">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-384">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-384">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-385">四角形の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-385">Returns a string representation of the rectangle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="rect.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cfc3-386">四角形の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-386">Returns a string representation of the rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-387">現在の四角形の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-387">A string representation of the current rectangle.</span></span> <span data-ttu-id="2cfc3-388">文字列は、"<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />" の形式になります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-388">The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-389">次の例は、<xref:System.Windows.Rect.ToString> メソッドを使用して、<xref:System.Windows.Rect> 構造体の文字列表現を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-389">The following example shows how to use the <xref:System.Windows.Rect.ToString> method to get a string representation of a <xref:System.Windows.Rect> structure.</span></span>  
  
 [!code-csharp[RectExamples_snip#ToStringExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#tostringexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="rect.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="2cfc3-390">カルチャ固有の書式設定情報。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-390">Culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="2cfc3-391">指定した書式プロバイダーを使用して、四角形の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-391">Returns a string representation of the rectangle by using the specified format provider.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-392">指定した書式プロバイダーにより決定される現在の四角形の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-392">A string representation of the current rectangle that is determined by the specified format provider.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-393">指定した行列を使用して四角形を変換します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-393">Transforms a rectangle by using the specified matrix.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (matrix As Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Media.Matrix -&gt; unit" Usage="rect.Transform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix"><span data-ttu-id="2cfc3-394">適用する変換を指定する行列。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-394">A matrix that specifies the transformation to apply.</span></span></param>
        <summary><span data-ttu-id="2cfc3-395">指定した行列を適用して四角形を変換します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-395">Transforms the rectangle by applying the specified matrix.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-396">次の例では、<xref:System.Windows.Rect.Transform%28System.Windows.Media.Matrix%29> メソッドを使用して、<xref:System.Windows.Media.Matrix>を使用して <xref:System.Windows.Rect> 構造体を変換する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-396">The following example shows how to use the <xref:System.Windows.Rect.Transform%28System.Windows.Media.Matrix%29> method to transform a <xref:System.Windows.Rect> structure by using a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[RectExamples_snip#TransformExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#transformexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Transform(valuetype System.Windows.Rect rect, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Transform (rect As Rect, matrix As Matrix) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Transform(System::Windows::Rect rect, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Windows.Rect * System.Windows.Media.Matrix -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Transform (rect, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-397">変換の基盤となる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-397">A rectangle that is the basis for the transformation.</span></span></param>
        <param name="matrix"><span data-ttu-id="2cfc3-398">適用する変換を指定する行列。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-398">A matrix that specifies the transformation to apply.</span></span></param>
        <summary><span data-ttu-id="2cfc3-399">指定した四角形に指定した行列を適用した四角形を返します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-399">Returns the rectangle that results from applying the specified matrix to the specified rectangle.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-400">操作の結果生成される四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-400">The rectangle that results from the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-401">次の例では、<xref:System.Windows.Rect.Transform%28System.Windows.Rect%2CSystem.Windows.Media.Matrix%29> メソッドを使用して、既存の四角形に <xref:System.Windows.Media.Matrix> を適用した結果として得られる新しい <xref:System.Windows.Rect> 構造体を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-401">The following example shows how to use the <xref:System.Windows.Rect.Transform%28System.Windows.Rect%2CSystem.Windows.Media.Matrix%29> method to create a new <xref:System.Windows.Rect> structure that results from applying a <xref:System.Windows.Media.Matrix> to an existing rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#TransformExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#transformexample2_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cfc3-402">指定した四角形と、指定した点または 2 つ目の四角形をちょうど格納できる大きさの四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-402">Creates a rectangle that is exactly large enough to contain a given rectangle and a specified point or second rectangle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Union (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Union(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Windows.Point -&gt; unit" Usage="rect.Union point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="2cfc3-403">格納対象の点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-403">The point to include.</span></span></param>
        <summary><span data-ttu-id="2cfc3-404">指定した点をちょうど格納できる大きさになるように、現在の四角形を拡大します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-404">Expands the current rectangle exactly enough to contain the specified point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-405">次の例は、<xref:System.Windows.Rect.Union%28System.Windows.Point%29> メソッドを使用して、特定の <xref:System.Windows.Point>を格納するのに十分な大きさの現在の四角形を展開する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-405">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Point%29> method to expand the current rectangle exactly enough to contain a given <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Union (rect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Union(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Windows.Rect -&gt; unit" Usage="rect.Union rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-406">格納する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-406">The rectangle to include.</span></span></param>
        <summary><span data-ttu-id="2cfc3-407">指定した四角形をちょうど格納できる大きさになるように、現在の四角形を拡大します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-407">Expands the current rectangle exactly enough to contain the specified rectangle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-408">次の例では、<xref:System.Windows.Rect.Union%28System.Windows.Rect%29> メソッドを使用して、指定された四角形を格納するのに十分な大きさの現在の四角形を展開する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-408">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Rect%29> method to expand the current rectangle exactly enough to contain the specified rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Union(valuetype System.Windows.Rect rect, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Union (rect As Rect, point As Point) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Union(System::Windows::Rect rect, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Union : System.Windows.Rect * System.Windows.Point -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Union (rect, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="2cfc3-409">格納する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-409">The rectangle to include.</span></span></param>
        <param name="point"><span data-ttu-id="2cfc3-410">格納対象の点。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-410">The point to include.</span></span></param>
        <summary><span data-ttu-id="2cfc3-411">指定した四角形と指定した点をちょうど格納できる大きさの四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-411">Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-412">指定した四角形と指定した点をちょうど格納できる大きさの四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-412">A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-413">次の例では、<xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Point%29> メソッドを使用して、特定の四角形と特定の <xref:System.Windows.Point>を格納するのに十分な大きさの四角形を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-413">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Point%29> method to create a rectangle that is exactly large enough to contain a given rectangle and a given <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Union(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Union (rect1 As Rect, rect2 As Rect) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Union(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member Union : System.Windows.Rect * System.Windows.Rect -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Union (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="2cfc3-414">最初に格納する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-414">The first rectangle to include.</span></span></param>
        <param name="rect2"><span data-ttu-id="2cfc3-415">2 番目に格納する四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-415">The second rectangle to include.</span></span></param>
        <summary><span data-ttu-id="2cfc3-416">指定した 2 つの四角形をちょうど格納できる大きさの四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-416">Creates a rectangle that is exactly large enough to contain the two specified rectangles.</span></span></summary>
        <returns><span data-ttu-id="2cfc3-417">結果として得られる四角形。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-417">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cfc3-418">次の例は、<xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Rect%29> メソッドを使用して、指定された2つの四角形をちょうど格納できる大きさの四角形を作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-418">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Rect%29> method to create a rectangle that is exactly large enough to contain two given rectangles.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.Rect.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-419">四角形の幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-419">Gets or sets the width of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-420">四角形の幅を表す正の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-420">A positive number that represents the width of the rectangle.</span></span> <span data-ttu-id="2cfc3-421">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-421">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-422"><xref:System.Windows.Rect.Empty%2A> 四角形には <xref:System.Double.NegativeInfinity>の <xref:System.Windows.Rect.Width%2A> があります。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-422">The <xref:System.Windows.Rect.Empty%2A> rectangle has a <xref:System.Windows.Rect.Width%2A> of <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="2cfc3-423"><xref:System.Windows.Rect.Empty%2A> 四角形は読み取り専用です。<xref:System.Windows.Rect.Width%2A> を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-423">The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its <xref:System.Windows.Rect.Width%2A> cannot not be changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-424">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-424">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-425">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-425">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-426">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-426">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cfc3-427"><see cref="P:System.Windows.Rect.Width" /> に負の数が設定されています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-427"><see cref="P:System.Windows.Rect.Width" /> is set to a negative value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-428"><see cref="P:System.Windows.Rect.Width" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-428"><see cref="P:System.Windows.Rect.Width" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.Height" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Rect.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-429">四角形の左辺の x 軸の値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-429">Gets or sets the x-axis value of the left side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-430">四角形の左辺の x 軸の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-430">The x-axis value of the left side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-431">このプロパティを取得することは、<xref:System.Windows.Rect.Left%2A> プロパティを取得することと同じです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-431">Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-432">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-432">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-433">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-433">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-434">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-434">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-435"><see cref="P:System.Windows.Rect.X" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-435"><see cref="P:System.Windows.Rect.X" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Rect.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cfc3-436">四角形の上辺の y 軸の値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-436">Gets or sets the y-axis value of the top side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="2cfc3-437">四角形の上辺の y 軸の値。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-437">The y-axis value of the top side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cfc3-438">このプロパティを取得することは、<xref:System.Windows.Rect.Top%2A> プロパティを取得することと同じです。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-438">Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cfc3-439">次の例は、<xref:System.Windows.Rect> 構造体を使用して、XAML を使用して四角形のサイズと位置を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-439">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="2cfc3-440">次の例は、コードを使用して四角形を作成し、ページに追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-440">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="2cfc3-441">また、この例では、新しい四角形のサイズと座標に関する情報を検索し、その情報を四角形の下の <xref:System.Windows.Controls.TextBox> に表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-441">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2cfc3-442"><see cref="P:System.Windows.Rect.Y" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cfc3-442"><see cref="P:System.Windows.Rect.Y" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.X" />
      </Docs>
    </Member>
  </Members>
</Type>
