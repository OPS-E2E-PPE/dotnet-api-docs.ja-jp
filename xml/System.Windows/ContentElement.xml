<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13c11e2447a85bdb363c01626c8eb29c10a2e7d5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75179877" /></Metadata><TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type ContentElement = class&#xA;    inherit DependencyObject&#xA;    interface IInputElement&#xA;    interface IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0e8b4-101">コンテンツ要素に WPF コア レベルの基底クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-101">Provides a WPF core-level base class for content elements.</span></span> <span data-ttu-id="0e8b4-102">コンテンツ要素は、直感的なマークアップ指向レイアウト モデルと、意図的に単純なオブジェクト モデルを使用し、フロー スタイル プレゼンテーション用に設計されています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-102">Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-103"><xref:System.Windows.ContentElement> は、次の一般的なコンテンツ特性を定義します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-103"><xref:System.Windows.ContentElement> defines the following common content characteristics:</span></span>  
  
-   <span data-ttu-id="0e8b4-104">入力: すべての <xref:System.Windows.ContentElement> 派生クラスは、キーボード、マウス、ドラッグアンドドロップ操作、スタイラスコントロール、およびアクセラレータからの基本的な入力キャプチャをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-104">Input: All <xref:System.Windows.ContentElement> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.</span></span>  
  
-   <span data-ttu-id="0e8b4-105">フォーカス: すべての <xref:System.Windows.ContentElement> 派生クラスがフォーカスできる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-105">Focus: All <xref:System.Windows.ContentElement> derived classes are potentially focusable.</span></span> <span data-ttu-id="0e8b4-106">(ただし、<xref:System.Windows.ContentElement> 基底クラスの既定のフォーカスが設定された状態は `false`です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-106">(However, the default focusable state for the <xref:System.Windows.ContentElement> base class is `false`.</span></span> <span data-ttu-id="0e8b4-107"><xref:System.Windows.ContentElement> にフォーカスを設定する方法の詳細については、「<xref:System.Windows.ContentElement.Focusable%2A>」を参照してください。)また、このクラスには、関連する要素間でフォーカスを走査するために使用できる Api が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-107">For details on how to make a <xref:System.Windows.ContentElement> focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains APIs that you can use for traversing the focus across related elements.</span></span>  
  
-   <span data-ttu-id="0e8b4-108">イベント: <xref:System.Windows.ContentElement> には、入力とフォーカスに関連するイベントが含まれます。また、状態の変更に関するイベントも含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-108">Events: <xref:System.Windows.ContentElement> includes events that are related to input and focus; it also includes events for changes in state.</span></span> <span data-ttu-id="0e8b4-109">多くの場合、<xref:System.Windows.ContentElement> イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-109">In many cases, the <xref:System.Windows.ContentElement> events are routed events.</span></span> <span data-ttu-id="0e8b4-110">場合によっては、ルーティングイベントにトンネリングとバブルルーティングの両方の方法があり、同じ状態または条件に応じて個別のイベントとして発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-110">In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.</span></span> <span data-ttu-id="0e8b4-111">また、<xref:System.Windows.ContentElement> では、ルーティングイベントを発生させることができ、イベントに対してハンドラーを追加または削除できる Api を定義します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-111">Also, <xref:System.Windows.ContentElement> defines APIs that can raise routed events and that can add or remove handlers to events.</span></span>  
  
 <span data-ttu-id="0e8b4-112"><xref:System.Windows.ContentElement> は、<xref:System.Windows.UIElement>と多くの共通 Api を共有します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-112"><xref:System.Windows.ContentElement> shares many common APIs with <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="0e8b4-113">これらの共通 Api は、共有クラスの継承からは取得されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-113">These common APIs do not come from a shared class inheritance.</span></span> <span data-ttu-id="0e8b4-114">ただし、共通の名前付け、類似した動作、および各クラスの Api の類似した内部実装を共有します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-114">But they do share common naming, similar behavior, and similar internal implementation of APIs in each class.</span></span> <span data-ttu-id="0e8b4-115">類似性は、<xref:System.Windows.ContentElement> と <xref:System.Windows.UIElement> が要素ベースである各クラスであるためです。ただし、それぞれのマークアップオブジェクトモデルの動作にはそれぞれ異なる意図があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-115">The similarity is because <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior.</span></span>  
  
 <span data-ttu-id="0e8b4-116">特に、<xref:System.Windows.UIElement> は <xref:System.Windows.Media.Visual>から降下します。これは、複合ウィンドウ内の四角形領域に <xref:System.Windows.ContentElement> を表示するための下位レベルのグラフィックスをサポートしています。 <xref:System.Windows.ContentElement> 一方、フローや折り返しなど、ドキュメントのシナリオに共通する概念がサポートされるようになります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-116">In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.</span></span> <span data-ttu-id="0e8b4-117">これらの2つの関連するクラスは、共通のインターフェイス <xref:System.Windows.IInputElement> および <xref:System.Windows.Media.Animation.IAnimatable>も実装しています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-117">These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>.</span></span>  

 ## <a name="notes-to-inheritors"></a><span data-ttu-id="0e8b4-118">継承に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0e8b4-118">Notes to inheritors</span></span>

 <span data-ttu-id="0e8b4-119"><xref:System.Windows.ContentElement> クラスは、フロー形式プレゼンテーションの完全なコンテンツ要素のすべての側面をまだ定義していません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-119">The <xref:System.Windows.ContentElement> class does not yet define all aspects of a complete content element for flow-style presentation.</span></span> <span data-ttu-id="0e8b4-120"><xref:System.Windows.FrameworkContentElement> は、<xref:System.Windows.ContentElement>のすぐに派生したクラスです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-120"><xref:System.Windows.FrameworkContentElement> is an immediately derived class of <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="0e8b4-121"><xref:System.Windows.FrameworkContentElement> には、コンテンツホスト内の <xref:System.Windows.FrameworkContentElement> の表示と、WPF フレームワークレベルレイアウトシステムの使用をサポートする追加メンバーの完全なセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-121"><xref:System.Windows.FrameworkContentElement> includes a more complete set of additional members that support rendering a <xref:System.Windows.FrameworkContentElement> within a content host and using the WPF framework-level layout system.</span></span>

 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-122"><see cref="T:System.Windows.ContentElement" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-122">Initializes a new instance of the <see cref="T:System.Windows.ContentElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e8b4-123">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-123">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="0e8b4-124">ハンドルするルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-124">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="0e8b4-125">ハンドラーの実装に対する参照。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-125">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="0e8b4-126">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-126">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-127">同じイベントに対して、例外を発生させることなく同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-127">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="0e8b4-128">ただし、ハンドラーは実際にはイベントが処理されるときに複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-128">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="0e8b4-129">そのため、この動作がハンドラーの実装で考慮する必要がある副作用について考えてみてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-129">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-130">通常、このメソッドを使用して、カスタムルーティングイベントの [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] イベントアクセスパターン用の "add" アクセサーの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-130">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="0e8b4-131">ハンドルするルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-131">An identifier for the.routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="0e8b4-132">ハンドラーの実装に対する参照。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-132">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="0e8b4-133">イベント データ内でルーティング イベントがハンドル済みとしてマークされている場合でも呼び出されるようにハンドラーを登録するには <see langword="true" />。ルーティング イベントが既にハンドル済みとしてマークされている場合はハンドラーを呼び出ないという既定の条件を使用してハンドラーを登録する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-133"><see langword="true" /> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="0e8b4-134">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-134">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="0e8b4-135">ルーティング イベントの再処理を機械的に要求しないでください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-135">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="0e8b4-136">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="0e8b4-137">イベント ルート上の別の要素により既にハンドル済みとしてマークされているルーティング イベントに対し、指定したハンドラーが呼び出されるようにするには、<paramref name="handledEventsToo" /> を <see langword="true" /> に指定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-137">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-138">低レベルの入力イベントを実用的な方法で処理することは、複雑なタスクです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-138">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="0e8b4-139">多くのコントロールは、特定のイベントが処理済みとしてマークされている動作を実装し、別の直感的なイベントに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-139">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="0e8b4-140">一般に、コントロールは、そのための設計目的がある場合にのみ、プラットフォーム入力イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-140">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="0e8b4-141">特定のシナリオでは、これらの設計の意図が、入力イベントの特定の処理に必要なものではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-141">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="0e8b4-142">これらのシナリオでは、`true` のように `handledEventsToo` にハンドラーを登録することが適切です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-142">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="0e8b4-143">ただし、この作業は定期的に行うべきではありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-143">But you should not do this routinely.</span></span> <span data-ttu-id="0e8b4-144">処理された場合でも、すべてのイベントに応答してハンドラーを呼び出すと、独自のアプリケーションイベント処理ロジックが複雑になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-144">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="0e8b4-145">ハンドラーのロジックが大きくなると、パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-145">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="0e8b4-146">開発プロセス中に、アプリケーションロジックで処理するイベントを処理する必要がある場合は、既に処理されているイベントのハンドラーのアタッチを予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-146">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="0e8b4-147">特定のイベント制御の組み合わせのクラス処理動作を回避するためのもう1つの方法は、そのイベントのプレビューを使用することです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-147">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="0e8b4-148">たとえば、<xref:System.Windows.ContentElement.MouseLeftButtonDown> がクラス処理によって処理済みとしてマークされている場合は、代わりに <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> のハンドラーを追加できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-148">For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="0e8b4-149">同じイベントに対して、例外を発生させることなく同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-149">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="0e8b4-150">ただし、ハンドラーは実際にはイベントが処理されるときに複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-150">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="0e8b4-151">そのため、この動作がハンドラーの実装で考慮する必要がある副作用について考えてみてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-151">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-152">通常、このメソッドを使用して、カスタムルーティングイベントの [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] イベントアクセスパターン用の "add" アクセサーの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-152">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-153">次の例では、`handledEventsToo` `true`を使用して、定義されたハンドラーをページ上のいずれかの名前付き要素にアタッチするページで <xref:System.Windows.FrameworkElement.Initialized> イベントに対して呼び出されるハンドラーを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-153">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="0e8b4-154">このハンドラーは、ルート上の別の要素が、ルートの処理要素に到達する前に、処理された共有イベントデータをマークした場合でも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-154">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="0e8b4-155">ハンドラーの追加先のイベント ルート。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-155">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="0e8b4-156">ハンドラーを追加するために使用されるイベント データ。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-156">The event data that is used to add the handlers.</span></span> <span data-ttu-id="0e8b4-157">このメソッドは、引数の <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティを使用してハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-157">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the arguments to create the handlers.</span></span></param>
        <summary><span data-ttu-id="0e8b4-158">現在の <see cref="T:System.Windows.EventRoute" /> イベント ハンドラー コレクションのハンドラーを、指定した <see cref="T:System.Windows.ContentElement" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-158">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.ContentElement" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-159">コンテンツホストの子要素のハンドラーをホスト <xref:System.Windows.EventRoute>に追加するために、<xref:System.Windows.IContentHost>を実装するかどうかに関係なく、このメソッドをコンテンツホスト要素に使用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-159">Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.ContentElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-160">この要素をドラッグ アンド ドロップ操作の対象として使用できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-160">Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</span></span></summary>
        <value><span data-ttu-id="0e8b4-161">この要素をドラッグアンドドロップ操作の対象として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-161"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-162">既定値は <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-162">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-163">ドラッグアンドドロップ操作は、既定では有効になっていません。 <xref:System.Windows.ContentElement.AllowDrop%2A> を `true`に設定して、意図的に有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-163">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.ContentElement.AllowDrop%2A> to  `true`.</span></span> <span data-ttu-id="0e8b4-164">この基本設定以外に、ドラッグアンドドロップ動作は完全に実装固有であり、<xref:System.Windows.ContentElement> またはその他の基本要素クラスでは定義されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-164">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class.</span></span> <span data-ttu-id="0e8b4-165">たとえば、<xref:System.Windows.Controls.RichTextBox>などの特定のコントロールには既定の動作がありますが、このような動作を持つ <xref:System.Windows.ContentElement> 派生クラスはありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-165">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior.</span></span> <span data-ttu-id="0e8b4-166">ドラッグアンドドロップの詳細については、「[ドラッグアンドドロップの概要](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-166">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="0e8b4-167"><xref:System.Windows.FrameworkContentElement> は、この依存関係プロパティのメタデータを実装でオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-167"><xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="0e8b4-168">具体的には、<xref:System.Windows.FrameworkContentElement> は、このプロパティがプロパティ値の継承を許可することを指定します (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> はメタデータで `true` ます)。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-168">Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="0e8b4-169">このコンテキストでのプロパティ値の継承では、ローカル値またはスタイルによって割り当てられた <xref:System.Windows.ContentElement.AllowDrop%2A> の他の値を持たない子要素がある場合、この値が割り当てられている最も近い親要素の値 (スタイル、既定値、またはローカル値) が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-169">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.ContentElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="0e8b4-170">つまり、ルート要素で drop 操作を許可するかどうかを指定し、その値を `false`の値に明示的に割り当てていないすべての <xref:System.Windows.FrameworkContentElement> 子要素に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-170">This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-171">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-171">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-172">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-172">Identifier field</span></span>|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|<span data-ttu-id="0e8b4-173">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-173">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-174">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-174">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-175">次の例では、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]で <xref:System.Windows.ContentElement.AllowDrop%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-175">The following example sets <xref:System.Windows.ContentElement.AllowDrop%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-176"><see cref="P:System.Windows.ContentElement.AllowDrop" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-176">Identifies the <see cref="P:System.Windows.ContentElement.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e8b4-177">この要素の指定した依存関係プロパティにアニメーションを適用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-177">Applies an animation to a specified dependency property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="0e8b4-178">アニメーション化するプロパティの識別子。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-178">The identifier for the property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="0e8b4-179">アニメーションをコントロールして宣言するアニメーション クロック。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-179">The animation clock that controls and declares the animation.</span></span></param>
        <summary><span data-ttu-id="0e8b4-180">この要素の指定した依存関係プロパティにアニメーションを適用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-180">Applies an animation to a specified dependency property on this element.</span></span> <span data-ttu-id="0e8b4-181">既存のアニメーションは停止され、新しいアニメーションに置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-181">Any existing animations are stopped and replaced with the new animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-182">プロパティからアニメーションを削除するには、そのプロパティの識別子を `dp` として指定し、`clock` を `null`として指定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-182">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="0e8b4-183">これにより、アニメーションが削除され、アニメーション化されたプロパティがその基本値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-183">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="0e8b4-184">ただし、最初に関連付けられたアニメーションクロックは停止しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-184">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="0e8b4-185">その時計に割り当てられているその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-185">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="0e8b4-186">アニメーション化するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-186">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="0e8b4-187">アニメーションをコントロールして宣言するアニメーション クロック。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-187">The animation clock that controls and declares the animation.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="0e8b4-188">列挙体の値。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-188">A value of the enumeration.</span></span> <span data-ttu-id="0e8b4-189">既定値は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> で、既存のアニメーションを停止して新しいアニメーションに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-189">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span></span></param>
        <summary><span data-ttu-id="0e8b4-190">この要素の指定した依存関係プロパティにアニメーションを適用し、プロパティでアニメーションが既に適用されているときに行われる処理を指定する機能も提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-190">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-191">プロパティからアニメーションを削除するには、そのプロパティの識別子を `dp` として指定し、`clock` を `null`として指定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-191">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="0e8b4-192">これにより、アニメーションが削除され、アニメーション化されたプロパティがその基本値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-192">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="0e8b4-193">ただし、最初に関連付けられたアニメーションクロックは停止しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-193">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="0e8b4-194">その時計に割り当てられているその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-194">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-195">少なくとも 1 つのタッチがこの要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-195">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-196">少なくとも 1 つのタッチがこの要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-196"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-197"><see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-197">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-198">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-198">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="0e8b4-199">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-199"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-200"><see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-200">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-201">少なくとも 1 つのタッチがこの要素上で押されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-201">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-202">少なくとも 1 つのタッチがこの要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-202"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-203"><see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-203">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-204">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-204">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="0e8b4-205">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-205"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-206"><see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-206">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e8b4-207">この要素のアニメーション化対象のプロパティを指定して、アニメーションを開始します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-207">Starts an animation for a specified animated property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="0e8b4-208">依存関係プロパティの識別子として指定された、アニメーション化するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-208">The property to animate, which is specified as a dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="0e8b4-209">開始するアニメーションのタイムライン。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-209">The timeline of the animation to start.</span></span></param>
        <summary><span data-ttu-id="0e8b4-210">この要素のアニメーション化対象のプロパティを指定して、アニメーションを開始します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-210">Starts an animation for a specified animated property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-211">プロパティがアニメーション化されているかどうかを確認する場合は、アニメーションが開始され、アニメーション化されていない開始点を超える最初のフレームがレンダリングされると、アニメーションがアニメーション化されたと見なされます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-211">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="0e8b4-212">`animation` の <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> が `null`場合、現在のアニメーションはすべて削除され、プロパティの現在の値が保持されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-212">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="0e8b4-213">`animation` 値全体が `null`場合、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-213">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="0e8b4-214">ただし、最初に関連付けられたアニメーションタイムラインは停止しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-214">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="0e8b4-215">そのタイムラインに割り当てられたその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-215">Any other animations assigned to that timeline will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="0e8b4-216">依存関係プロパティの識別子として指定された、アニメーション化するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-216">The property to animate, which is specified as the dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="0e8b4-217">適用されるアニメーションのタイムライン。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-217">The timeline of the animation to be applied.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="0e8b4-218">プロパティ値に既に影響している現在の (実行中の) アニメーションと新しいアニメーションが対話する方法を指定する列挙値。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-218">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="0e8b4-219">この要素のアニメーション化対象のプロパティを指定して、特定のアニメーションを開始します。プロパティの既存のアニメーションが実行中である場合の動作も指定できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-219">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-220">プロパティがアニメーション化されているかどうかを確認する場合は、アニメーションが開始され、アニメーション化されていない開始点を超える最初のフレームがレンダリングされると、アニメーションがアニメーション化されたと見なされます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-220">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="0e8b4-221">`animation` の <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> が `null`場合、現在のアニメーションはすべて削除され、プロパティの現在の値が保持されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-221">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="0e8b4-222">`animation` 値全体が `null`場合、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-222">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="0e8b4-223">ただし、最初に関連付けられたアニメーションタイムラインは停止しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-223">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="0e8b4-224">そのタイムラインに割り当てられたその他のアニメーションは、引き続き実行されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-224">Any other animations assigned to that timeline will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="contentElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-225">この要素にマウスをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-225">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-226">マウスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-226"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-227">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-227">To be captured, an element must be enabled.</span></span> <span data-ttu-id="0e8b4-228"><xref:System.Windows.ContentElement.CaptureMouse%2A>を呼び出す前に <xref:System.Windows.ContentElement.IsEnabled%2A> が `true` かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-228">Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.ContentElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="0e8b4-229"><xref:System.Windows.ContentElement.CaptureMouse%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.ContentElement.IsMouseCaptured%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-229">If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.ContentElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="0e8b4-230"><xref:System.Windows.ContentElement.CaptureMouse%2A> を呼び出すと `true`が返された場合、<xref:System.Windows.ContentElement.GotMouseCapture> および <xref:System.Windows.ContentElement.IsMouseCapturedChanged> イベントが発生し、<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> メソッドが呼び出された要素として報告されたイベントデータが <xref:System.Windows.ContentElement.CaptureMouse%2A> されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-230">If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.ContentElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="0e8b4-231">キャプチャを強制的に実行すると、既存のキャプチャに干渉する可能性があります。特に、ドラッグアンドドロップに関連するキャプチャがマウスで発生する場合です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-231">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="0e8b4-232">すべての要素からマウスキャプチャをクリアするには、`null`として指定された `element` パラメーターを使用して <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-232">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-233">次の例では、マウスが要素によって既にキャプチャされているかどうかに基づいて、キャプチャをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-233">The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element.</span></span> <span data-ttu-id="0e8b4-234">この例では、想定されるキャプチャターゲット要素が <xref:System.Windows.IInputElement> インターフェイスにキャストされるため、最初に <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-234">Note that this example casts the prospective capture target element to the <xref:System.Windows.IInputElement> interface, and is thus initially calling the <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0e8b4-235"><xref:System.Windows.IInputElement> へのキャストは、マウスをキャプチャする要素が <xref:System.Windows.UIElement> であるか <xref:System.Windows.ContentElement>であるかわからない場合に役立つ手法です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-235">Casting to <xref:System.Windows.IInputElement> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <xref:System.Windows.UIElement> or a <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="0e8b4-236">インターフェイスのキャストとインターフェイスメソッドの呼び出しでは、<xref:System.Windows.UIElement> または <xref:System.Windows.ContentElement>のいずれかに評価版をキャストしなくても、適切な型固有の CaptureMouse 実装が内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-236">The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="0e8b4-237">この同じキャスト手法は、入力関連のイベントの多くや、その他の入力関連のメソッドなど、<xref:System.Windows.IInputElement> によって定義される他のメンバーでも機能します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-237">This same casting technique works for other members that <xref:System.Windows.IInputElement> defines, for instance many of the input-related events, and other input-related methods.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="contentElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-238">この要素にスタイラスをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-238">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-239">スタイラスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-239"><see langword="true" /> if the stylus is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-240">基になる既定のスタイラスデバイスに基づく既定の実装では、常に `true`が返されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-240">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="0e8b4-241">ただし、入力システムのデバイスの実装を提供する入力デバイスを拡張する場合は、異なる結果を返す可能性がある別のスタイラスデバイスの実装でシステムを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-241">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="0e8b4-242">要素は、スタイラスをキャプチャすると、スタイラスが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-242">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="0e8b4-243">スタイラスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-243">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="0e8b4-244">このメソッドを呼び出すと、基になる静的 <xref:System.Windows.Input.Stylus> メソッド <xref:System.Windows.Input.Stylus.Capture%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-244">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="0e8b4-245">実際のキャプチャ動作は、アクティブなスタイラスデバイス実装によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-245">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-246">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-246">To be captured, an element must be enabled.</span></span> <span data-ttu-id="0e8b4-247"><xref:System.Windows.ContentElement.CaptureStylus%2A>を呼び出す前に <xref:System.Windows.ContentElement.IsEnabled%2A> が返さ `true` かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-247">Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.ContentElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="0e8b4-248"><xref:System.Windows.ContentElement.CaptureStylus%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.ContentElement.IsStylusCaptured%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-248">If calling <xref:System.Windows.ContentElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="0e8b4-249">キャプチャの対象となるデバイス。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-249">The device to capture.</span></span></param>
        <summary><span data-ttu-id="0e8b4-250">この要素にタッチをキャプチャするように強制することを試みます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-250">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-251">指定したタッチがこの要素にキャプチャされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-251"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-252"><xref:System.Windows.Input.TouchDevice> が現在別の要素にキャプチャされている場合、<xref:System.Windows.ContentElement.CaptureTouch%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-252"><xref:System.Windows.ContentElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="0e8b4-253"><xref:System.Windows.ContentElement.CaptureTouch%2A> が `true`を返す場合、<xref:System.Windows.ContentElement.GotTouchCapture> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-253">If <xref:System.Windows.ContentElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="0e8b4-254">この要素から1つのタッチのキャプチャを解放するには、<xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> メソッドを使用して、解放するタッチデバイスを指定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-254">To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="0e8b4-255">この要素からのすべてのタッチを解放するには、<xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-255">To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0e8b4-256"><paramref name="touchDevice" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-256"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.ContentElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-257">この要素に関連付けられている <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-257">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects that are associated with this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-258">すべての <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-258">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-259"><xref:System.Windows.Input.CommandBinding> を使用すると、この要素に対する特定のコマンドのコマンド処理を有効にし、コマンド、そのイベント、およびこの要素によってアタッチされるハンドラーとの間のリンケージを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-259">A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.</span></span>  
  
 <span data-ttu-id="0e8b4-260"><xref:System.Windows.ContentElement.CommandBindings%2A> コレクションを設定するための一般的な方法として、<xref:System.Windows.Input.CommandManager> メソッドをプログラムによって使用する方法があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-260">Another typical way to populate the <xref:System.Windows.ContentElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="0e8b4-261">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="0e8b4-261">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="0e8b4-262">XAML の値</span><span class="sxs-lookup"><span data-stu-id="0e8b4-262">XAML Values</span></span>  
 <span data-ttu-id="0e8b4-263">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="0e8b4-263">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="0e8b4-264">1つ以上の <xref:System.Windows.Input.CommandBinding> 要素。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-264">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="0e8b4-265">これらのそれぞれには、既知のコマンドに設定された <xref:System.Windows.Input.CommandBinding.Command%2A> 属性と、<xref:System.Windows.Input.CommandBinding.CanExecute> および <xref:System.Windows.Input.CommandBinding.Executed> ハンドラーの実装に対して設定された属性が必要です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-265">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="0e8b4-266">詳細については、「<xref:System.Windows.Input.CommandBinding>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-266">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-267">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-267">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-268">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-268">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-269"><xref:System.Windows.ContentElement.DragEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-269">Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-270">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-270">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-271">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-271">Identifier field</span></span>|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|<span data-ttu-id="0e8b4-272">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-272">Routing strategy</span></span>|<span data-ttu-id="0e8b4-273">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-273">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-274">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-274">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-275">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewDragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-275">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="0e8b4-276">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnDragEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-276">Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-277"><see cref="E:System.Windows.ContentElement.DragEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-277">Identifies the <see cref="E:System.Windows.ContentElement.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-278">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-278">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-279">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-279">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-280">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-280">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-281">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-281">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-282">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-282">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-283">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-283">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-284">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-284">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-285"><xref:System.Windows.ContentElement.DragLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-285">Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-286">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-286">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-287">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-287">Identifier field</span></span>|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|<span data-ttu-id="0e8b4-288">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-288">Routing strategy</span></span>|<span data-ttu-id="0e8b4-289">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-289">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-290">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-290">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-291">対応するトンネリングイベントは <xref:System.Windows.DragDrop.PreviewDragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-291">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="0e8b4-292">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnDragLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-292">Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-293"><see cref="E:System.Windows.ContentElement.DragLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-293">Identifies the <see cref="E:System.Windows.ContentElement.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-294">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-294">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-295">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-295">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-296">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-296">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-297">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-297">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-298">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-298">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-299">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-299">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-300">このイベントは、要素の境界内でドラッグが発生した場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-300">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="0e8b4-301">ドラッグが境界の外側で開始された後、内を移動すると、このイベントも発生し、<xref:System.Windows.ContentElement.DragEnter> および関連するプレビューイベントも発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-301">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="0e8b4-302">このイベントは、このクラスの <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-302">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-303"><xref:System.Windows.ContentElement.DragOver> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-303">Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-304">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-304">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-305">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-305">Identifier field</span></span>|<xref:System.Windows.ContentElement.DragOverEvent>|  
|<span data-ttu-id="0e8b4-306">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-306">Routing strategy</span></span>|<span data-ttu-id="0e8b4-307">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-307">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-308">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-308">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-309">対応するトンネリングイベントは <xref:System.Windows.DragDrop.PreviewDragOver>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-309">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="0e8b4-310">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnDragOver%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-310">Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-311"><see cref="E:System.Windows.ContentElement.DragOver" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-311">Identifies the <see cref="E:System.Windows.ContentElement.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-312">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-312">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-313">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-313">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-314">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-314">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-315">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-315">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-316">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-316">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-317">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-317">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-318">このイベントは、このクラスの <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-318">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-319"><xref:System.Windows.ContentElement.Drop> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-319">Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-320">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-320">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-321">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-321">Identifier field</span></span>|<xref:System.Windows.ContentElement.DropEvent>|  
|<span data-ttu-id="0e8b4-322">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-322">Routing strategy</span></span>|<span data-ttu-id="0e8b4-323">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-323">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-324">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-324">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-325">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewDrop>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-325">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="0e8b4-326">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnDrop%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-326">Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-327"><see cref="E:System.Windows.ContentElement.Drop" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-327">Identifies the <see cref="E:System.Windows.ContentElement.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-328">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-328">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-329">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-329">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-330">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-330">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-331">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-331">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-332">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-332">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="contentElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-333">この要素にフォーカスを設定することを試みます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-333">Attempts to set focus to this element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-334">キーボード フォーカスをこの要素に設定できなかった場合は <see langword="true" />。このメソッド呼び出しがフォーカスを強制しなかった場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-334"><see langword="true" /> if keyboard focus could be set to this element; <see langword="false" /> if this method call did not force focus.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-335">フォーカスを設定できるようにするには、<xref:System.Windows.ContentElement.Focusable%2A> と <xref:System.Windows.ContentElement.IsEnabled%2A> を両方とも `true`する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-335">To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`.</span></span> <span data-ttu-id="0e8b4-336">既定では、ほとんどすべての <xref:System.Windows.ContentElement> 派生クラスが <xref:System.Windows.ContentElement.Focusable%2A> ないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-336">Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default.</span></span>  
  
 <span data-ttu-id="0e8b4-337">要素がフォーカス可能で有効になっている場合でも、特定のツリー (複合コントロールなど) 内のイベント処理は、フォーカスを許可しないことでプレビューフォーカスイベントに応答する可能性があるため、このメソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-337">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="0e8b4-338">一般に、キーボードフォーカスと論理フォーカスという2つの異なる概念が適用されます。これは、常に同一であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-338">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span> <span data-ttu-id="0e8b4-339">このメソッドは、論理フォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-339">This method sets the logical focus.</span></span> <span data-ttu-id="0e8b4-340">特にキーボードフォーカスを設定するプログラム的な方法はありません。キーボードフォーカスは、ユーザー入力によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-340">There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.</span></span> <span data-ttu-id="0e8b4-341">詳細については、「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」と「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-341">For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="0e8b4-342"><xref:System.Windows.ContentElement.Focus%2A> を呼び出すと `true`が返される場合、<xref:System.Windows.ContentElement.IsKeyboardFocused%2A> と <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> も `true`ます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-342">If calling <xref:System.Windows.ContentElement.Focus%2A> returns `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> and <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="0e8b4-343">関連するプロパティがまだ `true`ていない場合、<xref:System.Windows.ContentElement.Focus%2A>を呼び出すと、次の1つ以上のイベントが次の順序で発生します。 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>、<xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (ソースは新しいフォーカスターゲット)、<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>、<xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>、<xref:System.Windows.ContentElement.LostKeyboardFocus>、<xref:System.Windows.ContentElement.GotKeyboardFocus> (ソースは新しいフォーカスターゲット) です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-343">If the related properties are not already `true`, when you call <xref:System.Windows.ContentElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-344">次の例は、ドキュメント内の指定された名前付き段落を検索し、それにフォーカスを設定するページ読み込みイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-344">The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it.</span></span> <span data-ttu-id="0e8b4-345">既定では、段落はフォーカスを設定できません。この段落にはスタイルが適用されています (表示されません)。スタイル <xref:System.Windows.Setter> を使用して、フォーカスを設定可能にしています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-345">Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <xref:System.Windows.Setter> to make it focusable.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.ContentElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-346">要素がフォーカスを得ることができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-346">Gets or sets a value that indicates whether the element can receive focus.</span></span></summary>
        <value><span data-ttu-id="0e8b4-347">要素がフォーカス可能な場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-347"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-348">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-348">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-349">フォーカスがある要素のみがキーボード入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-349">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="0e8b4-350">特定の派生クラスでは、この依存関係プロパティのメタデータをオーバーライドして、既定で派生クラスにフォーカスを設定できるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-350">Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.</span></span>  
  
 <span data-ttu-id="0e8b4-351"><xref:System.Windows.Documents.Hyperlink> またはその派生クラスによって継承されると、<xref:System.Windows.Documents.Hyperlink> この依存関係プロパティのメタデータをオーバーライドし、このプロパティの既定値を `true`するように再定義します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-351">When inherited by <xref:System.Windows.Documents.Hyperlink> or its derived classes, <xref:System.Windows.Documents.Hyperlink> overrides the metadata for this dependency property and redefines the default value of this property to be `true`.</span></span>  
  
### <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-352">依存関係プロパティの情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-352">Dependency property information</span></span>
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-353">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-353">Identifier field</span></span>|<xref:System.Windows.ContentElement.FocusableProperty>|  
|<span data-ttu-id="0e8b4-354">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-354">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-355">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-355">None</span></span>|  
  
## <a name="notes-to-inheritors"></a><span data-ttu-id="0e8b4-356">継承に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0e8b4-356">Notes to inheritors</span></span>

<span data-ttu-id="0e8b4-357"><xref:System.Windows.ContentElement>から派生する場合は、要素にフォーカスを設定できるようにするかどうかを検討します。既定ではフォーカスを設定できないためです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-357">When you derive from <xref:System.Windows.ContentElement>, consider whether you want your element to be focusable, because by default it will not be focusable.</span></span> <span data-ttu-id="0e8b4-358">要素にフォーカスを設定できるようにするには、次のように、派生クラスの静的コンストラクターでこのプロパティのメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-358">If you want your element to be focusable, override the metadata for this property in your derived class static constructor as follows:</span></span>  

[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
[!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
<span data-ttu-id="0e8b4-359">ここで `myElement` は、メタデータ値をオーバーライドする型のクラス名です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-359">where `myElement` is the class name of the type that you are overriding the metadata value on.</span></span>
  
## Examples  
 <span data-ttu-id="0e8b4-360">次の例では、<xref:System.Windows.Documents.Paragraph> に既定でフォーカスを設定し、フォーカスを受け取ると視覚的な動作を与えるスタイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-360">The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-361"><see cref="P:System.Windows.ContentElement.Focusable" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-361">Occurs when the value of the <see cref="P:System.Windows.ContentElement.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-362">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-362">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-363"><see cref="P:System.Windows.ContentElement.Focusable" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-363">Identifies the <see cref="P:System.Windows.ContentElement.Focusable" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="contentElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="0e8b4-364">確認する依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-364">The.dependency property to check.</span></span></param>
        <summary><span data-ttu-id="0e8b4-365">この要素の、指定したプロパティの基本プロパティ値を返します。実行中または停止済みのアニメーションでアニメーション化される値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-365">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-366">指定した依存関係プロパティにアニメーションが添付されていないような場合のプロパティ値。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-366">The property value as if no animations are attached to the specified dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-367">プロパティにアニメーションがアタッチされていない場合、<xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> 戻り値は常に <xref:System.Windows.DependencyObject.GetValue%2A> 戻り値と同じになります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-367">If no animations are attached to the property, then the <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="0e8b4-368">アニメーションがアタッチされている場合、開始値と停止値を含むすべての可能なアニメーションの派生値は無視され、プロパティ値は他のすべての入力に基づいて決定されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-368">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="0e8b4-369">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-369">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="contentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-370">派生クラスでオーバーライドされると、ビジュアル親が存在しない場合に、この要素の代替[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] の親を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-370">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-371">報告する代替の親接続を派生クラスの実装が持つ場合のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-371">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-372">このメソッドの既定の仮想実装では、`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-372">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="0e8b4-373"><xref:System.Windows.FrameworkContentElement> は、実際の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-373"><xref:System.Windows.FrameworkContentElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-374">イベントのルーティングには、代替の親が使用されます。これにより、要素は、ビジュアルツリーを、標準の親にルーティングするための標準パターンとは別の方法でルーティングされるようにします。ルーティング戦略をプレビューします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-374">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-375">入力システムがこの要素を対象とするドラッグ アンド ドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-375">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-376"><xref:System.Windows.ContentElement.GiveFeedback> イベントを使用すると、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、ドラッグイベントのソースでマウスポインターの外観を変更できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-376">The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="0e8b4-377">視覚的なフィードバックにより、ドラッグアンドドロップ操作が進行中であることが強調されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-377">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="0e8b4-378">このイベントは、このクラスの <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.GiveFeedback> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-378">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-379"><xref:System.Windows.ContentElement.GiveFeedback> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-379">Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-380">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-380">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-381">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-381">Identifier field</span></span>|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|<span data-ttu-id="0e8b4-382">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-382">Routing strategy</span></span>|<span data-ttu-id="0e8b4-383">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-383">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-384">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-384">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="0e8b4-385">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewGiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-385">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="0e8b4-386">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnGiveFeedback%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-386">Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-387"><see cref="E:System.Windows.ContentElement.GiveFeedback" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-387">Identifies the <see cref="E:System.Windows.ContentElement.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-388">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-388">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-389">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-389">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-390">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-390">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-391">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-391">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-392">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-392">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-393">この要素が論理フォーカスを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-393">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-394">メソッド呼び出しを使用してフォーカスが意図的に強制されていても、前のキーボードフォーカスが別のスコープに存在する場合、論理フォーカスはキーボードフォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-394">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="0e8b4-395">このシナリオでは、キーボードフォーカスはそのままで、<xref:System.Windows.ContentElement.Focus%2A> メソッドが呼び出される要素は引き続き論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-395">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="0e8b4-396">このイベントをより正確に解釈することは、ルート内の要素の <xref:System.Windows.ContentElement.IsFocused%2A> プロパティの値が `false` から `true`に変更されたときに発生することです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-396">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="0e8b4-397">このイベントはバブルルーティングを使用するため、フォーカスを受け取る要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-397">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-398">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを取得した実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-398">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-399">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-399">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-400">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-400">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|<span data-ttu-id="0e8b4-401">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-401">Routing strategy</span></span>|<span data-ttu-id="0e8b4-402">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-402">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-403">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-403">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="0e8b4-404">対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-404">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-405">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnGotFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-405">Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-406"><see cref="E:System.Windows.ContentElement.GotFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-406">Identifies the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-407">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-407">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-408">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-408">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-409">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-409">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-410">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-410">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-411">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-411">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-412">この要素にキーボード フォーカスが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-412">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-413"><xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> は、要素のフォーカス状態を保持するプロパティの状態の変化を追跡する類似したイベントです。<xref:System.Windows.ContentElement.GotKeyboardFocus> イベントは、同じ状況の多くで発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-413"><xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.ContentElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="0e8b4-414">このイベントはバブルルーティングを使用するため、フォーカスがある要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-414">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-415">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-415">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="0e8b4-416">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.GotKeyboardFocus> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-416">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-417"><xref:System.Windows.ContentElement.GotKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-417">Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-418">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-418">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-419">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-419">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="0e8b4-420">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-420">Routing strategy</span></span>|<span data-ttu-id="0e8b4-421">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-421">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-422">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-422">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="0e8b4-423">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-423">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="0e8b4-424">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-424">Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-425"><see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-425">Identifies the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-426">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-426">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-427">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-427">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-428">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-428">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-429">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-429">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-430">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-430">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-431">この要素がマウスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-431">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-432">要素がマウスをキャプチャすると、マウスポインターが境界の外側にある場合でもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-432">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="0e8b4-433">マウスは、通常、ドラッグアンドドロップ操作中にキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャされたままになります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-433">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="0e8b4-434">このイベントはバブルルーティングを使用するため、キャプチャを持つ要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-434">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-435">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、マウスキャプチャを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-435">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="0e8b4-436">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.GotMouseCapture> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-436">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-437"><xref:System.Windows.ContentElement.GotMouseCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-437">Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-438">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-438">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-439">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-439">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="0e8b4-440">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-440">Routing strategy</span></span>|<span data-ttu-id="0e8b4-441">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-441">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-442">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-442">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="0e8b4-443">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-443">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-444">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnGotMouseCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-444">Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-445"><see cref="E:System.Windows.ContentElement.GotMouseCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-445">Identifies the <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-446">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-446">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-447">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-447">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-448">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-448">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-449">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-449">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-450">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-450">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-451">この要素がスタイラスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-451">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-452">要素がスタイラスをキャプチャすると、ポインターが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-452">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="0e8b4-453">スタイラスは、通常、ドラッグアンドドロップ操作中にキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャを保持します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-453">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="0e8b4-454">このイベントはバブルルーティングを使用するため、キャプチャを持つ要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-454">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-455">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、capture を持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-455">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="0e8b4-456">このイベントは、このクラスの添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.GotStylusCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-456">This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-457"><xref:System.Windows.ContentElement.GotStylusCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-457">Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-458">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-458">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-459">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-459">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="0e8b4-460">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-460">Routing strategy</span></span>|<span data-ttu-id="0e8b4-461">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-461">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-462">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-462">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-463">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-463">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-464">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnGotStylusCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-464">Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-465"><see cref="E:System.Windows.ContentElement.GotStylusCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-465">Identifies the <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-466">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-466">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-467">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-467">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-468">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-468">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-469">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-469">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-470">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-470">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-471">タッチがこの要素にキャプチャされると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-471">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-472">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-472">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-473">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-473">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="0e8b4-474">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-474">Routing strategy</span></span>|<span data-ttu-id="0e8b4-475">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-475">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-476">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-476">Delegate</span></span>|<span data-ttu-id="0e8b4-477"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-477"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-478">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnGotTouchCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-478">Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-479"><see cref="E:System.Windows.ContentElement.GotTouchCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-479">Identifies the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-480">この要素にアニメーション化されたプロパティかあるどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-480">Gets a value that indicates whether this element has any animated properties.</span></span></summary>
        <value><span data-ttu-id="0e8b4-481">プロパティのいずれかに添付されたアニメーションをこの要素が持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-481"><see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-482">このプロパティは、永続的な (ロックされていない、常に実行されている) アニメーション、または特定のタイムラインを持つアニメーションに対して `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-482">This property returns `true` either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.ContentElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-483">この要素に関連付けられている入力バインディングのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-483">Gets the collection of input bindings that are associated with this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-484">入力バインディングのコレクション。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-484">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-485">入力バインドでは、入力デバイスへのコマンドのバインドがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-485">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="0e8b4-486">たとえば、<xref:System.Windows.Input.MouseBinding> は、マウスデバイスに固有のプロパティを含む入力バインドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-486">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.</span></span>  
  
 <span data-ttu-id="0e8b4-487">入力バインディングのコレクションには、型に関連する入力バインディングと、インスタンスで宣言されている入力バインドの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-487">The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="0e8b4-488">関連するプロパティ <xref:System.Windows.ContentElement.CommandBindings%2A>は、コマンドバインドのコレクションを保持します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-488">A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="0e8b4-489">これらのバインディングは、コマンド処理の次のレベルを表すという点で、入力バインドとは異なります。これは、既知のコマンドに関連付けられているアクションと、それらのクラス固有のハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-489">These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="0e8b4-490">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="0e8b4-490">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="0e8b4-491">XAML の値</span><span class="sxs-lookup"><span data-stu-id="0e8b4-491">XAML Values</span></span>  
 <span data-ttu-id="0e8b4-492">*Oneor、Inputbindings*</span><span class="sxs-lookup"><span data-stu-id="0e8b4-492">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="0e8b4-493">1つ以上の <xref:System.Windows.Input.InputBinding> 要素 (通常は <xref:System.Windows.Input.KeyBinding> または <xref:System.Windows.Input.MouseBinding> 派生クラス)。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-493">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="0e8b4-494">これらのそれぞれには、<xref:System.Windows.Input.InputBinding.Command%2A> と <xref:System.Windows.Input.InputBinding.Gesture%2A> 属性が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-494">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.ContentElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-495">この要素が[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] で有効かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-495">Gets or sets a value that indicates whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="0e8b4-496">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-496"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-497">既定値は <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-497">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-498">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-498">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-499">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-499">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|<span data-ttu-id="0e8b4-500">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-500">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-501">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-501">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-502">次の例では、<xref:System.Windows.Documents.Hyperlink> が <xref:System.Windows.ContentElement.IsEnabled%2A> `false`に設定されている場合に、代替ビジュアル動作を提供するプロパティ setter を含むスタイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-502">The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> is set to <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-503">この要素の <see cref="P:System.Windows.ContentElement.IsEnabled" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-503">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-504">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-504">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.ContentElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-505">派生クラス内で <see cref="P:System.Windows.ContentElement.IsEnabled" /> の戻り値になる値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-505">Gets a value that becomes the return value of <see cref="P:System.Windows.ContentElement.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="0e8b4-506">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-506"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## <a name="notes-to-inheritors"></a><span data-ttu-id="0e8b4-507">継承に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0e8b4-507">Notes to inheritors</span></span>

<span data-ttu-id="0e8b4-508">このプロパティの既定の実装では、値がキャッシュされ、この要素の親要素が有効になっているかどうかも計算されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-508">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="0e8b4-509">親が有効になっていない場合は、実際のユーザーインターフェイスで子要素を効果的に有効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-509">If the parent is not enabled, the child element cannot be effectively enabled in practical user interface.</span></span> <span data-ttu-id="0e8b4-510">この実装をオーバーライドする場合は、この動作を維持するために基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-510">If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-511"><see cref="P:System.Windows.ContentElement.IsEnabled" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-511">Identifies the <see cref="P:System.Windows.ContentElement.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.ContentElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-512">この要素に論理フォーカスがあるかどうかを判断する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-512">Gets a value that determines whether this element has logical focus.</span></span></summary>
        <value><span data-ttu-id="0e8b4-513">この要素に論理フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-513"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-514">アプリケーションに複数のフォーカス区分 (メニューコンテンツとアプリケーションの残りの部分など) がある場合、論理フォーカスはキーボードフォーカスとは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-514">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="0e8b4-515">このシナリオでは、キーボードフォーカスはアプリケーション UI の1つの要素にしか配置できませんが、他のフォーカス区分内の特定の要素は引き続き論理フォーカスを保持する場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-515">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="0e8b4-516">論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-516">For more information on logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-517">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-517">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-518">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-518">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|<span data-ttu-id="0e8b4-519">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-519">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-520">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-520">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-521">次の例では、<xref:System.Windows.Documents.Paragraph> に既定でフォーカスを設定し、フォーカスを受け取ると視覚的な動作を与えるスタイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-521">The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-522"><see cref="P:System.Windows.ContentElement.IsFocused" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-522">Identifies the <see cref="P:System.Windows.ContentElement.IsFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-523">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] などの入力方式システムで、この要素への入力処理が有効になっているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-523">Gets a value that indicates whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-524">入力方式がアクティブである場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-524"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-525">基になる添付プロパティの既定値は <see langword="true" />ですが、この値は実行時に入力方式の状態の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-525">The default value of the underlying attached property is <see langword="true" />; however, this value is influenced by the state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-526">このプロパティは、現在有効になっている入力方法 (キーボード、音声、およびその他の入力デバイス) に対して、添付プロパティ <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> によって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-526">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-527">この要素にキーボード フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-527">Gets a value that indicates whether this element has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="0e8b4-528">この要素にキーボード フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-528"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-529">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-529">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-530">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-530">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-531">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-531">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="0e8b4-532">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-532">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-533">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-533">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-534">この要素の <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-534">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-535">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-535">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-536"><see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-536">Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-537">キーボード フォーカスが要素または子要素内にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-537">Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</span></span></summary>
        <value><span data-ttu-id="0e8b4-538">キーボード フォーカスがその要素またはその子要素にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-538"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-539">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-539">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-540">このプロパティの値を変更すると、通常は、派生クラスによってイベントを抑制する <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> がオーバーライドされていない限り、<xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-540">Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="0e8b4-541">このプロパティは直接設定しませんが、<xref:System.Windows.ContentElement.Focus%2A>を呼び出すか、<xref:System.Windows.ContentElement.MoveFocus%2A> 要求を行うことによって、要素にフォーカスを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-541">You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="0e8b4-542">これらのいずれかのメソッド呼び出しによって、このプロパティ値が変更する場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-542">Either of these method calls might change this property value.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-543">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-544">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-544">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="0e8b4-545">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-546">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-546">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-547">この要素の <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-547">Occurs when the value of the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-548">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-548">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-549"><see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-549">Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.ContentElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-550">マウスがこの要素にキャプチャされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-550">Gets a value that indicates whether the mouse is captured by this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-551">要素にマウス キャプチャがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-551"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-552">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-552">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-553">マウスキャプチャの状態は、インプロセスのドラッグアンドドロップ操作に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-553">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-554">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-555">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-555">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="0e8b4-556">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-556">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-557">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-557">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-558">次の例では、マウスが要素によって既にキャプチャされているかどうかに基づいて、マウスキャプチャの状態をオンまたはオフにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-558">The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-559">この要素の <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-559">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-560">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-560">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-561"><see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-561">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-562">この要素または要素ツリー内の子要素がマウス キャプチャを保持するかどうかを決定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-562">Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</span></span></summary>
        <value><span data-ttu-id="0e8b4-563">この要素または格納されている要素がマウス キャプチャを持つ場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-563"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-564">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-564">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-565">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-565">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-566">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-566">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="0e8b4-567">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-567">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-568">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-568">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-569">この要素の <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> の値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-569">Occurs when the value of the <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-570">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-570">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-571"><see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-571">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-572">マウス ポインターの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-572">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="0e8b4-573">マウス ポインターがヒット テストと同じ要素の結果上にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-573"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-574">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-574">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-575"><xref:System.Windows.ContentElement.IsMouseOver%2A>とは異なり、このプロパティは、マウスポインターがヒットテストの場合と同様に、リテラル要素の上にある場合にのみ `true` ます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-575">Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="0e8b4-576">マウスポインターが子要素の上にある場合、特に、要素の深いテンプレートと複合要素の一部である要素に対しては、このプロパティは `false`されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-576">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="0e8b4-577">コントロールがどのように合成されているかわからない場合 (たとえば、定義したコントロールのカスタムコントロールテンプレートでこのプロパティを使用する場合)、このプロパティは予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-577">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="0e8b4-578">コントロールを作成しないほとんどのシナリオでは、代わりに <xref:System.Windows.ContentElement.IsMouseOver%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-578">For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="0e8b4-579">この要素によってマウスがキャプチャされ、このプロパティがキャプチャ時に `true` された場合、このプロパティは、マウスキャプチャが失われ、ポインターがその境界を越えていなくなるまで、`true` を返し続けます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-579">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-580">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-580">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-581">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-581">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="0e8b4-582">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-582">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-583">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-583">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-584">この要素の <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-584">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-585">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-585">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-586"><see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-586">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.ContentElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-587">マウス ポインターがこの要素 (子ビジュアル要素またはそのコントロールの複合を含む) 上にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-587">Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</span></span></summary>
        <value><span data-ttu-id="0e8b4-588">マウス ポインターが要素またはその子要素の上にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-588"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-589">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-589">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-590">似た "IsMouseOverChanged" イベントは存在しませんが、いくつかの類似イベントがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-590">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="0e8b4-591">たとえば、<xref:System.Windows.ContentElement.MouseEnter>、<xref:System.Windows.ContentElement.MouseMove>、および <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>を使用できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-591">For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="0e8b4-592">この要素がマウスをキャプチャすると、マウスのキャプチャが失われ、マウスポインターが要素の境界内から出るまで、このプロパティは `true` のままになります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-592">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-593">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-593">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-594">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-594">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|<span data-ttu-id="0e8b4-595">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-595">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-596">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-596">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-597">次の例では、<xref:System.Windows.Documents.Hyperlink> が `true`<xref:System.Windows.ContentElement.IsMouseOver%2A> レポートを表示するときに、代替ビジュアル動作を提供するプロパティ setter を含むスタイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-597">The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> reports <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-598"><see cref="P:System.Windows.ContentElement.IsMouseOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-598">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.ContentElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-599">この要素にスタイラスがキャプチャされるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-599">Gets a value that indicates whether the stylus is captured to this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-600">要素にスタイラスのキャプチャがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-600"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-601">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-601">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-602">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-602">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-603">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-603">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-604">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-604">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-605">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-605">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="0e8b4-606">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-606">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-607">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-607">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-608">この要素の <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-608">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-609">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-609">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-610"><see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-610">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-611">スタイラスのキャプチャをこの要素 (子要素およびコントロールの複合を含む) が保持するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-611">Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</span></span></summary>
        <value><span data-ttu-id="0e8b4-612">スタイラスのキャプチャがこの要素内に保持されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-612"><see langword="true" /> if stylus capture is held within this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-613">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-613">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-614">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-614">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-615">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-615">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-616">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-616">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="0e8b4-617">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-617">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-618">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-618">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-619">この要素の <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-619">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-620">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-620">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-621"><see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-621">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-622">スタイラスの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-622">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="0e8b4-623">スタイラスがヒット テストと同じ要素の上にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-623"><see langword="true" /> if the stylus is over the same element as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-624">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-624">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-625"><xref:System.Windows.ContentElement.IsStylusOver%2A>とは異なり、このプロパティは、スタイラスが要素上にある場合にのみ `true` ます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-625">Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="0e8b4-626">スタイラスが子要素または要素のより深い複合要素の一部である要素上にある場合、このプロパティは `false`されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-626">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be `false`.</span></span>  
  
 <span data-ttu-id="0e8b4-627">コントロールがどのように合成されているかわからない場合 (たとえば、定義したコントロールのカスタムコントロールテンプレートでこのプロパティを使用する場合)、このプロパティは予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-627">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="0e8b4-628">コントロールを作成しないほとんどのシナリオでは、代わりに <xref:System.Windows.ContentElement.IsStylusOver%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-628">For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="0e8b4-629">この要素にスタイラスのキャプチャが含まれており、このプロパティがキャプチャ時に `true` 場合、スタイラスのキャプチャが失われ、スタイラスがその境界を越えない限り、このプロパティは `true` のままです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-629">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="0e8b4-630">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-630">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-631">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-631">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-632">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-632">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-633">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-633">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="0e8b4-634">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-634">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-635">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-635">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-636">この要素の <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-636">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-637">このメンバーは、ルーティングイベントではなく [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-637">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-638"><see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-638">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.ContentElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-639">スタイラスがこの要素 (子ビジュアル要素を含む) 上にあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-639">Gets a value that indicates whether the stylus is located over this element (including visual child elements).</span></span></summary>
        <value><span data-ttu-id="0e8b4-640">スタイラスが要素またはその子要素上に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-640"><see langword="true" /> if the stylus is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e8b4-641">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-641">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-642">この要素にスタイラスのキャプチャがある場合、スタイラスのキャプチャが失われ、ポインターが境界外になるまで、このプロパティは `true` のままになります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-642">If this element has stylus capture, this property remains `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="0e8b4-643">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-643">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-644">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-644">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="0e8b4-645">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-645">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-646">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-646">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|<span data-ttu-id="0e8b4-647">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="0e8b4-647">Metadata properties set to `true`</span></span>|<span data-ttu-id="0e8b4-648">なし</span><span class="sxs-lookup"><span data-stu-id="0e8b4-648">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-649"><see cref="P:System.Windows.ContentElement.IsStylusOver" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-649">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-650">この要素にフォーカスがある状態でキーが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-650">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-651">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-651">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="0e8b4-652"><xref:System.Windows.ContentElement.KeyDown> イベントは、特定のコントロールで想定どおりに動作しない可能性がある下位レベルのテキスト入力イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-652">The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="0e8b4-653">これは、一部のコントロールには、テキスト入力処理と関連イベントの上位レベルのバージョンを提供するコントロールの複合またはクラス処理があるためです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-653">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="0e8b4-654">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.KeyDown> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-654">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-655"><xref:System.Windows.ContentElement.KeyDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-655">Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-656">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-656">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-657">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-657">Identifier field</span></span>|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|<span data-ttu-id="0e8b4-658">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-658">Routing strategy</span></span>|<span data-ttu-id="0e8b4-659">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-659">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-660">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-660">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="0e8b4-661">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewKeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-661">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-662">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnKeyDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-662">Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-663"><see cref="E:System.Windows.ContentElement.KeyDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-663">Identifies the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-664">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-664">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-665">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-665">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-666">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-666">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-667">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-667">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-668">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-668">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-669">この要素にフォーカスがあるときにキーが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-669">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-670">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に <xref:System.Windows.ContentElement.KeyUp> がクラスメンバーリストに含まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-670">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-671"><xref:System.Windows.ContentElement.KeyUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-671">Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-672">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-672">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-673">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-673">Identifier field</span></span>|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|<span data-ttu-id="0e8b4-674">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-674">Routing strategy</span></span>|<span data-ttu-id="0e8b4-675">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-675">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-676">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-676">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="0e8b4-677">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewKeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-677">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-678">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnKeyUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-678">Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-679"><see cref="E:System.Windows.ContentElement.KeyUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-679">Identifies the <see cref="E:System.Windows.ContentElement.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-680">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-680">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-681">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-681">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-682">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-682">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-683">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-683">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-684">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-684">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-685">この要素が論理フォーカスを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-685">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-686">メソッド呼び出しを使用して意図的にフォーカスを外しているにもかかわらず、直前のキーボード フォーカスが異なるスコープ内に存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-686">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="0e8b4-687">このシナリオでは、キーボードフォーカスはそのまま残り、<xref:System.Windows.ContentElement.Focus%2A> メソッドが呼び出される要素は論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-687">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="0e8b4-688">このイベントをより正確に解釈することは、ルートの要素の <xref:System.Windows.ContentElement.IsFocused%2A> プロパティの値が `true` から `false`に変化したときに発生することです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-688">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="0e8b4-689">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-689">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-690">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを取得した実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-690">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-691">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-691">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-692">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-692">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|<span data-ttu-id="0e8b4-693">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-693">Routing strategy</span></span>|<span data-ttu-id="0e8b4-694">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-694">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-695">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-695">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="0e8b4-696">対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-696">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-697">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnLostFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-697">Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-698"><see cref="E:System.Windows.ContentElement.LostFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-698">Identifies the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-699">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-699">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-700">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-700">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-701">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-701">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-702">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-702">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-703">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-703">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-704">この要素からキーボード フォーカスが離れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-704">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-705">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-705">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-706">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-706">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="0e8b4-707">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.LostKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-707">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-708"><xref:System.Windows.ContentElement.LostKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-708">Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-709">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-709">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-710">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-710">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="0e8b4-711">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-711">Routing strategy</span></span>|<span data-ttu-id="0e8b4-712">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-712">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-713">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-713">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="0e8b4-714">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-714">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="0e8b4-715">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-715">Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-716"><see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-716">Identifies the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-717">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-717">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-718">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-718">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-719">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-719">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-720">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-720">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-721">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-721">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-722">この要素がマウス キャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-722">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-723">要素がマウスをキャプチャすると、ポインターが境界の外側にある場合でもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-723">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="0e8b4-724">マウスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-724">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="0e8b4-725">このイベントはバブルルーティングを使用するため、キャプチャを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく、子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-725">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-726">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、キャプチャを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-726">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="0e8b4-727">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.LostMouseCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-727">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-728"><xref:System.Windows.ContentElement.LostMouseCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-728">Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-729">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-729">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-730">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-730">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="0e8b4-731">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-731">Routing strategy</span></span>|<span data-ttu-id="0e8b4-732">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-732">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-733">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-733">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="0e8b4-734">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-734">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-735">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnLostMouseCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-735">Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-736"><see cref="E:System.Windows.ContentElement.LostMouseCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-736">Identifies the <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-737">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-737">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-738">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-738">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-739">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-739">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-740">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-740">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-741">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-741">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-742">この要素がスタイラス キャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-742">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-743">要素がスタイラスをキャプチャすると、ポインターが境界の外側にある場合でもスタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-743">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="0e8b4-744">スタイラスは、通常、ドラッグアンドドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-744">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="0e8b4-745">このイベントはバブルルーティングを使用するため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素である場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-745">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-746">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-746">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="0e8b4-747">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.LostStylusCapture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-747">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-748"><xref:System.Windows.ContentElement.LostStylusCapture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-748">Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-749">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-749">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-750">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-750">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="0e8b4-751">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-751">Routing strategy</span></span>|<span data-ttu-id="0e8b4-752">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-752">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-753">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-753">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-754">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-754">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-755">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnLostStylusCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-755">Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-756"><see cref="E:System.Windows.ContentElement.LostStylusCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-756">Identifies the <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-757">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-757">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-758">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-758">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-759">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-759">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-760">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-760">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-761">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-761">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-762">この要素がタッチのキャプチャを失うと発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-762">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-763">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-763">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-764">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-764">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="0e8b4-765">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-765">Routing strategy</span></span>|<span data-ttu-id="0e8b4-766">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-766">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-767">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-767">Delegate</span></span>|<span data-ttu-id="0e8b4-768"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-768"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-769">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnLostTouchCapture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-769">Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-770"><see cref="E:System.Windows.ContentElement.LostTouchCapture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-770">Identifies the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-771">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-771">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-772">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.MouseDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-772">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-773"><xref:System.Windows.ContentElement.MouseDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-773">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-774"><xref:System.Windows.ContentElement.MouseDown> イベントは、多くの場合、<xref:System.Windows.ContentElement.MouseLeftButtonDown> または <xref:System.Windows.ContentElement.MouseRightButtonDown>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-774">The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="0e8b4-775"><xref:System.Windows.ContentElement.MouseLeftButtonDown> と <xref:System.Windows.ContentElement.MouseRightButtonDown> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-775"><xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="0e8b4-776"><xref:System.Windows.ContentElement.MouseLeftButtonDown> または <xref:System.Windows.ContentElement.MouseRightButtonDown>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-776">See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0e8b4-777">コントロールに似た動作を持ついくつかの <xref:System.Windows.ContentElement> 派生クラス (<xref:System.Windows.Documents.Hyperlink>など) には、マウスボタンイベントに固有のクラス処理が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-777">A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="0e8b4-778">マウスの左ボタンダウンイベントは、コントロールでクラス処理を行う最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-778">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="0e8b4-779">クラスの処理では、多くの場合、基になる <xref:System.Windows.Input.Mouse> クラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-779">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="0e8b4-780">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-780">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="0e8b4-781">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-781">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="0e8b4-782">前の「」で説明されている問題を解決しても、次のいずれかの方法を使用してクラスを処理する派生クラスで、マウスの左ボタンダウンイベントの <xref:System.Windows.ContentElement.MouseDown> イベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-782">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="0e8b4-783"><xref:System.Windows.ContentElement.PreviewMouseDown> イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-783">Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="0e8b4-784">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-784">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="0e8b4-785"><xref:System.Windows.ContentElement.AddHandler%2A> を呼び出し、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-785">Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-786">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-786">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-787">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-787">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|<span data-ttu-id="0e8b4-788">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-788">Routing strategy</span></span>|<span data-ttu-id="0e8b4-789">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-789">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-790">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-790">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-791">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewMouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-791">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-792">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-792">Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-793"><see cref="E:System.Windows.ContentElement.MouseDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-793">Identifies the <see cref="E:System.Windows.ContentElement.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-794">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-794">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-795">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-795">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-796">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-796">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-797">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-797">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-798">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-798">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-799">マウス ポインターがこの要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-799">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-800"><xref:System.Windows.ContentElement.MouseEnter> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-800"><xref:System.Windows.ContentElement.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="0e8b4-801">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-801">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="0e8b4-802">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-802">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="0e8b4-803"><xref:System.Windows.ContentElement.MouseEnter> はマウスポインターが要素の境界内に入ったことを追跡しますが、このイベントはさらに、<xref:System.Windows.ContentElement.IsMouseOver%2A> プロパティ値が `false` からこの要素の `true` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-803">Although <xref:System.Windows.ContentElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="0e8b4-804">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.MouseEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-804">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-805"><xref:System.Windows.ContentElement.MouseEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-805">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-806">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-806">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-807">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-807">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|<span data-ttu-id="0e8b4-808">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-808">Routing strategy</span></span>|<span data-ttu-id="0e8b4-809">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-809">Direct</span></span>|  
|<span data-ttu-id="0e8b4-810">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-810">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="0e8b4-811">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-811">Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-812"><see cref="E:System.Windows.ContentElement.MouseEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-812">Identifies the <see cref="E:System.Windows.ContentElement.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-813">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-813">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-814">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-814">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-815">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-815">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-816">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-816">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-817">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-817">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-818">マウス ポインターがこの要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-818">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-819"><xref:System.Windows.ContentElement.MouseLeave> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-819"><xref:System.Windows.ContentElement.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="0e8b4-820">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-820">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="0e8b4-821">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-821">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="0e8b4-822"><xref:System.Windows.ContentElement.MouseLeave> はマウスが要素から離れたことを追跡しますが、このイベントはさらに、<xref:System.Windows.ContentElement.IsMouseOver%2A> プロパティ値が `true` からこの要素の `false` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-822">Although <xref:System.Windows.ContentElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="0e8b4-823">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.MouseLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-823">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-824"><xref:System.Windows.ContentElement.MouseLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-824">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-825">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-825">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-826">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-826">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|<span data-ttu-id="0e8b4-827">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-827">Routing strategy</span></span>|<span data-ttu-id="0e8b4-828">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-828">Direct</span></span>|  
|<span data-ttu-id="0e8b4-829">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-829">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="0e8b4-830">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-830">Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-831"><see cref="E:System.Windows.ContentElement.MouseLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-831">Identifies the <see cref="E:System.Windows.ContentElement.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-832">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-832">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-833">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-833">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-834">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-834">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-835">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-835">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-836">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-836">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-837">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-837">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-838">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-838">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-839">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-839">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-840">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-840">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-841">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-841">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-842">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-842">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-843">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-843">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-844">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-844">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0e8b4-845">コントロールに似た動作を持ついくつかの <xref:System.Windows.ContentElement> 派生クラス (<xref:System.Windows.Documents.Hyperlink>など) には、マウスボタンイベントに固有のクラス処理が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-845">A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="0e8b4-846">マウスの左ボタンダウンイベントは、コントロールでクラス処理を行う最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-846">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="0e8b4-847">クラスの処理では、多くの場合、基になる <xref:System.Windows.Input.Mouse> クラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-847">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="0e8b4-848">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-848">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="0e8b4-849">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-849">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="0e8b4-850">前の「」で説明されている問題を解決しても、次のいずれかの方法を使用してクラスを処理する派生クラスで、マウスの左ボタンダウンイベントの <xref:System.Windows.ContentElement.MouseLeftButtonDown> イベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-850">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="0e8b4-851"><xref:System.Windows.ContentElement.PreviewMouseDown> イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-851">Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="0e8b4-852">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-852">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="0e8b4-853"><xref:System.Windows.ContentElement.AddHandler%2A> を呼び出し、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-853">Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-854">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-854">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-855">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-855">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="0e8b4-856">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-856">Routing strategy</span></span>|<span data-ttu-id="0e8b4-857">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-857">Direct</span></span>|  
|<span data-ttu-id="0e8b4-858">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-858">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-859">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-859">Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-860"><see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-860">Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-861">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-861">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-862">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-862">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-863">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-863">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-864">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-864">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-865">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-865">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-866">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-866">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-867">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-867">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-868">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-868">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-869">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-869">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-870">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-870">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-871">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-871">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-872">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-872">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-873">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-873">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-874">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-874">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-875">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-875">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="0e8b4-876">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-876">Routing strategy</span></span>|<span data-ttu-id="0e8b4-877">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-877">Direct</span></span>|  
|<span data-ttu-id="0e8b4-878">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-878">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-879">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-879">Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-880"><see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-880">Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-881">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-881">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-882">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-882">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-883">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-883">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-884">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-884">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-885">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-885">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-886">この要素の上でマウス ポインターが動かされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-886">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-887">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.MouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-887">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-888"><xref:System.Windows.ContentElement.MouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-888">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-889">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-889">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-890">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-890">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|<span data-ttu-id="0e8b4-891">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-891">Routing strategy</span></span>|<span data-ttu-id="0e8b4-892">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-892">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-893">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-893">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="0e8b4-894">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewMouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-894">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-895">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-895">Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-896"><see cref="E:System.Windows.ContentElement.MouseMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-896">Identifies the <see cref="E:System.Windows.ContentElement.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-897">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-897">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-898">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-898">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-899">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-899">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-900">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-900">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-901">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-901">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-902">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-902">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-903">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-903">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-904">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-904">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-905">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-905">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-906">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-906">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-907">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-907">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-908">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-908">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-909">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-909">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-910">右ボタンマウスイベントは、多くの場合、アプリケーションシナリオでネイティブに処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-910">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="0e8b4-911">たとえば、マウスの右ボタンを押すと、コンテキストメニューが表示する場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-911">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="0e8b4-912">「 [ContextMenu の概要](~/docs/framework/wpf/controls/contextmenu-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-912">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-913">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-913">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-914">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-914">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="0e8b4-915">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-915">Routing strategy</span></span>|<span data-ttu-id="0e8b4-916">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-916">Direct</span></span>|  
|<span data-ttu-id="0e8b4-917">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-917">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-918">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-918">Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-919"><see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-919">Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-920">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-920">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-921">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-921">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-922">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-922">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-923">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-923">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-924">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-924">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-925">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-925">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-926">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてバブルルートに従っているように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-926">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-927">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-927">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-928">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-928">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-929">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-929">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-930">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-930">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-931">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-931">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-932">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-932">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-933">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-933">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-934">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-934">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="0e8b4-935">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-935">Routing strategy</span></span>|<span data-ttu-id="0e8b4-936">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-936">Direct</span></span>|  
|<span data-ttu-id="0e8b4-937">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-937">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-938">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-938">Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-939"><see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-939">Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-940">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-940">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-941">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-941">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-942">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-942">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-943">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-943">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-944">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-944">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-945">この要素の上でいずれかのマウス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-945">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-946">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.MouseUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-946">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-947"><xref:System.Windows.ContentElement.MouseUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-947">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-948"><xref:System.Windows.ContentElement.MouseUp> イベントは、多くの場合、<xref:System.Windows.ContentElement.MouseLeftButtonUp> または <xref:System.Windows.ContentElement.MouseRightButtonUp>と共に発生します。これは、2つの標準マウスボタンのいずれかのリリースに対応します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-948">The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="0e8b4-949"><xref:System.Windows.ContentElement.MouseLeftButtonUp> と <xref:System.Windows.ContentElement.MouseRightButtonUp> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-949"><xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="0e8b4-950"><xref:System.Windows.ContentElement.MouseLeftButtonUp> または <xref:System.Windows.ContentElement.MouseRightButtonUp>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-950">See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-951">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-951">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-952">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-952">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|<span data-ttu-id="0e8b4-953">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-953">Routing strategy</span></span>|<span data-ttu-id="0e8b4-954">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-954">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-955">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-955">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-956">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewMouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-956">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-957">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-957">Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-958"><see cref="E:System.Windows.ContentElement.MouseUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-958">Identifies the <see cref="E:System.Windows.ContentElement.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-959">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-959">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-960">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-960">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-961">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-961">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-962">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-962">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-963">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-963">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-964">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-964">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-965">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素から <xref:System.Windows.ContentElement.MouseWheel> イベントを受け取った場合、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-965">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.ContentElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="0e8b4-966">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.MouseWheel> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-966">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-967"><xref:System.Windows.ContentElement.MouseWheel> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-967">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-968">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-968">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-969">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-969">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|<span data-ttu-id="0e8b4-970">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-970">Routing strategy</span></span>|<span data-ttu-id="0e8b4-971">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-971">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-972">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-972">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="0e8b4-973">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewMouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-973">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="0e8b4-974">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnMouseWheel%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-974">Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-975"><see cref="E:System.Windows.ContentElement.MouseWheel" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-975">Identifies the <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-976">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-976">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-977">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-977">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-978">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-978">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-979">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-979">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-980">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-980">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="contentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="0e8b4-981">既存のタブ オーダーを検査するモード、または視覚的な移動方向を示すプロパティを含む検査要求。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-981">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="0e8b4-982">この要素から別の要素へのフォーカスの移動を試みます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-982">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="0e8b4-983">フォーカスの移動方向は、ガイドラインの方向によって指定され、この要素のビジュアル親の編成内で解釈されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-983">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-984">要求した検査が実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-984"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-985">このメソッドの戻り値を必ず確認してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-985">Make sure you check the return value of this method.</span></span> <span data-ttu-id="0e8b4-986">コントロールのコンポジションで定義されているタブストップに走査を実行し、トラバーサル要求がラップを要求しなかった場合、`false` の戻り値が返されることがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-986">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="contentElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-987">Windows Presentation Foundation (WPF) インフラストラクチャに対するクラス固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> の実装を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-987">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-988">型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-988">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## <a name="notes-to-inheritors"></a><span data-ttu-id="0e8b4-989">継承に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0e8b4-989">Notes to inheritors</span></span>

<span data-ttu-id="0e8b4-990">このメソッドの実装は、通常、特定の <xref:System.Windows.Automation.Peers.AutomationPeer> 実装のコンストラクターを呼び出し、それを戻り値として返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-990">The implementation of this method is typically to call the constructor of a specific <xref:System.Windows.Automation.Peers.AutomationPeer> implementation, and return it as the return value.</span></span>  
  
 <span data-ttu-id="0e8b4-991">WPF インフラストラクチャに固有の <xref:System.Windows.Automation.Peers.AutomationPeer> 実装を提供するために、すべての <xref:System.Windows.ContentElement> 派生クラスはこのメソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-991">All <xref:System.Windows.ContentElement> derived classes should implement this method in order to provide their own specific <xref:System.Windows.Automation.Peers.AutomationPeer> implementations to the WPF infrastructure.</span></span> <span data-ttu-id="0e8b4-992">このパターンの実装の詳細については、「<xref:System.Windows.Automation.Peers.AutomationPeer>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-992">For details on implementing this pattern, see <xref:System.Windows.Automation.Peers.AutomationPeer>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-993">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-993">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-994">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-994">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-995">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-995">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-996">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-996">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-997">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-997">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-998">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-998">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-999">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-999">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1000">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1000">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1001">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1001">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1002">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1002">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1003">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1003">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1004">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1004">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1005">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1005">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1006">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1006">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1007">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1007">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1008">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1008">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1009">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1009">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1010">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1010">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1011">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1011">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1012">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1012">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1013">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1013">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1014">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1014">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1015">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1015">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1016">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1016">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1017">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1017">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1018">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1018">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1019">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1019">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1020">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1020">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1021">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1021">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1022">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1022">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1023">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1023">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1024">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1024">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1025">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1025">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1026">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1026">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1027">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1027">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1028">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1028">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1029">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1029">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1030">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1030">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1031">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1031">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1032">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1032">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1033">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1033">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1034">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1034">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1035">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1035">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1036">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1036">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1037">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1037">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1038">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1038">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1039">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1039">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1040">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1040">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1041">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1041">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1042">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.GiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1042">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1043">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1043">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1044">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1044">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1045">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1045">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1046">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1046">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1047">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1047">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1048">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1048">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1049">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1049">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1050">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1050">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1051">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1051">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1052">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1052">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1053">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1053">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="0e8b4-1054">このイベント データには、<see cref="E:System.Windows.ContentElement.GotFocus" /> イベントの識別子が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1054">This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1055">提供されたイベント データを使用して、<see cref="E:System.Windows.ContentElement.GotFocus" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1055">Raises the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1056">このメソッドには、仮想には、イベントを発生させる既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1056">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="0e8b4-1057">この\* メソッドの実装では、イベントを発生させることを意図しています。この同じメソッドの実装は、<xref:System.Windows.ContentElement.IsFocused%2A> プロパティの値が変更されたときにイベントを発生させるために、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1057">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="0e8b4-1058"><xref:System.Windows.ContentElement.OnGotFocus%2A> の実装は\* 実装上の他の Windows Presentation Foundation (WPF) とは異なります。これは、そのイベントのクラス処理を追加するのに便利な方法のみを提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1058">The <xref:System.Windows.ContentElement.OnGotFocus%2A> implementation differs from some other Windows Presentation Foundation (WPF) On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
## <a name="notes-to-inheritors"></a><span data-ttu-id="0e8b4-1059">継承に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1059">Notes to inheritors</span></span>

<span data-ttu-id="0e8b4-1060">意図的に、または異常なイベントを発生させない必要がある場合を除き、実装が基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1060">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="0e8b4-1061">そうしないと、通常のユーザー操作では、通常はこの要素にフォーカスが設定されているため、<xref:System.Windows.ContentElement.GotFocus> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1061">Otherwise, the <xref:System.Windows.ContentElement.GotFocus> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="0e8b4-1062">要素にフォーカスを設定しない場合は、<xref:System.Windows.ContentElement.Focusable> を `false`に設定することによって、要素がフォーカスされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1062">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <xref:System.Windows.ContentElement.Focusable> to `false`.</span></span>
<span data-ttu-id="0e8b4-1063">既定では <xref:System.Windows.ContentElement.Focusable> はフォーカスが設定されていないため、<xref:System.Windows.ContentElement.Focusable> を意図的に設定する必要がない場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1063">Note that by default a <xref:System.Windows.ContentElement.Focusable> is not focusable, therefore setting <xref:System.Windows.ContentElement.Focusable> deliberately might not be necessary.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1064">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1064">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1065">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1065">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1066">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1066">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1067">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1067">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1068">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1068">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1069">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1069">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1070">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1070">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1071">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1071">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1072">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1072">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1073">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1073">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1074">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1074">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1075">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1075">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1076">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1076">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1077">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1077">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1078">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1078">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1079">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1079">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1080">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1080">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1081">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1081">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1082">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1082">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1083">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1083">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1084">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1084">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1085">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1085">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1086">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1086">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1087">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1087">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1088">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1088">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1089">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1089">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1090">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1090">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1091">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1091">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1092">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1092">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1093">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1093">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1094">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1094">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1095">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1095">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1096">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1096">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1097">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1097">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1098">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1098">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1099">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1099">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1100">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1100">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1101">タッチがこの要素にキャプチャされているときに発生する <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1101">Provides class handling for the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1102"><xref:System.Windows.ContentElement.OnGotTouchCapture%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1102">The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1103">派生クラスの <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> をオーバーライドして、<xref:System.Windows.ContentElement.GotTouchCapture> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1103">Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event.</span></span> <span data-ttu-id="0e8b4-1104">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1104">Be sure to call the base class' <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1105">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1105">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1106">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1106">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1107">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1107">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1108">この仮想メソッドは、<xref:System.Windows.ContentElement.IsKeyboardFocused%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1108">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="0e8b4-1109">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1109">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1110">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1110">Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1111"><xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1111">Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1112">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1112">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1113">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1113">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1114">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1114">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1115">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1115">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1116">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1116">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1117">この要素によって <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> イベントが発生する直前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1117">Invoked just before the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="0e8b4-1118">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1118">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1119">この仮想メソッドは、<xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1119">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1120">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1120">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1121">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1121">Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1122"><xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1122">Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1123">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1123">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1124">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1124">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1125">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1125">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1126">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1126">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1127">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1127">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1128">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1128">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1129">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1129">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1130">この仮想メソッドは、<xref:System.Windows.ContentElement.IsMouseCaptured%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1130">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1131">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1131">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1132">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsMouseCapturedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1132">Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1133"><xref:System.Windows.ContentElement.IsMouseCapturedChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1133">Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1134">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1134">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1135">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1135">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1136">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1136">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1137">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1137">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1138">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1138">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1139">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1139">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1140">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1140">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0e8b4-1141">この仮想メソッドは、<see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1141">This virtual method is raised when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1142">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1142">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1143">その後、同じイベントデータインスタンスを使用して、<see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1143">Then the <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1144">イベントがルーティングイベントではないことに注意してください。したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1144">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="0e8b4-1145">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1145">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1146">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1146">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1147">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1147">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1148">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1148">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1149">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1149">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1150">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1150">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1151">この仮想メソッドは、<xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1151">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1152">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1152">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1153">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1153">Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1154"><xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1154">Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1155">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1155">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1156">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1156">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1157">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1157">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1158">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1158">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1159">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1159">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1160">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1160">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1161">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1161">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1162">この仮想メソッドは、<xref:System.Windows.ContentElement.IsStylusCaptured%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1162">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1163">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1163">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1164">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsStylusCapturedChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1164">Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1165">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1165">Notice that the event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1166">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1166">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1167">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1167">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1168">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1168">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1169">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1169">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1170">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1170">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1171">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1171">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1172">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1172">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1173">この仮想メソッドは、<xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1173">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1174">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1174">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1175">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1175">Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1176">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1176">Notice that the event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1177">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1177">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1178">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1178">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1179">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1179">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1180">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1180">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1181">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1181">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1182">この要素上で未処理の <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1182">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1183">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1183">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1184">この仮想メソッドは、<xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> の依存関係プロパティの値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1184">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="0e8b4-1185">最初に仮想メソッドが発生し、必要に応じてイベントデータを操作できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1185">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="0e8b4-1186">その後、同じイベントデータインスタンスを使用して、<xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1186">Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="0e8b4-1187">イベントがルーティングイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1187">Notice that the event is not a routed event.</span></span> <span data-ttu-id="0e8b4-1188">したがって、クラスハンドラーで処理済みとしてマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1188">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="0e8b4-1189">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1189">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1190">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1190">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1191">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1191">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1192">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1192">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1193">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1193">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1194">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1194">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1195">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1195">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="0e8b4-1196">入力やコマンドのバインドなど、キーストロークに依存するその他のプログラミング機能は、通常のキーストロークとして公開される前に、キーストロークを処理することがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1196">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="0e8b4-1197">これらの入力システム機能によってイベントが処理済みとしてマークされている場合、<xref:System.Windows.ContentElement.OnKeyDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1197">If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1198">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1198">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1199">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1199">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1200">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1200">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1201">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1201">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1202">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1202">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1203">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1203">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1204">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1204">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1205">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1205">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1206">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1206">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1207">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1207">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1208">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1208">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1209">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1209">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1210">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1210">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="0e8b4-1211">入力やコマンドのバインドなど、キーストロークに依存するその他のプログラミング機能は、通常のキーストロークとして公開される前に、キーストロークを処理することがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1211">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="0e8b4-1212">これらの入力システム機能によってイベントが処理済みとしてマークされている場合、<xref:System.Windows.ContentElement.OnKeyUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1212">If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1213">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1213">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1214">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1214">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1215">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1215">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1216">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1216">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1217">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1217">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1218">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1218">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1219">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1219">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1220">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1220">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1221">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1221">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1222">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1222">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="0e8b4-1223">このイベント データには、<see cref="E:System.Windows.ContentElement.LostFocus" /> イベントの識別子が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1223">This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1224">提供されたイベント データを使って、<see cref="E:System.Windows.ContentElement.LostFocus" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1224">Raises the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1225">このメソッドには、仮想には、イベントを発生させる既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1225">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="0e8b4-1226">この\* メソッドの実装では、イベントを発生させることを意図しています。この同じメソッドの実装は、<xref:System.Windows.ContentElement.IsFocused%2A> プロパティの値が変更されたときにイベントを発生させるために、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1226">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="0e8b4-1227">この実装は、\* 実装上の他の Windows Presentation Foundation (WPF) とは異なります。これは、そのイベントのクラス処理を追加するのに便利な方法のみを提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1227">This implementation differs from some other Windows Presentation Foundation (WPF) On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0e8b4-1228">意図的に、または異常なイベントを発生させない必要がある場合を除き、実装が基本実装を呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1228">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="0e8b4-1229">そうしないと、通常のユーザー操作では、通常はこの要素にフォーカスが設定されているため、<see cref="E:System.Windows.ContentElement.LostFocus" /> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1229">Otherwise, the <see cref="E:System.Windows.ContentElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="0e8b4-1230">要素にフォーカスを設定しない場合は、<see cref="P:System.Windows.ContentElement.Focusable" /> を <see langword="false" />に設定することによって、要素がフォーカスされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1230">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.ContentElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1231">イベント データを格納する <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1231">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1232">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1232">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1233">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1233">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1234">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1234">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1235">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1235">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1236">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1236">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1237">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1237">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1238">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1238">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1239">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1239">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1240">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1240">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1241">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1241">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1242">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1242">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1243">イベント データを格納する <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1243">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1244">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1244">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1245">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1245">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1246">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1246">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1247">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1247">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1248">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1248">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1249">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1249">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1250">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1250">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1251">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1251">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1252">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1252">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1253">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1253">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1254">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1254">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1255">イベント データを格納する <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1255">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1256">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1256">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1257">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1257">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1258">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1258">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1259">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1259">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1260">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1260">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1261">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1261">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1262">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1262">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1263">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1263">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1264">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1264">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1265">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1265">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1266">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1266">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1267">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1267">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1268">この要素がタッチのキャプチャを失ったときに発生する <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1268">Provides class handling for the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1269"><xref:System.Windows.ContentElement.OnLostTouchCapture%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1269">The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1270">派生クラスの <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> をオーバーライドして、<xref:System.Windows.ContentElement.LostTouchCapture> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1270">Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event.</span></span> <span data-ttu-id="0e8b4-1271">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1271">Be sure to call the base class' <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1272">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1272">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1273">このイベント データは、押されたマウス ボタンおよび処理済み状態に関する詳細を報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1273">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1274">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1274">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1275">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1275">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1276">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1276">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="0e8b4-1277">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1277">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="0e8b4-1278">これらの入力システム機能が <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.ContentElement.OnMouseDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1278">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1279">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.ContentElement.MouseLeftButtonDown> と <xref:System.Windows.ContentElement.MouseRightButtonDown>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1279">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="0e8b4-1280">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1280">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="0e8b4-1281">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1281">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="0e8b4-1282">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1282">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="0e8b4-1283">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1283">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="0e8b4-1284"><xref:System.Windows.ContentElement.OnMouseDown%2A>を処理することで、すべての潜在的なマウスボタンのダウンアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1284">By handling <xref:System.Windows.ContentElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="0e8b4-1285">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1285">This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="0e8b4-1286">ボタン固有の各ダイレクトイベントには、virtual On\* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1286">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="0e8b4-1287">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1287">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1288">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1288">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1289">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1289">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1290">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1290">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1291">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1291">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1292">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1292">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1293">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1293">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1294">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1294">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1295">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1295">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1296">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1296">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1297">未処理の <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1297">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1298">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1298">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1299">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1299">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1300">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1300">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1301">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1301">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="0e8b4-1302">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1302">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1303">この場合、一致イベントはルーティングイベントで、直接ルーティング方法が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1303">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="0e8b4-1304">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1304">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1305">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1305">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1306">未処理の <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1306">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1307">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1307">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1308">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1308">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1309">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1309">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1310">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1310">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="0e8b4-1311">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1311">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1312">この場合、一致イベントはルーティングイベントで、直接ルーティング方法が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1312">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="0e8b4-1313">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1313">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1314">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1314">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1315">このイベント データは、マウスの左ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1315">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1316">この要素上で未処理の <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> ルーティング イベントが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1316">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="0e8b4-1317">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1317">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1318"><xref:System.Windows.ContentElement.MouseLeftButtonDown> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1318">The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1319"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.MouseLeftButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1319"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="0e8b4-1320">この要素の目的のために <xref:System.Windows.ContentElement.MouseLeftButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1320">Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1321">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1321">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1322"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1322">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1323">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1323">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1324">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1324">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1325"><xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1325">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="0e8b4-1326">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1326">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="0e8b4-1327">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1327">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="0e8b4-1328">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1328">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="0e8b4-1329">たとえば、<xref:System.Windows.Controls.Button> から派生させ、基本実装を呼び出さずに派生クラスの <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドによって <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントは無効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1329">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1330">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1330">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1331">このイベント データは、マウスの左ボタンが放されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1331">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1332">未処理の <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1332">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1333">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1333">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1334"><xref:System.Windows.ContentElement.MouseLeftButtonUp> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1334">The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1335"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.MouseLeftButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1335"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="0e8b4-1336">この要素の目的のために <xref:System.Windows.ContentElement.MouseLeftButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1336">Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1337">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1337">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1338"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1338">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1339">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1339">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1340">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1340">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1341"><xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1341">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1342">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1342">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1343">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1343">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1344">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1344">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1345">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1345">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1346">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1346">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1347">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1347">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1348">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1348">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1349">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1349">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1350">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1350">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1351">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1351">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1352">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1352">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1353">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1353">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1354">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1354">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1355">このイベント データは、マウスの右ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1355">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1356">未処理の <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1356">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1357">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1357">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1358"><xref:System.Windows.ContentElement.MouseRightButtonDown> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1358">The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1359"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.MouseRightButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1359"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="0e8b4-1360">この要素の目的のために <xref:System.Windows.ContentElement.MouseRightButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1360">Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1361">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1361">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1362"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1362">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1363">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1363">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1364">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1364">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1365"><xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1365">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="0e8b4-1366">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1366">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="0e8b4-1367">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1367">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="0e8b4-1368">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1368">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="0e8b4-1369">たとえば、<xref:System.Windows.Controls.Control> から派生させ、base を呼び出さずに派生クラスの <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドにより、<xref:System.Windows.Controls.Control> の既定の動作の一部であるコントロールのコンテキストメニューサービスが無効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1369">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1370">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1370">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1371">このイベント データは、マウスの右ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1371">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1372">未処理の <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1372">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1373">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1373">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1374"><xref:System.Windows.ContentElement.MouseRightButtonUp> イベントは、バブルルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1374">The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1375"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> はバブルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.MouseRightButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1375"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="0e8b4-1376">この要素の目的のために <xref:System.Windows.ContentElement.MouseRightButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1376">Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1377">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1377">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1378"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1378">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1379">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1379">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1380">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1380">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1381"><xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1381">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1382">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1382">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1383">このイベント データは、マウス ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1383">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1384">未処理の <see cref="E:System.Windows.Input.Mouse.MouseUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1384">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1385">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1385">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1386">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1386">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="0e8b4-1387">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1387">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="0e8b4-1388">これらの入力システム機能が <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.ContentElement.OnMouseUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1388">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1389">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.ContentElement.MouseLeftButtonUp> と <xref:System.Windows.ContentElement.MouseRightButtonUp>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1389">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="0e8b4-1390">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1390">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="0e8b4-1391">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1391">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="0e8b4-1392">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1392">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="0e8b4-1393">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1393">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="0e8b4-1394"><xref:System.Windows.ContentElement.OnMouseUp%2A>を処理することで、すべてのマウスボタンのアップアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1394">By handling <xref:System.Windows.ContentElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="0e8b4-1395">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1395">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="0e8b4-1396">ボタン固有の各ダイレクトイベントには、virtual On\* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1396">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="0e8b4-1397">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1397">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1398">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1398">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1399">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1399">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1400">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1400">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1401">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1401">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1402">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1402">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1403">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1403">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1404">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1404">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1405">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1405">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1406">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1406">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1407">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1407">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1408">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1408">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1409">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1409">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1410">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1410">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1411">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1411">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1412">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1412">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1413">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1413">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1414">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1414">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1415">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1415">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1416">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1416">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1417">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1417">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1418">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1418">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1419">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1419">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1420">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1420">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1421">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1421">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1422">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1422">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1423">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1423">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1424">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1424">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1425">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1425">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1426">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1426">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1427">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1427">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1428">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1428">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1429">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1429">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1430">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1430">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1431">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1431">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1432">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1432">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1433">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1433">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1434">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1434">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1435">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1435">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1436">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1436">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1437">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1437">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1438">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1438">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1439">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1439">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1440">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1440">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1441">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1441">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1442">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1442">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1443">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1443">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1444">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1444">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1445">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1445">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1446">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1446">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1447">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1447">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1448">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1448">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1449">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1449">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1450">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1450">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1451">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1451">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1452">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1452">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1453">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1453">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1454">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1454">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1455">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1455">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1456">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1456">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1457">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1457">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1458">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDrop" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1458">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1459">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1459">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1460">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1460">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1461">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1461">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1462">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1462">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1463">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1463">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1464">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1464">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1465">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1465">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1466">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1466">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1467">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1467">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1468">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1468">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1469">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1469">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1470">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1470">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1471">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1471">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1472">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1472">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1473">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1473">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1474">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1474">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1475">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1475">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1476">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1476">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1477">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1477">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1478">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1478">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1479">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1479">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1480">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1480">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1481">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1481">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1482">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1482">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1483">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1483">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1484">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1484">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1485">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1485">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1486">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1486">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1487">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1487">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1488">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1488">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1489">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1489">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1490">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1490">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1491">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1491">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1492">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1492">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1493">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1493">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1494">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1494">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1495">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1495">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1496">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1496">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1497">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1497">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1498">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1498">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1499">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1499">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1500">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1500">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1501">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1501">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1502">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1502">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1503">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1503">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1504">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1504">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1505">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1505">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1506">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1506">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1507">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1507">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1508">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1508">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1509">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1509">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1510">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1510">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1511">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1511">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1512">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1512">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1513">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1513">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1514">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1514">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1515">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1515">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1516">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1516">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1517">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1517">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1518">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1518">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1519">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1519">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1520">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1520">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1521">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1521">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1522">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1522">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1523">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1523">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1524">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1524">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1525">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1525">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1526">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1526">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1527">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1527">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1528">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1528">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1529">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1529">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1530">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1530">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1531">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1531">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1532">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1532">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1533">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1533">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1534">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1534">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1535">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1535">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1536">このイベント データは、1 つ以上のマウス ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1536">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1537">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1537">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1538">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1538">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1539">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1539">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="0e8b4-1540">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1540">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="0e8b4-1541">これらの入力システム機能が <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1541">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1542">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> と <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1542">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="0e8b4-1543">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1543">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="0e8b4-1544">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1544">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="0e8b4-1545">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1545">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="0e8b4-1546">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1546">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="0e8b4-1547"><xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>を処理することで、すべての潜在的なマウスボタンのダウンアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1547">By handling <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="0e8b4-1548">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1548">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="0e8b4-1549">ボタン固有の各ダイレクトイベントには、virtual On\* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1549">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="0e8b4-1550">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1550">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1551">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1551">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1552">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1552">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1553">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1553">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1554">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1554">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1555">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1555">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1556">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1556">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1557">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1557">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1558">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1558">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1559">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1559">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1560">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1560">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1561">このイベント データは、マウスの左ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1561">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1562">未処理の <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1562">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1563">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1563">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1564"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1564">The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1565"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1565"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="0e8b4-1566">この要素の目的のために <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1566">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1567">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1567">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1568"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1568">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1569">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1569">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1570">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1570">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1571"><xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1571">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="0e8b4-1572">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1572">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="0e8b4-1573">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1573">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="0e8b4-1574">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1574">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="0e8b4-1575">たとえば、<xref:System.Windows.Controls.Button> から派生させ、基本実装を呼び出さずに派生クラスの <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドによって <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントは無効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1575">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1576">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1576">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1577">このイベント データは、マウスの左ボタンが放されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1577">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1578">未処理の <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1578">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1579">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1579">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1580"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1580">The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1581"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1581"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="0e8b4-1582">この要素の目的のために <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1582">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1583">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1583">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1584"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1584">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1585">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1585">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1586">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1586">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1587"><xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1587">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1588">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1588">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1589">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1589">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1590">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1590">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1591">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1591">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1592">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1592">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1593">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1593">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1594">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1594">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1595">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1595">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1596">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1596">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1597">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1597">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1598">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1598">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1599">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1599">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1600">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1600">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1601">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1601">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1602">このイベント データは、マウスの右ボタンが押されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1602">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1603">未処理の <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1603">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1604">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1604">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1605"><xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1605">The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1606"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.MouseRightButtonDown>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1606"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="0e8b4-1607">この要素の目的のために <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1607">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1608">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1608">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1609"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1609">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1610">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1610">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1611">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1611">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1612"><xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1612">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="0e8b4-1613">または、特定のマウス状態のイベント処理を変更するために、このメソッドをオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1613">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="0e8b4-1614">基本実装の呼び出しを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1614">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="0e8b4-1615">Base を呼び出さないと、先祖クラスでそのマウスイベントの既定の入力処理が無効になり、<xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>も呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1615">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="0e8b4-1616">たとえば、<xref:System.Windows.Controls.Control> から派生させ、base を呼び出さずに派生クラスの <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> をオーバーライドできます。ただし、このオーバーライドにより、<xref:System.Windows.Controls.Control> の既定の動作の一部であるコントロールのコンテキストメニューサービスが無効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1616">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1617">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1617">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1618">このイベント データは、マウスの右ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1618">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1619">未処理の <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1619">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1620">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1620">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1621"><xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> イベントは、トンネリングルートを移動するように見えますが、実際には間接的に移動します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1621">The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="0e8b4-1622"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> はトンネルルーティングされる基になるイベントです。イベントルートに沿った各 <xref:System.Windows.ContentElement> は、同一の処理を使用して、直接ルーティングイベント <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>を発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1622"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="0e8b4-1623">この要素の目的のために <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> イベントを処理済みとしてマークできますが、処理された状態は、イベントルートに沿った他の要素に perpetuate ません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1623">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="0e8b4-1624">ただし、一般的なインスタンスハンドラー (`handledEventsToo`が指定されていない) が呼び出されないようにするために、イベントを処理済みとしてマークすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1624">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1625"><xref:System.Windows.ContentElement> での一般的なマウスイベント処理の既定の実装では <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> がリッスンされ、適切なローカルイベントに変換されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1625">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="0e8b4-1626">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1626">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="0e8b4-1627">派生クラスの静的コンストラクターで、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>の代替クラスハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1627">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0e8b4-1628"><xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>をオーバーライドすることによって、<xref:System.Windows.ContentElement> のマウス処理動作を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1628">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1629">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1629">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="0e8b4-1630">このイベント データは、1 つ以上のマウス ボタンが離されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1630">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1631">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1631">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1632">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1632">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1633">マウスボタンの操作も、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1633">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="0e8b4-1634">入力バインドやコマンドバインドなど、マウスボタンの操作に依存するその他のプログラミング機能では、一般的なマウスボタン操作として公開される前に、アクションのハンドラーが呼び出されることがあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1634">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="0e8b4-1635">これらの入力システム機能が <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントを処理済みとしてマークした場合、<xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1635">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="0e8b4-1636">このクラスハンドラーを使用してイベントを処理済みとしてマークすると、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> と <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>に影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1636">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="0e8b4-1637">これらのイベントのいずれかは、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> を受信したときに、受信側の要素で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1637">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="0e8b4-1638">このイベントをクラス処理で処理済みとしてマークした場合、subevents は依然として発生します。ただし、処理された状態はイベントデータに渡されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1638">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="0e8b4-1639">イベントがクラス処理で処理される場合、ハンドラーをアタッチするために `handledEventsToo` `true` で明示的に <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を使用しない限り、subevents のインスタンスハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1639">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="0e8b4-1640">クラスハンドラーは、`handledEventsToo` `true`で <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャに登録されていない限り、呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1640">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="0e8b4-1641"><xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>を処理することで、すべてのマウスボタンのアップアクションをクラスの処理に反映させることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1641">By handling <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="0e8b4-1642">この動作は望ましくない可能性があります。このため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1642">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="0e8b4-1643">ボタン固有の各ダイレクトイベントには、virtual On\* メソッドもあります。これらのボタン固有のクラスハンドラーをオーバーライドする方が適しているかどうかを検討してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1643">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="0e8b4-1644">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1644">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1645">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1645">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1646">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1646">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1647">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1647">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1648">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1648">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1649">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1649">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1650">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1650">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1651">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1651">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1652">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1652">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1653">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1653">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1654">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1654">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1655">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1655">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1656">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1656">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1657">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1657">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1658">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1658">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1659">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1659">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1660">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1660">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1661">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1661">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1662">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1662">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1663">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1663">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1664">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1664">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1665">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1665">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1666">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1666">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1667">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1667">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1668">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1668">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1669">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1669">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1670">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1670">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1671">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1671">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1672">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1672">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1673">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1673">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1674">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1674">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1675">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1675">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1676">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1676">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1677">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1677">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1678">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1678">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1679">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1679">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1680">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1680">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1681">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1681">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1682">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1682">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1683">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1683">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1684">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1684">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1685">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1685">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1686">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1686">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1687">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1687">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1688">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1688">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1689">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1689">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1690">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1690">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1691">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1691">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1692">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1692">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1693">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1693">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1694">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1694">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1695">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1695">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1696">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1696">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1697">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1697">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1698">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1698">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1699">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1699">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1700">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1700">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1701">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1701">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1702">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1702">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1703">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1703">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1704">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1704">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1705">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1705">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1706">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1706">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1707">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1707">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1708">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1708">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1709">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1709">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1710">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1710">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1711">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1711">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1712">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1712">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1713">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1713">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1714">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1714">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1715">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1715">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1716">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1716">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1717">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1717">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1718">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1718">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1719">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1719">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1720">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1720">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1721">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1721">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1722">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1722">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1723">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1723">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1724">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1724">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1725">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1725">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1726">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1726">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1727">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1727">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1728">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1728">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1729">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1729">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1730">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1730">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1731">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1731">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1732">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1732">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1733">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1733">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1734">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1734">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1735">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1735">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1736">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1736">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1737">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1737">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1738">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1738">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1739">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1739">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1740">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1740">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1741">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1741">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1742">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1742">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1743">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1743">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1744">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1744">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1745">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1745">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1746">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1746">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1747">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1747">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1748">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1748">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1749">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1749">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1750">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1750">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1751">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1751">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1752">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1752">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1753">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1753">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1754">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1754">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1755">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1755">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1756">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1756">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1757">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1757">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1758">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1758">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1759">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1759">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1760">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1760">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1761">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1761">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1762">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1762">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1763">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1763">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1764">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1764">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1765">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1765">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1766">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1766">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1767">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1767">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1768">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1768">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1769">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1769">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1770">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1770">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1771">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1771">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1772">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1772">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1773">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1773">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1774">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1774">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1775">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1775">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1776">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1776">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1777">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1777">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1778">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1778">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1779">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1779">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1780">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1780">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1781">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1781">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1782">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1782">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1783">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1783">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1784">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1784">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1785">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1785">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1786">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1786">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1787">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1787">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1788">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1788">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1789">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1789">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1790">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1790">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1791">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1791">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1792">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1792">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1793">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1793">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1794">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1794">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1795">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1795">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1796">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1796">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1797">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1797">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1798">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1798">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1799">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1799">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1800">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1800">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1801">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1801">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1802">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1802">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1803">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1803">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1804">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1804">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1805">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1805">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1806">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1806">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1807">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1807">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="0e8b4-1808">プレビューイベント専用のもう1つのシナリオは、対応するバブルクラスハンドラーが呼び出されないように、それらを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1808">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1809">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1809">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1810">この要素がタッチで押されたときに発生する <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1810">Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1811"><xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1811">The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1812">派生クラスの <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> をオーバーライドして、<xref:System.Windows.ContentElement.PreviewTouchDown> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1812">Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="0e8b4-1813">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1813">Be sure to call the base class' <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1814">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1814">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1815">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1815">Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1816"><xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1816">The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1817">派生クラスの <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> をオーバーライドして、<xref:System.Windows.ContentElement.PreviewTouchMove> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1817">Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="0e8b4-1818">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1818">Be sure to call the base class' <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1819">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1819">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1820">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1820">Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1821"><xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1821">The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1822">派生クラスの <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> をオーバーライドして、<xref:System.Windows.ContentElement.PreviewTouchUp> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1822">Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="0e8b4-1823">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1823">Be sure to call the base class' <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1824">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1824">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1825">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1825">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1826">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1826">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1827">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1827">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1828">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1828">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1829">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1829">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1830">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1830">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1831">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1831">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1832">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1832">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1833">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1833">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1834">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1834">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1835">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1835">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="contentElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1836">イベント データを格納している <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1836">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1837">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1837">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1838">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1838">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1839">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1839">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1840">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1840">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1841">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1841">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1842">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1842">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1843">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1843">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1844">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1844">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1845">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1845">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1846">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1846">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1847">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1847">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1848">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1848">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1849">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1849">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1850">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1850">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1851">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1851">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1852">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1852">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1853">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1853">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1854">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1854">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1855">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1855">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1856">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1856">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1857">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1857">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1858">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1858">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1859">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1859">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1860">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1860">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1861">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1861">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1862">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1862">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1863">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1863">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1864">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1864">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1865">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1865">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1866">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1866">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1867">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1867">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1868">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1868">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1869">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1869">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1870">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1870">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1871">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1871">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1872">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1872">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1873">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1873">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1874">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1874">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1875">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1875">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1876">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1876">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1877">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1877">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1878">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1878">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1879">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1879">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1880">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1880">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1881">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1881">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1882">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1882">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1883">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1883">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1884">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1884">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1885">未処理の <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1885">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="0e8b4-1886">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1886">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1887">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1887">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1888">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1888">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1889">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1889">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="0e8b4-1890">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1890">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1891">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1891">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1892">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1892">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1893">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1893">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1894">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1894">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1895">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1895">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1896">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1896">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1897">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1897">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1898">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1898">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1899">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1899">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1900">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1900">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1901">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1901">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1902">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1902">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1903">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1903">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1904">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1904">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1905">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1905">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1906">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1906">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1907">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1907">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1908">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1908">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1909">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1909">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1910">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1910">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1911">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1911">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1912">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1912">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1913">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1913">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1914">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1914">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1915">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1915">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1916">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1916">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1917">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1917">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1918">未処理の <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1918">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="0e8b4-1919">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1919">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1920">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1920">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1921">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1921">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="0e8b4-1922">基本情報は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1922">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="0e8b4-1923">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1923">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1924">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1924">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1925">イベントを処理済みとしてマークすることは、(`handledEventsToo`を指定しない) 一般的なインスタンスハンドラーが呼び出されないようにする場合にも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1925">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1926">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1926">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1927">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1927">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1928">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1928">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1929">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1929">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1930">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1930">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1931">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1931">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1932">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1932">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1933">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1933">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1934">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1934">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1935">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1935">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1936">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1936">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1937">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1937">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1938">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1938">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1939">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1939">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1940">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1940">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1941">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1941">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1942">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1942">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1943">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1943">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1944">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1944">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1945">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1945">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1946">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1946">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1947">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1947">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1948">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1948">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1949">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1949">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1950">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1950">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1951">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1951">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1952">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1952">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1953">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1953">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1954">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1954">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1955">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1955">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1956">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1956">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1957">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1957">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1958">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1958">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1959">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1959">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1960">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1960">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1961">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1961">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1962">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1962">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1963">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1963">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1964">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1964">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1965">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1965">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1966">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1966">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1967">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1967">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1968">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1968">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1969">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1969">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1970">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1970">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1971">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1971">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1972">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1972">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1973">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1973">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1974">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1974">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1975">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1975">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="0e8b4-1976">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1976">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1977">このメソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1977">This method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1978">継承の中間クラスはこのメソッドを実装する可能性があるため、実装で基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1978">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="0e8b4-1979">このメソッドの目的は、\* メソッドの [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントパターンに似ています。このメソッドは、インスタンスハンドラーではなくクラスハンドラーを確立することによって、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1979">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="0e8b4-1980">この場合、一致イベントはルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1980">In this case the matching event is a routed event.</span></span> <span data-ttu-id="0e8b4-1981">ルーティングイベントは子要素によって発生する可能性がありますが、必ずしもハンドラーを呼び出す要素ではないため、On\* メソッドの実装パターンはルーティングイベントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1981">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="0e8b4-1982">そのため、実装では、イベントデータのソースプロパティを調べる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1982">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="0e8b4-1983">ほとんどの場合、イベントを reraise しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1983">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="0e8b4-1984">このメソッドをオーバーライドするか、<xref:System.Windows.EventManager.RegisterClassHandler%2A>にクラスハンドラーを登録することによって、<xref:System.Windows.ContentElement> の派生クラスは、イベントがイベントルートに沿って受信されたときにプライベートクラスハンドラーメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1984">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="0e8b4-1985">クラス処理が適切なシナリオの1つは、イベントデータを操作し、ルーティングイベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1985">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1986">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1986">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1987">この要素の内部がタッチで押されたときに発生する <see cref="E:System.Windows.ContentElement.TouchDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1987">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1988"><xref:System.Windows.ContentElement.OnTouchDown%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1988">The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1989">派生クラスの <xref:System.Windows.ContentElement.OnTouchDown%2A> をオーバーライドして、<xref:System.Windows.ContentElement.TouchDown> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1989">Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event.</span></span> <span data-ttu-id="0e8b4-1990">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnTouchDown%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1990">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1991">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1991">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1992">この要素の境界の外部から内部にタッチが移動したときに発生する <see cref="E:System.Windows.ContentElement.TouchEnter" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1992">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1993"><xref:System.Windows.ContentElement.OnTouchEnter%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1993">The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1994">派生クラスの <xref:System.Windows.ContentElement.OnTouchEnter%2A> をオーバーライドして、<xref:System.Windows.ContentElement.TouchEnter> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1994">Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event.</span></span> <span data-ttu-id="0e8b4-1995">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnTouchEnter%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1995">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-1996">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1996">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-1997">この要素の境界の内部から外部にタッチが移動したときに発生する <see cref="E:System.Windows.ContentElement.TouchLeave" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1997">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-1998"><xref:System.Windows.ContentElement.OnTouchLeave%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1998">The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-1999">派生クラスの <xref:System.Windows.ContentElement.OnTouchLeave%2A> をオーバーライドして、<xref:System.Windows.ContentElement.TouchLeave> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-1999">Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event.</span></span> <span data-ttu-id="0e8b4-2000">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnTouchLeave%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2000">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-2001">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2001">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-2002">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.ContentElement.TouchMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2002">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2003"><xref:System.Windows.ContentElement.OnTouchMove%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2003">The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-2004">派生クラスの <xref:System.Windows.ContentElement.OnTouchMove%2A> をオーバーライドして、<xref:System.Windows.ContentElement.TouchMove> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2004">Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event.</span></span> <span data-ttu-id="0e8b4-2005">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnTouchMove%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2005">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-2006">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2006">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0e8b4-2007">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.ContentElement.TouchUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2007">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2008"><xref:System.Windows.ContentElement.OnTouchUp%2A> メソッドには既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2008">The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="0e8b4-2009">派生クラスの <xref:System.Windows.ContentElement.OnTouchUp%2A> をオーバーライドして、<xref:System.Windows.ContentElement.TouchUp> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2009">Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event.</span></span> <span data-ttu-id="0e8b4-2010">基本クラスがイベントを受け取るようにするには、基本クラスの <xref:System.Windows.ContentElement.OnTouchUp%2A> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2010">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="contentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="0e8b4-2011">要求したフォーカス検査の方向。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2011">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="0e8b4-2012">派生クラスでオーバーライドされると、指定したフォーカス検査方向のフォーカスを受け取ることになる要素を返します。実際にはフォーカスはその要素に移動しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2012">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-2013"><see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> が実際に呼び出された場合にフォーカスを受け取る要素。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2013">The element that would have received focus if <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2014">このクラスでのこのメソッドの既定の実装は不完全であり、常に `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2014">The default implementation of this method in this class is incomplete and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2015">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2015">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2016">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewDragEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2016">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2017"><xref:System.Windows.ContentElement.PreviewDragEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2017">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2018">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2018">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2019">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2019">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="0e8b4-2020">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2020">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2021">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2021">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2022">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2022">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2023">対応するバブルイベントは <xref:System.Windows.ContentElement.DragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2023">The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2024">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2024">Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2025"><see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2025">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2026">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2026">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2027">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2027">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2028">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2028">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2029">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2029">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2030">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2030">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2031">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2031">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2032">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewDragLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2032">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2033"><xref:System.Windows.ContentElement.PreviewDragLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2033">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2034">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2034">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2035">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2035">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="0e8b4-2036">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2036">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2037">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2037">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2038">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2038">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2039">対応するバブルイベントは <xref:System.Windows.ContentElement.DragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2039">The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2040">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2040">Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2041"><see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2041">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2042">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2042">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2043">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2043">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2044">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2044">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2045">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2045">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2046">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2046">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2047">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2047">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2048">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewDragOver> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2048">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2049"><xref:System.Windows.ContentElement.PreviewDragOver> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2049">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2050">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2050">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2051">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2051">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|<span data-ttu-id="0e8b4-2052">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2052">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2053">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2053">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2054">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2054">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2055">対応するバブルイベントは <xref:System.Windows.ContentElement.DragOver>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2055">The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2056">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewDragOver%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2056">Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2057"><see cref="E:System.Windows.ContentElement.PreviewDragOver" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2057">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2058">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2058">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2059">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2059">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2060">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2060">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2061">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2061">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2062">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2062">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2063">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2063">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2064">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewDrop> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2064">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2065"><xref:System.Windows.ContentElement.PreviewDrop> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2065">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2066">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2066">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2067">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2067">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|<span data-ttu-id="0e8b4-2068">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2068">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2069">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2069">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2070">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2070">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2071">対応するバブルイベントは <xref:System.Windows.ContentElement.Drop>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2071">The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2072">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewDrop%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2072">Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2073"><see cref="E:System.Windows.ContentElement.PreviewDrop" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2073">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2074">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2074">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2075">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2075">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2076">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2076">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2077">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2077">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2078">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2078">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2079">ドラッグ アンド ドロップ操作が開始されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2079">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2080"><xref:System.Windows.ContentElement.PreviewGiveFeedback> イベントを使用すると、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、ドラッグイベントのソースでマウスポインターの外観を変更できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2080">The <xref:System.Windows.ContentElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="0e8b4-2081">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewGiveFeedback> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2081">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2082"><xref:System.Windows.ContentElement.PreviewGiveFeedback> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2082">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2083">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2083">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2084">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2084">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="0e8b4-2085">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2085">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2086">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2086">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2087">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2087">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2088">対応するバブルイベントは <xref:System.Windows.ContentElement.GiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2088">The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2089">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2089">Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2090"><see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2090">Identifies the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2091">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2091">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2092">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2092">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2093">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2093">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2094">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2094">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2095">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2095">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2096">この要素にキーボード フォーカスが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2096">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2097">このイベントではトンネリングルーティングが使用されるため、フォーカスがある要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2097">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-2098">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2098">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="0e8b4-2099">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2099">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2100"><xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2100">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2101">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2101">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2102">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2102">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="0e8b4-2103">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2103">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2104">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2104">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2105">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2105">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2106">対応するバブルイベントは <xref:System.Windows.ContentElement.GotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2106">The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2107">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2107">Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2108"><see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2108">Identifies the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2109">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2109">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2110">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2110">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2111">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2111">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2112">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2112">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2113">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2113">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2114">この要素にキーボード フォーカスがある状態でいずれかのキーが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2114">Occurs when a key is pressed while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2115">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2115">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="0e8b4-2116"><xref:System.Windows.ContentElement.KeyDown> イベントは、特定のコントロールで想定どおりに動作しない可能性がある下位レベルのテキスト入力イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2116">The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="0e8b4-2117">これは、一部のコントロールには、テキスト入力処理と関連イベントの上位レベルのバージョンを提供するコントロールの複合またはクラス処理があるためです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2117">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="0e8b4-2118">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewKeyDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2118">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2119"><xref:System.Windows.ContentElement.PreviewKeyDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2119">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2120">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2120">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2121">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2121">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="0e8b4-2122">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2122">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2123">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2123">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2124">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2124">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2125">対応するバブルイベントは <xref:System.Windows.ContentElement.KeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2125">The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2126">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2126">Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2127"><see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2127">Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2128">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2128">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2129">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2129">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2130">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2130">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2131">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2131">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2132">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2132">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2133">この要素にキーボード フォーカスがある状態でキーが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2133">Occurs when a key is released while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2134">キー処理は、コマンド処理やテキスト構成などの他のプラットフォーム機能とやり取りします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2134">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="0e8b4-2135"><xref:System.Windows.ContentElement.KeyUp> イベントは、特定のコントロールで想定どおりに動作しない可能性がある下位レベルのテキスト入力イベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2135">The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="0e8b4-2136">これは、一部のコントロールには、テキスト入力処理と関連イベントの上位レベルのバージョンを提供するコントロールの複合またはクラス処理があるためです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2136">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="0e8b4-2137">詳細については、個々のコントロールのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2137">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="0e8b4-2138">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewKeyUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2138">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2139"><xref:System.Windows.ContentElement.PreviewKeyUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2139">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2140">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2140">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2141">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2141">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="0e8b4-2142">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2142">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2143">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2143">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2144">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2144">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2145">対応するバブルイベントは <xref:System.Windows.ContentElement.KeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2145">The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2146">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2146">Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2147"><see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2147">Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2148">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2148">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2149">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2149">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2150">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2150">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2151">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2151">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2152">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2152">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2153">この要素からキーボード フォーカスが離れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2153">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2154">このイベントではトンネリングルーティングが使用されるため、フォーカスを失った要素は、イベントハンドラーが実際にアタッチされている要素ではなく子要素になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2154">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="0e8b4-2155">イベントデータの <xref:System.Windows.RoutedEventArgs.Source%2A> を調べて、フォーカスを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2155">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="0e8b4-2156">このイベントは、このクラスの <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2156">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2157"><xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2157">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2158">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2158">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2159">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2159">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="0e8b4-2160">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2160">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2161">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2161">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2162">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2162">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2163">対応するバブルイベントは <xref:System.Windows.ContentElement.LostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2163">The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2164">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2164">Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2165"><see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2165">Identifies the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2166">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2166">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2167">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2167">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2168">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2168">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2169">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2169">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2170">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2170">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2171">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2171">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2172">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewMouseDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2172">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2173"><xref:System.Windows.ContentElement.PreviewMouseDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2173">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2174"><xref:System.Windows.ContentElement.PreviewMouseDown> イベントは、多くの場合、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> または <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2174">The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="0e8b4-2175"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> と <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2175"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="0e8b4-2176"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> または <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2176">See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2177">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2177">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2178">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2178">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="0e8b4-2179">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2179">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2180">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2180">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2181">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2181">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2182">対応するバブルイベントは <xref:System.Windows.ContentElement.MouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2182">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2183">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2183">Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2184"><see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2184">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2185">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2185">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2186">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2186">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2187">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2187">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2188">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2188">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2189">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2189">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2190">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2190">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2191">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2191">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-2192">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2192">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-2193">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2193">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-2194">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2194">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-2195">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2195">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-2196">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2196">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-2197">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2197">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2198">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2198">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2199">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2199">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="0e8b4-2200">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2200">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2201">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2201">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2202">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2202">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2203">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2203">Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2204"><see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2204">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2205">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2205">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2206">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2206">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2207">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2207">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2208">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2208">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2209">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2209">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2210">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2210">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2211">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2211">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-2212">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2212">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-2213">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2213">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-2214">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2214">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-2215">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2215">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-2216">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2216">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-2217">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2217">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2218">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2218">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2219">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2219">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="0e8b4-2220">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2220">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2221">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2221">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2222">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2222">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2223">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2223">Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2224"><see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2224">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2225">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2225">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2226">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2226">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2227">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2227">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2228">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2228">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2229">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2229">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2230">この要素上でマウス ポインターが動かされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2230">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2231">このイベントは、マウスポインターが要素の境界内に最初に入ってから、マウスポインターが要素の境界内に残ったままになると、両方とも発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2231">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="0e8b4-2232">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewMouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2232">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2233"><xref:System.Windows.ContentElement.PreviewMouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2233">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2234">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2234">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2235">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2235">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="0e8b4-2236">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2236">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2237">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2237">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2238">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2238">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2239">対応するバブルイベントは <xref:System.Windows.ContentElement.MouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2239">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2240">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2240">Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2241"><see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2241">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2242">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2242">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2243">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2243">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2244">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2244">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2245">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2245">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2246">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2246">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2247">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2247">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2248">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2248">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-2249">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2249">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-2250">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2250">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-2251">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2251">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-2252">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2252">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-2253">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2253">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-2254">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2254">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2255">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2255">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2256">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2256">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="0e8b4-2257">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2257">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2258">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2258">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2259">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2259">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2260">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2260">Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2261"><see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2261">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2262">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2262">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2263">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2263">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2264">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2264">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2265">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2265">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2266">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2266">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2267">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2267">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2268">この[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)は、要素ツリーを通じてトンネリングルートに従うように見えますが、実際には、各 <xref:System.Windows.ContentElement>によって要素ツリーに沿って発生する直接ルーティングイベントです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2268">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-2269">このイベントは、イベントルートに沿って各要素によって処理される添付イベントである、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントのマウスボタンの詳細を報告する、関連するいくつかのイベントの1つです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2269">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="0e8b4-2270">このイベントの引数は、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントの引数を公開します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2270">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="0e8b4-2271">イベントルートに従ってイベントが処理済みとしてマークされている場合は、マウスボタンの特定のイベントが引き続き発生します。ただし、マウスボタンの特定のイベントのハンドラーは、イベントのリスナーにするために、既に処理済みとしてマークされているイベントを処理するオプションを使用して、明示的に <xref:System.Windows.ContentElement.AddHandler%2A>を呼び出すことによって追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2271">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="0e8b4-2272">概念的には、このイベント (および <xref:System.Windows.ContentElement>でのその他のマウスボタンイベント) は、(<xref:System.Windows.Input.Mouse> クラスによって提供されるサービス定義を使用した) マウス "サービス" と考えることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2272">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="0e8b4-2273">イベントは、イベントデータ内の元のマウスイベントのマウスボタンの状態 (左右、上から下) をチェックしなくて済むようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2273">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="0e8b4-2274">標準以外のボタンの状態を確認するなど、より高度なシナリオでは、<xref:System.Windows.ContentElement>ではなく、<xref:System.Windows.Input.Mouse> クラスで Api を使用することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2274">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2275">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2275">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2276">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2276">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="0e8b4-2277">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2277">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2278">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2278">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2279">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2279">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2280">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2280">Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2281"><see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2281">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2282">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2282">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2283">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2283">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2284">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2284">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2285">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2285">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2286">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2286">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2287">この要素の上にマウス ポインターがある状態でいずれかのマウス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2287">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2288">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewMouseUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2288">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2289"><xref:System.Windows.ContentElement.PreviewMouseUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2289">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2290"><xref:System.Windows.ContentElement.PreviewMouseUp> イベントは、多くの場合、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> または <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>と共に発生します。これは、2つの標準マウスボタンのいずれかの押下に対応します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2290">The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="0e8b4-2291"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> と <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> もルーティングイベントですが、これらは直接ルーティングイベントであり、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> イベントがイベントルートに沿ってこの要素に到達すると、適切なボタン固有のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2291"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="0e8b4-2292"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> または <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2292">See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2293">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2293">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2294">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2294">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="0e8b4-2295">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2295">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2296">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2296">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2297">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2297">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2298">対応するバブルイベントは <xref:System.Windows.ContentElement.MouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2298">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2299">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2299">Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2300"><see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2300">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2301">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2301">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2302">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2302">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2303">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2303">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2304">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2304">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2305">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2305">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2306">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2306">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2307">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素からこのイベントを受け取った場合、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2307">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="0e8b4-2308">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewMouseMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2308">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2309"><xref:System.Windows.ContentElement.PreviewMouseMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2309">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2310">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2310">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2311">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2311">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="0e8b4-2312">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2312">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2313">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2313">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2314">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2314">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2315">対応するバブルイベントは <xref:System.Windows.ContentElement.MouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2315">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2316">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2316">Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2317"><see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2317">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2318">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2318">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2319">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2319">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2320">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2320">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2321">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2321">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2322">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2322">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2323">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2323">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2324"><xref:System.Windows.ContentElement.PreviewQueryContinueDrag> イベントを使用すると、ドラッグ元はドラッグアンドドロップ操作をキャンセルする必要があるかどうかを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2324">The <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="0e8b4-2325">このイベントは、このクラスの <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewQueryContinueDrag> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2325">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2326"><xref:System.Windows.ContentElement.PreviewQueryContinueDrag> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2326">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2327">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2327">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2328">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2328">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="0e8b4-2329">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2329">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2330">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2330">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2331">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2331">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2332">対応するバブルイベントは <xref:System.Windows.ContentElement.QueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2332">The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2333">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2333">Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2334"><see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2334">Identifies the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2335">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2335">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2336">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2336">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2337">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2337">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2338">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2338">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2339">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2339">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2340">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2340">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2341">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusButtonDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2341">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2342"><xref:System.Windows.ContentElement.PreviewStylusButtonDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2342">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2343">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2343">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2344">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2344">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2345">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2345">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2346">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2346">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="0e8b4-2347">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2347">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2348">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2348">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2349">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2349">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2350">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2350">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2351">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2351">Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2352"><see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2352">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2353">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2353">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2354">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2354">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2355">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2355">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2356">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2356">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2357">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2357">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2358">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2358">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2359">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusButtonUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2359">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2360"><xref:System.Windows.ContentElement.PreviewStylusButtonUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2360">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2361">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2361">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2362">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2362">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2363">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2363">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2364">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2364">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="0e8b4-2365">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2365">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2366">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2366">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2367">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2367">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2368">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2368">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2369">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2369">Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2370"><see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2370">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2371">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2371">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2372">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2372">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2373">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2373">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2374">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2374">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2375">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2375">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2376">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2376">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2377">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2377">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2378"><xref:System.Windows.ContentElement.PreviewStylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2378">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2379">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2379">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2380">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2380">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2381">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2381">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2382">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2382">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="0e8b4-2383">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2383">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2384">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2384">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2385">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2385">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2386">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2386">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2387">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2387">Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2388"><see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2388">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2389">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2389">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2390">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2390">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2391">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2391">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2392">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2392">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2393">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2393">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2394">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2394">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2395">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusInAirMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2395">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2396"><xref:System.Windows.ContentElement.PreviewStylusInAirMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2396">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2397">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2397">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2398">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2398">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2399">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2399">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2400">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2400">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="0e8b4-2401">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2401">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2402">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2402">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2403">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2403">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2404">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2404">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2405">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2405">Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2406"><see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2406">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2407">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2407">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2408">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2408">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2409">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2409">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2410">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2410">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2411">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2411">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2412">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2412">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2413">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusInRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2413">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2414"><xref:System.Windows.ContentElement.PreviewStylusInRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2414">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2415">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2415">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2416">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2416">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2417">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2417">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2418">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2418">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="0e8b4-2419">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2419">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2420">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2420">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2421">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2421">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2422">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2422">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2423">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2423">Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2424"><see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2424">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2425">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2425">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2426">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2426">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2427">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2427">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2428">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2428">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2429">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2429">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2430">スタイラスが要素上にあるときにスタイラスが移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2430">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="0e8b4-2431">このイベントを発生させるためには、デジタイザーによって検出されている間にスタイラスが移動する必要があります。それ以外の場合には、代わりに <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> が発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2431">The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2432">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2432">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2433"><xref:System.Windows.ContentElement.PreviewStylusMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2433">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2434">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2434">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2435">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2435">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2436">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2436">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2437">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2437">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="0e8b4-2438">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2438">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2439">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2439">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2440">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2440">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2441">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2441">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2442">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2442">Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2443"><see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2443">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2444">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2444">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2445">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2445">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2446">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2446">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2447">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2447">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2448">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2448">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2449">スタイラスがデジタイザーから離れすぎているために検出されないときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2449">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2450">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusOutOfRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2450">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2451"><xref:System.Windows.ContentElement.PreviewStylusOutOfRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2451">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2452">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2452">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2453">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2453">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2454">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2454">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2455">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2455">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="0e8b4-2456">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2456">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2457">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2457">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2458">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2458">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2459">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2459">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2460">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2460">Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2461"><see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2461">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2462">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2462">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2463">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2463">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2464">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2464">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2465">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2465">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2466">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2466">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2467">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2467">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2468">スタイラスジェスチャの詳細については、「<xref:System.Windows.Input.SystemGesture>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2468">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="0e8b4-2469">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusSystemGesture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2469">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2470"><xref:System.Windows.ContentElement.PreviewStylusSystemGesture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2470">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2471">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2471">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2472">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2472">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2473">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2473">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2474">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2474">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="0e8b4-2475">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2475">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2476">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2476">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2477">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2477">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2478">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2478">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2479">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2479">Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2480"><see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2480">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2481">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2481">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2482">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2482">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2483">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2483">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2484">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2484">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2485">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2485">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2486">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2486">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2487">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewStylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2487">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2488"><xref:System.Windows.ContentElement.PreviewStylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2488">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2489">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2489">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2490">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2490">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2491">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2491">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2492">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2492">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="0e8b4-2493">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2493">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2494">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2494">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2495">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2495">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2496">対応するバブルイベントは <xref:System.Windows.ContentElement.StylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2496">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2497">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2497">Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2498"><see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2498">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2499">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2499">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2500">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2500">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2501">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2501">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2502">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2502">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2503">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2503">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2504">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2504">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2505"><xref:System.Windows.ContentElement.PreviewTextInput> イベントを使用すると、コンポーネントまたはアプリケーションは、デバイスに依存しない方法でテキスト入力をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2505">The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="0e8b4-2506">キーボードは <xref:System.Windows.ContentElement.PreviewTextInput>の主な手段です。ただし、音声、手書き、およびその他の入力デバイスでも <xref:System.Windows.ContentElement.PreviewTextInput>が生成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2506">The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="0e8b4-2507">キーの組み合わせ (既定のキーボードまたは入力方式のエディター) では、複数のキーイベントによってテキスト入力イベントが1つだけ発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2507">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="0e8b4-2508">このイベントは、このクラスの <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.PreviewTextInput> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2508">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2509"><xref:System.Windows.ContentElement.PreviewTextInput> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2509">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2510">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2510">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2511">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2511">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|<span data-ttu-id="0e8b4-2512">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2512">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2513">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2513">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2514">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2514">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2515">対応するバブルイベントは <xref:System.Windows.ContentElement.TextInput>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2515">The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2516">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewTextInput%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2516">Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2517"><see cref="E:System.Windows.ContentElement.PreviewTextInput" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2517">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2518">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2518">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2519">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2519">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2520">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2520">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2521">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2521">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2522">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2522">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2523">指がこの要素の上にある間に、その指で画面に触れると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2523">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2524">既定では、<xref:System.Windows.ContentElement.PreviewTouchDown> イベントと <xref:System.Windows.ContentElement.TouchDown> イベントは、指が画面に触れると移動するまで発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2524">By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="0e8b4-2525">画面上で指を押しながら移動せずに押すと、<xref:System.Windows.Input.Stylus>のプレスアンドホールド動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2525">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="0e8b4-2526">プレスアンドホールドの動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2526">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="0e8b4-2527">指が画面に触れるとすぐに <xref:System.Windows.ContentElement.PreviewTouchDown> および <xref:System.Windows.ContentElement.TouchDown> イベントが発生するようにするには、この要素の <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 添付プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2527">To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2528">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2528">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2529">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2529">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="0e8b4-2530">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2530">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2531">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2531">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2532">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2532">Delegate</span></span>|<span data-ttu-id="0e8b4-2533"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2533"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2534">対応するバブルイベントは <xref:System.Windows.ContentElement.TouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2534">The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2535">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2535">Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2536"><see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2536">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2537">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2537">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2538">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2538">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2539">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2539">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="0e8b4-2540">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2540">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2541">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2541">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2542">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2542">Delegate</span></span>|<span data-ttu-id="0e8b4-2543"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2543"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2544">対応するバブルイベントは <xref:System.Windows.ContentElement.TouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2544">The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2545">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2545">Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2546"><see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2546">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2547">この要素の上に指があるときに、その指が画面から離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2547">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2548">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2548">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2549">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2549">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="0e8b4-2550">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2550">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2551">トンネリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2551">Tunneling</span></span>|  
|<span data-ttu-id="0e8b4-2552">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2552">Delegate</span></span>|<span data-ttu-id="0e8b4-2553"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2553"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2554">対応するバブルイベントは <xref:System.Windows.ContentElement.TouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2554">The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2555">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2555">Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2556"><see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2556">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2557">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2557">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2558"><xref:System.Windows.ContentElement.QueryContinueDrag> イベントは、ドラッグ元がドラッグアンドドロップ操作をキャンセルする必要があるかどうかを判断するために使用します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2558">The <xref:System.Windows.ContentElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="0e8b4-2559">このイベントは、このクラスの <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.QueryContinueDrag> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2559">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2560"><xref:System.Windows.ContentElement.QueryContinueDrag> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2560">Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2561">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2561">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2562">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2562">Identifier field</span></span>|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|<span data-ttu-id="0e8b4-2563">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2563">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2564">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2564">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2565">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2565">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2566">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2566">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2567">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2567">Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2568"><see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2568">Identifies the <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2569">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2569">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2570">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2570">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2571">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2571">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2572">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2572">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2573">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2573">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2574">カーソルの表示が要求されると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2574">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="0e8b4-2575">このイベントは、マウス ポインターが別の位置へ移動するたびに要素上で発生します。したがって、場合によってはカーソル オブジェクトを移動先の位置に基づいて変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2575">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2576">このイベントは、このクラスの <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.QueryCursor> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2576">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2577"><xref:System.Windows.ContentElement.QueryCursor> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2577">Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2578">このイベント名によって参照されているカーソルは、必ずしもテキストカーソル (挿入ポイントとも呼ばれます) ではありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2578">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="0e8b4-2579">代わりに、このコンテキストのカーソルは、Windows プログラミングにおけるいくつかの入力関連のデバイスまたは概念に関連する、画面上のグラフィカルな表示を宣言するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2579">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="0e8b4-2580">このオブジェクトは、WPF の <xref:System.Windows.Input.Cursor> クラスによって表されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2580">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="0e8b4-2581">WPF 入力システムでは、マウスポインターの画面上の位置を表すときに、このカーソルを変更できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2581">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="0e8b4-2582"><xref:System.Windows.Input.Cursors> 列挙体の定義済みの値を使用することも、カスタムカーソルをイメージファイルとして宣言することもできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2582">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="0e8b4-2583"><xref:System.Windows.ContentElement.QueryCursor> イベントのリッスンは、カーソル管理の効率的な手法ではありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2583">Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="0e8b4-2584">代わりに、各要素は <xref:System.Windows.FrameworkContentElement.Cursor%2A> と <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>を使用して独自のカーソル動作を定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2584">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="0e8b4-2585"><xref:System.Windows.ContentElement.QueryCursor> に依存するのは、WPF フレームワークレベルの基本要素を使用していない場合、または要素単位でカーソル動作を定義するときにニーズを満たしていない特殊な状況においてのみです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2585">You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="0e8b4-2586"><xref:System.Windows.ContentElement.QueryCursor>に応答してカーソル動作を実装する方法の詳細については、「<xref:System.Windows.Input.QueryCursorEventHandler>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2586">For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2587">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2587">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2588">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2588">Identifier field</span></span>|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|<span data-ttu-id="0e8b4-2589">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2589">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2590">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2590">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2591">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2591">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2592">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2592">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="0e8b4-2593">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnQueryCursor%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2593">Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2594"><see cref="E:System.Windows.ContentElement.QueryCursor" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2594">Identifies the <see cref="E:System.Windows.ContentElement.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2595">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2595">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2596">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2596">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2597">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2597">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2598">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2598">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2599">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2599">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0e8b4-2600">イベント データを格納し、発生するイベントを識別する <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2600">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="0e8b4-2601">特定のルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2601">Raises a specific routed event.</span></span> <span data-ttu-id="0e8b4-2602">発生する <see cref="T:System.Windows.RoutedEvent" /> は、提供された <see cref="T:System.Windows.RoutedEventArgs" /> インスタンス内で識別されます (そのイベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティとして)。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2602">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2603">`e` パラメーターは、すべてのルーティングイベントデータの共通基本型として型指定されます。ただし、イベントデータは、発生したイベントに対して使用できる最も具体的なイベントデータ型として指定する必要があります。これは <xref:System.Windows.RoutedEventArgs> 派生クラスに、発生時に特定のイベントを想定した実際のデータプロパティが含まれているためです。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2603">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="0e8b4-2604"><xref:System.Windows.RoutedEventArgs> は、イベントの状態プロパティではありません。また、どのルーティングイベントを発生させるかも識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2604"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="0e8b4-2605">このイベント発生パターンとルーティングイベントデータはどちらも、イベントに関連するプロパティだけを含む [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] イベントとデータクラスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2605">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-2606">次の例では、イベントデータを作成し、イベント識別子をデータに追加した後、イベントデータインスタンスを使用してカスタムルーティングイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2606">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="contentElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-2607">キャプチャされているすべてのタッチ デバイスをこの要素から解放します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2607">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="contentElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-2608">この要素がマウス キャプチャを保持していた場合、キャプチャを解放します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2608">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2609">この要素がキャプチャを保持していない場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2609">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="0e8b4-2610">このメソッドを呼び出す前に、<xref:System.Windows.ContentElement.IsMouseCaptured%2A> の値を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2610">Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e8b4-2611">次のハンドラーは、マウスボタンの状態に従って、マウスキャプチャをキャプチャまたは解放します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2611">The following handler captures or releases mouse capture according to mouse button states.</span></span> <span data-ttu-id="0e8b4-2612">この例では、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]でマウスポインターを移動する以外に、キャプチャされたマウスの動きを別の目的で使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2612">The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="contentElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-2613">この要素がスタイラス デバイス キャプチャを保持していた場合、キャプチャを解放します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2613">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2614">この要素がキャプチャを保持していない場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2614">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="0e8b4-2615">このメソッドを呼び出す前に、<xref:System.Windows.ContentElement.IsStylusCaptured%2A> の値を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2615">Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="0e8b4-2616">解放の対象となるデバイス。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2616">The device to release.</span></span></param>
        <summary><span data-ttu-id="0e8b4-2617">指定されたタッチ デバイスをこの要素から解放することを試みます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2617">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-2618">タッチ デバイスが解放された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2618"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0e8b4-2619"><paramref name="touchDevice" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2619"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="0e8b4-2620">ハンドラーがアタッチされているルーティング イベントの識別子。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2620">The identifier of the.routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="0e8b4-2621">この要素のイベント ハンドラー コレクションから削除する特定のハンドラー実装。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2621">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="0e8b4-2622">指定したルーティング イベント ハンドラーをこの要素から削除します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2622">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2623">この API を使用する最も一般的なシナリオは、カスタムルーティングイベントに関連付けられた [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "ラッパー" イベントを実装する場合です。具体的には、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] レベルでハンドラーの "削除" ロジックを実装する場合です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2623">The most common scenario for using this API is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="0e8b4-2624">この例では、このシナリオについて説明します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2624">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="0e8b4-2625">メソッド呼び出しの入力パラメーターに一致する条件に登録されたハンドラーがない場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2625">Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="0e8b4-2626">条件に一致する複数のハンドラーがアタッチされている場合は、イベントハンドラーストア内の最初のハンドラーだけが削除されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2626">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="0e8b4-2627">この動作は、`-=` 演算子の [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] の動作と一致します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2627">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="0e8b4-2628">`routedEvent` も `handler` も `null`ない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2628">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="0e8b4-2629">いずれかの値を `null` として指定しようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2629">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="0e8b4-2630">このメソッドは `handledEventsToo` パラメーター情報を無視します。これは、既に処理されたイベントの処理を可能にする <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> シグネチャを使用してハンドラーが最初に追加された場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2630">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="0e8b4-2631">どちらの種類のハンドラーも削除されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2631">Either type of handler is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-2632">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.ContentElement.CommandBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2632">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-2633"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.ContentElement.CommandBindings" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2633"><see langword="true" /> if the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2634">これは、<xref:System.Windows.ContentElement.CommandBindings%2A> がローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2634">This will return `true` if <xref:System.Windows.ContentElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="0e8b4-2635">この `ShouldSerialize` メソッドは、<xref:System.Windows.UIElement.CommandBindings%2A> プロパティに単純な既定値がないために用意されています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2635">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="0e8b4-2636">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2636">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="0e8b4-2637">通常、このメソッドは、デザイナーを開発しているか、<xref:System.Windows.UIElement>を組み込んだ独自のコントロールを開発している場合に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2637">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-2638">詳細については、「 [ShouldSerialize メソッドと Reset メソッドによる既定値の定義](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2638">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e8b4-2639">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.ContentElement.InputBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2639">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="0e8b4-2640"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.ContentElement.InputBindings" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2640"><see langword="true" /> if the <see cref="P:System.Windows.ContentElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2641">これは、<xref:System.Windows.ContentElement.InputBindings%2A> がローカルに設定されている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2641">This will return `true` if <xref:System.Windows.ContentElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="0e8b4-2642">この `ShouldSerialize` メソッドは、<xref:System.Windows.UIElement.InputBindings%2A> プロパティに単純な既定値がないために用意されています。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2642">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="0e8b4-2643">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2643">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="0e8b4-2644">通常、このメソッドは、デザイナーを開発しているか、<xref:System.Windows.UIElement>を組み込んだ独自のコントロールを開発している場合に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2644">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="0e8b4-2645">詳細については、「 [ShouldSerialize メソッドと Reset メソッドによる既定値の定義](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2645">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2646">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2646">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2647">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusButtonDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2647">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2648"><xref:System.Windows.ContentElement.StylusButtonDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2648">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2649">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2649">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2650">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2650">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2651">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2651">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2652">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2652">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|<span data-ttu-id="0e8b4-2653">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2653">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2654">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2654">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2655">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2655">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2656">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2656">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2657">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusButtonDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2657">Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2658"><see cref="E:System.Windows.ContentElement.StylusButtonDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2658">Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2659">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2659">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2660">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2660">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2661">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2661">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2662">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2662">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2663">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2663">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2664">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2664">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2665">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusButtonUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2665">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2666"><xref:System.Windows.ContentElement.StylusButtonUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2666">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2667">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2667">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2668">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2668">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2669">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2669">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2670">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2670">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|<span data-ttu-id="0e8b4-2671">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2671">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2672">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2672">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2673">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2673">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2674">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2674">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2675">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusButtonUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2675">Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2676"><see cref="E:System.Windows.ContentElement.StylusButtonUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2676">Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2677">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2677">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2678">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2678">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2679">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2679">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2680">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2680">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2681">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2681">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2682">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2682">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2683">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusDown> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2683">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2684"><xref:System.Windows.ContentElement.StylusDown> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2684">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2685">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2685">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2686">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2686">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2687">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2687">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2688">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2688">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|<span data-ttu-id="0e8b4-2689">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2689">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2690">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2690">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2691">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2691">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2692">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2692">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2693">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2693">Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2694"><see cref="E:System.Windows.ContentElement.StylusDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2694">Identifies the <see cref="E:System.Windows.ContentElement.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2695">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2695">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2696">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2696">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2697">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2697">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2698">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2698">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2699">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2699">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2700">スタイラスがこの要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2700">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2701"><xref:System.Windows.ContentElement.StylusEnter> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2701"><xref:System.Windows.ContentElement.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="0e8b4-2702">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2702">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="0e8b4-2703">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2703">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="0e8b4-2704"><xref:System.Windows.ContentElement.StylusEnter> は、スタイラスが要素の境界内に入るタイミングを追跡しますが、このイベントはさらに、<xref:System.Windows.ContentElement.IsStylusOver%2A> プロパティ値が `false` からこの要素の `true` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2704">Although <xref:System.Windows.ContentElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="0e8b4-2705">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusEnter> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2705">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2706"><xref:System.Windows.ContentElement.StylusEnter> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2706">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2707">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2707">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2708">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2708">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2709">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2709">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2710">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2710">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|<span data-ttu-id="0e8b4-2711">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2711">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2712">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2712">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2713">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2713">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2714">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2714">Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2715"><see cref="E:System.Windows.ContentElement.StylusEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2715">Identifies the <see cref="E:System.Windows.ContentElement.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2716">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2716">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2717">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2717">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2718">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2718">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2719">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2719">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2720">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2720">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2721">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2721">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2722">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusInAirMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2722">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2723"><xref:System.Windows.ContentElement.StylusInAirMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2723">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2724">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2724">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2725">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2725">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2726">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2726">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2727">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2727">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="0e8b4-2728">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2728">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2729">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2729">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2730">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2730">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2731">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2731">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2732">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusInAirMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2732">Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2733"><see cref="E:System.Windows.ContentElement.StylusInAirMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2733">Identifies the <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2734">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2734">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2735">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2735">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2736">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2736">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2737">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2737">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2738">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2738">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2739">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2739">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2740">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusInRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2740">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2741"><xref:System.Windows.ContentElement.StylusInRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2741">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2742">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2742">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2743">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2743">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2744">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2744">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2745">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2745">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|<span data-ttu-id="0e8b4-2746">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2746">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2747">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2747">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2748">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2748">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2749">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2749">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2750">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusInRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2750">Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2751"><see cref="E:System.Windows.ContentElement.StylusInRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2751">Identifies the <see cref="E:System.Windows.ContentElement.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2752">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2752">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2753">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2753">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2754">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2754">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2755">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2755">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2756">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2756">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2757">スタイラスが要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2757">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2758"><xref:System.Windows.ContentElement.StylusLeave> は、ダイレクトイベント処理ルーティング戦略を使用する[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2758"><xref:System.Windows.ContentElement.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="0e8b4-2759">ルートに沿って直接ルーティングイベントは発生しません。代わりに、それらが発生した要素で処理されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2759">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="0e8b4-2760">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面が有効になります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2760">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="0e8b4-2761"><xref:System.Windows.ContentElement.StylusLeave> はスタイラスが要素の境界内から出たときに追跡しますが、このイベントはさらに、<xref:System.Windows.ContentElement.IsStylusOver%2A> プロパティ値が `true` からこの要素の `false` に変更されたことを報告します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2761">Although <xref:System.Windows.ContentElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="0e8b4-2762">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusLeave> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2762">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2763"><xref:System.Windows.ContentElement.StylusLeave> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2763">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2764">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2764">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2765">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2765">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2766">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2766">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2767">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2767">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|<span data-ttu-id="0e8b4-2768">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2768">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2769">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2769">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2770">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2770">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2771">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2771">Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2772"><see cref="E:System.Windows.ContentElement.StylusLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2772">Identifies the <see cref="E:System.Windows.ContentElement.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2773">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2773">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2774">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2774">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2775">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2775">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2776">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2776">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2777">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2777">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2778">スタイラスがこの要素上を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2778">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="0e8b4-2779">このイベントを発生させるには、デジタイザー上でスタイラスを移動する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2779">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="0e8b4-2780">それ以外の場合は、代わりに <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> が発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2780">Otherwise, <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2781">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusMove> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2781">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2782"><xref:System.Windows.ContentElement.StylusMove> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2782">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2783">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2783">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2784">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2784">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2785">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2785">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2786">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2786">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|<span data-ttu-id="0e8b4-2787">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2787">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2788">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2788">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2789">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2789">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2790">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2790">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2791">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2791">Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2792"><see cref="E:System.Windows.ContentElement.StylusMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2792">Identifies the <see cref="E:System.Windows.ContentElement.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2793">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2793">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2794">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2794">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2795">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2795">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2796">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2796">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2797">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2797">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2798">この要素上でスタイラスが検出可能になるにはデジタイザーから離れすぎているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2798">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2799">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusOutOfRange> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2799">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2800"><xref:System.Windows.ContentElement.StylusOutOfRange> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2800">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2801">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2801">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2802">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2802">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2803">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2803">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2804">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2804">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="0e8b4-2805">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2805">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2806">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2806">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2807">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2807">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2808">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2808">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2809">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2809">Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2810"><see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2810">Identifies the <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2811">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2811">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2812">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2812">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2813">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2813">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2814">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2814">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2815">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2815">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2816">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2816">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2817">スタイラスジェスチャの詳細については、「<xref:System.Windows.Input.SystemGesture>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2817">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="0e8b4-2818">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusSystemGesture> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2818">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2819"><xref:System.Windows.ContentElement.StylusSystemGesture> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2819">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2820">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2820">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2821">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2821">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2822">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2822">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2823">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2823">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="0e8b4-2824">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2824">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2825">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2825">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2826">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2826">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2827">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2827">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2828">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2828">Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2829"><see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2829">Identifies the <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2830">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2830">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2831">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2831">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2832">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2832">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2833">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2833">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2834">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2834">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2835">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2835">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2836">このイベントは、このクラスの <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.StylusUp> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2836">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2837"><xref:System.Windows.ContentElement.StylusUp> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2837">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="0e8b4-2838">タッチ、マウス、およびスタイラスの入力は、特定の関係にあります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2838">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="0e8b4-2839">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2839">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2840">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2840">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2841">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2841">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|<span data-ttu-id="0e8b4-2842">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2842">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2843">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2843">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2844">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2844">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2845">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewStylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2845">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2846">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnStylusUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2846">Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2847"><see cref="E:System.Windows.ContentElement.StylusUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2847">Identifies the <see cref="E:System.Windows.ContentElement.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2848">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2848">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2849">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2849">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2850">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2850">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2851">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2851">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2852">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2852">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2853">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2853">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="0e8b4-2854">このイベントは、複合コントロールの内部実装によって処理済みとして既にマークされている場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2854">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="0e8b4-2855">以下の注釈を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2855">See Remark below.</span></span>  
  
 <span data-ttu-id="0e8b4-2856"><xref:System.Windows.ContentElement.TextInput> イベントは、複合コントロールの内部実装によって処理済みとして既にマークされている場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2856">The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="0e8b4-2857">たとえば、<xref:System.Windows.Controls.TextBox> は、<xref:System.Windows.ContentElement.TextInput> イベントが既に処理済みとしてマークされている複合コントロールです。その複合内。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2857">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="0e8b4-2858">コントロールは、方向キーなど、一部の種類の入力をそのコントロールに対して特別な意味を持つものとして解釈する必要があるため、これを行います。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2858">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="0e8b4-2859">テキスト入力のハンドラーをアタッチするイベントとして <xref:System.Windows.ContentElement.PreviewTextInput> を使用すると、より良い結果が得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2859">If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="0e8b4-2860">この手法を使用すると、コントロールの構成によってこのイベントが既に処理済みとしてマークされている場合は、イベントルートに沿ってハンドラーがイベントを受信できなくなります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2860">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="0e8b4-2861"><xref:System.Windows.ContentElement.TextInput> イベントを使用すると、コンポーネントまたはアプリケーションは、デバイスに依存しない方法でテキスト入力をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2861">The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="0e8b4-2862">キーボードは <xref:System.Windows.ContentElement.TextInput>の主な手段ですが、音声、手書き、およびその他の入力デバイスも <xref:System.Windows.ContentElement.TextInput>を発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2862">The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>.</span></span>  
  
 <span data-ttu-id="0e8b4-2863">キーの組み合わせにより、既定のキーボードまたは入力方式のエディターによって、複数のキーイベントによってテキスト入力イベントが1つだけ発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2863">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="0e8b4-2864">このイベントは、このクラスの <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 添付イベントのエイリアスを作成し、<xref:System.Windows.ContentElement> が基本要素として継承されている場合に、<xref:System.Windows.ContentElement.TextInput> がクラスメンバーリストの一部になるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2864">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="0e8b4-2865"><xref:System.Windows.ContentElement.TextInput> イベントにアタッチされるイベントハンドラーは、基になる <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> アタッチされるイベントにアタッチされ、同じイベントデータインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2865">Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2866">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2866">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2867">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2867">Identifier field</span></span>|<xref:System.Windows.ContentElement.TextInputEvent>|  
|<span data-ttu-id="0e8b4-2868">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2868">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2869">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2869">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2870">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2870">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="0e8b4-2871">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewTextInput>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2871">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2872">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnTextInput%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2872">Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2873"><see cref="E:System.Windows.ContentElement.TextInput" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2873">Identifies the <see cref="E:System.Windows.ContentElement.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2874">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2874">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="0e8b4-2875">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2875">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="0e8b4-2876">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2876">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="0e8b4-2877">ルーティング イベントの登録方法の詳細については、「<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2877">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="0e8b4-2878">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、「<xref:System.Windows.EventManager.RegisterClassHandler%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2878">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2879">指がこの要素の上にある間に、その指で画面に触れると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2879">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2880">既定では、<xref:System.Windows.ContentElement.PreviewTouchDown> イベントと <xref:System.Windows.ContentElement.TouchDown> イベントは、指が画面に触れると移動するまで発生しません。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2880">By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="0e8b4-2881">画面上で指を押しながら移動せずに押すと、<xref:System.Windows.Input.Stylus>のプレスアンドホールド動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2881">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="0e8b4-2882">プレスアンドホールドの動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2882">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="0e8b4-2883">指が画面に触れるとすぐに <xref:System.Windows.ContentElement.PreviewTouchDown> および <xref:System.Windows.ContentElement.TouchDown> イベントが発生するようにするには、この要素の <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 添付プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2883">To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2884">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2884">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2885">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2885">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|<span data-ttu-id="0e8b4-2886">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2886">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2887">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2887">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2888">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2888">Delegate</span></span>|<span data-ttu-id="0e8b4-2889"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2889"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2890">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewTouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2890">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2891">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnTouchDown%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2891">Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2892"><see cref="E:System.Windows.ContentElement.TouchDown" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2892">Identifies the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2893">タッチがこの要素の境界の外部から内部に移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2893">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e8b4-2894">このイベントは、タッチデバイスがこの UI 要素にキャプチャされているかどうかに関係なく、常に発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2894">This event is always raised, whether or not the touch device is captured to this UI element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2895">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2895">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2896">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2896">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|<span data-ttu-id="0e8b4-2897">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2897">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2898">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2898">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2899">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2899">Delegate</span></span>|<span data-ttu-id="0e8b4-2900"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2900"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2901">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnTouchEnter%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2901">Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2902"><see cref="E:System.Windows.ContentElement.TouchEnter" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2902">Identifies the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2903">この要素にキャプチャされているすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2903">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-2904">この要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2904">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2905">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2905">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="0e8b4-2906">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2906">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2907">この要素上にあるすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2907">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="0e8b4-2908">この要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2908">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2909">この要素またはそのビジュアル ツリー内のいずれかの子要素上にあるすべてのタッチ デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2909">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="0e8b4-2910">この要素またはそのビジュアル ツリー内のいずれかの子要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2910">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2911">タッチがこの要素の境界の内部から外部に移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2911">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2912">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2912">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2913">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2913">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|<span data-ttu-id="0e8b4-2914">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2914">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2915">直接</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2915">Direct</span></span>|  
|<span data-ttu-id="0e8b4-2916">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2916">Delegate</span></span>|<span data-ttu-id="0e8b4-2917"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2917"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2918">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnTouchLeave%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2918">Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2919"><see cref="E:System.Windows.ContentElement.TouchLeave" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2919">Identifies the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2920">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2920">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2921">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2921">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2922">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2922">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|<span data-ttu-id="0e8b4-2923">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2923">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2924">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2924">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2925">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2925">Delegate</span></span>|<span data-ttu-id="0e8b4-2926"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2926"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2927">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewTouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2927">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2928">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnTouchMove%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2928">Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2929"><see cref="E:System.Windows.ContentElement.TouchMove" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2929">Identifies the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2930">この要素の上に指があるときに、その指が画面から離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2930">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="0e8b4-2931">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2931">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0e8b4-2932">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2932">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|<span data-ttu-id="0e8b4-2933">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2933">Routing strategy</span></span>|<span data-ttu-id="0e8b4-2934">バブリング</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2934">Bubbling</span></span>|  
|<span data-ttu-id="0e8b4-2935">デリゲート</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2935">Delegate</span></span>|<span data-ttu-id="0e8b4-2936"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2936"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="0e8b4-2937">対応するトンネリングイベントは <xref:System.Windows.ContentElement.PreviewTouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2937">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="0e8b4-2938">派生クラスでこのイベントのクラス処理を実装するには、<xref:System.Windows.ContentElement.OnTouchUp%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2938">Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e8b4-2939"><see cref="E:System.Windows.ContentElement.TouchUp" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="0e8b4-2939">Identifies the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
