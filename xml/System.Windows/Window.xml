<Type Name="Window" FullName="System.Windows.Window">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d28ff40a2477c64425a1e6f91f877726bc8e962" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76944160" /></Metadata><TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Window = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="42fae-101">ウィンドウおよびダイアログ ボックスの作成、構成、表示、および有効期間の管理を可能にします。</span><span class="sxs-lookup"><span data-stu-id="42fae-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-102">ユーザーとスタンドアロンアプリケーションの間の相互作用のポイントは、ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="42fae-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="42fae-103">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ウィンドウは、次の2つの異なる領域で構成されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="42fae-104">非クライアント領域。アイコン、タイトル、システムメニュー、最小化ボタン、最大化ボタン、復元ボタン、閉じるボタン、および境界線を含む、windows の修飾をホストします。</span><span class="sxs-lookup"><span data-stu-id="42fae-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="42fae-105">クライアント領域。アプリケーション固有のコンテンツをホストします。</span><span class="sxs-lookup"><span data-stu-id="42fae-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="42fae-106">標準ウィンドウを次の図に示します。</span><span class="sxs-lookup"><span data-stu-id="42fae-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="42fae-107">![ウィンドウ要素](~/add/media/windowoverviewfigure1.PNG "ウィンドウ要素")</span><span class="sxs-lookup"><span data-stu-id="42fae-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="42fae-108"><xref:System.Windows.Window> は、ウィンドウとダイアログボックスの両方の有効期間を作成、構成、表示、および管理する機能をカプセル化し、次の主要なサービスを提供します。</span><span class="sxs-lookup"><span data-stu-id="42fae-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="42fae-109">**有効期間の管理**: <xref:System.Windows.Window.Activate%2A>、<xref:System.Windows.Window.Activated>、<xref:System.Windows.Window.Close%2A>、<xref:System.Windows.Window.Closed>、<xref:System.Windows.Window.Closing>、<xref:System.Windows.Window.Deactivated>、<xref:System.Windows.Window.Hide%2A>、<xref:System.Windows.Window.IsActive%2A>、<xref:System.Windows.Window.Show%2A>、<xref:System.Windows.Window.SourceInitialized>。</span><span class="sxs-lookup"><span data-stu-id="42fae-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="42fae-110">**ウィンドウの管理**: <xref:System.Windows.Window.GetWindow%2A>、<xref:System.Windows.Window.OwnedWindows%2A>、<xref:System.Windows.Window.Owner%2A>。</span><span class="sxs-lookup"><span data-stu-id="42fae-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="42fae-111">**外観と動作**: <xref:System.Windows.Window.AllowsTransparency%2A>、<xref:System.Windows.Window.ContentRendered>、<xref:System.Windows.Window.DragMove%2A>、<xref:System.Windows.Window.Icon%2A>、<xref:System.Windows.Window.Left%2A>、<xref:System.Windows.Window.LocationChanged>、<xref:System.Windows.Window.ResizeMode%2A>、<xref:System.Windows.Window.RestoreBounds%2A>、<xref:System.Windows.Window.ShowActivated%2A>、<xref:System.Windows.Window.ShowInTaskbar%2A>、<xref:System.Windows.Window.SizeToContent%2A>、<xref:System.Windows.Window.StateChanged>、<xref:System.Windows.Window.Title%2A>、<xref:System.Windows.Window.Top%2A>の各 <xref:System.Windows.Window.Topmost%2A><xref:System.Windows.Window.WindowStartupLocation%2A><xref:System.Windows.Window.WindowState%2A><xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="42fae-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="42fae-112">**ダイアログボックス**: <xref:System.Windows.Window.DialogResult%2A>、<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="42fae-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="42fae-113">さらに、<xref:System.Windows.Application> は、アプリケーション内のすべてのウィンドウを管理するための特別なサポートを公開しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="42fae-114">アプリケーションでは、現在アプリケーションでインスタンス化されているすべてのウィンドウの一覧を保持します。</span><span class="sxs-lookup"><span data-stu-id="42fae-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="42fae-115">この一覧は、<xref:System.Windows.Application.Windows%2A> プロパティによって公開されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="42fae-116">既定では、<xref:System.Windows.Application.MainWindow%2A> は、アプリケーションでインスタンス化されている最初の <xref:System.Windows.Window> への参照を使用して自動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="42fae-117">これにより、ウィンドウがメインアプリケーションウィンドウになります。</span><span class="sxs-lookup"><span data-stu-id="42fae-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="42fae-118"><xref:System.Windows.Window> は、マークアップ、マークアップと分離コード、またはコードを使用して実装できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="42fae-119"><xref:System.Windows.Window> は、主にスタンドアロンアプリケーションのウィンドウとダイアログボックスを表示するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="42fae-120">ただし、ウィザードなどのウィンドウレベルでのナビゲーションを必要とするアプリケーションでは、代わりに <xref:System.Windows.Navigation.NavigationWindow> を使用できます。<xref:System.Windows.Navigation.NavigationWindow> は <xref:System.Windows.Window> から派生し、ブラウザースタイルのナビゲーションサポートを使用して拡張します。</span><span class="sxs-lookup"><span data-stu-id="42fae-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-121">誘導可能なコンテンツの孤島は、<xref:System.Windows.Controls.Frame>を使用して他のコンテンツコンテナーやコンテンツコンテナーに組み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="42fae-122"><xref:System.Windows.Window> には、セキュリティ権限 `UnmanagedCode` インスタンス化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="42fae-123">したがって、結果は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="42fae-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="42fae-124">展開されたスタンドアロンアプリケーションでは、インターネットゾーンまたはローカルイントラネットゾーンから起動すると、アクセス許可の昇格が要求されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   <span data-ttu-id="42fae-125">すべてのアクセス許可を要求する [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] は、ウィンドウまたはダイアログボックスをインスタンス化できません。</span><span class="sxs-lookup"><span data-stu-id="42fae-125">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="42fae-126">スタンドアロンアプリケーションの配置とセキュリティに関する考慮事項については、「 [WPF のセキュリティ方針-プラットフォームのセキュリティ](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="42fae-127"><xref:System.Windows.Window> は <xref:System.Windows.Controls.ContentControl>であり、任意の型 (文字列、イメージ、パネルなど) の1つのオブジェクトを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="42fae-128">詳細については、<xref:System.Windows.Controls.ContentControl> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="42fae-129">また、<xref:System.Windows.Window> はルート要素であるため、別の要素のコンテンツの一部にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-130">スタイルを使用して <xref:System.Windows.Window> に設定されている <xref:System.Windows.FrameworkElement.Height%2A>、<xref:System.Windows.FrameworkElement.Width%2A>、<xref:System.Windows.Window.Top%2A>、および <xref:System.Windows.Window.Left%2A> の各プロパティは、実行時に適用されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="42fae-131">ウィンドウコントロールのカスタマイズ</span><span class="sxs-lookup"><span data-stu-id="42fae-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="42fae-132">複数の<xref:System.Windows.Window>コントロールに同じプロパティの設定を適用するには、<xref:System.Windows.FrameworkElement.Style%2A>プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="42fae-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="42fae-133"><xref:System.Windows.Controls.ControlTemplate>の既定値を変更して外観を制御します。</span><span class="sxs-lookup"><span data-stu-id="42fae-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="42fae-134"><xref:System.Windows.Controls.ControlTemplate>作成の詳細については、「 [ControlTemplate の作成による既存コントロールの外観カスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="42fae-135"><xref:System.Windows.Window>に固有のパーツと状態を確認するには、「[ウィンドウのスタイルとテンプレート](~/docs/framework/wpf/controls/window-styles-and-templates.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="42fae-136">このコントロールの依存関係のプロパティは、コントロールの既定のスタイルによって設定される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-136">Dependency properties for this control might be set by the control's default style.</span></span>  <span data-ttu-id="42fae-137">プロパティが既定のスタイルによって設定されている場合、アプリケーションにコントロールが表示されると、プロパティが既定値から変更されることがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="42fae-138">既定のスタイルは、アプリケーションの実行時に使用するデスクトップテーマによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="42fae-139">詳しくは、「[既定の WPF テーマ](https://go.microsoft.com/fwlink/?LinkID=158252)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="42fae-139">For more information, see [Default WPF Themes](https://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
[!INCLUDE[setting-a-visual-property](~/includes/visual-property-note.md)]  
  
## Examples  
 <span data-ttu-id="42fae-140">次の例は、マークアップのみを使用して標準ウィンドウを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-140">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="42fae-141">次の例は、コードのみを使用して標準ウィンドウを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-141">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="42fae-142">次の例は、マークアップと分離コードの組み合わせを使用して、標準ウィンドウを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-142">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-143">
          <see cref="T:System.Windows.Window" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="42fae-143">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-144">コンストラクターは、<xref:System.Windows.FrameworkElement.Width%2A>、<xref:System.Windows.FrameworkElement.Height%2A>、<xref:System.Windows.Window.Top%2A>、および <xref:System.Windows.Window.Left%2A> の各プロパティを既定の <xref:System.Windows.Window> 値に初期化します。</span><span class="sxs-lookup"><span data-stu-id="42fae-144">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="42fae-145"><xref:System.Windows.Application> オブジェクトを持つ <xref:System.AppDomain> 内にウィンドウが作成された場合、コンストラクターは、<xref:System.Windows.Application.Windows%2A> オブジェクトの <xref:System.Windows.Application> プロパティを使用して、<xref:System.Windows.Application>に管理された一連のウィンドウに <xref:System.Windows.Window> オブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="42fae-145">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="42fae-146">このオブジェクトが unsafe ネイティブメソッドを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="42fae-146">for permission for this object to call unsafe native methods.</span></span> <span data-ttu-id="42fae-147">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="42fae-147">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; bool" Usage="window.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-148">ウィンドウを前面にしてアクティブ化することを試みます。</span><span class="sxs-lookup"><span data-stu-id="42fae-148">Attempts to bring the window to the foreground and activates it.</span></span></summary>
        <returns><span data-ttu-id="42fae-149"><see langword="true" /> が正常にアクティブにされた場合は <see cref="T:System.Windows.Window" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="42fae-149"><see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-150">ウィンドウがアクティブ化されているかどうかを判断する規則は、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` 関数 (User32.dll) で使用されているものと同じです。</span><span class="sxs-lookup"><span data-stu-id="42fae-150">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="42fae-151">ユーザーのフォアグラウンドアプリケーションではない Windows Presentation Foundation アプリケーションでウィンドウがアクティブになっている場合、<xref:System.Windows.Application.Activated> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-151">If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-152">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-152">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-153">ウィンドウをアクティブにするアクセス許可の場合は。</span><span class="sxs-lookup"><span data-stu-id="42fae-153">for permission to activate a window.</span></span> <span data-ttu-id="42fae-154">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-154">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberSignature Language="F#" Value="member this.Activated : EventHandler " Usage="member this.Activated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-155">ウィンドウがフォアグラウンド ウィンドウになったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-155">Occurs when a window becomes the foreground window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-156">次の場合、ウィンドウがアクティブになります (前のウィンドウになります)。</span><span class="sxs-lookup"><span data-stu-id="42fae-156">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="42fae-157">ウィンドウが最初に開かれます。</span><span class="sxs-lookup"><span data-stu-id="42fae-157">The window is first opened.</span></span>  
  
-   <span data-ttu-id="42fae-158">ユーザーは、マウスを使用して選択するか、ALT + TAB キーを押すか、またはタスクマネージャーを使用して、ウィンドウに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="42fae-158">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="42fae-159">ユーザーがウィンドウのタスクバーボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="42fae-159">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="42fae-160">アクティブになったときに検出する必要があるウィンドウは、<xref:System.Windows.Window.Activated> イベントを処理できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-160">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="42fae-161">ウィンドウが最初にアクティブになった後は、有効期間中に何度も非アクティブ化および再アクティブ化される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-161">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="42fae-162">アプリケーションの動作または状態がアクティブ化状態に依存している場合は、<xref:System.Windows.Window.IsActive%2A> を検査して、どのアクティブ化状態にあるかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-162">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="42fae-163">アプリケーションを <xref:System.Windows.Application.Activated>することもできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-163">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowsTransparency : bool with get, set" Usage="System.Windows.Window.AllowsTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-164">ウィンドウのクライアント領域が透過性をサポートするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-164">Gets or sets a value that indicates whether a window's client area supports transparency.</span></span></summary>
        <value><span data-ttu-id="42fae-165">ウィンドウで透過性がサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-165"><see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-166">ウィンドウの [<xref:System.Windows.Controls.Control.Background%2A>] プロパティが透明色に設定されている場合、たとえば、<xref:System.Windows.Media.Brushes.Transparent%2A> を使用すると、ウィンドウが不透明なままになります。</span><span class="sxs-lookup"><span data-stu-id="42fae-166">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="42fae-167">これは、デスクトップと、ウィンドウの下にあるすべての実行中のアプリケーションを表示できないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="42fae-167">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="42fae-168">この種類の透明度を有効にするには、<xref:System.Windows.Window.AllowsTransparency%2A> を `true`に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-168">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="42fae-169">四角形以外のウィンドウの作成を容易にするために <xref:System.Windows.Window.AllowsTransparency%2A> 存在します。したがって、<xref:System.Windows.Window.AllowsTransparency%2A> が `true`に設定されている場合は、ウィンドウの <xref:System.Windows.Window.WindowStyle%2A> プロパティを <xref:System.Windows.WindowStyle.None>に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-169"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-170">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-170">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-171">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-171">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="42fae-172">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-172">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-173">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-173">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-174"><see cref="P:System.Windows.Window.WindowStyle" /> 値が <see cref="F:System.Windows.WindowStyle.None" /> 以外に設定されたウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="42fae-174">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowsTransparencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.AllowsTransparencyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-175"><see cref="P:System.Windows.Window.AllowsTransparency" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-175">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberSignature Language="F#" Value="override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.ArrangeOverride arrangeBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds"><span data-ttu-id="42fae-176">ウィンドウがウィンドウ自体とその子を配置するために使用する、最終的なサイズを反映する <see cref="T:System.Windows.Size" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-176">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="42fae-177">ウィンドウとその子要素を配置したり、サイズを設定したりするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="42fae-177">Override this method to arrange and size a window and its child elements.</span></span></summary>
        <returns><span data-ttu-id="42fae-178">使用された実際のサイズを反映する <see cref="T:System.Windows.Size" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-178">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-179"><xref:System.Windows.UIElement.Visibility%2A> プロパティの値が <xref:System.Windows.Visibility.Collapsed>の場合、<xref:System.Windows.Window.ArrangeOverride%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-179"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="42fae-180"><xref:System.Windows.UIElement.Visibility%2A> プロパティの値が <xref:System.Windows.Visibility.Hidden> または <xref:System.Windows.Visibility.Visible>の場合、<xref:System.Windows.Window.ArrangeOverride%2A> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-180">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-181"><xref:System.Windows.Window.Show%2A> または <xref:System.Windows.Window.ShowDialog%2A> のいずれかが呼び出されると、<xref:System.Windows.Window> の <xref:System.Windows.UIElement.Visibility%2A> プロパティが <xref:System.Windows.Visibility.Visible>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-181">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="window.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-182"><see cref="T:System.Windows.Window" /> を手動で閉じます。</span><span class="sxs-lookup"><span data-stu-id="42fae-182">Manually closes a <see cref="T:System.Windows.Window" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-183"><xref:System.Windows.Window> は、次に示すように、タイトルバーにある、よく知られているいくつかのシステム指定のメカニズムのいずれかを使用して閉じることができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-183">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="42fae-184">ALT + F4</span><span class="sxs-lookup"><span data-stu-id="42fae-184">ALT+F4.</span></span>  
  
-   <span data-ttu-id="42fae-185">システムメニュー &#124;を**閉じる**。</span><span class="sxs-lookup"><span data-stu-id="42fae-185">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="42fae-186">[**閉じる**] ボタン。</span><span class="sxs-lookup"><span data-stu-id="42fae-186">**Close** button.</span></span>  
  
 <span data-ttu-id="42fae-187">次のような、開発者によって提供されるクライアント領域内の既知のメカニズムのいずれかを使用して、<xref:System.Windows.Window> を閉じることもできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-187">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="42fae-188">メインウィンドウでの**ファイル** &#124;の**終了**。</span><span class="sxs-lookup"><span data-stu-id="42fae-188">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="42fae-189">**ファイル** &#124;を**閉じる**か、子ウィンドウの [**閉じる**] ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="42fae-189">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-190">ダイアログボックスの **[OK]** ボタンと **[キャンセル**] ボタンも開発者向けに用意されていますが、では <xref:System.Windows.Window.DialogResult%2A>設定される可能性があります。これにより、<xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによって開かれたウィンドウが自動的に閉じます。</span><span class="sxs-lookup"><span data-stu-id="42fae-190">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="42fae-191">これらのメカニズムを使用するには、<xref:System.Windows.Window.Close%2A> を明示的に呼び出して、ウィンドウを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-191">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-192"><xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによって開かれたウィンドウがあり、その <xref:System.Windows.Controls.Button.IsCancel%2A> プロパティが true に設定された <xref:System.Windows.Controls.Button> では、ボタンがクリックされるか、ESC キーが押されると、が自動的に閉じます。</span><span class="sxs-lookup"><span data-stu-id="42fae-192">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="42fae-193">ただし、<xref:System.Windows.Window.Show%2A>を使用してウィンドウを開いた場合は、<xref:System.Windows.Controls.Button>の <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントハンドラーなど、<xref:System.Windows.Window.Close%2A> を明示的に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-193">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="42fae-194">ウィンドウを閉じると、<xref:System.Windows.Window.Closing> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-194">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="42fae-195"><xref:System.Windows.Window.Closing> イベントが取り消されない場合、次の処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="42fae-195">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="42fae-196"><xref:System.Windows.Window> は <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> から削除されます (<xref:System.Windows.Application> オブジェクトが存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="42fae-196">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="42fae-197">所有 <xref:System.Windows.Window> が表示される前と所有者 <xref:System.Windows.Window> を開いた後に所有者/所有関係が確立された場合 <xref:System.Windows.Window> 所有者から <xref:System.Windows.Window> が削除されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-197">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="42fae-198"><xref:System.Windows.Window.Closed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-198">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="42fae-199"><xref:System.Windows.Window> によって作成されたアンマネージリソースは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-199">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="42fae-200"><xref:System.Windows.Window>を表示するために <xref:System.Windows.Window.ShowDialog%2A> が呼び出された場合、<xref:System.Windows.Window.ShowDialog%2A> はを返します。</span><span class="sxs-lookup"><span data-stu-id="42fae-200">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="42fae-201"><xref:System.Windows.Window> を閉じると、それが所有しているすべてのウィンドウが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="42fae-201">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="42fae-202">さらに、<xref:System.Windows.Window> を閉じると、<xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> プロパティの設定によっては、アプリケーションの実行が停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-202">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-203">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-203">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-204">次の例は、<xref:System.Windows.Window.Close%2A>を明示的に呼び出すために処理される**ファイル** &#124;の**終了**メニューを示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-204">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-205">すべての windows およびユーザー入力イベントを制限なしで使用するためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="42fae-205">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="42fae-206">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-206">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberSignature Language="F#" Value="member this.Closed : EventHandler " Usage="member this.Closed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-207">ウィンドウが閉じるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-207">Occurs when the window is about to close.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-208">このイベントが発生すると、ウィンドウを閉じることができなくなります。</span><span class="sxs-lookup"><span data-stu-id="42fae-208">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-209"><see cref="P:System.Windows.UIElement.Visibility" /> が設定されているか、ウィンドウを閉じている間に <see cref="M:System.Windows.Window.Show" />、<see cref="M:System.Windows.Window.ShowDialog" />、または <see cref="M:System.Windows.Window.Hide" /> が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="42fae-209"><see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span></span></exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberSignature Language="F#" Value="member this.Closing : System.ComponentModel.CancelEventHandler " Usage="member this.Closing : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-210"><see cref="M:System.Windows.Window.Close" /> が呼び出された直後に発生します。これを処理して、ウィンドウが閉じるのをキャンセルすることができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-210">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-211"><xref:System.Windows.Window.Closing> は、ウィンドウがいつ閉じられたかを検出するために処理できます (<xref:System.Windows.Window.Close%2A> が呼び出された場合など)。</span><span class="sxs-lookup"><span data-stu-id="42fae-211"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="42fae-212">さらに、<xref:System.Windows.Window.Closing> を使用すると、ウィンドウが閉じるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-212">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="42fae-213">ウィンドウが閉じないようにするには、<xref:System.ComponentModel.CancelEventArgs> 引数の <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-213">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="42fae-214"><xref:System.Windows.Window.Closing> イベントは、<xref:System.Windows.Window.Close%2A> が呼び出されたとき、ウィンドウの [閉じる] ボタンがクリックされたとき、またはユーザーが ALT + F4 キーを押したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-214">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="42fae-215">所有ウィンドウが <xref:System.Windows.Window.Show%2A>を使用して所有者ウィンドウによって開かれ、オーナーウィンドウが閉じている場合、所有ウィンドウの <xref:System.Windows.Window.Closing> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="42fae-215">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="42fae-216">ウィンドウの所有者が閉じている場合 (「<xref:System.Windows.Window.Owner%2A>」を参照)、所有ウィンドウで <xref:System.Windows.Window.Closing> が発生しません。</span><span class="sxs-lookup"><span data-stu-id="42fae-216">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="42fae-217"><xref:System.Windows.Application.Shutdown%2A> が呼び出されると、各ウィンドウの <xref:System.Windows.Window.Closing> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-217">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="42fae-218">ただし、<xref:System.Windows.Window.Closing> が取り消された場合、キャンセルは無視されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-218">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="42fae-219">ユーザーのログオフまたはシャットダウンによってセッションが終了した場合、<xref:System.Windows.Window.Closing> は発生しません。アプリケーションのクロージャをキャンセルするコードを実装するために <xref:System.Windows.Application.SessionEnding> を処理します。</span><span class="sxs-lookup"><span data-stu-id="42fae-219">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="42fae-220">アプリケーションの有効期間中にウィンドウを何度も表示したり非表示にしたりする必要があり、表示するたびにウィンドウを再インスタンス化したくない場合は、<xref:System.Windows.Window.Closing> イベントを処理し、キャンセルして、<xref:System.Windows.Window.Hide%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-220">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="42fae-221">次に、同じインスタンスで <xref:System.Windows.Window.Show%2A> を呼び出して、再度開くことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-221">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-222">次の例は、ユーザーの介入を閉じる必要があるかどうかを判断する <xref:System.Windows.Window> を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-222">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-223"><see cref="P:System.Windows.UIElement.Visibility" /> が設定されているか、ウィンドウを閉じている間に <see cref="M:System.Windows.Window.Show" />、<see cref="M:System.Windows.Window.ShowDialog" />、または <see cref="M:System.Windows.Window.Close" /> が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="42fae-223"><see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span></span></exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContentRendered;" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="member this.ContentRendered : EventHandler " Usage="member this.ContentRendered : System.EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-224">ウィンドウのコンテンツがレンダリングされた後に発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-224">Occurs after a window's content has been rendered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-225">ウィンドウにコンテンツがない場合、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="42fae-225">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberSignature Language="F#" Value="member this.Deactivated : EventHandler " Usage="member this.Deactivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-226">ウィンドウが背景ウィンドウになったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-226">Occurs when a window becomes a background window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-227">次の場合、ウィンドウは非アクティブ化されます (バックグラウンドウィンドウになります)。</span><span class="sxs-lookup"><span data-stu-id="42fae-227">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="42fae-228">ユーザーは、現在のアプリケーションの別のウィンドウに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="42fae-228">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="42fae-229">ユーザーは、ALT + TAB キーを使用するか、タスクマネージャーを使用して、別のアプリケーションのウィンドウに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="42fae-229">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="42fae-230">ユーザーは、別のアプリケーションのウィンドウのタスクバーボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="42fae-230">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="42fae-231"><xref:System.Windows.Window.Deactivated> イベントを処理することによって非アクティブになったことを検出する必要があるウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="42fae-231">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="42fae-232">ウィンドウが最初に非アクティブになった後は、有効期間中に何度も再アクティブ化および非アクティブ化される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-232">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="42fae-233">アプリケーションの動作または状態がアクティブ化状態に依存している場合は、<xref:System.Windows.Window.IsActive%2A> を検査して、どのアクティブ化状態にあるかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-233">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="42fae-234">アプリケーションを <xref:System.Windows.Application.Deactivated>することもできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-234">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Window.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-235">ダイアログ ボックスの結果値を取得または設定します。この値は、<see cref="M:System.Windows.Window.ShowDialog" /> メソッドから返される値です。</span><span class="sxs-lookup"><span data-stu-id="42fae-235">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span></span></summary>
        <value><span data-ttu-id="42fae-236"><see cref="T:System.Nullable`1" /> 型の <see cref="T:System.Boolean" /> 値。</span><span class="sxs-lookup"><span data-stu-id="42fae-236">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span></span> <span data-ttu-id="42fae-237">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="42fae-237">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-238"><xref:System.Windows.Window.DialogResult%2A> は、ダイアログボックスを見たコードから、ユーザーがダイアログボックスを承諾 (`true`) またはキャンセルした (`false`) かどうかを判断するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-238"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="42fae-239">ダイアログボックスが受け入れられた場合、ユーザーによって収集されたデータを取得して処理するために、ダイアログボックスを開いたコードを示します。</span><span class="sxs-lookup"><span data-stu-id="42fae-239">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="42fae-240">ただし、ダイアログボックスがキャンセルされた場合は、呼び出し元のコードが後続の処理を停止する必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="42fae-240">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="42fae-241">既定では、ユーザーが次のいずれかを実行すると、ダイアログボックスはキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="42fae-241">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="42fae-242">Preson Alt + F4。</span><span class="sxs-lookup"><span data-stu-id="42fae-242">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="42fae-243">[**閉じる**] ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="42fae-243">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="42fae-244">[システム] メニューの [**閉じる**] を選択します。</span><span class="sxs-lookup"><span data-stu-id="42fae-244">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="42fae-245">このような場合、既定では <xref:System.Windows.Window.DialogResult%2A> が `false` ます。</span><span class="sxs-lookup"><span data-stu-id="42fae-245">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="42fae-246">ダイアログボックスには、通常、ダイアログをキャンセルする特別なボタンが用意されています。このボタンは、<xref:System.Windows.Controls.Button.IsCancel%2A> プロパティが `true`に設定されているボタンです。</span><span class="sxs-lookup"><span data-stu-id="42fae-246">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="42fae-247">この方法で構成されたボタンを押すと、ウィンドウが押されたとき、または ESC キーが押されたときに、ウィンドウが自動的に閉じられます。</span><span class="sxs-lookup"><span data-stu-id="42fae-247">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="42fae-248">どちらの場合も、<xref:System.Windows.Window.DialogResult%2A> は `false`のままです。</span><span class="sxs-lookup"><span data-stu-id="42fae-248">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="42fae-249">ダイアログボックスには、通常、[accept] ボタンも用意されています。このボタンは、<xref:System.Windows.Controls.Button.IsDefault%2A> プロパティが `true`に設定されているボタンです。</span><span class="sxs-lookup"><span data-stu-id="42fae-249">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="42fae-250">この方法で構成されたボタンは、そのボタンまたは ENTER キーが押されたときに <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-250">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="42fae-251">ただし、ダイアログボックスが自動的に閉じられることはなく、<xref:System.Windows.Window.DialogResult%2A> が `true`に設定されることもありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-251">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="42fae-252">このコードは、通常、既定のボタンの <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントハンドラーから手動で書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-252">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="42fae-253">ダイアログボックスが表示されているが、受理もキャンセルもされていない場合、<xref:System.Windows.Window.DialogResult%2A> は `null`。</span><span class="sxs-lookup"><span data-stu-id="42fae-253"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="42fae-254">ダイアログボックスを閉じると、<xref:System.Windows.Window.ShowDialog%2A> メソッドによって返される値から、または <xref:System.Windows.Window.DialogResult%2A> プロパティを調べることによって、ダイアログの結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-254">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="42fae-255"><xref:System.Windows.Window.DialogResult%2A> は、<xref:System.Windows.Window.ShowDialog%2A> メソッドを呼び出すことによって <xref:System.Windows.Window> が開かれている場合にのみ設定できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-255"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-256">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-256">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-257">次の例では、[OK] ボタンと [キャンセル] ボタンを構成して、適切な <xref:System.Windows.Window.DialogResult%2A>を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="42fae-257">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-258"><see cref="P:System.Windows.Window.DialogResult" /> を呼び出すことによってウィンドウが開かれる前に <see cref="M:System.Windows.Window.ShowDialog" /> が設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-258"><see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span></span>  
  
<span data-ttu-id="42fae-259">または</span><span class="sxs-lookup"><span data-stu-id="42fae-259">-or-</span></span> 
 <span data-ttu-id="42fae-260"><see cref="P:System.Windows.Window.DialogResult" /> を呼び出すことによって開かれたウィンドウに <see cref="M:System.Windows.Window.Show" /> が設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-260"><see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberSignature Language="F#" Value="member this.DpiChanged : System.Windows.DpiChangedEventHandler " Usage="member this.DpiChanged : System.Windows.DpiChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-261">Window が表示されている画面の DPI が変更されたあとに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-261">Occurs after the DPI of the screen on which the Window is displayed changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DpiChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Window.DpiChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-262">画面 Window の DPI が変更中であるときの <see cref="T:System.Windows.RoutedEvent" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-262">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberSignature Language="F#" Value="member this.DragMove : unit -&gt; unit" Usage="window.DragMove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-263">ウィンドウのクライアント領域の表示部分でマウスの左ボタンを押したままにすることにより、ウィンドウをドラッグできるようにします。</span><span class="sxs-lookup"><span data-stu-id="42fae-263">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-264"><xref:System.Windows.Window.DragMove%2A> が呼び出されると、マウスの左ボタンが押されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-264">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="42fae-265">マウスの左ボタンが押されたことを検出する方法の1つとして、<xref:System.Windows.UIElement.MouseLeftButtonDown> イベントを処理する方法があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-265">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="42fae-266"><xref:System.Windows.Window.DragMove%2A> が呼び出されたときに、マウスの左ボタンをウィンドウのクライアント領域の公開された領域の上に押す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-266">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-267">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-267">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-268">次の例は、<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> をオーバーライドして <xref:System.Windows.Window.DragMove%2A>を呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-268">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-269">マウスの左ボタンが押されていません。</span><span class="sxs-lookup"><span data-stu-id="42fae-269">The left mouse button is not down.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-270">ウィンドウをドラッグするアクセス許可の場合は。</span><span class="sxs-lookup"><span data-stu-id="42fae-270">for permission to drag a window.</span></span> <span data-ttu-id="42fae-271">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-271">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="static member GetWindow : System.Windows.DependencyObject -&gt; System.Windows.Window" Usage="System.Windows.Window.GetWindow dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="42fae-272">依存関係オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="42fae-272">The dependency object.</span></span></param>
        <summary><span data-ttu-id="42fae-273">依存関係オブジェクトが存在するコンテンツ ツリーをホストする <see cref="T:System.Windows.Window" /> オブジェクトへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="42fae-273">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span></span></summary>
        <returns><span data-ttu-id="42fae-274">ホスト ウィンドウへの <see cref="T:System.Windows.Window" /> 参照。</span><span class="sxs-lookup"><span data-stu-id="42fae-274">A <see cref="T:System.Windows.Window" /> reference to the host window.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="42fae-275"><paramref name="dependencyObject" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="42fae-275"><paramref name="dependencyObject" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="window.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-276">ウィンドウを非表示にします。</span><span class="sxs-lookup"><span data-stu-id="42fae-276">Makes a window invisible.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-277">ウィンドウは非表示のときは閉じられず、<xref:System.Windows.Window.Closing> も <xref:System.Windows.Window.Closed> イベントも発生しません。</span><span class="sxs-lookup"><span data-stu-id="42fae-277">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="42fae-278">代わりに、ウィンドウの <xref:System.Windows.UIElement.Visibility%2A> プロパティは <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-278">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="42fae-279">ウィンドウがアプリケーションの <xref:System.Windows.Application.MainWindow%2A> であり、アプリケーションの <xref:System.Windows.Application.ShutdownMode%2A> が <xref:System.Windows.ShutdownMode.OnMainWindowClose>場合、アプリケーションはシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="42fae-279">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="42fae-280">同様に、ウィンドウが唯一のウィンドウであり、アプリケーションのシャットダウンモードが <xref:System.Windows.ShutdownMode.OnLastWindowClose>場合、アプリケーションはシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="42fae-280">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="42fae-281">アプリケーションの有効期間中に1つのウィンドウの表示と非表示を切り替える場合に、表示するたびにウィンドウを再インスタンス化したくない場合は、<xref:System.Windows.Window.Closing> イベントを処理し、キャンセルして、<xref:System.Windows.Window.Hide%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-281">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="42fae-282">次に、同じインスタンスで <xref:System.Windows.Window.Show%2A> を呼び出して、再度開くことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-282">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-283">閉じている途中 (<see cref="M:System.Windows.Window.Hide" />) または閉じた (<see cref="E:System.Windows.Window.Closing" />) ウィンドウに対して <see cref="E:System.Windows.Window.Closed" /> が呼び出されている。</span><span class="sxs-lookup"><span data-stu-id="42fae-283"><see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Icon : System.Windows.Media.ImageSource with get, set" Usage="System.Windows.Window.Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-284">ウィンドウのアイコンを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-284">Gets or sets a window's icon.</span></span></summary>
        <value><span data-ttu-id="42fae-285">アイコンを表す <see cref="T:System.Windows.Media.ImageSource" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="42fae-285">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-286">Windows Presentation Foundation (WPF) スタンドアロンアプリケーションには、次の2種類のアイコンがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-286">Windows Presentation Foundation (WPF) standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="42fae-287">1つのアセンブリアイコン。アプリケーションのプロジェクトビルドファイルの `<ApplicationIcon>` プロパティを使用して指定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-287">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="42fae-288">このアイコンは、アセンブリのデスクトップアイコンとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-288">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="42fae-289">Visual Studio でデバッグする場合、ホストプロセスによってアイコンが表示されないことがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-289">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="42fae-290">実行可能ファイルを実行すると、アイコンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-290">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="42fae-291">詳細については、「[ホスト プロセス (vshost.exe)](https://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-291">For more information, see [Hosting Process (vshost.exe)](https://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="42fae-292"><xref:System.Windows.Window.Icon%2A>の設定によって指定されたウィンドウごとに1つのアイコン。</span><span class="sxs-lookup"><span data-stu-id="42fae-292">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="42fae-293">このアイコンは、各ウィンドウについて、タイトルバー、タスクバーボタン、および ALT タブアプリケーション選択リストのエントリで使用されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-293">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="42fae-294">WPF ウィンドウには常にアイコンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-294">A WPF window always displays an icon.</span></span> <span data-ttu-id="42fae-295"><xref:System.Windows.Window.Icon%2A>の設定によって指定されていない場合、WPF は、次の規則に基づいて表示するアイコンを選択します。</span><span class="sxs-lookup"><span data-stu-id="42fae-295">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, WPF chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="42fae-296">アセンブリアイコン (指定されている場合) を使用します。</span><span class="sxs-lookup"><span data-stu-id="42fae-296">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="42fae-297">アセンブリアイコンが指定されていない場合は、既定の Microsoft Windows アイコンを使用します。</span><span class="sxs-lookup"><span data-stu-id="42fae-297">If the assembly icon is not specified, use the default Microsoft Windows icon.</span></span>  
  
 <span data-ttu-id="42fae-298"><xref:System.Windows.Window.Icon%2A> を使用してカスタムウィンドウアイコンを指定する場合は、<xref:System.Windows.Window.Icon%2A> を `null`に設定して、既定のアプリケーションアイコンを復元できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-298">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="42fae-299">1つのアイコンは、ウィンドウのタイトルバーに表示される、ウィンドウのタスクバー、ALT + TAB ファイル選択リストなど、Windows のさまざまな方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-299">A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="42fae-300">これらはそれぞれ異なるサイズを使用するアイコンを示しています。16×16ピクセルのアイコンがウィンドウのタイトルバーとタスクバーに表示されますが、ALT + TAB ファイル選択リストに32×32ピクセルのアイコンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-300">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="42fae-301">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]などの一部のアプリケーションでは、表示するアイコンのサイズを選択できる [**表示**] メニューが用意されています。</span><span class="sxs-lookup"><span data-stu-id="42fae-301">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="42fae-302">さまざまな表示サイズに対応するために、アイコンファイルは1つ以上の実際のアイコンで構成されます。各アイコンは、特定のサイズと色深度を対象とするアイコンのバージョンを表します。</span><span class="sxs-lookup"><span data-stu-id="42fae-302">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="42fae-303">たとえば、1つのアイコンには16色の 16 x 16 ピクセルのアイコンがありますが、別のアイコンには16色と256色の 16 x 16 ピクセルと32x32 ピクセルのアイコンが含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-303">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="42fae-304">すべての可能なサイズと色深度のアイコンがアイコンファイル内に存在する場合、<xref:System.Windows.Window> は適切なアイコンを使用します。</span><span class="sxs-lookup"><span data-stu-id="42fae-304">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="42fae-305">アイコンファイルに、可能なすべてのアイコンのサブセットのみが含まれている場合、<xref:System.Windows.Window> では、サイズと色の深度を下げるために、次に最も適切なアイコンが使用されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-305">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="42fae-306">結果として、アイコンは常に <xref:System.Windows.Window>によって使用されます。ただし、使用されるアイコンは、必要なサイズと色深度をターゲットにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-306">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="42fae-307">たとえば、16色の16x16 ピクセルのアイコンは、256色の32x32 ピクセルのアイコンとして表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-307">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="42fae-308">これにより、pixilation などの望ましくない視覚効果が発生する可能性がありますが、対象となるすべてのサイズと色深度のアイコンを作成することによって回避できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-308">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-309">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-309">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-310">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-310">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-311">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-311">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="42fae-312">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-312">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-313">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-313">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="42fae-314">次の例は、ウィンドウアイコンを設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-314">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-315">アイコンを設定するためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="42fae-315">for permission to set the icon.</span></span> <span data-ttu-id="42fae-316">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-316">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IconProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IconProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-317"><see cref="P:System.Windows.Window.Icon" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-317">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Windows.Window.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-318">ウィンドウがアクティブかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="42fae-318">Gets a value that indicates whether the window is active.</span></span></summary>
        <value><span data-ttu-id="42fae-319">ウィンドウがアクティブの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-319"><see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="42fae-320">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="42fae-320">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-321">アクティブウィンドウはユーザーの現在の前景ウィンドウであり、フォーカスがあります。これは、タイトルバーのアクティブな外観によって表されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-321">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="42fae-322">また、アクティブなウィンドウは、<xref:System.Windows.Window.Topmost%2A> プロパティを明示的に設定しないすべてのトップレベルウィンドウの最上位にもなります。</span><span class="sxs-lookup"><span data-stu-id="42fae-322">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-323">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-323">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-324">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-324">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="42fae-325">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-325">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-326">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-326">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsActiveProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IsActiveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-327"><see cref="P:System.Windows.Window.IsActive" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-327">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Left : double with get, set" Usage="System.Windows.Window.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-328">ウィンドウの左端の位置を、デスクトップとの関係で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-328">Gets or sets the position of the window's left edge, in relation to the desktop.</span></span></summary>
        <value><span data-ttu-id="42fae-329">ウィンドウの左端の位置。単位は論理単位 (1/96 インチ)。</span><span class="sxs-lookup"><span data-stu-id="42fae-329">The position of the window's left edge, in logical units (1/96th of an inch).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-330"><xref:System.Windows.Window> が最大化または最小化されると、この値は <xref:System.Windows.Window>の復元ポイントの左端を表します。</span><span class="sxs-lookup"><span data-stu-id="42fae-330">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="42fae-331">このプロパティは、スタイルを使用して設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-331">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="42fae-332">値を指定しない場合、<xref:System.Windows.Window.Left%2A> はシステムの既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-332">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="42fae-333"><xref:System.Windows.Window.Left%2A> を <xref:System.Double.NaN>に設定して、システムの既定値を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-333">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="42fae-334"><xref:System.Double.NegativeInfinity> も <xref:System.Double.PositiveInfinity> も <xref:System.Windows.Window.Left%2A>の有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-334">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-335">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-335">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-336">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-336">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-337">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-337">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="42fae-338">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-338">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-339">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-339">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LeftProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.LeftProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-340"><see cref="P:System.Windows.Window.Left" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-340">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-341">ウィンドウの場所が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-341">Occurs when the window's location changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-342">ウィンドウの位置は、次の場合に変更されることがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-342">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="42fae-343">ウィンドウをウィンドウのタイトルバーと一緒にドラッグすることで、ユーザーがウィンドウを移動します。</span><span class="sxs-lookup"><span data-stu-id="42fae-343">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="42fae-344">ウィンドウは <xref:System.Windows.Window.DragMove%2A> が呼び出された後に移動されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-344">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="42fae-345"><xref:System.Windows.Window.Left%2A> または <xref:System.Windows.Window.Top%2A> のいずれかのプロパティがプログラムによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-345">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="42fae-346">ウィンドウの [システム] メニューの [**移動**] メニュー項目が選択されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-346">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="42fae-347"><xref:System.Windows.Window.WindowState%2A> プロパティが変更されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-347">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Window.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-348">ウィンドウの論理上の子要素に対する列挙子を取得します。</span><span class="sxs-lookup"><span data-stu-id="42fae-348">Gets an enumerator for a window's logical child elements.</span></span></summary>
        <value><span data-ttu-id="42fae-349">ウィンドウの論理上の子要素に対する <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-349">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="42fae-350">このウィンドウが子に提供できる有効なサイズを反映する <see cref="T:System.Windows.Size" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-350">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span></span> <span data-ttu-id="42fae-351">値として無限大を指定すると、ウィンドウのサイズをあらゆるコンテンツに合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-351">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="42fae-352">ウィンドウのサイズを測定するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="42fae-352">Override this method to measure the size of a window.</span></span></summary>
        <returns><span data-ttu-id="42fae-353">このウィンドウが、子のサイズの計算に基づいて、レイアウト時に必要だと判断するサイズを反映する <see cref="T:System.Windows.Size" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-353">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-354"><xref:System.Windows.UIElement.Visibility%2A> プロパティの値が <xref:System.Windows.Visibility.Collapsed>の場合、<xref:System.Windows.Window.MeasureOverride%2A> は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-354"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="42fae-355"><xref:System.Windows.UIElement.Visibility%2A> プロパティの値が <xref:System.Windows.Visibility.Hidden> または <xref:System.Windows.Visibility.Visible>の場合、<xref:System.Windows.Window.MeasureOverride%2A> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-355">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-356"><xref:System.Windows.Window.Show%2A> または <xref:System.Windows.Window.ShowDialog%2A> のいずれかが呼び出されると、<xref:System.Windows.Window> の <xref:System.Windows.UIElement.Visibility%2A> プロパティが <xref:System.Windows.Visibility.Visible>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-356">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivated : EventArgs -&gt; unit&#xA;override this.OnActivated : EventArgs -&gt; unit" Usage="window.OnActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-357">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-357">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-358"><see cref="E:System.Windows.Window.Activated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-358">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-359"><xref:System.Windows.Window.OnActivated%2A> は、<xref:System.Windows.Window.Activated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-359"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="42fae-360"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnActivated%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-360">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="42fae-361">オーバーライドされたメソッドは、<xref:System.Windows.Window.Activated> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnActivated%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-361">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosed : EventArgs -&gt; unit&#xA;override this.OnClosed : EventArgs -&gt; unit" Usage="window.OnClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-362">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-362">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-363"><see cref="E:System.Windows.Window.Closed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-363">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-364"><xref:System.Windows.Window.OnClosed%2A> は、<xref:System.Windows.Window.Closed> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-364"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="42fae-365"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnClosed%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-365">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="42fae-366">オーバーライドされたメソッドは、<xref:System.Windows.Window.Closed> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnClosed%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-366">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="window.OnClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-367">イベント データを含んでいる <see cref="T:System.ComponentModel.CancelEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="42fae-367">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-368"><see cref="E:System.Windows.Window.Closing" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-368">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-369"><xref:System.Windows.Window.OnClosing%2A> は、<xref:System.Windows.Window.Closing> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-369"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="42fae-370"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnClosing%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-370">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="42fae-371">オーバーライドされたメソッドは、<xref:System.Windows.Window.Closing> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnClosing%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-371">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberSignature Language="F#" Value="override this.OnContentChanged : obj * obj -&gt; unit" Usage="window.OnContentChanged (oldContent, newContent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent"><span data-ttu-id="42fae-372">古いコンテンツ ツリーのルートへの参照。</span><span class="sxs-lookup"><span data-stu-id="42fae-372">A reference to the root of the old content tree.</span></span></param>
        <param name="newContent"><span data-ttu-id="42fae-373">新しいコンテンツ ツリーのルートへの参照。</span><span class="sxs-lookup"><span data-stu-id="42fae-373">A reference to the root of the new content tree.</span></span></param>
        <summary><span data-ttu-id="42fae-374"><see cref="P:System.Windows.Controls.ContentControl.Content" /> プロパティが変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-374">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentRendered : EventArgs -&gt; unit&#xA;override this.OnContentRendered : EventArgs -&gt; unit" Usage="window.OnContentRendered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-375">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-375">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-376"><see cref="E:System.Windows.Window.ContentRendered" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-376">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-377"><xref:System.Windows.Window.OnContentRendered%2A> は、<xref:System.Windows.Window.ContentRendered> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-377"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="42fae-378"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnContentRendered%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-378">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="42fae-379">オーバーライドされたメソッドは、<xref:System.Windows.Window.ContentRendered> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnContentRendered%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-379">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="window.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-380">この <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> に対応する <see cref="T:System.Windows.Window" /> オブジェクトを作成して返します。</span><span class="sxs-lookup"><span data-stu-id="42fae-380">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span></span></summary>
        <returns><span data-ttu-id="42fae-381">この <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> に対応する <see cref="T:System.Windows.Window" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="42fae-381">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-382">このメソッドは、<xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="42fae-382">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeactivated : EventArgs -&gt; unit&#xA;override this.OnDeactivated : EventArgs -&gt; unit" Usage="window.OnDeactivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-383">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-383">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-384"><see cref="E:System.Windows.Window.Deactivated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-384">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-385"><xref:System.Windows.Window.OnDeactivated%2A> は、<xref:System.Windows.Window.Deactivated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-385"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="42fae-386"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnDeactivated%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-386">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="42fae-387">オーバーライドされたメソッドは、<xref:System.Windows.Window.Deactivated> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnDeactivated%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-387">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberSignature Language="F#" Value="override this.OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit" Usage="window.OnDpiChanged (oldDpi, newDpi)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="oldDpi"><span data-ttu-id="42fae-388">以前の DPI スケール設定。</span><span class="sxs-lookup"><span data-stu-id="42fae-388">The previous DPI scale setting.</span></span></param>
        <param name="newDpi"><span data-ttu-id="42fae-389">新規の DPI スケール設定。</span><span class="sxs-lookup"><span data-stu-id="42fae-389">The new DPI scale setting.</span></span></param>
        <summary><span data-ttu-id="42fae-390">このウィンドウが表示される DPI が変更するときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-390">Called when the DPI at which this window is rendered changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="window.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-391">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-391">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-392"><see cref="E:System.Windows.Window.LocationChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-392">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-393"><xref:System.Windows.Window.OnLocationChanged%2A> は、<xref:System.Windows.Window.LocationChanged> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-393"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="42fae-394"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnLocationChanged%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-394">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="42fae-395">オーバーライドされたメソッドは、<xref:System.Windows.Window.LocationChanged> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnLocationChanged%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-395">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="window.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-396">イベントのデータです。</span><span class="sxs-lookup"><span data-stu-id="42fae-396">The data for the event.</span></span></param>
        <summary><span data-ttu-id="42fae-397"><see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> イベントが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-397">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-398">この実装では、<xref:System.Windows.UIElement.ManipulationBoundaryFeedback> イベントデータの処理済みの状態 (<xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティ) は変更されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-398">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="42fae-399"><see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="42fae-399">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span></span> <span data-ttu-id="42fae-400">基本実装を呼び出さないと、基底クラスでイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-400">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="42fae-401">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-401">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSourceInitialized : EventArgs -&gt; unit&#xA;override this.OnSourceInitialized : EventArgs -&gt; unit" Usage="window.OnSourceInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-402">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-402">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-403"><see cref="E:System.Windows.Window.SourceInitialized" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-403">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-404"><xref:System.Windows.Window.OnSourceInitialized%2A> は、<xref:System.Windows.Window.SourceInitialized> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-404"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="42fae-405"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnSourceInitialized%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-405">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="42fae-406">オーバーライドされたメソッドは、<xref:System.Windows.Window.SourceInitialized> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnSourceInitialized%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-406">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStateChanged : EventArgs -&gt; unit&#xA;override this.OnStateChanged : EventArgs -&gt; unit" Usage="window.OnStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="42fae-407">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-407">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="42fae-408"><see cref="E:System.Windows.Window.StateChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-408">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-409"><xref:System.Windows.Window.OnStateChanged%2A> は、<xref:System.Windows.Window.StateChanged> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="42fae-409"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="42fae-410"><xref:System.Windows.Window> から派生した型で <xref:System.Windows.Window.OnStateChanged%2A>がオーバーライドされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-410">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="42fae-411">オーバーライドされたメソッドは、<xref:System.Windows.Window.StateChanged> を発生させる必要がある場合に、基底クラスの <xref:System.Windows.Window.OnStateChanged%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-411">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualChildrenChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualChildrenChanged(class System.Windows.DependencyObject visualAdded, class System.Windows.DependencyObject visualRemoved) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualChildrenChanged (visualAdded As DependencyObject, visualRemoved As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualChildrenChanged(System::Windows::DependencyObject ^ visualAdded, System::Windows::DependencyObject ^ visualRemoved);" />
      <MemberSignature Language="F#" Value="override this.OnVisualChildrenChanged : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualChildrenChanged (visualAdded, visualRemoved)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualAdded" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.8" />
        <Parameter Name="visualRemoved" Type="System.Windows.DependencyObject" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="visualAdded"><span data-ttu-id="42fae-412">コレクションに追加された <see cref="T:System.Windows.Media.Visual" /> です。</span><span class="sxs-lookup"><span data-stu-id="42fae-412">The <see cref="T:System.Windows.Media.Visual" /> that was added to the collection.</span></span></param>
        <param name="visualRemoved"><span data-ttu-id="42fae-413">コレクションから削除された <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-413">The <see cref="T:System.Windows.Media.Visual" /> that was removed from the collection.</span></span></param>
        <summary><span data-ttu-id="42fae-414">この <see cref="T:System.Windows.Media.VisualCollection" /> オブジェクトの <see cref="T:System.Windows.Window" /> が変更されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-414">Called when the <see cref="T:System.Windows.Media.VisualCollection" /> of this <see cref="T:System.Windows.Window" /> object is modified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="42fae-415">直前の親。</span><span class="sxs-lookup"><span data-stu-id="42fae-415">The previous parent.</span></span> <span data-ttu-id="42fae-416"><see cref="T:System.Windows.DependencyObject" /> の直前の親が存在しない場合は null に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-416">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span></span></param>
        <summary><span data-ttu-id="42fae-417">ウィンドウの親が変更されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-417">Called when the parent of the window is changed.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnedWindows : System.Windows.WindowCollection" Usage="System.Windows.Window.OwnedWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-418">このウィンドウがオーナー ウィンドウとなっているウィンドウのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="42fae-418">Gets a collection of windows for which this window is the owner.</span></span></summary>
        <value><span data-ttu-id="42fae-419">このウィンドウがオーナー ウィンドウとなっているウィンドウへの参照を含む <see cref="T:System.Windows.WindowCollection" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-419">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-420">所有ウィンドウとは、[所有者] ウィンドウと呼ばれる別のウィンドウへの参照で設定された <xref:System.Windows.Window.Owner%2A> プロパティを持つウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="42fae-420">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="42fae-421">所有者ウィンドウによって所有されているすべてのウィンドウを検索するには、<xref:System.Windows.Window.OwnedWindows%2A> プロパティによって返される <xref:System.Windows.WindowCollection> を列挙します。</span><span class="sxs-lookup"><span data-stu-id="42fae-421">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-422">次の例は、<xref:System.Windows.Window.OwnedWindows%2A>を列挙する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-422">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.Window with get, set" Usage="System.Windows.Window.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-423">この <see cref="T:System.Windows.Window" /> を所有する <see cref="T:System.Windows.Window" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-423">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span></span></summary>
        <value><span data-ttu-id="42fae-424">この <see cref="T:System.Windows.Window" /> のオーナー ウィンドウを表す <see cref="T:System.Windows.Window" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="42fae-424">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-425"><xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによって子ウィンドウが親ウィンドウによって開かれると、親ウィンドウと子ウィンドウの間に暗黙的なリレーションシップが確立されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-425">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="42fae-426">この関係により、最小化、最大化、および復元に関するなどの特定の動作が適用されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-426">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="42fae-427">ただし、子ウィンドウが <xref:System.Windows.Window.Show%2A>を呼び出すことによって親ウィンドウによって作成された場合、子ウィンドウに親ウィンドウとのリレーションシップはありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-427">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="42fae-428">これは、次のことを意味します。</span><span class="sxs-lookup"><span data-stu-id="42fae-428">This means that:</span></span>  
  
-   <span data-ttu-id="42fae-429">子ウィンドウに親ウィンドウへの参照がありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-429">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="42fae-430">子ウィンドウの動作は、親ウィンドウの動作に依存しません。どちらのウィンドウも、他のウィンドウとは別にカバーするか、最小化、最大化、および復元することができます。</span><span class="sxs-lookup"><span data-stu-id="42fae-430">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="42fae-431">子ウィンドウと親ウィンドウの間にリレーションシップを作成できるようにするため、<xref:System.Windows.Window> は所有権の概念をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="42fae-431">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="42fae-432">所有権は、ウィンドウ (所有ウィンドウ) の [<xref:System.Windows.Window.Owner%2A>] プロパティに別のウィンドウ (所有者ウィンドウ) への参照が設定されている場合に確立されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-432">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="42fae-433">このリレーションシップが確立されると、次の動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-433">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="42fae-434">所有者ウィンドウが最小化されている場合は、所有しているすべてのウィンドウも最小化されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-434">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="42fae-435">所有しているウィンドウが最小化されている場合、その所有者は最小化されていません。</span><span class="sxs-lookup"><span data-stu-id="42fae-435">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="42fae-436">オーナーウィンドウが最大化されている場合は、所有者ウィンドウと所有ウィンドウの両方が復元されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-436">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="42fae-437">オーナーウィンドウは、所有しているウィンドウをカバーすることはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-437">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="42fae-438"><xref:System.Windows.Window.ShowDialog%2A> を使用して開かれなかった所有ウィンドウはモーダルではありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-438">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="42fae-439">ユーザーは、引き続き [所有者] ウィンドウと対話できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-439">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="42fae-440">オーナーウィンドウを閉じると、所有しているウィンドウも閉じられます。</span><span class="sxs-lookup"><span data-stu-id="42fae-440">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="42fae-441">所有ウィンドウが <xref:System.Windows.Window.Show%2A>を使用して所有者ウィンドウによって開かれ、オーナーウィンドウが閉じている場合、所有ウィンドウの <xref:System.Windows.Window.Closing> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="42fae-441">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="42fae-442"><xref:System.Windows.Window.ShowDialog%2A>を呼び出して子ウィンドウを開いた場合は、子ウィンドウの <xref:System.Windows.Window.Owner%2A> プロパティも設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-442">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="42fae-443">そうしないと、ユーザーはタスクバーボタンを押して子ウィンドウと親ウィンドウの両方を復元できなくなります。</span><span class="sxs-lookup"><span data-stu-id="42fae-443">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="42fae-444">代わりに、[タスクバー] ボタンを押すと、子ウィンドウと親ウィンドウの両方を含むウィンドウの一覧が表示され、選択できるようになります。選択したウィンドウのみが復元されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-444">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="42fae-445">また、<xref:System.Windows.Window.ShowDialog%2A> を呼び出して開いたウィンドウの <xref:System.Windows.Window.Owner%2A> プロパティを設定して、との正しい動作を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-445">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-446">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-446">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-447">次の例では、所有者/所有関係を確立する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="42fae-447">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="42fae-448">ウィンドウがそのウィンドウ自体を所有しようとしています。</span><span class="sxs-lookup"><span data-stu-id="42fae-448">A window tries to own itself</span></span>  
  
 <span data-ttu-id="42fae-449">または</span><span class="sxs-lookup"><span data-stu-id="42fae-449">-or-</span></span>  
  
 <span data-ttu-id="42fae-450">2 つのウィンドウが相互に所有しようとしています。</span><span class="sxs-lookup"><span data-stu-id="42fae-450">Two windows try to own each other.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-451"><see cref="P:System.Windows.Window.Owner" /> プロパティが、表示されているウィンドウで <see cref="M:System.Windows.Window.ShowDialog" /> を使用して設定されています。</span><span class="sxs-lookup"><span data-stu-id="42fae-451">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span></span>  
  
<span data-ttu-id="42fae-452">または</span><span class="sxs-lookup"><span data-stu-id="42fae-452">-or-</span></span> 
<span data-ttu-id="42fae-453"><see cref="P:System.Windows.Window.Owner" /> プロパティが、まだ表示されていないウィンドウに設定されています。</span><span class="sxs-lookup"><span data-stu-id="42fae-453">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-454">すべての windows およびユーザー入力イベントを制限なしで使用するためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="42fae-454">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="42fae-455">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-455">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeMode : System.Windows.ResizeMode with get, set" Usage="System.Windows.Window.ResizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-456">サイズ変更モードを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-456">Gets or sets the resize mode.</span></span></summary>
        <value><span data-ttu-id="42fae-457">サイズ変更モードを指定する <see cref="T:System.Windows.ResizeMode" /> 値。</span><span class="sxs-lookup"><span data-stu-id="42fae-457">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-458">これには、4 つのオプションがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-458">There are four options:</span></span>  
  
-   <span data-ttu-id="42fae-459">**Noresize**。</span><span class="sxs-lookup"><span data-stu-id="42fae-459">**NoResize**.</span></span> <span data-ttu-id="42fae-460">ユーザーはウィンドウのサイズを変更できません。</span><span class="sxs-lookup"><span data-stu-id="42fae-460">The user cannot resize the window.</span></span> <span data-ttu-id="42fae-461">[最大化] と [最小化] の各ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-461">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="42fae-462">**Canminimize**。</span><span class="sxs-lookup"><span data-stu-id="42fae-462">**CanMinimize**.</span></span> <span data-ttu-id="42fae-463">ユーザーは、ウィンドウを最小化して、タスクバーから復元することしかできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-463">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="42fae-464">[最小化] と [最大化] の両方のボックスが表示されますが、[最小化] ボックスのみが有効になっています。</span><span class="sxs-lookup"><span data-stu-id="42fae-464">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="42fae-465">**Canresize**。</span><span class="sxs-lookup"><span data-stu-id="42fae-465">**CanResize**.</span></span> <span data-ttu-id="42fae-466">ユーザーは、最小化ボタンと最大化ボックスを使用してウィンドウのサイズを変更できるだけでなく、ウィンドウの周りにドラッグしたアウトラインも表示されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-466">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="42fae-467">[最小化] ボックスと [最大化] ボックスが表示され、有効になります。</span><span class="sxs-lookup"><span data-stu-id="42fae-467">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="42fae-468">(既定値)。</span><span class="sxs-lookup"><span data-stu-id="42fae-468">(Default).</span></span>  
  
-   <span data-ttu-id="42fae-469">**CanResizeWithGrip**。</span><span class="sxs-lookup"><span data-stu-id="42fae-469">**CanResizeWithGrip**.</span></span> <span data-ttu-id="42fae-470">このオプションは <xref:System.Windows.ResizeMode.CanResize>と同じ機能を持ちますが、ウィンドウの右下隅に "サイズ変更グリップ" を追加します。</span><span class="sxs-lookup"><span data-stu-id="42fae-470">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-471">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-471">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-472">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-472">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-473">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-473">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="42fae-474">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-474">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ResizeModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ResizeModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-475"><see cref="P:System.Windows.Window.ResizeMode" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-475">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.RestoreBounds : System.Windows.Rect" Usage="System.Windows.Window.RestoreBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-476">最小化または最大化される前のウィンドウのサイズと位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="42fae-476">Gets the size and location of a window before being either minimized or maximized.</span></span></summary>
        <value><span data-ttu-id="42fae-477">最小化または最大化される前のウィンドウのサイズと位置を指定する <see cref="T:System.Windows.Rect" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-477">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-478">復元用の四角形は、最小化または最大化される前にウィンドウによって占有される領域です。</span><span class="sxs-lookup"><span data-stu-id="42fae-478">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="42fae-479"><xref:System.Windows.Window.RestoreBounds%2A> を使用すると、アプリケーションを終了する前にウィンドウの最後のサイズと位置を保存し、次にアプリケーションが起動してからユーザーがウィンドウを元に戻したときにそれらの値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-479">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="42fae-480">ウィンドウが表示される前、または閉じられた後に <xref:System.Windows.Window.RestoreBounds%2A> に対してクエリを実行すると、<xref:System.Windows.Rect.Empty%2A> が返されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-480">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-481">ウィンドウがブラウザーでホストされている場合、このプロパティを取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-481">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-482">次の例では、<xref:System.Windows.Window.RestoreBounds%2A> と分離ストレージを使用して、ウィンドウのサイズと位置が、ウィンドウが以前に表示されたときと同じであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="42fae-482">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-483">ウィンドウの外接する四角形のサイズと位置を照会するアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="42fae-483">for permission to query for the size and location of a window's bounding rectangle.</span></span> <span data-ttu-id="42fae-484">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-484">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="window.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-485">ウィンドウを開き、開いたウィンドウが閉じるのを待機せずに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="42fae-485">Opens a window and returns without waiting for the newly opened window to close.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-486"><xref:System.Windows.Window> クラスがインスタンス化されると、既定では表示されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-486">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="42fae-487"><xref:System.Windows.Window.Show%2A> ウィンドウを表示し、ウィンドウが閉じられるのを待たずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="42fae-487"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="42fae-488">そのため、開いているウィンドウでは、ユーザーがアプリケーション内の他のウィンドウと対話できないようにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-488">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="42fae-489">この種類のウィンドウは、*モードレス*ウィンドウと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="42fae-489">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="42fae-490">モードレスウィンドウの一般的な例として、ウィンドウ、ツールボックス、およびパレットがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-490">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="42fae-491">特定のウィンドウとの対話をユーザーに制限するには、<xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによってウィンドウを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-491">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="42fae-492"><xref:System.Windows.Window.Show%2A> を呼び出すことによって開かれたウィンドウは、そのウィンドウを開いたウィンドウと自動的に関係がありません。具体的には、開いているウィンドウに、どのウィンドウが開いているかがわかりません。</span><span class="sxs-lookup"><span data-stu-id="42fae-492">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="42fae-493">このリレーションシップは、<xref:System.Windows.Window.Owner%2A> プロパティを使用して確立し、<xref:System.Windows.Window.OwnedWindows%2A> プロパティを使用して管理できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-493">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="42fae-494"><xref:System.Windows.Window.Show%2A> を呼び出すと、<xref:System.Windows.Window> オブジェクトの <xref:System.Windows.UIElement.Visibility%2A> プロパティを <xref:System.Windows.Visibility.Visible>に設定した場合と同じ結果が得られます。</span><span class="sxs-lookup"><span data-stu-id="42fae-494">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="42fae-495">ただし、タイミングの観点からは2つの違いがあります。</span><span class="sxs-lookup"><span data-stu-id="42fae-495">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="42fae-496"><xref:System.Windows.Window.Show%2A> の呼び出しは、子ウィンドウの <xref:System.Windows.FrameworkElement.Loaded> イベントが発生した後にのみを返す同期操作です。</span><span class="sxs-lookup"><span data-stu-id="42fae-496">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="42fae-497">ただし <xref:System.Windows.UIElement.Visibility%2A>の設定は、すぐにを返す非同期操作です。</span><span class="sxs-lookup"><span data-stu-id="42fae-497">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="42fae-498"><xref:System.Windows.UIElement.Visibility%2A>を設定すると、<xref:System.Windows.UIElement.Visibility%2A> を設定する前に登録したウィンドウイベントは、<xref:System.Windows.UIElement.Visibility%2A> を設定したメソッドが実行を完了するまで発生しない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-498">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-499">次のサンプルは、モードレスウィンドウを開く方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-499">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-500">閉じている途中 (<see cref="M:System.Windows.Window.Show" />) または閉じた (<see cref="E:System.Windows.Window.Closing" />) ウィンドウに対して <see cref="E:System.Windows.Window.Closed" /> が呼び出されている。</span><span class="sxs-lookup"><span data-stu-id="42fae-500"><see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowActivated : bool with get, set" Usage="System.Windows.Window.ShowActivated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-501">ウィンドウをアクティブ状態で初期表示するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-501">Gets or sets a value that indicates whether a window is activated when first shown.</span></span></summary>
        <value><span data-ttu-id="42fae-502">ウィンドウを初期表示するときにアクティブ化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-502"><see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="42fae-503">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="42fae-503">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-504"><xref:System.Windows.Window.ShowActivated%2A> プロパティが `false` に設定されているウィンドウを開くと、ウィンドウはアクティブ化されず、ユーザーが手動でウィンドウを選択してアクティブにするまで、その <xref:System.Windows.Window.Activated> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="42fae-504">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="42fae-505">ウィンドウが選択されると、正常にアクティブ化され、非アクティブになります。</span><span class="sxs-lookup"><span data-stu-id="42fae-505">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="42fae-506">ウィンドウが開いたときにアクティブ化されないようにするには、(<xref:System.Windows.Window.Show%2A>を呼び出すことによって) ウィンドウが表示される前に、<xref:System.Windows.Window.ShowActivated%2A> プロパティを `false` に設定する必要があります。ウィンドウを表示した後に <xref:System.Windows.Window.ShowActivated%2A> を `false` に設定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-506">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="42fae-507"><xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによってモーダルで開かれたウィンドウで <xref:System.Windows.Window.ShowActivated%2A> を `false` に設定しても、実際の影響はありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-507">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="42fae-508">モーダルウィンドウはアクティブ化されませんが、モーダルウィンドウを使用すると、ユーザーは開いている他のアプリケーションウィンドウをアクティブにできなくなります。</span><span class="sxs-lookup"><span data-stu-id="42fae-508">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-509">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-509">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-510">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-510">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="42fae-511">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-511">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-512">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-512">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="42fae-513">次の例は、マークアップを使用して、アクティブ化せずにウィンドウを開くように構成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-513">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="42fae-514">次の例は、コードを使用して、ウィンドウをアクティブ化せずに開くように構成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="42fae-514">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowActivatedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowActivatedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-515"><see cref="P:System.Windows.Window.ShowActivated" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-515">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : unit -&gt; Nullable&lt;bool&gt;" Usage="window.ShowDialog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="42fae-516">ウィンドウを開き、開いたウィンドウが閉じた場合にのみ制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="42fae-516">Opens a window and returns only when the newly opened window is closed.</span></span></summary>
        <returns><span data-ttu-id="42fae-517">アクティビティが受け入れられた (<see cref="T:System.Nullable`1" />) か、取り消された (<see cref="T:System.Boolean" />) かを示す <see langword="true" /> 型の <see langword="false" /> 値。</span><span class="sxs-lookup"><span data-stu-id="42fae-517">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span></span> <span data-ttu-id="42fae-518">この戻り値は、ウィンドウが閉じる前の <see cref="P:System.Windows.Window.DialogResult" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="42fae-518">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-519"><xref:System.Windows.Window> クラスがインスタンス化されると、既定では表示されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-519">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="42fae-520"><xref:System.Windows.Window.ShowDialog%2A> にウィンドウが表示され、アプリケーション内の他のウィンドウはすべて無効になり、ウィンドウが閉じている場合にのみが返されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-520"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="42fae-521">この種類のウィンドウを*モーダル*ウィンドウと呼びます。</span><span class="sxs-lookup"><span data-stu-id="42fae-521">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="42fae-522">モーダルウィンドウは、主にダイアログボックスとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-522">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="42fae-523">ダイアログボックスは、アプリケーションがユーザーとやり取りして、ファイルのオープンやドキュメントの印刷などのタスクを実行するために使用する、特別な種類のウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="42fae-523">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="42fae-524">ダイアログボックスを使用すると、通常、ダイアログボックスが閉じられる前に表示されていたタスクをユーザーが受け入れたり取り消したりできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-524">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="42fae-525"><xref:System.Windows.Window.ShowDialog%2A> は、アクティビティが受け入れられたか取り消されたかを指定する <xref:System.Nullable%601><xref:System.Boolean> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="42fae-525"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="42fae-526">この戻り値は、ウィンドウが閉じる前の <xref:System.Windows.Window.DialogResult%2A> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="42fae-526">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="42fae-527">詳細については、<xref:System.Windows.Window.DialogResult%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-527">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="42fae-528"><xref:System.Windows.Window.ShowDialog%2A> メソッドを呼び出すことによって開かれたウィンドウには、そのウィンドウを開いたウィンドウとの関係が自動的にはありません。具体的には、開いているウィンドウに、どのウィンドウが開いているかがわかりません。</span><span class="sxs-lookup"><span data-stu-id="42fae-528">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="42fae-529">このリレーションシップは、<xref:System.Windows.Window.Owner%2A> プロパティを使用して確立し、<xref:System.Windows.Window.OwnedWindows%2A> プロパティを使用して管理できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-529">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="42fae-530">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] オートメーションをサポートするには (「 [UI オートメーションの概要](~/docs/framework/ui-automation/ui-automation-overview.md)」を参照)、<xref:System.Windows.Window.ShowDialog%2A>を呼び出して開いたウィンドウに対して <xref:System.Windows.Window.Owner%2A> を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="42fae-530">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="42fae-531">モーダル [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] ウィンドウ (<xref:System.Windows.Window.ShowDialog%2A>を呼び出して開いたウィンドウ) が閉じられると、アクティブになっていたウィンドウが再アクティブ化されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-531">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="42fae-532">モーダル [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] ウィンドウにオーナーウィンドウがある場合 (<xref:System.Windows.Window.Owner%2A>を参照)、モーダル [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] ウィンドウが閉じられたときに、前にアクティブ化されたウィンドウでない限り、オーナーウィンドウは再アクティブ化されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-532">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-533">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-533">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42fae-534">モーダルウィンドウを開く方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="42fae-534">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="42fae-535">閉じている途中 (<see cref="M:System.Windows.Window.ShowDialog" />) または閉じた (<see cref="E:System.Windows.Window.Closing" />) ウィンドウに対して <see cref="E:System.Windows.Window.Closed" /> が呼び出されている。</span><span class="sxs-lookup"><span data-stu-id="42fae-535"><see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="42fae-536">ウィンドウをアクティブにするアクセス許可の場合は。</span><span class="sxs-lookup"><span data-stu-id="42fae-536">for permission to activate a window.</span></span> <span data-ttu-id="42fae-537">関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="42fae-537">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowInTaskbar : bool with get, set" Usage="System.Windows.Window.ShowInTaskbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-538">ウィンドウにタスク バー ボタンがあるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-538">Gets or sets a value that indicates whether the window has a task bar button.</span></span></summary>
        <value><span data-ttu-id="42fae-539">ウィンドウにタスク バー ボタンがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-539"><see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="42fae-540">ブラウザー内でウィンドウがホストされている場合は適用されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-540">Does not apply when the window is hosted in a browser.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-541"><xref:System.Windows.Window.ShowInTaskbar%2A> が `true`に設定されている場合、ウィンドウは ALT + TAB アプリケーションの選択リストにも表示されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-541">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="42fae-542">[タスクバー] ボタンと [ALT + TAB] アプリケーション選択リストの両方に使用されるアイコンは、[<xref:System.Windows.Window.Icon%2A>] プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="42fae-542">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-543">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-543">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-544">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-544">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-545">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-545">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="42fae-546">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-546">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-547">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-547">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowInTaskbarProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowInTaskbarProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-548"><see cref="P:System.Windows.Window.ShowInTaskbar" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-548">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberSignature Language="F#" Value="member this.SizeToContent : System.Windows.SizeToContent with get, set" Usage="System.Windows.Window.SizeToContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-549">ウィンドウのサイズがコンテンツのサイズに合わせて自動的に調整されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-549">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span></span></summary>
        <value><span data-ttu-id="42fae-550">
          <see cref="T:System.Windows.SizeToContent" /> 値。</span><span class="sxs-lookup"><span data-stu-id="42fae-550">A <see cref="T:System.Windows.SizeToContent" /> value.</span></span> <span data-ttu-id="42fae-551">既定では、 <see cref="F:System.Windows.SizeToContent.Manual" />です。</span><span class="sxs-lookup"><span data-stu-id="42fae-551">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-552"><xref:System.Windows.Window.SizeToContent%2A> が <xref:System.Windows.SizeToContent.WidthAndHeight>に設定されている場合、<xref:System.Windows.FrameworkElement.Height%2A> または <xref:System.Windows.FrameworkElement.Width%2A> を設定しても効果はありません。どちらのプロパティも設定できますが、設定されている値はウィンドウには適用されません。</span><span class="sxs-lookup"><span data-stu-id="42fae-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="42fae-553"><xref:System.Windows.Window.SizeToContent%2A> が <xref:System.Windows.SizeToContent.Height>に設定されている場合、<xref:System.Windows.FrameworkElement.Height%2A> を設定してもウィンドウの高さは変わりません。</span><span class="sxs-lookup"><span data-stu-id="42fae-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="42fae-554"><xref:System.Windows.Window.SizeToContent%2A> が <xref:System.Windows.SizeToContent.Width>に設定されている場合、<xref:System.Windows.FrameworkElement.Width%2A> を設定してもウィンドウの幅は変わりません。</span><span class="sxs-lookup"><span data-stu-id="42fae-554">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="42fae-555"><xref:System.Windows.Window.SizeToContent%2A> の値が <xref:System.Windows.SizeToContent.Manual>以外の場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="42fae-555">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="42fae-556">ユーザーがサイズ変更グリップを使用してウィンドウのサイズを変更するか、境界線をドラッグすると、<xref:System.Windows.Window.SizeToContent%2A> が自動的に <xref:System.Windows.SizeToContent.Manual> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-556"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="42fae-557">コンテンツのサイズが変化してウィンドウのサイズが変更されると、<xref:System.Windows.FrameworkElement.SizeChanged> が発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-557">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="42fae-558">ウィンドウが透明になっている場合は (「<xref:System.Windows.Window.AllowsTransparency%2A>」を参照)、ウィンドウが表示されているコンテンツよりも大きくならないように、<xref:System.Windows.Window.SizeToContent%2A> を <xref:System.Windows.SizeToContent.WidthAndHeight> に設定することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-558">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-559">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-559">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-560">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-560">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-561">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-561">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="42fae-562">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-562">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-563">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-563">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="42fae-564">次の例では、コンテンツに合わせてウィンドウのサイズを変更する方法を指定するために、コードで <xref:System.Windows.Window.SizeToContent%2A> プロパティを設定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="42fae-564">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeToContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.SizeToContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-565"><see cref="P:System.Windows.Window.SizeToContent" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-565">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberSignature Language="F#" Value="member this.SourceInitialized : EventHandler " Usage="member this.SourceInitialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-566">このイベントは、[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] との相互運用をサポートするために発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-566">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span></span> <span data-ttu-id="42fae-567">[https://docs.microsoft.com/azure/active-directory/develop/scenario-protected-web-api-overview](<see cref="T:System.Windows.Interop.HwndSource" />) をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="42fae-567">See <see cref="T:System.Windows.Interop.HwndSource" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler " Usage="member this.StateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-568">ウィンドウの <see cref="P:System.Windows.Window.WindowState" /> プロパティが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-568">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TaskbarItemInfo : System.Windows.Shell.TaskbarItemInfo with get, set" Usage="System.Windows.Window.TaskbarItemInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-569">[!INCLUDE[win7](~/includes/win7-md.md)] の <see cref="T:System.Windows.Window" /> タスク バーのサムネイルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-569">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span></span></summary>
        <value><span data-ttu-id="42fae-570">[!INCLUDE[win7](~/includes/win7-md.md)] の <see cref="T:System.Windows.Window" /> タスク バーのサムネイル。</span><span class="sxs-lookup"><span data-stu-id="42fae-570">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-571">[!INCLUDE[win7](~/includes/win7-md.md)] タスクバーのサムネイルの使用方法の詳細については、<xref:System.Windows.Shell.TaskbarItemInfo> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-571">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TaskbarItemInfoProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-572"><see cref="P:System.Windows.Window.TaskbarItemInfo" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-572">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Window.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-573">ウィンドウのタイトルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-573">Gets or sets a window's title.</span></span></summary>
        <value><span data-ttu-id="42fae-574">ウィンドウのタイトルを格納する <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-574">A <see cref="T:System.String" /> that contains the window's title.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-575"><xref:System.Windows.Window>、<xref:System.Windows.Navigation.NavigationWindow>、[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]のタイトルは、<xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>を使用して設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-575">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-576">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-576">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-577">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-577">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="42fae-578">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-578">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-579">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-579">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TitleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TitleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-580"><see cref="P:System.Windows.Window.Title" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-580">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Top : double with get, set" Usage="System.Windows.Window.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-581">ウィンドウの上端の位置を、デスクトップとの関係で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-581">Gets or sets the position of the window's top edge, in relation to the desktop.</span></span></summary>
        <value><span data-ttu-id="42fae-582">ウィンドウの上端の位置。単位は論理単位 (1/96 インチ)。</span><span class="sxs-lookup"><span data-stu-id="42fae-582">The position of the window's top, in logical units (1/96").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-583"><xref:System.Windows.Window> が最大化または最小化されると、この値は <xref:System.Windows.Window>の復元ポイントの上端を表します。</span><span class="sxs-lookup"><span data-stu-id="42fae-583">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="42fae-584">このプロパティは、スタイルを使用して設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-584">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="42fae-585">値を指定しない場合、<xref:System.Windows.Window.Top%2A> はシステムの既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-585">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="42fae-586"><xref:System.Windows.Window.Top%2A> を <xref:System.Double.NaN>に設定して、システムの既定値を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="42fae-586">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="42fae-587"><xref:System.Double.NegativeInfinity> も <xref:System.Double.PositiveInfinity> も <xref:System.Windows.Window.Top%2A>の有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="42fae-587">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-588">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-588">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-589">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-589">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-590">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-590">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="42fae-591">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-591">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-592">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-592">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Topmost : bool with get, set" Usage="System.Windows.Window.Topmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-593">ウィンドウが最上位 z オーダーで表示されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-593">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span></span></summary>
        <value><span data-ttu-id="42fae-594">ウィンドウが最上位の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-594"><see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-595"><xref:System.Windows.Window.Topmost%2A> プロパティが `true` に設定されているウィンドウは、<xref:System.Windows.Window.Topmost%2A> プロパティが `false`に設定されているすべてのウィンドウの上に表示されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-595">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="42fae-596">[<xref:System.Windows.Window.Topmost%2A>] プロパティが [`true`] に設定されているウィンドウのグループでは、現在アクティブになっているウィンドウが最上位のウィンドウになります。</span><span class="sxs-lookup"><span data-stu-id="42fae-596">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="42fae-597">同様に、<xref:System.Windows.Window.Topmost%2A> プロパティを持つウィンドウのグループについては、`false`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-597">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-598">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-598">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-599">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-599">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-600">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-600">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="42fae-601">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-601">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-602">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-602">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopmostProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopmostProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-603"><see cref="P:System.Windows.Window.Topmost" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-603">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-604"><see cref="P:System.Windows.Window.Top" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-604">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStartupLocation : System.Windows.WindowStartupLocation with get, set" Usage="System.Windows.Window.WindowStartupLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-605">最初に表示するときのウィンドウの位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-605">Gets or sets the position of the window when first shown.</span></span></summary>
        <value><span data-ttu-id="42fae-606">ウィンドウが最初に表示されたときの左上の位置を指定する <see cref="T:System.Windows.WindowStartupLocation" /> 値。</span><span class="sxs-lookup"><span data-stu-id="42fae-606">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span></span> <span data-ttu-id="42fae-607">既定では、 <see cref="F:System.Windows.WindowStartupLocation.Manual" />です。</span><span class="sxs-lookup"><span data-stu-id="42fae-607">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-608">`WindowStartupLocation` プロパティを <xref:System.Windows.WindowStartupLocation.Manual> に設定すると、その <xref:System.Windows.Window.Left%2A> および <xref:System.Windows.Window.Top%2A> プロパティ値に従ってウィンドウが配置されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-608">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="42fae-609"><xref:System.Windows.Window.Left%2A> または <xref:System.Windows.Window.Top%2A> のいずれかのプロパティが指定されていない場合、それらの値は Windows によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-609">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by Windows.</span></span>  
  
 <span data-ttu-id="42fae-610">`WindowStartupLocation` プロパティを <xref:System.Windows.WindowStartupLocation.CenterScreen> に設定すると、ウィンドウがマウスカーソルを含む画面の中央に配置されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-610">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="42fae-611">`WindowStartupLocation` プロパティを <xref:System.Windows.WindowStartupLocation.CenterOwner> に設定すると、オーナーウィンドウの中央にウィンドウが配置されます (<xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>を参照)。指定されている場合は、を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-611">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>), if specified.</span></span> <span data-ttu-id="42fae-612">[所有者] ウィンドウには、別の WPF ウィンドウまたは非 WPF ウィンドウを指定できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-612">The owner window can be either another WPF window or a non-WPF window.</span></span>

> [!NOTE]   
>  <span data-ttu-id="42fae-613">Wpf 以外のウィンドウを使用した WPF ウィンドウの詳細については、「 [wpf と Win32 の相互運用](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)と <xref:System.Windows.Interop.WindowInteropHelper>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="42fae-613">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span> 

 <span data-ttu-id="42fae-614">所有者ウィンドウが指定されていない場合、ウィンドウの位置は、`WindowStartupLocation` プロパティが <xref:System.Windows.WindowStartupLocation.Manual>に設定されている場合と同じ方法で決定されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-614">If an owner window is not specified, the position of the window is determined in the same way as if the `WindowStartupLocation` property is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>

> [!NOTE]
>  <span data-ttu-id="42fae-615">ウィンドウがブラウザーでホストされている場合、このプロパティの値を設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-615">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberSignature Language="F#" Value="member this.WindowState : System.Windows.WindowState with get, set" Usage="System.Windows.Window.WindowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-616">ウィンドウが元のサイズに戻されているか、最小化されているか、最大化されているかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-616">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span></span></summary>
        <value><span data-ttu-id="42fae-617">ウィンドウが元のサイズに戻されているか、最小化されているか、最大化されているかを判断する <see cref="T:System.Windows.WindowState" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-617">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span></span> <span data-ttu-id="42fae-618">既定値は、<see cref="F:System.Windows.WindowState.Normal" /> (元のサイズに戻されている) です。</span><span class="sxs-lookup"><span data-stu-id="42fae-618">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-619">ウィンドウが最小化または最大化される前に、そのサイズと位置が <xref:System.Windows.Window.RestoreBounds%2A>に格納されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-619">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="42fae-620">その後、ウィンドウが復元されると、サイズと位置の値が <xref:System.Windows.Window.RestoreBounds%2A>の値と共に復元されます。</span><span class="sxs-lookup"><span data-stu-id="42fae-620">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="42fae-621"><xref:System.Windows.Window.WindowState%2A> プロパティが変更されると、<xref:System.Windows.Window.StateChanged> が発生します。</span><span class="sxs-lookup"><span data-stu-id="42fae-621">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-622">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-622">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-623">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-623">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-624">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-624">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="42fae-625">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-625">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-626"><see cref="P:System.Windows.Window.WindowState" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-626">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStyle : System.Windows.WindowStyle with get, set" Usage="System.Windows.Window.WindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-627">ウィンドウの枠線のスタイルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="42fae-627">Gets or sets a window's border style.</span></span></summary>
        <value><span data-ttu-id="42fae-628">ウィンドウの境界線スタイルを指定する <see cref="T:System.Windows.WindowStyle" />。</span><span class="sxs-lookup"><span data-stu-id="42fae-628">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span></span> <span data-ttu-id="42fae-629">既定では、 <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />です。</span><span class="sxs-lookup"><span data-stu-id="42fae-629">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42fae-630"><xref:System.Windows.Window.WindowStyle%2A> には、<xref:System.Windows.WindowStyle.None>、<xref:System.Windows.WindowStyle.ToolWindow>、<xref:System.Windows.WindowStyle.SingleBorderWindow> (既定値)、<xref:System.Windows.WindowStyle.ThreeDBorderWindow>を含む <xref:System.Windows.WindowStyle> 列挙値のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="42fae-630"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="42fae-631">次の図は [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] のウィンドウスタイルを示しています (透明なグラスが有効になっている Windows Vista Aero テーマ)。</span><span class="sxs-lookup"><span data-stu-id="42fae-631">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="42fae-632">![ウィンドウスタイル](~/add/media/windowoverviewfigure6.PNG "ウィンドウ スタイル")</span><span class="sxs-lookup"><span data-stu-id="42fae-632">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="42fae-633">ウィンドウがブラウザーでホストされている場合、このプロパティを設定または取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="42fae-633">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="42fae-634">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="42fae-634">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="42fae-635">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="42fae-635">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="42fae-636">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="42fae-636">Metadata properties set to `true`</span></span>|<span data-ttu-id="42fae-637">なし</span><span class="sxs-lookup"><span data-stu-id="42fae-637">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="42fae-638"><see cref="P:System.Windows.Window.WindowStyle" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="42fae-638">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
