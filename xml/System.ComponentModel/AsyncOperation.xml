<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c703222b353fbe8ff5c63fed1cd19f543de8517" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75148092" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>非同期操作の有効期間を追跡します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [イベントベースの非同期パターンの概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)に従ってクラスを実装する場合、クラスのインスタンスで呼び出された各非同期操作の有効期間を追跡することが必要になる場合があります。 <xref:System.ComponentModel.AsyncOperation> クラスは、非同期タスクの進行状況を追跡および報告する方法を提供します。  
  
 次の一覧は、<xref:System.ComponentModel.AsyncOperation> オブジェクトを使用する方法を示しています。  
  
-   進行状況と中間結果をクライアントに報告するには、非同期ワーカーコードから <xref:System.ComponentModel.AsyncOperation.Post%2A> を呼び出します。  
  
-   非同期タスクが完了したことを示す場合、または保留中の非同期タスクをキャンセルする場合は、<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>を呼び出します。  
  
 クラスは、各タスクの開始時に <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> を呼び出すことによって、各非同期タスクの <xref:System.ComponentModel.AsyncOperation> オブジェクトを取得する必要があります。 クライアントが個別の非同期タスクを区別できるようにするために、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> は、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> プロパティになる、クライアントが提供する一意のトークンのパラメーターを受け取ります。 これは、クライアントコードが、進行状況イベントまたは完了イベントを発生させている特定の非同期タスクを識別するために使用できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ComponentModel.AsyncOperation> オブジェクトを使用して、非同期操作の有効期間を追跡する方法を示しています。 このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。  
  
 完全なコードリストについては、「[方法: イベントベースの非同期パターンをサポートするコンポーネントを実装](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)する」を参照してください。 クライアントフォームの完全なコードリストについては、「[方法: イベントベースの非同期パターンのクライアントを実装](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)する」を参照してください。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>実装では、<see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> と <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> の呼び出しが非同期であることを確認する必要があるため、クラスライブラリプロバイダーは、同期されている特定のアプリケーションモデルで非同期動作を想定している場合に、スタックオーバーフローの可能性を考慮する必要がありません。  
  
非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">マネージド スレッド処理のベスト プラクティス</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">方法: イベントベースの非同期パターンをサポートするコンポーネントを実装する</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期操作の終了処理を行います。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期操作の有効期間を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> メソッドを呼び出して、非同期操作の有効期間を終了します。 特定のタスクに対してこのメソッドが呼び出された後、対応する <xref:System.ComponentModel.AsyncOperation> を呼び出すと、例外が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> は、このタスクに対して既に呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</param>
        <param name="arg"><paramref name="d" /> パラメーターに格納されているデリゲートの引数。</param>
        <summary>アプリケーション モデルに適したスレッドまたはコンテキストでデリゲートを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperation.Post%2A> メソッドは、非同期操作の有効期間を終了せずに、`arg` パラメーターによって指定されたデリゲートを呼び出します。  
  
 非同期操作の有効期間が <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>の呼び出しによって終了されていないときに、必要に応じて <xref:System.ComponentModel.AsyncOperation.Post%2A> メソッドを呼び出すことができます。 メソッドを使用して、進行状況または中間結果をクライアントに返すことができます。  
  
 `d` パラメーターは、非同期タスクの状態に関する更新をポストするときに呼び出されるデリゲートをラップします。 <xref:System.ComponentModel.AsyncOperation> オブジェクトは、アプリケーションモデルに適したスレッドまたはコンテキストでデリゲートが呼び出されるようにします。 メソッドでは、必要に応じて、ステータスの変更、進行状況の更新、または新しく利用可能な増分結果をクライアントに通知するイベントを発生させることができます。  
  
 `arg` パラメーターは、`d` パラメーターによってラップされたデリゲートに状態を渡すために使用する必要があります。 <xref:System.ComponentModel.AsyncOperation>への参照、または <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> オブジェクトである可能性があります。 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> から独自のクラスを作成して、追加の状態ストレージを提供することが望ましい場合があります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ComponentModel.AsyncOperation.Post%2A> メソッドを使用して、非同期操作の進行状況と増分結果をレポートする方法を示しています。 このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> メソッドは、このタスクに対して既に呼び出されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides"><para>継承によって <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを非同期にする必要があるため、クラスライブラリプロバイダーは、非同期性を想定しているものの、特定のアプリケーションモデルが同期されている可能性がある場合に、スタックオーバーフローが発生する可能性があります。  
  
 <block subset="none" type="note"><para>  
 コンソール アプリケーションは <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しの実行を同期しません。 これが原因で、<see langword="ProgressChanged" /> イベントが正しくない順序で発生することがあります。 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを順次実行するには、<see cref="T:System.Threading.SynchronizationContext" /> クラスを実装およびインストールします。  
  
</para></block>  
  
 非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">マネージド スレッド処理のベスト プラクティス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">方法: イベントベースの非同期パターンをサポートするコンポーネントを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</param>
        <param name="arg"><paramref name="d" /> パラメーターに格納されているデリゲートの引数。</param>
        <summary>非同期操作の有効期間を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> メソッドを呼び出して、非同期操作の有効期間を終了します。 特定のタスクに対してこのメソッドが呼び出された後、対応する <xref:System.ComponentModel.AsyncOperation> オブジェクトを呼び出すと、例外が発生します。  
  
 `d` パラメーターは、タスクの有効期間が完了、取り消し、またはタスクの失敗によって終了したときに、クラスが呼び出すデリゲートをラップします。 <xref:System.ComponentModel.AsyncOperation> オブジェクトは、アプリケーションモデルに適したスレッドまたはコンテキストでデリゲートが呼び出されるようにします。 デリゲートは、必要に応じて、非同期タスクの有効期間が終了したことをクライアントに通知するイベントを発生させることができます。  
  
 `arg` パラメーターは、完了デリゲート `d`に状態情報を渡すために使用されます。 パラメーター値として <xref:System.ComponentModel.AsyncOperation> オブジェクトまたは <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> オブジェクトを使用できます。 また、追加の状態ストレージを提供する場合は、<xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> クラスから派生したクラスのインスタンスを使用することもできます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> メソッドを使用して、非同期操作の有効期間を終了する方法を示しています。 このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> は、このタスクに対して既に呼び出されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides"><para>継承によって <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを非同期にする必要があるため、クラスライブラリプロバイダーは、非同期性を想定しているものの、特定のアプリケーションモデルが同期されている可能性がある場合に、スタックオーバーフローが発生する可能性があります。 メソッドは、"有効期間の終了" 呼び出しとして解釈される必要があります。これは、実装がアプリケーションモデルに適したものを実行する必要があることを意味します。 たとえば、ASP.NET は未処理の非同期操作の数を減らします。 また、これにより、操作が完了した後、それ以降の呼び出しが失敗するように、操作を状態にする必要があります。  
  
非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">マネージド スレッド処理のベスト プラクティス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">方法: イベントベースの非同期パターンをサポートするコンポーネントを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクトを取得します。</summary>
        <value>コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作を一意に識別するために使用するオブジェクトを取得または設定します。</summary>
        <value>非同期メソッド呼び出しに渡される状態オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスが複数の非同期メソッドをサポートしている場合、または1つの非同期メソッドの複数の呼び出しがサポートされている場合、クライアントは、イベントを発生させている非同期タスクを特定する方法を必要とします。 `MethodNameAsync` メソッドは、タスク ID として機能する <xref:System.Object> 型のパラメーターを受け取る必要があります。 このタスク ID は <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>メソッドを呼び出すときに使用します。これにより、クライアントのタスク ID が非同期操作の特定の呼び出しに関連付けられます。 このタスク ID は、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> プロパティを使用して実装で使用できます。  
  
> [!CAUTION]
>  クライアントコードでは、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> プロパティに一意の値を指定するように注意する必要があります。 タスク Id が一意でないと、実装によって進行状況やその他のイベントが誤って報告される可能性があります。 コードは、一意でないタスク ID を確認し、検出された場合は <xref:System.ArgumentException> を発生させる必要があります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> を使用して非同期操作の有効期間を追跡する方法を示しています。 このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">マネージド スレッド処理のベスト プラクティス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">イベントベースの非同期パターンの概要</related>
      </Docs>
    </Member>
  </Members>
</Type>
