<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c703222b353fbe8ff5c63fed1cd19f543de8517" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75148092" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3cf8e-101">非同期操作の有効期間を追跡します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-101">Tracks the lifetime of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3cf8e-102">[イベントベースの非同期パターンの概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)に従ってクラスを実装する場合、クラスのインスタンスで呼び出された各非同期操作の有効期間を追跡することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="3cf8e-103"><xref:System.ComponentModel.AsyncOperation> クラスは、非同期タスクの進行状況を追跡および報告する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="3cf8e-104">次の一覧は、<xref:System.ComponentModel.AsyncOperation> オブジェクトを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="3cf8e-105">進行状況と中間結果をクライアントに報告するには、非同期ワーカーコードから <xref:System.ComponentModel.AsyncOperation.Post%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="3cf8e-106">非同期タスクが完了したことを示す場合、または保留中の非同期タスクをキャンセルする場合は、<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="3cf8e-107">クラスは、各タスクの開始時に <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> を呼び出すことによって、各非同期タスクの <xref:System.ComponentModel.AsyncOperation> オブジェクトを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="3cf8e-108">クライアントが個別の非同期タスクを区別できるようにするために、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> は、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> プロパティになる、クライアントが提供する一意のトークンのパラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="3cf8e-109">これは、クライアントコードが、進行状況イベントまたは完了イベントを発生させている特定の非同期タスクを識別するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3cf8e-110">次のコード例は、<xref:System.ComponentModel.AsyncOperation> オブジェクトを使用して、非同期操作の有効期間を追跡する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="3cf8e-111">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="3cf8e-112">完全なコードリストについては、「[方法: イベントベースの非同期パターンをサポートするコンポーネントを実装](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="3cf8e-113">クライアントフォームの完全なコードリストについては、「[方法: イベントベースの非同期パターンのクライアントを実装](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="3cf8e-114">実装では、<see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> と <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> の呼び出しが非同期であることを確認する必要があるため、クラスライブラリプロバイダーは、同期されている特定のアプリケーションモデルで非同期動作を想定している場合に、スタックオーバーフローの可能性を考慮する必要がありません。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span></span>  
  
<span data-ttu-id="3cf8e-115">非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="3cf8e-116">マネージド スレッド処理のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="3cf8e-116">Managed Threading Best Practices</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="3cf8e-117">方法: イベントベースの非同期パターンをサポートするコンポーネントを実装する</span><span class="sxs-lookup"><span data-stu-id="3cf8e-117">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3cf8e-118">非同期操作の終了処理を行います。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-118">Finalizes the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3cf8e-119">非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-119">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3cf8e-120"><xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> メソッドを呼び出して、非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-120">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="3cf8e-121">特定のタスクに対してこのメソッドが呼び出された後、対応する <xref:System.ComponentModel.AsyncOperation> を呼び出すと、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-121">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3cf8e-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> は、このタスクに対して既に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="3cf8e-123">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-123">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="3cf8e-124"><paramref name="d" /> パラメーターに格納されているデリゲートの引数。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-124">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="3cf8e-125">アプリケーション モデルに適したスレッドまたはコンテキストでデリゲートを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-125">Invokes a delegate on the thread or context appropriate for the application model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3cf8e-126"><xref:System.ComponentModel.AsyncOperation.Post%2A> メソッドは、非同期操作の有効期間を終了せずに、`arg` パラメーターによって指定されたデリゲートを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-126">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="3cf8e-127">非同期操作の有効期間が <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>の呼び出しによって終了されていないときに、必要に応じて <xref:System.ComponentModel.AsyncOperation.Post%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-127">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="3cf8e-128">メソッドを使用して、進行状況または中間結果をクライアントに返すことができます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-128">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="3cf8e-129">`d` パラメーターは、非同期タスクの状態に関する更新をポストするときに呼び出されるデリゲートをラップします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-129">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="3cf8e-130"><xref:System.ComponentModel.AsyncOperation> オブジェクトは、アプリケーションモデルに適したスレッドまたはコンテキストでデリゲートが呼び出されるようにします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-130">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="3cf8e-131">メソッドでは、必要に応じて、ステータスの変更、進行状況の更新、または新しく利用可能な増分結果をクライアントに通知するイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-131">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="3cf8e-132">`arg` パラメーターは、`d` パラメーターによってラップされたデリゲートに状態を渡すために使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-132">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="3cf8e-133"><xref:System.ComponentModel.AsyncOperation>への参照、または <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> オブジェクトである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-133">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="3cf8e-134"><xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> から独自のクラスを作成して、追加の状態ストレージを提供することが望ましい場合があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-134">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3cf8e-135">次のコード例は、<xref:System.ComponentModel.AsyncOperation.Post%2A> メソッドを使用して、非同期操作の進行状況と増分結果をレポートする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-135">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="3cf8e-136">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3cf8e-137"><see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> メソッドは、このタスクに対して既に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-137">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3cf8e-138"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-138"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3cf8e-139">継承によって <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを非同期にする必要があるため、クラスライブラリプロバイダーは、非同期性を想定しているものの、特定のアプリケーションモデルが同期されている可能性がある場合に、スタックオーバーフローが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-139">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="3cf8e-140">コンソール アプリケーションは <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しの実行を同期しません。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-140">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span></span> <span data-ttu-id="3cf8e-141">これが原因で、<see langword="ProgressChanged" /> イベントが正しくない順序で発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-141">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span></span> <span data-ttu-id="3cf8e-142"><see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを順次実行するには、<see cref="T:System.Threading.SynchronizationContext" /> クラスを実装およびインストールします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-142">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="3cf8e-143">非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-143">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="3cf8e-144">マネージド スレッド処理のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="3cf8e-144">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="3cf8e-145">方法: イベントベースの非同期パターンをサポートするコンポーネントを実装する</span><span class="sxs-lookup"><span data-stu-id="3cf8e-145">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="3cf8e-146">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-146">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="3cf8e-147"><paramref name="d" /> パラメーターに格納されているデリゲートの引数。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-147">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="3cf8e-148">非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-148">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3cf8e-149"><xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> メソッドを呼び出して、非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-149">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="3cf8e-150">特定のタスクに対してこのメソッドが呼び出された後、対応する <xref:System.ComponentModel.AsyncOperation> オブジェクトを呼び出すと、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-150">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="3cf8e-151">`d` パラメーターは、タスクの有効期間が完了、取り消し、またはタスクの失敗によって終了したときに、クラスが呼び出すデリゲートをラップします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-151">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="3cf8e-152"><xref:System.ComponentModel.AsyncOperation> オブジェクトは、アプリケーションモデルに適したスレッドまたはコンテキストでデリゲートが呼び出されるようにします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-152">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="3cf8e-153">デリゲートは、必要に応じて、非同期タスクの有効期間が終了したことをクライアントに通知するイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-153">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="3cf8e-154">`arg` パラメーターは、完了デリゲート `d`に状態情報を渡すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-154">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="3cf8e-155">パラメーター値として <xref:System.ComponentModel.AsyncOperation> オブジェクトまたは <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> オブジェクトを使用できます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-155">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="3cf8e-156">また、追加の状態ストレージを提供する場合は、<xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> クラスから派生したクラスのインスタンスを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-156">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3cf8e-157">次のコード例は、<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> メソッドを使用して、非同期操作の有効期間を終了する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-157">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="3cf8e-158">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-158">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3cf8e-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> は、このタスクに対して既に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3cf8e-160"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-160"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3cf8e-161">継承によって <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを非同期にする必要があるため、クラスライブラリプロバイダーは、非同期性を想定しているものの、特定のアプリケーションモデルが同期されている可能性がある場合に、スタックオーバーフローが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-161">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span> <span data-ttu-id="3cf8e-162">メソッドは、"有効期間の終了" 呼び出しとして解釈される必要があります。これは、実装がアプリケーションモデルに適したものを実行する必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-162">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span></span> <span data-ttu-id="3cf8e-163">たとえば、ASP.NET は未処理の非同期操作の数を減らします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-163">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span></span> <span data-ttu-id="3cf8e-164">また、これにより、操作が完了した後、それ以降の呼び出しが失敗するように、操作を状態にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-164">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span></span>  
  
<span data-ttu-id="3cf8e-165">非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-165">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="3cf8e-166">マネージド スレッド処理のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="3cf8e-166">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="3cf8e-167">方法: イベントベースの非同期パターンをサポートするコンポーネントを実装する</span><span class="sxs-lookup"><span data-stu-id="3cf8e-167">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3cf8e-168">コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-168">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></summary>
        <value><span data-ttu-id="3cf8e-169">コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-169">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3cf8e-170">非同期操作を一意に識別するために使用するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-170">Gets or sets an object used to uniquely identify an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="3cf8e-171">非同期メソッド呼び出しに渡される状態オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-171">The state object passed to the asynchronous method invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3cf8e-172">クラスが複数の非同期メソッドをサポートしている場合、または1つの非同期メソッドの複数の呼び出しがサポートされている場合、クライアントは、イベントを発生させている非同期タスクを特定する方法を必要とします。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-172">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="3cf8e-173">`MethodNameAsync` メソッドは、タスク ID として機能する <xref:System.Object> 型のパラメーターを受け取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-173">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="3cf8e-174">このタスク ID は <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>メソッドを呼び出すときに使用します。これにより、クライアントのタスク ID が非同期操作の特定の呼び出しに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-174">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="3cf8e-175">このタスク ID は、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> プロパティを使用して実装で使用できます。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-175">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3cf8e-176">クライアントコードでは、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> プロパティに一意の値を指定するように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-176">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="3cf8e-177">タスク Id が一意でないと、実装によって進行状況やその他のイベントが誤って報告される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-177">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="3cf8e-178">コードは、一意でないタスク ID を確認し、検出された場合は <xref:System.ArgumentException> を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-178">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3cf8e-179">次のコード例は、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> を使用して非同期操作の有効期間を追跡する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-179">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="3cf8e-180">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="3cf8e-180">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="3cf8e-181">マネージド スレッド処理のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="3cf8e-181">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3"><span data-ttu-id="3cf8e-182">イベントベースの非同期パターンの概要</span><span class="sxs-lookup"><span data-stu-id="3cf8e-182">Event-based Asynchronous Pattern Overview</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
