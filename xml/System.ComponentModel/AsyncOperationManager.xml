<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d7bf55d5020e8f159133a399d3824bdac742e28" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82336680" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>非同期メソッドの呼び出しをサポートするクラスのコンカレンシーの管理を提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [イベントベースの非同期パターンの概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)に従って、クラスが非同期動作を提供する必要がある場合は、多数の同時実行管理の問題が発生します。 これらのうちの1つは、アプリケーションモデルに適したスレッドまたはコンテキスト (Windows フォームアプリケーション、[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] アプリケーション、コンソールアプリケーションなど) でイベントハンドラーが呼び出されるようにするための要件です。 <xref:System.ComponentModel.AsyncOperationManager> は、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]によってサポートされるすべてのアプリケーションモデルで正常に動作するクラスを作成するための便利な方法を提供します。  
  
 <xref:System.ComponentModel.AsyncOperationManager> クラスには、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>という1つのメソッドがあります。これは、特定の非同期タスクの継続時間を追跡するために使用できる <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を返します。 タスクの <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を使用すると、タスクの完了時にクライアントに警告することができます。 また、操作を終了せずに、進行状況の更新と増分の結果を投稿するためにも使用できます。  
  
 非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ComponentModel.AsyncOperationManager> クラスを使用して、任意のアプリケーションモデルの非同期操作をサポートするクラスを作成する方法を示しています。 数値をテストするクラスを実装して、素数かどうかを判断する方法を示します。 この計算には時間がかかることがあるため、別のスレッドで実行されます。 進行状況レポート、インクリメンタル結果、および完了通知は <xref:System.ComponentModel.AsyncOperation> クラスによって処理されます。これにより、クライアントのイベントハンドラーが適切なスレッドまたはコンテキストで呼び出されます。  
  
 完全なコードリストについては、「[方法: イベントベースの非同期パターンをサポートするコンポーネントを実装](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)する」を参照してください。 クライアントフォームの完全なコードリストについては、「[方法: イベントベースの非同期パターンのクライアントを実装](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)する」を参照してください。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">イベントベースの非同期パターンの実装</related>
    <related type="Article" href="~/docs/standard/threading/managed-threading-best-practices.md">マネージド スレッド処理のベスト プラクティス</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">クライアント状態の一部 (タスク ID など) を特定の非同期操作に関連付けるために使用されるオブジェクト。</param>
        <summary>特定の非同期操作の存続期間を追跡するために使用する <see cref="T:System.ComponentModel.AsyncOperation" /> を返します。</summary>
        <returns>非同期メソッド呼び出しの存続期間を追跡するために使用できる <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> メソッドは、特定の非同期操作の期間を追跡し、操作の完了時にアプリケーションモデルに通知するために使用できる <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を返します。 また、操作を終了せずに、進行状況の更新と増分の結果を投稿するためにも使用できます。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> は、これらの呼び出しをアプリケーションモデルの適切なスレッドまたはコンテキストに正しくマーシャリングします。  
  
 イベントベースの非同期パターンをサポートするクラスを実装する場合は、 *MethodName*`Async` メソッドが呼び出されるたびに、クラスで <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> を呼び出す必要があります。 メソッドへの呼び出しを行うクライアントアプリケーションは、`userSuppliedState` パラメーターを使用して各呼び出しを一意に識別できるため、非同期操作の実行中に発生したイベントを区別できます。  
  
> [!CAUTION]
>  クライアントコードでは、`userSuppliedState` パラメーターに一意の値を指定する必要があります。 タスク Id が一意でないと、実装によって進行状況やその他のイベントが誤って報告される可能性があります。 コードで一意でないタスク ID を確認し、検出された場合は <xref:System.ArgumentException?displayProperty=nameWithType> をスローする必要があります。  
  
 コードでは、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> によって返されたすべての <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を追跡し、対応する基になる非同期操作でオブジェクトを使用して更新をポストし、操作を終了する必要があります。 この追跡は、デリゲート間のパラメーターとして <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を渡すだけで簡単に行うことができます。 より高度な設計では、クラスは <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> オブジェクトのコレクションを保持し、タスクが開始されたときにオブジェクトを追加したり、タスクが完了またはキャンセルされたときにオブジェクトを削除したりできます。 この方法では、一意の `userSuppliedState` パラメーター値を確認できます。は、複数の同時呼び出しをサポートするクラスを操作するときに使用する必要があるメソッドです。  
  
 非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> メソッドを使用して、非同期操作の期間を追跡するための <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を作成する方法を示しています。 このコード例は、<xref:System.ComponentModel.AsyncOperationManager> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">イベントベースの非同期パターンの実装</related>
        <related type="Article" href="~/docs/standard/threading/managed-threading-best-practices.md">マネージド スレッド処理のベスト プラクティス</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;netcore-1.0;netcore-1.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作の同期コンテキストを取得または設定します。</summary>
        <value>非同期操作の同期コンテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の実装は、フリースレッドの実装です。  
  
 スレッドは、完了時にフリースレッドファクトリを解放するために、<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> プロパティを `null` に設定する必要があります。そうしないと、ファクトリは破棄されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
