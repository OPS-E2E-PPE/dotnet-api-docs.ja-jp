<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="005d8781580febfe115654e6ec8cb3412effcf60" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76950198" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="14c08-101">非同期メソッドの呼び出しをサポートするクラスのコンカレンシーの管理を提供します。</span><span class="sxs-lookup"><span data-stu-id="14c08-101">Provides concurrency management for classes that support asynchronous method calls.</span></span> <span data-ttu-id="14c08-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="14c08-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c08-103">[イベントベースの非同期パターンの概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)に従って、クラスが非同期動作を提供する必要がある場合は、多数の同時実行管理の問題が発生します。</span><span class="sxs-lookup"><span data-stu-id="14c08-103">If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues.</span></span> <span data-ttu-id="14c08-104">これらのうちの1つは、アプリケーションモデルに適したスレッドまたはコンテキスト (Windows フォームアプリケーション、[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] アプリケーション、コンソールアプリケーションなど) でイベントハンドラーが呼び出されるようにするための要件です。</span><span class="sxs-lookup"><span data-stu-id="14c08-104">Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on).</span></span> <span data-ttu-id="14c08-105"><xref:System.ComponentModel.AsyncOperationManager> は、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]によってサポートされるすべてのアプリケーションモデルで正常に動作するクラスを作成するための便利な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="14c08-105">The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="14c08-106"><xref:System.ComponentModel.AsyncOperationManager> クラスには、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>という1つのメソッドがあります。これは、特定の非同期タスクの継続時間を追跡するために使用できる <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="14c08-106">The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that can be used to track the duration of a particular asynchronous task.</span></span> <span data-ttu-id="14c08-107">タスクの <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を使用すると、タスクの完了時にクライアントに警告することができます。</span><span class="sxs-lookup"><span data-stu-id="14c08-107">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for a task can be used to alert clients when a task completes.</span></span> <span data-ttu-id="14c08-108">また、操作を終了せずに、進行状況の更新と増分の結果を投稿するためにも使用できます。</span><span class="sxs-lookup"><span data-stu-id="14c08-108">It can also be used to post progress updates and incremental results without terminating the operation.</span></span>  
  
 <span data-ttu-id="14c08-109">非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14c08-109">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14c08-110">次のコード例は、<xref:System.ComponentModel.AsyncOperationManager> クラスを使用して、任意のアプリケーションモデルの非同期操作をサポートするクラスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="14c08-110">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model.</span></span> <span data-ttu-id="14c08-111">数値をテストするクラスを実装して、素数かどうかを判断する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="14c08-111">It shows how to implement a class that tests a number to determine whether it is prime.</span></span> <span data-ttu-id="14c08-112">この計算には時間がかかることがあるため、別のスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="14c08-112">This calculation can be time consuming, so it is done on a separate thread.</span></span> <span data-ttu-id="14c08-113">進行状況レポート、インクリメンタル結果、および完了通知は <xref:System.ComponentModel.AsyncOperation> クラスによって処理されます。これにより、クライアントのイベントハンドラーが適切なスレッドまたはコンテキストで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="14c08-113">Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.</span></span>  
  
 <span data-ttu-id="14c08-114">完全なコードリストについては、「[方法: イベントベースの非同期パターンをサポートするコンポーネントを実装](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14c08-114">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="14c08-115">クライアントフォームの完全なコードリストについては、「[方法: イベントベースの非同期パターンのクライアントを実装](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14c08-115">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="14c08-116">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="14c08-116">Implementing the Event-based Asynchronous Pattern</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="14c08-117">マネージド スレッド処理のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="14c08-117">Managed Threading Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState"><span data-ttu-id="14c08-118">クライアント状態の一部 (タスク ID など) を特定の非同期操作に関連付けるために使用されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c08-118">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="14c08-119">特定の非同期操作の存続期間を追跡するために使用する <see cref="T:System.ComponentModel.AsyncOperation" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="14c08-119">Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c08-120">非同期メソッド呼び出しの存続期間を追跡するために使用できる <see cref="T:System.ComponentModel.AsyncOperation" />。</span><span class="sxs-lookup"><span data-stu-id="14c08-120">An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c08-121"><xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> メソッドは、特定の非同期操作の期間を追跡し、操作の完了時にアプリケーションモデルに通知するために使用できる <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="14c08-121">The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</span></span> <span data-ttu-id="14c08-122">また、操作を終了せずに、進行状況の更新と増分の結果を投稿するためにも使用できます。</span><span class="sxs-lookup"><span data-stu-id="14c08-122">You can also use it to post progress updates and incremental results without terminating the operation.</span></span> <span data-ttu-id="14c08-123"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> は、これらの呼び出しをアプリケーションモデルの適切なスレッドまたはコンテキストに正しくマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="14c08-123">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> will correctly marshal these calls to the appropriate thread or context for the application model.</span></span>  
  
 <span data-ttu-id="14c08-124">イベントベースの非同期パターンをサポートするクラスを実装する場合は、 *MethodName*`Async` メソッドが呼び出されるたびに、クラスで <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="14c08-124">If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called.</span></span> <span data-ttu-id="14c08-125">メソッドへの呼び出しを行うクライアントアプリケーションは、`userSuppliedState` パラメーターを使用して各呼び出しを一意に識別できるため、非同期操作の実行中に発生したイベントを区別できます。</span><span class="sxs-lookup"><span data-stu-id="14c08-125">The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="14c08-126">クライアントコードでは、`userSuppliedState` パラメーターに一意の値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="14c08-126">Client code must provide a unique value for the `userSuppliedState` parameter.</span></span> <span data-ttu-id="14c08-127">タスク Id が一意でないと、実装によって進行状況やその他のイベントが誤って報告される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="14c08-127">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="14c08-128">コードで一意でないタスク ID を確認し、検出された場合は <xref:System.ArgumentException?displayProperty=nameWithType> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="14c08-128">Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=nameWithType> if one is detected.</span></span>  
  
 <span data-ttu-id="14c08-129">コードでは、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> によって返されたすべての <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を追跡し、対応する基になる非同期操作でオブジェクトを使用して更新をポストし、操作を終了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="14c08-129">Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</span></span> <span data-ttu-id="14c08-130">この追跡は、デリゲート間のパラメーターとして <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を渡すだけで簡単に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="14c08-130">This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> as a parameter among delegates.</span></span> <span data-ttu-id="14c08-131">より高度な設計では、クラスは <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> オブジェクトのコレクションを保持し、タスクが開始されたときにオブジェクトを追加したり、タスクが完了またはキャンセルされたときにオブジェクトを削除したりできます。</span><span class="sxs-lookup"><span data-stu-id="14c08-131">In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</span></span> <span data-ttu-id="14c08-132">この方法では、一意の `userSuppliedState` パラメーター値を確認できます。は、複数の同時呼び出しをサポートするクラスを操作するときに使用する必要があるメソッドです。</span><span class="sxs-lookup"><span data-stu-id="14c08-132">This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</span></span>  
  
 <span data-ttu-id="14c08-133">非同期クラスの実装の詳細については、「[イベントベースの非同期パターンの実装](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14c08-133">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14c08-134">次のコード例は、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> メソッドを使用して、非同期操作の期間を追跡するための <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> を作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="14c08-134">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for tracking the duration of asynchronous operations.</span></span> <span data-ttu-id="14c08-135">このコード例は、<xref:System.ComponentModel.AsyncOperationManager> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14c08-135">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="14c08-136">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="14c08-136">Implementing the Event-based Asynchronous Pattern</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="14c08-137">マネージド スレッド処理のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="14c08-137">Managed Threading Best Practices</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="14c08-138">非同期操作の同期コンテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="14c08-138">Gets or sets the synchronization context for the asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="14c08-139">非同期操作の同期コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="14c08-139">The synchronization context for the asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c08-140">既定の実装は、フリースレッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="14c08-140">The default implementation is the free-threaded implementation.</span></span>  
  
 <span data-ttu-id="14c08-141">スレッドは、完了時にフリースレッドファクトリを解放するために、<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> プロパティを `null` に設定する必要があります。そうしないと、ファクトリは破棄されません。</span><span class="sxs-lookup"><span data-stu-id="14c08-141">A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="14c08-142">同期コンテキストを設定します。</span><span class="sxs-lookup"><span data-stu-id="14c08-142">for setting the synchronization context.</span></span> <span data-ttu-id="14c08-143">要求の値: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="14c08-143">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="14c08-144">関連付けられた状態:</span><span class="sxs-lookup"><span data-stu-id="14c08-144">Associated state:</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>
