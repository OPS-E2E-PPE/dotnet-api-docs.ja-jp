<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ca6d9dd8ac34ca3eab8e85f3b85f3328adca6fd" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83916917" /></Metadata><TypeSignature Language="C#" Value="public class BackgroundWorker : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type BackgroundWorker = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Inherits Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : System::ComponentModel::Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type BackgroundWorker = class&#xA;    inherit Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a5e50-101">別個のスレッドに対する操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-101">Executes an operation on a separate thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-102"><xref:System.ComponentModel.BackgroundWorker> クラスを使用すると、個別の専用スレッドで操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-102">The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread.</span></span> <span data-ttu-id="a5e50-103">ダウンロードやデータベーストランザクションのような時間のかかる操作によって、ユーザーインターフェイス (UI) が実行中に応答を停止したように見える場合があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-103">Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</span></span> <span data-ttu-id="a5e50-104">応答性の高い UI が必要で、そのような操作に関連する長い遅延が発生する場合、<xref:System.ComponentModel.BackgroundWorker> クラスは便利なソリューションを提供します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-104">When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.</span></span>  
  
 <span data-ttu-id="a5e50-105">時間のかかる操作をバックグラウンドで実行するには、<xref:System.ComponentModel.BackgroundWorker> を作成し、操作の進行状況を報告するイベントをリッスンして、操作が完了したことを通知します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-105">To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished.</span></span> <span data-ttu-id="a5e50-106">プログラムを使用して <xref:System.ComponentModel.BackgroundWorker> を作成することも、**ツールボックス**の **[コンポーネント]** タブからフォームにドラッグすることもできます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-106">You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**.</span></span> <span data-ttu-id="a5e50-107">Windows フォームデザイナーに <xref:System.ComponentModel.BackgroundWorker> を作成すると、コンポーネントトレイに表示され、そのプロパティがプロパティウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-107">If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</span></span>  
  
 <span data-ttu-id="a5e50-108">バックグラウンド操作を設定するには、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントのイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-108">To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="a5e50-109">このイベントハンドラーで時間のかかる操作を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-109">Call your time-consuming operation in this event handler.</span></span> <span data-ttu-id="a5e50-110">操作を開始するには、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-110">To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span> <span data-ttu-id="a5e50-111">進行状況の更新の通知を受信するには、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-111">To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="a5e50-112">操作が完了したときに通知を受信するには、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-112">To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a5e50-113"><xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーでは、ユーザーインターフェイスオブジェクトを操作しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-113">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="a5e50-114">代わりに、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントと <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントを使用して、ユーザーインターフェイスと通信します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-114">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.</span></span>  
>   
>  <span data-ttu-id="a5e50-115"><xref:System.ComponentModel.BackgroundWorker> イベントは、<xref:System.AppDomain> の境界を越えてマーシャリングされません。</span><span class="sxs-lookup"><span data-stu-id="a5e50-115"><xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries.</span></span> <span data-ttu-id="a5e50-116">複数の <xref:System.AppDomain>でマルチスレッド操作を実行するには、<xref:System.ComponentModel.BackgroundWorker> コンポーネントを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-116">Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="a5e50-117">バックグラウンド操作にパラメーターが必要な場合は、パラメーターを指定して <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-117">If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter.</span></span> <span data-ttu-id="a5e50-118"><xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラー内では、<xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> プロパティからパラメーターを抽出できます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-118">Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a5e50-119"><xref:System.ComponentModel.BackgroundWorker> の詳細については、「[方法: バックグラウンドで操作を実行する](/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-119">For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-120">次のコード例は、時間のかかる操作を非同期に実行するための <xref:System.ComponentModel.BackgroundWorker> クラスの基本を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-120">The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="a5e50-121">次の図は、出力の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-121">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="a5e50-122">![BackgroundWorker の簡単な例](~/add/media/backgroundworker-simple.png "BackgroundWorker の簡単な例")</span><span class="sxs-lookup"><span data-stu-id="a5e50-122">![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png "BackgroundWorker simple example")</span></span>  
  
 <span data-ttu-id="a5e50-123">このコードを試すには、Windows フォームアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-123">To try this code, create a Windows Forms application.</span></span> <span data-ttu-id="a5e50-124">`resultLabel` という名前の <xref:System.Windows.Forms.Label> コントロールを追加し、`startAsyncButton` と `cancelAsyncButton`という2つの <xref:System.Windows.Forms.Button> コントロールを追加します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-124">Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`.</span></span> <span data-ttu-id="a5e50-125">両方のボタンの <xref:System.Windows.Forms.Control.Click> イベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-125">Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons.</span></span> <span data-ttu-id="a5e50-126">ツールボックスの **[コンポーネント]** タブで、`backgroundWorker1`という名前の <xref:System.ComponentModel.BackgroundWorker> コンポーネントを追加します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-126">From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`.</span></span> <span data-ttu-id="a5e50-127"><xref:System.ComponentModel.BackgroundWorker>の <xref:System.ComponentModel.BackgroundWorker.DoWork>、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>、および <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-127">Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="a5e50-128">フォームのコードで、既存のコードを次のコードに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-128">In the code for the form, replace the existing code with the following code.</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 <span data-ttu-id="a5e50-129">次のコード例は、<xref:System.ComponentModel.BackgroundWorker> クラスを使用して、時間のかかる操作を非同期に実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-129">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="a5e50-130">次の図は、出力の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-130">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="a5e50-131">![BackgroundWorker フィボナッチの例](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker フィボナッチの例")</span><span class="sxs-lookup"><span data-stu-id="a5e50-131">![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci example")</span></span>  
  
 <span data-ttu-id="a5e50-132">操作は、選択されたフィボナッチ数を計算し、計算の進行に応じて進行状況の更新を報告します。また、保留中の計算を取り消すことを許可します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-132">The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-133">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-133">How to: Run an Operation in the Background</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="a5e50-134">マネージド スレッド処理の実施</span><span class="sxs-lookup"><span data-stu-id="a5e50-134">Managed Threading Best Practices</span></span></related>
    <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-135">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-135">How to: Download a File in the Background</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BackgroundWorker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a5e50-136"><see cref="T:System.ComponentModel.BackgroundWorker" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-136">Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-137">このコンストラクターは、<xref:System.ComponentModel.BackgroundWorker>を初期化します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-137">This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-138">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-138">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-139">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-139">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="backgroundWorker.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a5e50-140">保留中のバックグラウンド操作のキャンセルを要求します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-140">Requests cancellation of a pending background operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-141"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> は、保留中のバックグラウンド操作を終了する要求を送信し、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-141"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="a5e50-142"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>を呼び出すと、ワーカーメソッドは実行を停止して終了することができます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-142">When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit.</span></span> <span data-ttu-id="a5e50-143">ワーカーコードは、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティを定期的にチェックして、`true`に設定されているかどうかを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-143">The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a5e50-144">キャンセル要求の実行中に、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーのコードが作業を終了する可能性があることに注意してください。ポーリングループが <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> `true`に設定されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-144">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="a5e50-145">この場合、キャンセル要求が行われた場合でも、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーの <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグは `true`に設定されません。</span><span class="sxs-lookup"><span data-stu-id="a5e50-145">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="a5e50-146">この状況は*競合状態*と呼ばれ、マルチスレッドプログラミングの一般的な問題です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-146">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="a5e50-147">マルチスレッドのデザインの問題の詳細については、「[マネージスレッド処理のベストプラクティス](/dotnet/standard/threading/managed-threading-best-practices)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-147">For more information about multithreading design issues, see [Managed Threading Best Practices](/dotnet/standard/threading/managed-threading-best-practices).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-148">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> メソッドを使用して、非同期 ("バックグラウンド") 操作をキャンセルする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-148">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous ("background") operation.</span></span> <span data-ttu-id="a5e50-149">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-149">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5e50-150"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-150"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is <see langword="false" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-151">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-151">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-152">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-152">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationPending As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancellationPending { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationPending : bool" Usage="System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-153">アプリケーションがバックグラウンド操作のキャンセルを要求したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-153">Gets a value indicating whether the application has requested cancellation of a background operation.</span></span></summary>
        <value><span data-ttu-id="a5e50-154">アプリケーションがバックグラウンド操作のキャンセルを要求した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5e50-154"><see langword="true" /> if the application has requested cancellation of a background operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a5e50-155">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-155">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-156"><xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> が `true`場合、<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> メソッドが <xref:System.ComponentModel.BackgroundWorker>で呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-156">If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 <span data-ttu-id="a5e50-157">このプロパティは、ワーカースレッドによって使用されることを意図しています。これは、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> を定期的にチェックし、`true`に設定されている場合にバックグラウンド操作を中止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-157">This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-158">次のコード例では、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティを使用して、取り消し状態に関する <xref:System.ComponentModel.BackgroundWorker> を照会する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-158">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state.</span></span> <span data-ttu-id="a5e50-159">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-159">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-160">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-160">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-161">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-161">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="backgroundWorker.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="backgroundWorker.Dispose disposing" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="backgroundWorker.Dispose disposing" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoWork As DoWorkEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::DoWorkEventHandler ^ DoWork;" />
      <MemberSignature Language="F#" Value="member this.DoWork : System.ComponentModel.DoWorkEventHandler " Usage="member this.DoWork : System.ComponentModel.DoWorkEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-162"><see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> が呼び出されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-162">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-163">このイベントは、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドを呼び出すと発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-163">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method.</span></span> <span data-ttu-id="a5e50-164">これは、時間のかかる可能性のある作業を実行する操作を開始する場所です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-164">This is where you start the operation that performs the potentially time-consuming work.</span></span>  
  
 <span data-ttu-id="a5e50-165"><xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーのコードは、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティ値を定期的にチェックし、`true`されている場合は操作を中止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-165">Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`.</span></span> <span data-ttu-id="a5e50-166">この場合、<xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> フラグを `true`に設定すると、<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> イベントハンドラーの <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-166">When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a5e50-167">キャンセル要求の実行中に、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーのコードが作業を終了する可能性があることに注意してください。ポーリングループが <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> `true`に設定されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-167">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="a5e50-168">この場合、キャンセル要求が行われた場合でも、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーの <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグは `true`に設定されません。</span><span class="sxs-lookup"><span data-stu-id="a5e50-168">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="a5e50-169">この状況は*競合状態*と呼ばれ、マルチスレッドプログラミングの一般的な問題です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-169">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="a5e50-170">マルチスレッドのデザインの問題の詳細については、「[マネージスレッド処理のベストプラクティス](/dotnet/standard/threading/managed-threading-best-practices)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-170">For more information about multithreading design issues, see [Managed Threading Best Practices](/dotnet/standard/threading/managed-threading-best-practices).</span></span>  
  
 <span data-ttu-id="a5e50-171">操作によって結果が生成された場合は、<xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> プロパティに結果を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-171">If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a5e50-172">これは、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> プロパティの <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーで使用できます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-172">This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a5e50-173">操作によって処理されない例外が発生した場合、<xref:System.ComponentModel.BackgroundWorker> は例外をキャッチし、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーに渡します。このハンドラーは <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>の <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティとして公開されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-173">If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a5e50-174">Visual Studio デバッガーで実行している場合、デバッガーは、ハンドルされない例外が発生した <xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーのポイントで中断します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-174">If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised.</span></span> <span data-ttu-id="a5e50-175">複数の <xref:System.ComponentModel.BackgroundWorker>がある場合は、それを直接参照することはできません。これにより、<xref:System.ComponentModel.BackgroundWorker.DoWork> のイベントハンドラーが <xref:System.ComponentModel.BackgroundWorker>の特定のインスタンスに対して行われるためです。</span><span class="sxs-lookup"><span data-stu-id="a5e50-175">If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="a5e50-176">代わりに、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーで `sender` パラメーターをキャストすることによって、<xref:System.ComponentModel.BackgroundWorker> にアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-176">Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span>  
  
 <span data-ttu-id="a5e50-177"><xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーでは、ユーザーインターフェイスオブジェクトを操作しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-177">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="a5e50-178">代わりに、<xref:System.ComponentModel.BackgroundWorker> イベントを使用してユーザーインターフェイスと通信します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-178">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.</span></span>  
  
 <span data-ttu-id="a5e50-179">イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](/dotnet/standard/events/)します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-179">For more information about how to handle events, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-180">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントを使用して非同期操作を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-180">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation.</span></span> <span data-ttu-id="a5e50-181">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-181">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-182">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-182">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="a5e50-183">マネージド スレッド処理の実施</span><span class="sxs-lookup"><span data-stu-id="a5e50-183">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-184">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-184">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-185"><see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期操作を実行中かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-185">Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="a5e50-186"><see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期操作を実行中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5e50-186"><see langword="true" />, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-187"><xref:System.ComponentModel.BackgroundWorker> は、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>を呼び出すと非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-187">The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-188">次のコード例では、<xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> プロパティを使用して <xref:System.ComponentModel.BackgroundWorker> 操作の完了を待機する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-188">The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation.</span></span> <span data-ttu-id="a5e50-189">このコード例は、「[方法: バックグラウンドでファイルをダウンロード](/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background)する」で説明されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-189">This code example is part of a larger example described in [How to: Download a File in the Background](/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-190">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-190">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-191">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-191">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoWork (e As DoWorkEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoWork(System::ComponentModel::DoWorkEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit&#xA;override this.OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit" Usage="backgroundWorker.OnDoWork e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a5e50-192">イベント データを格納している <see cref="T:System.EventArgs" /> 。</span><span class="sxs-lookup"><span data-stu-id="a5e50-192">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a5e50-193"><see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-193">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProgressChanged (e As ProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProgressChanged(System::ComponentModel::ProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit&#xA;override this.OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit" Usage="backgroundWorker.OnProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a5e50-194">イベント データを格納している <see cref="T:System.EventArgs" /> 。</span><span class="sxs-lookup"><span data-stu-id="a5e50-194">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a5e50-195"><see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-195">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-196">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-196">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a5e50-197">詳細については、次を参照してください。[処理とイベントの発生](/dotnet/standard/events/)します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-197">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="a5e50-198"><xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-198">The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a5e50-199">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a5e50-199">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-200">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> メソッドを使用して、非同期操作の進行状況を報告する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-200">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation.</span></span> <span data-ttu-id="a5e50-201">このコード例は、<xref:System.ComponentModel.AsyncOperationManager> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-201">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a5e50-202">派生クラスで <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-202">When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-203">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-203">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-204">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-204">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRunWorkerCompleted (e As RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRunWorkerCompleted(System::ComponentModel::RunWorkerCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit&#xA;override this.OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit" Usage="backgroundWorker.OnRunWorkerCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a5e50-205">イベント データを格納している <see cref="T:System.EventArgs" /> 。</span><span class="sxs-lookup"><span data-stu-id="a5e50-205">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a5e50-206"><see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-206">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-207">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-207">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a5e50-208">詳細については、次を参照してください。[処理とイベントの発生](/dotnet/standard/events/)します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-208">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="a5e50-209"><xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-209">The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a5e50-210">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a5e50-210">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a5e50-211">派生クラスで <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-211">When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-212">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-212">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-213">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-213">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProgressChanged As ProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ProgressChangedEventHandler ^ ProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " Usage="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-214"><see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> が呼び出されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-214">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-215">このイベントは、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを呼び出すと発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-215">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.</span></span>  
  
 <span data-ttu-id="a5e50-216">イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](/dotnet/standard/events/)します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-216">For more information about how to handle events, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-217">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントを使用して、非同期操作の進行状況をユーザーに報告する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-217">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="a5e50-218">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-218">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-219">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-219">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-220">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-220">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a5e50-221"><see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-221">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int -&gt; unit" Usage="backgroundWorker.ReportProgress percentProgress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress"><span data-ttu-id="a5e50-222">完了しているバックグラウンド操作の比率 (0 ～ 100%)。</span><span class="sxs-lookup"><span data-stu-id="a5e50-222">The percentage, from 0 to 100, of the background operation that is complete.</span></span></param>
        <summary><span data-ttu-id="a5e50-223"><see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-223">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-224">バックグラウンド操作で進行状況を報告する必要がある場合は、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを呼び出して、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-224">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="a5e50-225"><xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> プロパティ値は `true`である必要があります。または、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> が <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="a5e50-225">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a5e50-226">バックグラウンド操作の進行状況を、完了したタスクの合計に対する割合として測定する、適切な方法を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-226">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
 <span data-ttu-id="a5e50-227"><xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドへの呼び出しは非同期であり、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-227">The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately.</span></span> <span data-ttu-id="a5e50-228"><xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントハンドラーは、<xref:System.ComponentModel.BackgroundWorker>を作成したスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-228">The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-229">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを使用して、非同期操作の進行状況をユーザーに報告する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-229">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="a5e50-230">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-230">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5e50-231"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティは <see langword="false" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-231">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-232">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-232">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-233">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-233">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int * obj -&gt; unit" Usage="backgroundWorker.ReportProgress (percentProgress, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress"><span data-ttu-id="a5e50-234">完了しているバックグラウンド操作の比率 (0 ～ 100%)。</span><span class="sxs-lookup"><span data-stu-id="a5e50-234">The percentage, from 0 to 100, of the background operation that is complete.</span></span></param>
        <param name="userState"><span data-ttu-id="a5e50-235">ユーザー状態を示す一意の <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a5e50-235">A unique <see cref="T:System.Object" /> indicating the user state.</span></span> <span data-ttu-id="a5e50-236"><see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> の <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState" /> プロパティとして返されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-236">Returned as the <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState" /> property of the <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</span></span></param>
        <summary><span data-ttu-id="a5e50-237"><see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-237">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-238">バックグラウンド操作で進行状況を報告する必要がある場合は、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを呼び出して、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-238">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="a5e50-239"><xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> プロパティ値は `true`である必要があります。または、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> によって <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-239">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a5e50-240">バックグラウンド操作の進行状況を、完了したタスクの合計に対する割合として測定する、適切な方法を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-240">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-241">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを使用して、非同期操作の進行状況をユーザーに報告する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-241">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="a5e50-242">このコード例は、<xref:System.Windows.Forms.ToolStripProgressBar> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-242">This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.</span></span>  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5e50-243"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティは <see langword="false" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-243">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-244">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-244">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-245">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-245">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a5e50-246">バックグラウンド操作の実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-246">Starts execution of a background operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync();" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : unit -&gt; unit" Usage="backgroundWorker.RunWorkerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a5e50-247">バックグラウンド操作の実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-247">Starts execution of a background operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-248"><xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドは、非同期的に実行される操作を開始する要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-248">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="a5e50-249">要求が処理されると、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントが発生し、バックグラウンド操作の実行が開始されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-249">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="a5e50-250">バックグラウンド操作が既に実行されている場合は、再度 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> を呼び出すと、<xref:System.InvalidOperationException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-250">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-251">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドを使用して非同期操作を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-251">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="a5e50-252">詳細については、「[方法: バックグラウンドでファイルをダウンロード](/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-252">It is part of a larger example described in [How to: Download a File in the Background](/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5e50-253"><see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-253"><see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span></span></exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-254">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-254">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="a5e50-255">マネージド スレッド処理の実施</span><span class="sxs-lookup"><span data-stu-id="a5e50-255">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-256">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-256">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync(System::Object ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : obj -&gt; unit" Usage="backgroundWorker.RunWorkerAsync argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument"><span data-ttu-id="a5e50-257"><see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベント ハンドラーで実行されるバックグラウンド操作で使用するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="a5e50-257">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span></span></param>
        <summary><span data-ttu-id="a5e50-258">バックグラウンド操作の実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-258">Starts execution of a background operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-259"><xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドは、非同期的に実行される操作を開始する要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-259">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="a5e50-260">要求が処理されると、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントが発生し、バックグラウンド操作の実行が開始されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-260">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="a5e50-261">操作にパラメーターが必要な場合は、それを `argument` パラメーターとして <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>に渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-261">If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
 <span data-ttu-id="a5e50-262">バックグラウンド操作が既に実行されている場合は、再度 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> を呼び出すと、<xref:System.InvalidOperationException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-262">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-263">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドを使用して非同期操作を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-263">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="a5e50-264">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-264">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5e50-265"><see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-265"><see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span></span></exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-266">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-266">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-267">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-267">How to: Download a File in the Background</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="a5e50-268">マネージド スレッド処理の実施</span><span class="sxs-lookup"><span data-stu-id="a5e50-268">Managed Threading Best Practices</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RunWorkerCompleted As RunWorkerCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::RunWorkerCompletedEventHandler ^ RunWorkerCompleted;" />
      <MemberSignature Language="F#" Value="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " Usage="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-269">バックグラウンド操作の完了時、キャンセル時、またはバックグラウンド操作によって例外が発生したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-269">Occurs when the background operation has completed, has been canceled, or has raised an exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-270">このイベントは、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーがを返したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-270">This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.</span></span>  
  
 <span data-ttu-id="a5e50-271">操作が正常に完了し、その結果が <xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーに割り当てられている場合は、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> プロパティを使用して結果にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-271">If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a5e50-272"><xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティは、操作によって例外がスローされたことを示します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-272">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates that an exception was thrown by the operation.</span></span>  
  
 <span data-ttu-id="a5e50-273"><xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> プロパティは、キャンセル要求がバックグラウンド操作によって処理されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-273">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates whether a cancellation request was processed by the background operation.</span></span> <span data-ttu-id="a5e50-274"><xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーのコードが <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> フラグをチェックし、<xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> フラグを `true`に設定することによってキャンセル要求を検出すると、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> の <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> フラグも `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-274">If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> also will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a5e50-275">キャンセル要求の実行中に、<xref:System.ComponentModel.BackgroundWorker.DoWork> イベントハンドラーのコードが作業を終了する可能性があることに注意してください。ポーリングループが <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> `true`に設定されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-275">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="a5e50-276">この場合、キャンセル要求が行われた場合でも、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーの <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグは `true`に設定されません。</span><span class="sxs-lookup"><span data-stu-id="a5e50-276">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="a5e50-277">この状況は*競合状態*と呼ばれ、マルチスレッドプログラミングの一般的な問題です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-277">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="a5e50-278">マルチスレッドのデザインの問題の詳細については、「[マネージスレッド処理のベストプラクティス](/dotnet/standard/threading/managed-threading-best-practices)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5e50-278">For more information about multithreading design issues, see [Managed Threading Best Practices](/dotnet/standard/threading/managed-threading-best-practices).</span></span>  
  
 <span data-ttu-id="a5e50-279"><xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントハンドラーは、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> プロパティにアクセスする前に、常に <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> と <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> プロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5e50-279">Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a5e50-280">例外が発生した場合、または操作が取り消された場合は、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> プロパティにアクセスすると例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-280">If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property raises an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5e50-281">次のコード例は、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントを使用して、非同期操作の結果を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a5e50-281">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation.</span></span> <span data-ttu-id="a5e50-282">このコード例は、<xref:System.ComponentModel.BackgroundWorker> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-282">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-283">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-283">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-284">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-284">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerReportsProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerReportsProgress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerReportsProgress : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-285"><see cref="T:System.ComponentModel.BackgroundWorker" /> が進行状況の更新を報告できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-285">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.</span></span></summary>
        <value><span data-ttu-id="a5e50-286"><see cref="T:System.ComponentModel.BackgroundWorker" /> が進捗状況の更新をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5e50-286"><see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise <see langword="false" />.</span></span> <span data-ttu-id="a5e50-287">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-287">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-288"><xref:System.ComponentModel.BackgroundWorker> で進行状況の更新をサポートする場合は、<xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> プロパティを `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-288">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates.</span></span> <span data-ttu-id="a5e50-289">このプロパティを `true`すると、ユーザーコードは <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを呼び出して、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-289">When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-290">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-290">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-291">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-291">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerSupportsCancellation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerSupportsCancellation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerSupportsCancellation : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5e50-292"><see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期のキャンセルをサポートしているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-292">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.</span></span></summary>
        <value><span data-ttu-id="a5e50-293"><see cref="T:System.ComponentModel.BackgroundWorker" /> がキャンセルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5e50-293"><see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise <see langword="false" />.</span></span> <span data-ttu-id="a5e50-294">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="a5e50-294">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5e50-295"><xref:System.ComponentModel.BackgroundWorker> でキャンセルがサポートされるようにする場合は、<xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> プロパティを `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="a5e50-295">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation.</span></span> <span data-ttu-id="a5e50-296">このプロパティが `true`場合は、<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> メソッドを呼び出してバックグラウンド操作を中断できます。</span><span class="sxs-lookup"><span data-stu-id="a5e50-296">When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-run-an-operation-in-the-background"><span data-ttu-id="a5e50-297">方法 : バックグラウンドで操作を実行する</span><span class="sxs-lookup"><span data-stu-id="a5e50-297">How to: Run an Operation in the Background</span></span></related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-download-a-file-in-the-background"><span data-ttu-id="a5e50-298">方法 : バックグラウンドでファイルをダウンロードする</span><span class="sxs-lookup"><span data-stu-id="a5e50-298">How to: Download a File in the Background</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
