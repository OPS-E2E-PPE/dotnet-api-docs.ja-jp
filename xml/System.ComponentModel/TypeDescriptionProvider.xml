<Type Name="TypeDescriptionProvider" FullName="System.ComponentModel.TypeDescriptionProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f65b36e8760e1d12ca52dee38b6dcc9b27ee4bb" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75145882" /></Metadata><TypeSignature Language="C#" Value="public abstract class TypeDescriptionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeDescriptionProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.TypeDescriptionProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeDescriptionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDescriptionProvider abstract" />
  <TypeSignature Language="F#" Value="type TypeDescriptionProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a8ee0-101"><see cref="T:System.ComponentModel.TypeDescriptor" /> に追加メタデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-101">Provides supplemental metadata to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-102"><xref:System.ComponentModel.TypeDescriptionProvider> クラスは、属性、プロパティ、イベントなどの特性を追加、変更、または非表示にすることによって、型またはオブジェクトに関連付けられている型情報を動的に拡張します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-102">The <xref:System.ComponentModel.TypeDescriptionProvider> class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events.</span></span> <span data-ttu-id="a8ee0-103">1つの <xref:System.ComponentModel.TypeDescriptor>にメタデータを提供する複数の型説明プロバイダークラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-103">There can be multiple type description provider classes that offer metadata to a single <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="a8ee0-104"><xref:System.ComponentModel.TypeDescriptor>に <xref:System.ComponentModel.TypeDescriptionProvider> を関連付けるには、次の2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-104">There are two ways to associate a <xref:System.ComponentModel.TypeDescriptionProvider> with a <xref:System.ComponentModel.TypeDescriptor>:</span></span>  
  
-   <span data-ttu-id="a8ee0-105">デザイン時に、ターゲットクラスに適切な <xref:System.ComponentModel.TypeDescriptionProviderAttribute> タグを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-105">At design time, when the target class can be assigned the appropriate <xref:System.ComponentModel.TypeDescriptionProviderAttribute> tag.</span></span>  
  
-   <span data-ttu-id="a8ee0-106">実行時に、<xref:System.ComponentModel.TypeDescriptor> クラスの <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> メソッドの1つを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-106">At run time, when one of the <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> methods of the <xref:System.ComponentModel.TypeDescriptor> class can be called.</span></span> <span data-ttu-id="a8ee0-107">これらのオーバーロードされたメソッドには、ターゲットオブジェクトまたはそのクラス型のいずれかが必要です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-107">These overloaded methods require either the target object or its class type.</span></span>  
  
 <span data-ttu-id="a8ee0-108"><xref:System.ComponentModel.TypeDescriptionProvider> クラスは、構築時に指定される同じ型の親オブジェクトに依存します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-108">The <xref:System.ComponentModel.TypeDescriptionProvider> class relies on a parent object of the same type, supplied during construction.</span></span> <span data-ttu-id="a8ee0-109">これにより、<xref:System.ComponentModel.CustomTypeDescriptor> から派生したクラスは、メソッドを選択的にオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-109">This allows classes that derive from <xref:System.ComponentModel.CustomTypeDescriptor> to selectively override methods.</span></span>  
  
 <span data-ttu-id="a8ee0-110"><xref:System.ComponentModel.TypeDescriptionProvider> のインスタンスは、要求に応じてのみ構築されるので、カスタム型情報がパフォーマンスに与える影響を最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-110">Instances of <xref:System.ComponentModel.TypeDescriptionProvider> are only built upon demand, minimizing the impact of custom type information on performance.</span></span>
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="a8ee0-111">派生型は <see langword="internal" /> または <see langword="private" />としてマークされている場合がありますが、型のインスタンスは <see cref="T:System.ComponentModel.TypeDescriptor" /> クラスを使用して作成できます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-111">Your derived type might be marked as <see langword="internal" /> or <see langword="private" />, but an instance of your type can be created with the <see cref="T:System.ComponentModel.TypeDescriptor" /> class.</span></span> <span data-ttu-id="a8ee0-112">呼び出し元が信頼されていることを前提として、安全ではないコードを記述しないでください。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-112">Do not write insecure code by assuming the caller is trusted.</span></span> <span data-ttu-id="a8ee0-113">代わりに、呼び出し元が部分信頼で型のインスタンスを作成する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-113">Assume instead that callers might create instances of your type in partial trust.</span></span></para></block>
    <altmember cref="Overload:System.ComponentModel.TypeDescriptor.AddProvider" />
    <altmember cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" />
    <altmember cref="T:System.ComponentModel.ICustomTypeDescriptor" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8ee0-114"><see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-114">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8ee0-115"><see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-115">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-116">このコンストラクターは、`null`されているパラメーター値を使用して、他の <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> コンストラクターを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-116">This constructor is equivalent to calling the other <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> constructor with a parameter value that is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.TypeDescriptionProvider parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parent As TypeDescriptionProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider(System::ComponentModel::TypeDescriptionProvider ^ parent);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.TypeDescriptionProvider : System.ComponentModel.TypeDescriptionProvider -&gt; System.ComponentModel.TypeDescriptionProvider" Usage="new System.ComponentModel.TypeDescriptionProvider parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="System.ComponentModel.TypeDescriptionProvider" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="a8ee0-117">親の型説明のプロバイダー。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-117">The parent type description provider.</span></span></param>
        <summary><span data-ttu-id="a8ee0-118">親の型説明のプロバイダーを使用して、<see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-118">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class using a parent type description provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-119">`parent` パラメーターが `null`場合、すべての <xref:System.ComponentModel.TypeDescriptionProvider> メソッドは既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-119">If the `parent` parameter is `null`, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will return default values.</span></span> <span data-ttu-id="a8ee0-120">それ以外の場合は、すべての <xref:System.ComponentModel.TypeDescriptionProvider> メソッドが `parent`のメソッドに委任されます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-120">Otherwise, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will delegate to the methods of `parent`.</span></span>  
  
 <span data-ttu-id="a8ee0-121">次の表は、<xref:System.ComponentModel.TypeDescriptionProvider> メソッドの既定の戻り値を示しています。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-121">The following table shows the default return values for <xref:System.ComponentModel.TypeDescriptionProvider> methods.</span></span>  
  
|<span data-ttu-id="a8ee0-122">メソッド</span><span class="sxs-lookup"><span data-stu-id="a8ee0-122">Method</span></span>|<span data-ttu-id="a8ee0-123">既定の戻り値</span><span class="sxs-lookup"><span data-stu-id="a8ee0-123">Default return value</span></span>|  
|------------|--------------------------|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|  
|<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|<span data-ttu-id="a8ee0-124"><xref:System.Activator.CreateInstance%2A> メソッドを呼び出すことによって新しく作成されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-124">A newly created object through a call to the <xref:System.Activator.CreateInstance%2A> method.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|<span data-ttu-id="a8ee0-125"><xref:System.ComponentModel.CustomTypeDescriptor> クラスの既定のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-125">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|<span data-ttu-id="a8ee0-126"><xref:System.ComponentModel.CustomTypeDescriptor> クラスの既定のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-126">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|<span data-ttu-id="a8ee0-127">`objectType` 最初のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-127">The `objectType` first parameter.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.CustomTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(class System.IServiceProvider provider, class System.Type objectType, class System.Type[] argTypes, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(IServiceProvider ^ provider, Type ^ objectType, cli::array &lt;Type ^&gt; ^ argTypes, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : IServiceProvider * Type * Type[] * obj[] -&gt; obj&#xA;override this.CreateInstance : IServiceProvider * Type * Type[] * obj[] -&gt; obj" Usage="typeDescriptionProvider.CreateInstance (provider, objectType, argTypes, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="argTypes" Type="System.Type[]" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="a8ee0-128">省略可能なサービス プロバイダー。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-128">An optional service provider.</span></span></param>
        <param name="objectType"><span data-ttu-id="a8ee0-129">作成するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-129">The type of object to create.</span></span> <span data-ttu-id="a8ee0-130">このパラメーターは、<see langword="null" /> にはできません。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-130">This parameter is never <see langword="null" />.</span></span></param>
        <param name="argTypes"><span data-ttu-id="a8ee0-131">オブジェクトのコンストラクターに渡されるパラメーター型を表す型の配列 (省略可能)。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-131">An optional array of types that represent the parameter types to be passed to the object's constructor.</span></span> <span data-ttu-id="a8ee0-132">この配列は、<see langword="null" /> にすることも、長さ 0 にすることもできます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-132">This array can be <see langword="null" /> or of zero length.</span></span></param>
        <param name="args"><span data-ttu-id="a8ee0-133">オブジェクトのコンストラクターに渡すパラメーターの値の省略可能な配列。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-133">An optional array of parameter values to pass to the object's constructor.</span></span></param>
        <summary><span data-ttu-id="a8ee0-134">別のデータ型の代わりに使用できるオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-134">Creates an object that can substitute for another data type.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-135">代替の <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-135">The substitute <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-136">`provider` パラメーターによって指定された <xref:System.IServiceProvider> は、<xref:System.ComponentModel.TypeDescriptor> クラスの <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType> メソッドによって渡されます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-136">The <xref:System.IServiceProvider> specified by the `provider` parameter is passed in by the <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType> method of the <xref:System.ComponentModel.TypeDescriptor> class.</span></span> <span data-ttu-id="a8ee0-137">`provider` が `null`されていない場合は、作成呼び出しに関する追加のコンテキストを取得するために、型説明プロバイダーがサービスプロバイダーを使用できます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-137">If `provider` is not `null`, the service provider can be used by the type description provider to obtain additional context about the creation call.</span></span>  
  
 <span data-ttu-id="a8ee0-138"><xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> メソッドは `virtual` であり、既定では、`provider` が `null`の場合、<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> メソッドの結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-138">The <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method is `virtual` and, by default, returns the result of the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method if `provider` is `null`.</span></span> <span data-ttu-id="a8ee0-139">`provider` が `null`場合、このメソッドは親プロバイダーの <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-139">If `provider` is `null`, this method will invoke the <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method of the parent provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8ee0-140">派生クラスが代替のインスタンスを提供しない場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-140">If the derived class is not interested in providing a substitute instance, it should just call the base implementation.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="GetCache">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary GetCache (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionary GetCache(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCache (instance As Object) As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionary ^ GetCache(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetCache : obj -&gt; System.Collections.IDictionary&#xA;override this.GetCache : obj -&gt; System.Collections.IDictionary" Usage="typeDescriptionProvider.GetCache instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="a8ee0-141">キャッシュの取得対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-141">The object for which to get the cache.</span></span></param>
        <summary><span data-ttu-id="a8ee0-142">キーと値のペアの <see cref="T:System.Collections.IDictionary" /> としてアクセスされる、オブジェクトごとのキャッシュを取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-142">Gets a per-object cache, accessed as an <see cref="T:System.Collections.IDictionary" /> of key/value pairs.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-143">提供されるオブジェクトがキャッシュをサポートしている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-143">An <see cref="T:System.Collections.IDictionary" /> if the provided object supports caching; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-144"><xref:System.ComponentModel.TypeDescriptor> は、メタデータのコレクションに対して複雑な操作を実行することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-144">A <xref:System.ComponentModel.TypeDescriptor> may need to perform complex operations on collections of metadata.</span></span> <span data-ttu-id="a8ee0-145">型はドメインの有効期間にわたってアンロードされないため、<xref:System.ComponentModel.TypeDescriptor> クラスは、型に基づいてこれらの操作の結果を自動的にキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-145">Because types are not unloaded for the life of a domain, the <xref:System.ComponentModel.TypeDescriptor> class will automatically cache the results of these operations based on type.</span></span> <span data-ttu-id="a8ee0-146">ただし、一部の操作では、ライブオブジェクトインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-146">However, some operations use live object instances.</span></span> <span data-ttu-id="a8ee0-147">これらの操作をキャッシュすると、オブジェクトがガベージコレクションされないため、これらの操作を <xref:System.ComponentModel.TypeDescriptor> クラス内にキャッシュすることはできません。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-147">These operations cannot be cached within the <xref:System.ComponentModel.TypeDescriptor> class because caching them would prevent the object from being garbage collected.</span></span> <span data-ttu-id="a8ee0-148">代わりに、<xref:System.ComponentModel.TypeDescriptor> クラスを使用すると、キーと値のペアの <xref:System.Collections.IDictionary> としてアクセスされるオブジェクトごとのキャッシュを、オブジェクトに存在させることができます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-148">Instead, the <xref:System.ComponentModel.TypeDescriptor> class allows for a per-object cache, accessed as an <xref:System.Collections.IDictionary> of key/value pairs, to exist on an object.</span></span> <span data-ttu-id="a8ee0-149"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> メソッドは、このキャッシュのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-149">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method returns an instance of this cache.</span></span> <span data-ttu-id="a8ee0-150"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> メソッドは、オブジェクトに対してサポートされているキャッシュがない場合に `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-150">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method will return `null` if there is no supported cache for an object.</span></span>  
  
 <span data-ttu-id="a8ee0-151"><xref:System.ComponentModel.TypeDescriptor> によって使用される既定の <xref:System.ComponentModel.TypeDescriptionProvider> は、オブジェクトが <xref:System.ComponentModel.Design.IDictionaryService> インターフェイスを実装する配置コンポーネントであるかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-151">The default <xref:System.ComponentModel.TypeDescriptionProvider> used by <xref:System.ComponentModel.TypeDescriptor> examines the object to see if it is a sited component that implements the <xref:System.ComponentModel.Design.IDictionaryService> interface.</span></span> <span data-ttu-id="a8ee0-152">オブジェクトがの場合、ディクショナリサービスを使用してオブジェクトのキャッシュを格納します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-152">If the object is, it uses the dictionary service to store the object's cache.</span></span> <span data-ttu-id="a8ee0-153">それ以外の場合は `null`を返すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-153">Otherwise, the object it returns `null`.</span></span> <span data-ttu-id="a8ee0-154">その他の型説明のプロバイダーは、ここで独自の実装を提供する場合があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-154">Other type description providers may provide their own implementation here.</span></span> <span data-ttu-id="a8ee0-155">たとえば、依存関係オブジェクトは、<xref:System.Collections.IDictionary>型のプロパティをアタッチするだけでかまいません。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-155">For example, dependency objects can just attach a property of type <xref:System.Collections.IDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.ComponentModel.Design.IDictionaryService" />
      </Docs>
    </Member>
    <Member MemberName="GetExtendedTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetExtendedTypeDescriptor(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor&#xA;override this.GetExtendedTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetExtendedTypeDescriptor instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="a8ee0-156">拡張された型記述子の取得対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-156">The object for which to get the extended type descriptor.</span></span></param>
        <summary><span data-ttu-id="a8ee0-157">指定されたオブジェクトの拡張されたカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-157">Gets an extended custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-158">オブジェクトの拡張されたメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-158">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide extended metadata for the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-159">拡張型記述子は、他のオブジェクトがこのオブジェクトに追加したが、実際にはオブジェクトで定義されていないプロパティを提供するカスタム型記述子です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-159">An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object.</span></span> <span data-ttu-id="a8ee0-160">たとえば、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] コンポーネントモデルでは、<xref:System.ComponentModel.IExtenderProvider> インターフェイスを実装するオブジェクトは、同じ論理コンテナー内に存在する他のオブジェクトにプロパティをアタッチできます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-160">For example, in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model, objects that implement the <xref:System.ComponentModel.IExtenderProvider> interface can attach properties to other objects that reside in the same logical container.</span></span> <span data-ttu-id="a8ee0-161">オーバーロードされた <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> メソッドは、これらの追加の拡張プロパティを提供する型記述子を返しません。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-161">The overloaded <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> methods do not return a type descriptor that provides these extra extended properties.</span></span> <span data-ttu-id="a8ee0-162"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> メソッドは、これらの拡張プロパティのセットを返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-162">The <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method returns the set of these extended properties.</span></span> <span data-ttu-id="a8ee0-163">この2つのプロパティコレクションの結果は、<xref:System.ComponentModel.TypeDescriptor> によって自動的にマージされます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-163">The <xref:System.ComponentModel.TypeDescriptor> will automatically merge the results of these two property collections.</span></span> <span data-ttu-id="a8ee0-164">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] コンポーネントモデルでは拡張プロパティのみがサポートされていますが、型説明のプロバイダーでサポートされている場合は、拡張属性およびイベントに対して <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-164">While the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model supports only extended properties, <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> can be used for extended attributes as well as events, if the type description provider supports it.</span></span>  
  
 <span data-ttu-id="a8ee0-165"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> は `virtual` であり、既定では、親プロバイダーが渡されなかった場合に空の結果を返すカスタム型記述子を返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-165"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> is `virtual` and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed.</span></span> <span data-ttu-id="a8ee0-166">親プロバイダーが渡された場合、このメソッドは親プロバイダーの <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-166">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetExtenderProviders">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.IExtenderProvider[] GetExtenderProviders(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetExtenderProviders (instance As Object) As IExtenderProvider()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::ComponentModel::IExtenderProvider ^&gt; ^ GetExtenderProviders(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetExtenderProviders : obj -&gt; System.ComponentModel.IExtenderProvider[]&#xA;override this.GetExtenderProviders : obj -&gt; System.ComponentModel.IExtenderProvider[]" Usage="typeDescriptionProvider.GetExtenderProviders instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IExtenderProvider[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="a8ee0-167">拡張プロバイダーを取得する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-167">The object to get extender providers for.</span></span></param>
        <summary><span data-ttu-id="a8ee0-168">指定したオブジェクトの拡張プロバイダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-168">Gets the extender providers for the specified object.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-169"><paramref name="instance" /> の拡張プロバイダーの配列。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-169">An array of extender providers for <paramref name="instance" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-170"><paramref name="instance" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-170"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFullComponentName">
      <MemberSignature Language="C#" Value="public virtual string GetFullComponentName (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFullComponentName(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFullComponentName (component As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFullComponentName(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member GetFullComponentName : obj -&gt; string&#xA;override this.GetFullComponentName : obj -&gt; string" Usage="typeDescriptionProvider.GetFullComponentName component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="a8ee0-171">指定されたコンポーネント。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-171">The specified component.</span></span></param>
        <summary><span data-ttu-id="a8ee0-172">指定したコンポーネントの名前を取得します。コンポーネントに名前がない場合は <see langword="null" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-172">Gets the name of the specified component, or <see langword="null" /> if the component has no name.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-173">指定したコンポーネントの名前。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-173">The name of the specified component.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-174"><paramref name="component" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-174"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetReflectionType">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8ee0-175">オブジェクトに対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-175">Performs normal reflection against an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetReflectionType : obj -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="a8ee0-176">型のインスタンス (<see langword="null" /> にはできません)。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-176">An instance of the type (should not be <see langword="null" />).</span></span></param>
        <summary><span data-ttu-id="a8ee0-177">指定されたオブジェクトに対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-177">Performs normal reflection against the given object.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-178">この <paramref name="instance" /> のリフレクションの型です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-178">The type of reflection for this <paramref name="instance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-179"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> メソッドは、<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> メソッドの下位レベルバージョンです。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-179">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="a8ee0-180">オブジェクトのカスタムの型記述子が見つからない場合は、オブジェクトに対して通常のリフレクションを実行するために <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-180">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="a8ee0-181">型ではなく、インスタンスを使用する型記述子メンバーを呼び出した場合は、このメソッドオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-181">Use this method overload if you have called a type descriptor member that uses an instance instead of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-182"><paramref name="instance" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-182"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (objectType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(Type ^ objectType);" />
      <MemberSignature Language="F#" Value="member this.GetReflectionType : Type -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType objectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="a8ee0-183"><see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-183">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <summary><span data-ttu-id="a8ee0-184">型に対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-184">Performs normal reflection against a type.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-185">この <paramref name="objectType" /> のリフレクションの型です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-185">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-186"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> メソッドは、<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> メソッドの下位レベルバージョンです。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-186">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="a8ee0-187">オブジェクトのカスタムの型記述子が見つからない場合は、オブジェクトに対して通常のリフレクションを実行するために <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-187">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="a8ee0-188">インスタンスの代わりに型を使用する型記述子メンバーを呼び出した場合は、このメソッドオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-188">Use this method overload if you have called a type descriptor member that uses a type instead of an instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-189"><paramref name="objectType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-189"><paramref name="objectType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public virtual Type GetReflectionType (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReflectionType(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReflectionType (objectType As Type, instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetReflectionType(Type ^ objectType, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetReflectionType : Type * obj -&gt; Type&#xA;override this.GetReflectionType : Type * obj -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType (objectType, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="a8ee0-190"><see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-190">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <param name="instance"><span data-ttu-id="a8ee0-191">型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-191">An instance of the type.</span></span> <span data-ttu-id="a8ee0-192"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-192">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a8ee0-193">指定された型の指定されたオブジェクトに対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-193">Performs normal reflection against the given object with the given type.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-194">この <paramref name="objectType" /> のリフレクションの型です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-194">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-195"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> メソッドは、<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> メソッドの下位レベルバージョンです。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-195">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="a8ee0-196">オブジェクトのカスタムの型記述子が見つからない場合は、オブジェクトに対して通常のリフレクションを実行するために <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-196">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8ee0-197">このメソッドは <see langword="virtual" />としてプロトタイプ宣言され、既定では、親プロバイダーが渡されなかった場合は <paramref name="objectType" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-197">This method is prototyped as <see langword="virtual" />, and by default returns <paramref name="objectType" /> if no parent provider was passed.</span></span> <span data-ttu-id="a8ee0-198">親プロバイダーが渡された場合、このメソッドは親プロバイダーの <see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-198">If a parent provider was passed, this method will invoke the parent provider's <see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /> method.</span></span></para></block>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public virtual Type GetRuntimeType (Type reflectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetRuntimeType(class System.Type reflectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRuntimeType (reflectionType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetRuntimeType(Type ^ reflectionType);" />
      <MemberSignature Language="F#" Value="abstract member GetRuntimeType : Type -&gt; Type&#xA;override this.GetRuntimeType : Type -&gt; Type" Usage="typeDescriptionProvider.GetRuntimeType reflectionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectionType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reflectionType"><span data-ttu-id="a8ee0-199">等価のランタイム型に変換する型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-199">The type to convert to its runtime equivalent.</span></span></param>
        <summary><span data-ttu-id="a8ee0-200">リフレクション型をランタイム型に変換します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-200">Converts a reflection type into a runtime type.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-201"><see cref="T:System.Type" /> に等価のランタイム型を表す <paramref name="reflectionType" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-201">A <see cref="T:System.Type" /> that represents the runtime equivalent of <paramref name="reflectionType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-202"><xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> メソッドは、リフレクション型をランタイム型に戻すために、<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> メソッドを逆にします。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-202">The <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method reverses the <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method to convert a reflection type back into a runtime type.</span></span> <span data-ttu-id="a8ee0-203">以前のバージョンで使用されていたランタイム型を返すには、<xref:System.Type.UnderlyingSystemType%2A> プロパティを使用するよりも、<xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> メソッドを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-203">Using the <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method is preferred over using the <xref:System.Type.UnderlyingSystemType%2A> property, which was used in earlier versions to return the runtime type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-204"><paramref name="reflectionType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-204"><paramref name="reflectionType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeDescriptor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8ee0-205">指定された型またはオブジェクトのカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-205">Gets a custom type descriptor for the given type or object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="a8ee0-206">型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-206">An instance of the type.</span></span> <span data-ttu-id="a8ee0-207"><see langword="null" /> にインスタンスが渡されなかった場合、<see cref="T:System.ComponentModel.TypeDescriptor" /> でもかまいません。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-207">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="a8ee0-208">指定されたオブジェクトのカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-208">Gets a custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-209">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-209">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-210"><paramref name="instance" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-210"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (objectType As Type) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType);" />
      <MemberSignature Language="F#" Value="member this.GetTypeDescriptor : Type -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor objectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="a8ee0-211">型記述子の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-211">The type of object for which to retrieve the type descriptor.</span></span></param>
        <summary><span data-ttu-id="a8ee0-212">指定された型のカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-212">Gets a custom type descriptor for the given type.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-213">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-213">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDescriptor (objectType As Type, instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDescriptor : Type * obj -&gt; System.ComponentModel.ICustomTypeDescriptor&#xA;override this.GetTypeDescriptor : Type * obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor (objectType, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="a8ee0-214">型記述子の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-214">The type of object for which to retrieve the type descriptor.</span></span></param>
        <param name="instance"><span data-ttu-id="a8ee0-215">型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-215">An instance of the type.</span></span> <span data-ttu-id="a8ee0-216"><see langword="null" /> にインスタンスが渡されなかった場合、<see cref="T:System.ComponentModel.TypeDescriptor" /> でもかまいません。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-216">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="a8ee0-217">指定された型およびオブジェクトのカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-217">Gets a custom type descriptor for the given type and object.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-218">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-218">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ee0-219">このメソッドは `virtual` としてプロトタイプ宣言され、既定では、親プロバイダーが渡されなかった場合は空の記述子を返します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-219">This method is prototyped as `virtual` and, by default, returns an empty descriptor if no parent provider was passed.</span></span> <span data-ttu-id="a8ee0-220">親プロバイダーが渡された場合、このメソッドは親プロバイダーの <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-220">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8ee0-221"><see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /> メソッドは、オブジェクトのカスタム型記述子を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-221">The <see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /> method should return a custom type descriptor for the object.</span></span> <span data-ttu-id="a8ee0-222">メソッドがオブジェクトの型情報を提供しない場合は、<see langword="null" />を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-222">If the method does not provide type information for the object, it should return <see langword="null" />.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsSupportedType">
      <MemberSignature Language="C#" Value="public virtual bool IsSupportedType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupportedType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedType : Type -&gt; bool&#xA;override this.IsSupportedType : Type -&gt; bool" Usage="typeDescriptionProvider.IsSupportedType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="a8ee0-223">互換性をテストする型。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-223">The type to test for compatibility.</span></span></param>
        <summary><span data-ttu-id="a8ee0-224">指定した型が型説明および型説明のプロバイダーのチェーンと互換性があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-224">Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.</span></span></summary>
        <returns><span data-ttu-id="a8ee0-225"><see langword="true" /> が型説明および型説明のプロバイダーのチェーンと互換性がある場合は <paramref name="type" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-225"><see langword="true" /> if <paramref name="type" /> is compatible with the type description and its chain of type description providers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a8ee0-226"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a8ee0-226"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
