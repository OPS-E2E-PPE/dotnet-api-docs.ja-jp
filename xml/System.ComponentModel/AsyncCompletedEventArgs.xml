<Type Name="AsyncCompletedEventArgs" FullName="System.ComponentModel.AsyncCompletedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e423fe2dca62a66c59883774fe26395879ce5e62" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83917405" /></Metadata><TypeSignature Language="C#" Value="public class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsyncCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type AsyncCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="08bab-101">*MethodName*<see langword="Completed" /> イベントのデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="08bab-101">Provides data for the *MethodName*<see langword="Completed" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08bab-102">[イベントベースの非同期パターンの概要](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview)を実装するクラスを使用している場合、クラスは*MethodName*`Completed` イベントを提供します。</span><span class="sxs-lookup"><span data-stu-id="08bab-102">If you are using a class that implements the [Event-based Asynchronous Pattern Overview](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview), the class will provide a *MethodName*`Completed` event.</span></span> <span data-ttu-id="08bab-103">イベントに <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> デリゲートのインスタンスを追加すると、対応するイベントハンドラーメソッドの <xref:System.ComponentModel.AsyncCompletedEventArgs> パラメーターに、非同期操作の結果に関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="08bab-103">If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.</span></span>  
  
 <span data-ttu-id="08bab-104">クライアントアプリケーションのイベントハンドラーデリゲートは、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> プロパティをチェックして、非同期タスクがキャンセルされたかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="08bab-104">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.</span></span>  
  
 <span data-ttu-id="08bab-105">クライアントアプリケーションのイベントハンドラーデリゲートは、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティをチェックして、非同期タスクの実行中に例外が発生したかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="08bab-105">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.</span></span>  
  
 <span data-ttu-id="08bab-106">クラスが複数の非同期メソッドをサポートしている場合、または同じ非同期メソッドの複数の呼び出しがサポートされている場合は、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティの値をチェックすることによって、 *MethodName*`Completed` イベントを発生させたタスクを特定できます。</span><span class="sxs-lookup"><span data-stu-id="08bab-106">If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="08bab-107">コードでは、対応する非同期タスクの開始と完了に応じて、タスク Id と呼ばれるこれらのトークンを追跡する必要があります。</span><span class="sxs-lookup"><span data-stu-id="08bab-107">Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08bab-108">次のコード例は、<xref:System.ComponentModel.AsyncOperation> を使用して、非同期操作の有効期間を追跡する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="08bab-108">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="08bab-109">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="08bab-109">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="08bab-110">イベントベースの非同期パターンに従うクラスは、保留中の非同期操作の状態についてクライアントに通知するイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="08bab-110">Classes that follow the Event-based Asynchronous Pattern can raise events to alert clients about the status of pending asynchronous operations.</span></span> <span data-ttu-id="08bab-111">クラスに*MethodName*<see langword="Completed" /> イベントが提供されている場合は、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> を使用して、クライアントに非同期操作の結果を通知することができます。</span><span class="sxs-lookup"><span data-stu-id="08bab-111">If the class provides a *MethodName*<see langword="Completed" /> event, you can use the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> to tell clients about the outcome of asynchronous operations.</span></span>  
  
<span data-ttu-id="08bab-112">非同期操作の結果に関するより多くの情報をクライアントと通信する場合は、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="08bab-112">You may want to communicate to clients more information about the outcome of an asynchronous operation than an <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> accommodates.</span></span> <span data-ttu-id="08bab-113">この場合、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスから独自のクラスを派生させ、追加のプライベートインスタンス変数および対応する読み取り専用パブリックプロパティを提供できます。</span><span class="sxs-lookup"><span data-stu-id="08bab-113">In this case, you can derive your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class and provide additional private instance variables and corresponding read-only public properties.</span></span> <span data-ttu-id="08bab-114">操作が取り消された場合、またはエラーが発生した場合に、プロパティ値を返す前に <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="08bab-114">Call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value, in case the operation was canceled or an error occurred.</span></span></para></block>
    <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="08bab-115">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="08bab-115">Implementing the Event-based Asynchronous Pattern</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08bab-116"><see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="08bab-116">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08bab-117"><see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="08bab-117">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception error, bool cancelled, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (error As Exception, cancelled As Boolean, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs(Exception ^ error, bool cancelled, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.AsyncCompletedEventArgs : Exception * bool * obj -&gt; System.ComponentModel.AsyncCompletedEventArgs" Usage="new System.ComponentModel.AsyncCompletedEventArgs (error, cancelled, userState)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
        <Parameter Name="cancelled" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="08bab-118">非同期操作中に発生したエラー。</span><span class="sxs-lookup"><span data-stu-id="08bab-118">Any error that occurred during the asynchronous operation.</span></span></param>
        <param name="cancelled"><span data-ttu-id="08bab-119">非同期操作がキャンセルされたかどうかを示す値。</span><span class="sxs-lookup"><span data-stu-id="08bab-119">A value indicating whether the asynchronous operation was canceled.</span></span></param>
        <param name="userState"><span data-ttu-id="08bab-120"><see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> メソッドに渡される、オプションのユーザー指定の状態オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="08bab-120">The optional user-supplied state object passed to the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="08bab-121"><see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="08bab-121">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public bool Cancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancelled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Cancelled : bool" Usage="System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08bab-122">非同期操作がキャンセルされたかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="08bab-122">Gets a value indicating whether an asynchronous operation has been canceled.</span></span></summary>
        <value><span data-ttu-id="08bab-123">バックグラウンドでの操作がキャンセルされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08bab-123"><see langword="true" /> if the background operation has been canceled; otherwise <see langword="false" />.</span></span> <span data-ttu-id="08bab-124">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="08bab-124">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08bab-125"><xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> プロパティが `true`場合、非同期操作は中断されました。</span><span class="sxs-lookup"><span data-stu-id="08bab-125">When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted.</span></span>  
  
 <span data-ttu-id="08bab-126">クライアントアプリケーションのイベントハンドラーデリゲートは、<xref:System.ComponentModel.AsyncCompletedEventArgs>から派生したクラスのプロパティにアクセスする前に、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> プロパティを確認する必要があります。それ以外の場合、非同期操作が中断された場合は、プロパティによって <xref:System.InvalidOperationException> が発生します。</span><span class="sxs-lookup"><span data-stu-id="08bab-126">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08bab-127">次のコード例は、<xref:System.ComponentModel.AsyncOperation> を使用して、非同期操作の有効期間を追跡する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="08bab-127">The following code example demonstrates the using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="08bab-128">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="08bab-128">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="08bab-129">派生クラスに読み取り専用プロパティを指定する場合は、必ず <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="08bab-129">If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method.</span></span> <span data-ttu-id="08bab-130">これにより、非同期操作でエラーが発生したために有効でない可能性のあるプロパティにクライアントがアクセスするのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="08bab-130">This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="08bab-131">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="08bab-131">Implementing the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Exception Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Error" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Error As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Error { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : Exception" Usage="System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08bab-132">非同期操作中に発生したエラーを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="08bab-132">Gets a value indicating which error occurred during an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="08bab-133">非同期操作中にエラーが発生した場合は <see cref="T:System.Exception" /> インスタンス。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08bab-133">An <see cref="T:System.Exception" /> instance, if an error occurred during an asynchronous operation; otherwise <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08bab-134">非同期操作中に例外が発生した場合は、クラスによって <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティに例外が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="08bab-134">If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property.</span></span> <span data-ttu-id="08bab-135">クライアントアプリケーションのイベントハンドラーデリゲートは、<xref:System.ComponentModel.AsyncCompletedEventArgs>から派生したクラスのプロパティにアクセスする前に、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティを確認する必要があります。それ以外の場合、プロパティは、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>への参照を保持している <xref:System.Exception.InnerException%2A> プロパティを使用して、<xref:System.Reflection.TargetInvocationException> を発生させます。</span><span class="sxs-lookup"><span data-stu-id="08bab-135">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.</span></span>  
  
 <span data-ttu-id="08bab-136">操作が取り消された場合は、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティの値が `null` ます。</span><span class="sxs-lookup"><span data-stu-id="08bab-136">The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08bab-137">次のコード例は、<xref:System.ComponentModel.AsyncOperation> を使用して、非同期操作の有効期間を追跡する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="08bab-137">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="08bab-138">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="08bab-138">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="08bab-139">派生クラスに読み取り専用プロパティを指定する場合は、必ずプロパティの実装で <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="08bab-139">If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method in your property implementation.</span></span> <span data-ttu-id="08bab-140">これにより、非同期操作でエラーが発生したために有効でない可能性のあるプロパティにクライアントがアクセスするのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="08bab-140">This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="08bab-141">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="08bab-141">Implementing the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RaiseExceptionIfNecessary">
      <MemberSignature Language="C#" Value="protected void RaiseExceptionIfNecessary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseExceptionIfNecessary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseExceptionIfNecessary ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseExceptionIfNecessary();" />
      <MemberSignature Language="F#" Value="member this.RaiseExceptionIfNecessary : unit -&gt; unit" Usage="asyncCompletedEventArgs.RaiseExceptionIfNecessary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08bab-142">非同期操作が失敗した場合は、ユーザー指定の例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="08bab-142">Raises a user-supplied exception if an asynchronous operation failed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="08bab-143">次のコード例は、派生クラスのプロパティで <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> を使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="08bab-143">The following code example demonstrates using <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> in derived class properties.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#6)]
[!code-vb[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="08bab-144"><see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> プロパティが <see langword="true" /> である。</span><span class="sxs-lookup"><span data-stu-id="08bab-144">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="08bab-145"><see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> プロパティは、非同期操作によって設定されています。</span><span class="sxs-lookup"><span data-stu-id="08bab-145">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property has been set by the asynchronous operation.</span></span> <span data-ttu-id="08bab-146"><see cref="P:System.Exception.InnerException" /> プロパティは、<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> への参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="08bab-146">The <see cref="P:System.Exception.InnerException" /> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="08bab-147"><see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスから独自のクラスを派生させる場合は、プロパティ値を返す前に、読み取り専用プロパティで <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="08bab-147">If you have derived your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class, your read-only properties should call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value.</span></span> <span data-ttu-id="08bab-148">コンポーネントの非同期ワーカーコードによって <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> プロパティに例外が割り当てられたり、<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> プロパティが <see langword="true" />に設定されたりすると、クライアントが値を読み取ろうとしたときに、プロパティによって例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="08bab-148">If the component's asynchronous worker code assigns an exception to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property or sets the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property to <see langword="true" />, the property will raise an exception if a client tries to read its value.</span></span> <span data-ttu-id="08bab-149">これにより、非同期操作でエラーが発生したために有効でない可能性のあるプロパティにクライアントがアクセスするのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="08bab-149">This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="08bab-150">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="08bab-150">Implementing the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UserState">
      <MemberSignature Language="C#" Value="public object UserState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserState : obj" Usage="System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08bab-151">非同期タスクの一意の識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="08bab-151">Gets the unique identifier for the asynchronous task.</span></span></summary>
        <value><span data-ttu-id="08bab-152">非同期タスクを一意に識別するオブジェクト参照。値が設定されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08bab-152">An object reference that uniquely identifies the asynchronous task; otherwise, <see langword="null" /> if no value has been set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08bab-153">クラスが複数の非同期メソッドをサポートしている場合、または1つのメソッドを複数回呼び出す場合は、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティの値をチェックすることによって、 *MethodName*`Completed` イベントを発生させたタスクを特定できます。</span><span class="sxs-lookup"><span data-stu-id="08bab-153">If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="08bab-154">コードでは、対応する非同期タスクの開始と完了に応じて、タスク Id と呼ばれるこれらのトークンを追跡する必要があります。</span><span class="sxs-lookup"><span data-stu-id="08bab-154">Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
 <span data-ttu-id="08bab-155">このプロパティの値は、タスクを開始した非同期メソッドへの最初の呼び出し中に設定されます。</span><span class="sxs-lookup"><span data-stu-id="08bab-155">The value of this property is set during the original call to the asynchronous method that started the task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08bab-156">次のコード例は、<xref:System.ComponentModel.AsyncOperation> を使用して、非同期操作の有効期間を追跡する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="08bab-156">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="08bab-157">このコード例は、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="08bab-157">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="08bab-158">イベントベースの非同期パターンの実装</span><span class="sxs-lookup"><span data-stu-id="08bab-158">Implementing the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
