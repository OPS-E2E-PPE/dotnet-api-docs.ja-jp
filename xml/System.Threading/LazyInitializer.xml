<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f345b3c4f22622f923cd1852db98b35a710a658" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83958137" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e43b7-101">遅延初期化ルーチンを提供します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e43b7-102">これらのルーチンは、ターゲットがアクセス時に初期化されていることを確認するために、専用のレイジー初期化インスタンスを割り当てる必要がないようにします。</span><span class="sxs-lookup"><span data-stu-id="e43b7-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e43b7-103">次の例は、EnsureInitialized を使用して、初期化が既に行われているかどうか、および相互排他ロックとして使用するオブジェクトを追跡するブール値を使用して値を遅延初期化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e43b7-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
bool _dataInitialized = false;  
object _dataLock = new object();  

//  ...  
  
ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="e43b7-104"><see cref="T:System.Threading.LazyInitializer" /> のメソッドはスレッドセーフであり、複数のスレッドから同時に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="e43b7-105">遅延初期化</span><span class="sxs-lookup"><span data-stu-id="e43b7-105">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e43b7-106">まだ初期化されていない場合は、対象の型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-106">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e43b7-107">初期化される参照の型。</span><span class="sxs-lookup"><span data-stu-id="e43b7-107">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e43b7-108">まだ初期化されていない場合、初期化する参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-108">A reference to initialize if it has not already been initialized.</span></span> <span data-ttu-id="e43b7-109">これが <see langword="null" /> の場合は、初期化されていないと見なされます。それ以外の場合は、初期化されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-109">If it is <see langword="null" />, it is considered not initialized; otherwise, it's considered initialized.</span></span></param>
        <summary><span data-ttu-id="e43b7-110">まだ初期化されていない場合、型のパラメーターなしのコンストラクターを使用してターゲット参照型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-110">Initializes a target reference type with the type's parameterless constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e43b7-111">初期化されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e43b7-111">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e43b7-112">このメソッドは、参照型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-112">This method may only be used on reference types.</span></span> <span data-ttu-id="e43b7-113">値型の初期化を確認するには、「`EnsureInitialized`の他のオーバーロード」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e43b7-113">To ensure initialization of value types, see other overloads of `EnsureInitialized`.</span></span>  
  
 <span data-ttu-id="e43b7-114">このメソッドは、`target`を初期化するために、複数のスレッドによって同時に使用される場合があります。</span><span class="sxs-lookup"><span data-stu-id="e43b7-114">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="e43b7-115">複数のスレッドがこのメソッドに同時にアクセスする場合、`T` の複数のインスタンスが作成される可能性がありますが、`target` に格納されて返されるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="e43b7-115">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target` and returned.</span></span> <span data-ttu-id="e43b7-116">このような場合、このメソッドは、格納されていないオブジェクトを破棄しません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-116">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="e43b7-117">このようなオブジェクトを破棄する必要がある場合は、`valueFactory` を受け取るオーバーロードを使用して、同じ格納されたオブジェクトを参照しない場合はオブジェクトを破棄します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-117">If such objects must be disposed, use an overload that takes a `valueFactory` and dispose of the object if it does not reference the same stored object.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e43b7-118">型 <paramref name="T" /> のコンストラクターにアクセスするためのアクセス許可がありませんでした。</span><span class="sxs-lookup"><span data-stu-id="e43b7-118">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e43b7-119">型 <paramref name="T" /> には、パラメーターなしのコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-119">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="e43b7-120">遅延初期化</span><span class="sxs-lookup"><span data-stu-id="e43b7-120">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e43b7-121">初期化される参照の型。</span><span class="sxs-lookup"><span data-stu-id="e43b7-121">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e43b7-122">まだ初期化されていない場合、初期化する参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-122">The reference to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="e43b7-123">参照を初期化するために呼び出される関数。</span><span class="sxs-lookup"><span data-stu-id="e43b7-123">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="e43b7-124">まだ初期化されていない場合、指定された関数を使用してターゲット参照型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-124">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e43b7-125">初期化されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e43b7-125">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e43b7-126">このメソッドは参照型でのみ使用でき、`valueFactory` は null 参照 (Visual Basic では Nothing) を返すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-126">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="e43b7-127">値型の初期化を確実に行う、または null 参照型を使用できるようにするには、「EnsureInitialized のその他のオーバーロード」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e43b7-127">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="e43b7-128">このメソッドは、`target`を初期化するために、複数のスレッドによって同時に使用される場合があります。</span><span class="sxs-lookup"><span data-stu-id="e43b7-128">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="e43b7-129">複数のスレッドがこのメソッドに同時にアクセスする場合、`T` の複数のインスタンスが作成される可能性がありますが、`target`に格納されるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="e43b7-129">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="e43b7-130">このような場合、このメソッドは、格納されていないオブジェクトを破棄しません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-130">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="e43b7-131">このようなオブジェクトを破棄する必要がある場合は、オブジェクトが使用されていないかどうかを判断し、適切にオブジェクトを破棄することが、呼び出し元によって行われます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-131">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e43b7-132">型 <paramref name="T" /> には、パラメーターなしのコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-132">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e43b7-133"><paramref name="valueFactory" />null (Visual Basic の場合は Nothing) を返しました。</span><span class="sxs-lookup"><span data-stu-id="e43b7-133"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="e43b7-134">遅延初期化</span><span class="sxs-lookup"><span data-stu-id="e43b7-134">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * bool * obj -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e43b7-135">初期化される参照の型。</span><span class="sxs-lookup"><span data-stu-id="e43b7-135">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e43b7-136">まだ初期化されていない場合は、初期化する型 <c>T</c> の参照または値。</span><span class="sxs-lookup"><span data-stu-id="e43b7-136">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="e43b7-137">ターゲットが既に初期化されているかどうかを判断するブール値への参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-137">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="e43b7-138"><paramref name="target" /> を初期化するために相互排他的ロックとして使用されるオブジェクトへの参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-138">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="e43b7-139"><paramref name="syncLock" /> が <see langword="null" /> の場合、新しいオブジェクトがインスタンス化されます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-139">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="e43b7-140">まだ初期化されていない場合、そのパラメーターなしのコンストラクターを使用してターゲット参照または値の型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-140">Initializes a target reference or value type with its parameterless constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e43b7-141">初期化されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e43b7-141">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e43b7-142">`initialized` が true として指定されている場合、それ以上の初期化は行われません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-142">If `initialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e43b7-143">型 <paramref name="T" /> のコンストラクターにアクセスするためのアクセス許可がありませんでした。</span><span class="sxs-lookup"><span data-stu-id="e43b7-143">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e43b7-144">型 <paramref name="T" /> には、パラメーターなしのコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-144">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="e43b7-145">遅延初期化</span><span class="sxs-lookup"><span data-stu-id="e43b7-145">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * obj * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e43b7-146">初期化される参照の型。</span><span class="sxs-lookup"><span data-stu-id="e43b7-146">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e43b7-147">まだ初期化されていない場合、初期化する参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-147">A reference to initialize if it has not already been initialized.</span></span> <span data-ttu-id="e43b7-148">これが <see langword="null" /> の場合は、初期化されていないと見なされます。それ以外の場合は、初期化されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-148">If it is <see langword="null" />, it is considered not initialized; otherwise, it's considered initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="e43b7-149"><paramref name="target" /> を初期化するために相互排他的ロックとして使用されるオブジェクトへの参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-149">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="e43b7-150"><paramref name="syncLock" /> が <see langword="null" /> の場合、新しいオブジェクトがインスタンス化されます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-150">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="e43b7-151"><paramref name="target" /> を初期化するために呼び出すメソッド。</span><span class="sxs-lookup"><span data-stu-id="e43b7-151">The method to invoke to initialize <paramref name="target" />.</span></span></param>
        <summary><span data-ttu-id="e43b7-152">まだ初期化されていない場合、指定された関数を使用してターゲット参照型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-152">Initializes a target reference type with a specified function if it has not already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e43b7-153">初期化されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e43b7-153">The initialized object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * bool * obj * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e43b7-154">初期化される参照の型。</span><span class="sxs-lookup"><span data-stu-id="e43b7-154">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e43b7-155">まだ初期化されていない場合は、初期化する型 <c>T</c> の参照または値。</span><span class="sxs-lookup"><span data-stu-id="e43b7-155">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="e43b7-156">ターゲットが既に初期化されているかどうかを判断するブール値への参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-156">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="e43b7-157"><paramref name="target" /> を初期化するために相互排他的ロックとして使用されるオブジェクトへの参照。</span><span class="sxs-lookup"><span data-stu-id="e43b7-157">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="e43b7-158"><paramref name="syncLock" /> が <see langword="null" /> の場合、新しいオブジェクトがインスタンス化されます。</span><span class="sxs-lookup"><span data-stu-id="e43b7-158">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="e43b7-159">参照または値を初期化するために呼び出される関数。</span><span class="sxs-lookup"><span data-stu-id="e43b7-159">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="e43b7-160">まだ初期化されていない場合、指定された関数を使用してターゲット参照または値型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e43b7-160">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e43b7-161">初期化されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e43b7-161">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e43b7-162">`initialized` が true として指定されている場合、それ以上の初期化は行われません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-162">If `initialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e43b7-163">型 <paramref name="T" /> のコンストラクターにアクセスするためのアクセス許可がありませんでした。</span><span class="sxs-lookup"><span data-stu-id="e43b7-163">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e43b7-164">型 <paramref name="T" /> には、パラメーターなしのコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="e43b7-164">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="e43b7-165">遅延初期化</span><span class="sxs-lookup"><span data-stu-id="e43b7-165">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
