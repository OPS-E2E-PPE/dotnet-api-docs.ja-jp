<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="683a439fa1a192c8f3ca5c96ea1fa27ae2f0170b" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77220828" /></Metadata><TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8e7c5-101">リソースまたはリソースのプールに同時にアクセスできるスレッドの数を制限します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-102"><xref:System.Threading.Semaphore> クラスを使用して、リソースのプールへのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-102">Use the <xref:System.Threading.Semaphore> class to control access to a pool of resources.</span></span> <span data-ttu-id="8e7c5-103">スレッドは、<xref:System.Threading.WaitHandle> クラスから継承された <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出してセマフォに入り、<xref:System.Threading.Semaphore.Release%2A> メソッドを呼び出してセマフォを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-103">Threads enter the semaphore by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method, which is inherited from the <xref:System.Threading.WaitHandle> class, and release the semaphore by calling the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="8e7c5-104">セマフォのカウントは、スレッドがセマフォに入るたびに減少し、スレッドがセマフォを解放するとインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-104">The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</span></span> <span data-ttu-id="8e7c5-105">カウントがゼロの場合、後続の要求は他のスレッドがセマフォを解放するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-105">When the count is zero, subsequent requests block until other threads release the semaphore.</span></span> <span data-ttu-id="8e7c5-106">すべてのスレッドがセマフォを解放すると、セマフォの作成時に指定された最大値にカウントされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-106">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span>  
  
 <span data-ttu-id="8e7c5-107">ブロックされたスレッドがセマフォに入る、FIFO や LIFO などの保証された順序はありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-107">There is no guaranteed order, such as FIFO or LIFO, in which blocked threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-108">スレッドは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを繰り返し呼び出して、セマフォに複数回入ることができます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-108">A thread can enter the semaphore multiple times, by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method repeatedly.</span></span> <span data-ttu-id="8e7c5-109">これらのエントリの一部またはすべてを解放するために、スレッドは、パラメーターなしの <xref:System.Threading.Semaphore.Release> メソッドオーバーロードを複数回呼び出すことができます。また、解放されるエントリの数を指定する <xref:System.Threading.Semaphore.Release%28System.Int32%29> メソッドオーバーロードを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-109">To release some or all of these entries, the thread can call the parameterless <xref:System.Threading.Semaphore.Release> method overload multiple times, or it can call the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload that specifies the number of entries to be released.</span></span>  
  
 <span data-ttu-id="8e7c5-110"><xref:System.Threading.Semaphore> クラスは、<xref:System.Threading.WaitHandle.WaitOne%2A> または <xref:System.Threading.Semaphore.Release%2A>の呼び出しにスレッド id を適用しません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-110">The <xref:System.Threading.Semaphore> class does not enforce thread identity on calls to <xref:System.Threading.WaitHandle.WaitOne%2A> or <xref:System.Threading.Semaphore.Release%2A>.</span></span> <span data-ttu-id="8e7c5-111">プログラマは、スレッドが何回もセマフォを解放しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-111">It is the programmer's responsibility to ensure that threads do not release the semaphore too many times.</span></span> <span data-ttu-id="8e7c5-112">たとえば、セマフォの最大カウントが 2 で、スレッド A とスレッド B が両方ともセマフォに入るとします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-112">For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</span></span> <span data-ttu-id="8e7c5-113">スレッド B のプログラミングエラーによって <xref:System.Threading.Semaphore.Release%2A> が2回呼び出される場合、両方の呼び出しが成功します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-113">If a programming error in thread B causes it to call <xref:System.Threading.Semaphore.Release%2A> twice, both calls succeed.</span></span> <span data-ttu-id="8e7c5-114">セマフォのカウントがいっぱいになっているときに、スレッド A も <xref:System.Threading.Semaphore.Release%2A> を呼び出すと、<xref:System.Threading.SemaphoreFullException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-114">The count on the semaphore is full, and when thread A eventually calls <xref:System.Threading.Semaphore.Release%2A>, a <xref:System.Threading.SemaphoreFullException> is thrown.</span></span>  
  
 <span data-ttu-id="8e7c5-115">セマフォには、ローカルセマフォと名前付きシステムセマフォの2種類があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-115">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="8e7c5-116">名前を受け入れるコンストラクターを使用して <xref:System.Threading.Semaphore> オブジェクトを作成した場合は、その名前のオペレーティングシステムセマフォに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-116">If you create a <xref:System.Threading.Semaphore> object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name.</span></span> <span data-ttu-id="8e7c5-117">名前付きシステムセマフォはオペレーティングシステム全体で表示され、プロセスの動作を同期するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-117">Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="8e7c5-118">同じ名前付きシステムセマフォを表す複数の <xref:System.Threading.Semaphore> オブジェクトを作成できます。また、<xref:System.Threading.Semaphore.OpenExisting%2A> メソッドを使用して、既存の名前付きシステムセマフォを開くことができます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-118">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore, and you can use the <xref:System.Threading.Semaphore.OpenExisting%2A> method to open an existing named system semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-119">ローカルセマフォは、プロセス内にのみ存在します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-119">A local semaphore exists only within your process.</span></span> <span data-ttu-id="8e7c5-120">ローカル <xref:System.Threading.Semaphore> オブジェクトを参照するプロセス内のすべてのスレッドから使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-120">It can be used by any thread in your process that has a reference to the local <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="8e7c5-121">各 <xref:System.Threading.Semaphore> オブジェクトは個別のローカルセマフォです。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-121">Each <xref:System.Threading.Semaphore> object is a separate local semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-122">次のコード例では、最大数が3で、初期カウントが0のセマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-122">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="8e7c5-123">この例では、5つのスレッドを開始します。これは、セマフォを待機しています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-123">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="8e7c5-124">メインスレッドは、<xref:System.Threading.Semaphore.Release%28System.Int32%29> メソッドのオーバーロードを使用して、セマフォの数を最大値に増やし、3つのスレッドがセマフォに入るようにします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-124">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="8e7c5-125">各スレッドは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを使用して1秒間待機し、作業をシミュレートした後、<xref:System.Threading.Semaphore.Release> メソッドオーバーロードを呼び出して、セマフォを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-125">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="8e7c5-126">セマフォが解放されるたびに、前のセマフォ数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="8e7c5-127">コンソールメッセージは、セマフォの使用を追跡します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-127">Console messages track semaphore use.</span></span> <span data-ttu-id="8e7c5-128">シミュレートされた作業間隔は、出力を読みやすくするために、スレッドごとに若干増加します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-128">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8e7c5-129">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-129">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-130">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-130">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-131">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-131">Semaphore</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e7c5-132"><see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-132">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="8e7c5-133">同時に許可されるセマフォの要求の初期数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-133">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="8e7c5-134">同時に許可されるセマフォの要求の最大数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-134">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="8e7c5-135">エントリ数の初期値と同時実行エントリの最大数を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-135">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-136">このコンストラクターは、名前のないセマフォを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-136">This constructor initializes an unnamed semaphore.</span></span> <span data-ttu-id="8e7c5-137">このようなセマフォのインスタンスを使用するすべてのスレッドは、インスタンスへの参照を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-137">All threads that use an instance of such a semaphore must have references to the instance.</span></span>  
  
 <span data-ttu-id="8e7c5-138">`initialCount` が `maximumCount`未満の場合、効果は、現在のスレッドが <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` から `initialCount`) 回を呼び出した場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-138">If `initialCount` is less than `maximumCount`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="8e7c5-139">セマフォを作成するスレッドのエントリを予約しない場合は、`maximumCount` と `initialCount`に同じ数値を使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-139">If you do not want to reserve any entries for the thread that creates the semaphore, use the same number for `maximumCount` and `initialCount`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-140">次の例では、最大数が3で、初期カウントが0のセマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-140">The following example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="8e7c5-141">この例では、5つのスレッドを開始します。これは、セマフォを待機しています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-141">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="8e7c5-142">メインスレッドは、<xref:System.Threading.Semaphore.Release%28System.Int32%29> メソッドのオーバーロードを使用して、セマフォの数を最大値に増やし、3つのスレッドがセマフォに入るようにします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-142">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="8e7c5-143">各スレッドは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを使用して1秒間待機し、作業をシミュレートした後、<xref:System.Threading.Semaphore.Release> メソッドオーバーロードを呼び出して、セマフォを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-143">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="8e7c5-144">セマフォが解放されるたびに、前のセマフォ数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-144">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="8e7c5-145">コンソールメッセージは、セマフォの使用を追跡します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-145">Console messages track semaphore use.</span></span> <span data-ttu-id="8e7c5-146">シミュレートされた作業間隔は、出力を読みやすくするために、スレッドごとに若干増加します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-146">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-147"><paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-147"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8e7c5-148"><paramref name="maximumCount" /> が 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-148"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="8e7c5-149">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-149">-or-</span></span> 
 <span data-ttu-id="8e7c5-150"><paramref name="initialCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-150"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-151">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-151">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-152">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-152">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="8e7c5-153">同時に許可されるセマフォの要求の初期数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-153">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="8e7c5-154">同時に許可されるセマフォの要求の最大数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-154">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="name"><span data-ttu-id="8e7c5-155">名前付きシステム セマフォ オブジェクトの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-155">The name of a named system semaphore object.</span></span></param>
        <summary><span data-ttu-id="8e7c5-156">エントリ数の初期値と同時実行エントリの最大数を指定し、オプションでシステム セマフォ オブジェクトの名前を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-156">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-157">このコンストラクターは、名前付きシステムセマフォを表す <xref:System.Threading.Semaphore> オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-157">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="8e7c5-158">同じ名前付きシステムセマフォを表す複数の <xref:System.Threading.Semaphore> オブジェクトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-158">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-159">名前付きシステムセマフォが存在しない場合は、`initialCount` と `maximumCount`によって指定された初期カウントと最大カウントを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-159">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="8e7c5-160">名前付きシステムセマフォが既に存在する場合、`initialCount` と `maximumCount` は使用されませんが、無効な値でも例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-160">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="8e7c5-161">名前付きシステムセマフォが作成されたかどうかを判断する必要がある場合は、代わりに <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> コンストラクターオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-161">If you need to determine whether or not a named system semaphore was created, use the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> constructor overload instead.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8e7c5-162">このコンストラクターのオーバーロードを使用する場合は、`initialCount` と `maximumCount`に同じ数値を指定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-162">When you use this constructor overload, the recommended practice is to specify the same number for `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="8e7c5-163">`initialCount` が `maximumCount`未満であり、名前付きシステムセマフォが作成された場合、その効果は、現在のスレッドが <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` から `initialCount`) 回を呼び出した場合と同じになります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-163">If `initialCount` is less than `maximumCount`, and a named system semaphore is created, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="8e7c5-164">ただし、このコンストラクターのオーバーロードでは、名前付きシステムセマフォが作成されたかどうかを判断する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-164">However, with this constructor overload there is no way to determine whether a named system semaphore was created.</span></span>  
  
 <span data-ttu-id="8e7c5-165">`name`に `null` または空の文字列を指定すると、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> コンストラクターのオーバーロードを呼び出した場合と同様に、ローカルセマフォが作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-165">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span>  
  
 <span data-ttu-id="8e7c5-166">名前付きセマフォはオペレーティングシステム全体にわたって表示されるため、プロセスの境界を越えてリソースの使用量を調整するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-166">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
 <span data-ttu-id="8e7c5-167">名前付きシステムセマフォが存在するかどうかを確認するには、<xref:System.Threading.Semaphore.OpenExisting%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-167">If you want to find out whether a named system semaphore exists, use the <xref:System.Threading.Semaphore.OpenExisting%2A> method.</span></span> <span data-ttu-id="8e7c5-168"><xref:System.Threading.Semaphore.OpenExisting%2A> メソッドは、既存の名前付きセマフォを開こうとし、システムセマフォが存在しない場合は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-168">The <xref:System.Threading.Semaphore.OpenExisting%2A> method attempts to open an existing named semaphore, and throws an exception if the system semaphore does not exist.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-169">名前付きセマフォのプロセス間の動作を示すコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-169">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="8e7c5-170">この例では、最大数が5で、初期カウントが5である名前付きセマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-170">The example creates a named semaphore with a maximum count of five and an initial count of five.</span></span> <span data-ttu-id="8e7c5-171">プログラムは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを3回呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-171">The program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="8e7c5-172">したがって、コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは <xref:System.Threading.WaitHandle.WaitOne%2A>の3回目の呼び出しでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-172">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="8e7c5-173">プログラムの最初のコピーの1つ以上のエントリを解放して、2番目のブロックのブロックを解除します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-173">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-174"><paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-174"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span>  
  
<span data-ttu-id="8e7c5-175">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-175">-or-</span></span> 
 <span data-ttu-id="8e7c5-176"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-176"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8e7c5-177"><paramref name="maximumCount" /> が 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-177"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="8e7c5-178">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-178">-or-</span></span> 
 <span data-ttu-id="8e7c5-179"><paramref name="initialCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-179"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-180">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-180">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-181">名前付きセマフォが存在し、それにアクセス制御セキュリティがあり、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-181">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="8e7c5-182">名前付きセマフォを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-182">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-183">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-183">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-184">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-184">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string * bool -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="8e7c5-185">同時に満たされるセマフォの要求の初期数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-185">The initial number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="8e7c5-186">同時に満たされるセマフォの要求の最大数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-186">The maximum number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="name"><span data-ttu-id="8e7c5-187">名前付きシステム セマフォ オブジェクトの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-187">The name of a named system semaphore object.</span></span></param>
        <param name="createdNew"><span data-ttu-id="8e7c5-188">このメソッドから制御が戻るときに、ローカル セマフォが作成された場合 (<see langword="true" /> が <paramref name="name" /> または空の文字列の場合)、または指定した名前付きシステム セマフォが作成された場合は <see langword="null" /> が格納されます。指定した名前付きシステム セマフォが既に存在する場合は <see langword="false" /> が格納されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-188">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span></span> <span data-ttu-id="8e7c5-189">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-189">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="8e7c5-190">エントリ数の初期値と同時実行エントリの最大数を指定し、オプションでシステム セマフォ オブジェクトの名前を指定し、新しいシステム セマフォが作成されたかどうかを示す値を受け取る変数を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-190">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-191">このコンストラクターは、名前付きシステムセマフォを表す <xref:System.Threading.Semaphore> オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-191">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="8e7c5-192">同じ名前付きシステムセマフォを表す複数の <xref:System.Threading.Semaphore> オブジェクトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-192">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-193">名前付きシステムセマフォが存在しない場合は、`initialCount` と `maximumCount`によって指定された初期カウントと最大カウントを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-193">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="8e7c5-194">名前付きシステムセマフォが既に存在する場合、`initialCount` と `maximumCount` は使用されませんが、無効な値でも例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-194">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="8e7c5-195">システムセマフォが作成されたかどうかを判断するには、`createdNew` を使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-195">Use `createdNew` to determine whether the system semaphore was created.</span></span>  
  
 <span data-ttu-id="8e7c5-196">`initialCount` が `maximumCount`未満で、`createdNew` が `true`場合、この効果は、現在のスレッドが <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount`-`initialCount`) を呼び出した場合と同じになります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-196">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="8e7c5-197">`name`に `null` または空の文字列を指定すると、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> コンストラクターのオーバーロードを呼び出した場合と同様に、ローカルセマフォが作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-197">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="8e7c5-198">この場合、`createdNew` は常に `true`です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-198">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="8e7c5-199">名前付きセマフォはオペレーティングシステム全体にわたって表示されるため、プロセスの境界を越えてリソースの使用量を調整するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-199">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-200">名前付きセマフォのプロセス間の動作を示すコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-200">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="8e7c5-201">この例では、最大数が5で、初期カウントが2である名前付きセマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-201">The example creates a named semaphore with a maximum count of five and an initial count of two.</span></span> <span data-ttu-id="8e7c5-202">つまり、コンストラクターを呼び出すスレッドに対して、3つのエントリが予約されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-202">That is, it reserves three entries for the thread that calls the constructor.</span></span> <span data-ttu-id="8e7c5-203">`createNew` が `false`場合、プログラムは <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを3回呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-203">If `createNew` is `false`, the program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="8e7c5-204">したがって、コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは <xref:System.Threading.WaitHandle.WaitOne%2A>の3回目の呼び出しでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-204">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="8e7c5-205">プログラムの最初のコピーの1つ以上のエントリを解放して、2番目のブロックのブロックを解除します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-205">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-206"><paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-206"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span>  
  
<span data-ttu-id="8e7c5-207">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-207">-or-</span></span> 
 <span data-ttu-id="8e7c5-208"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-208"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8e7c5-209"><paramref name="maximumCount" /> が 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-209"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="8e7c5-210">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-210">-or-</span></span> 
 <span data-ttu-id="8e7c5-211"><paramref name="initialCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-211"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-212">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-212">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-213">名前付きセマフォが存在し、それにアクセス制御セキュリティがあり、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-213">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="8e7c5-214">名前付きセマフォを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-214">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-215">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-215">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-216">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-216">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string * bool * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maximumCount" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="8e7c5-217">同時に満たされるセマフォの要求の初期数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-217">The initial number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="8e7c5-218">同時に満たされるセマフォの要求の最大数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-218">The maximum number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="name"><span data-ttu-id="8e7c5-219">名前付きシステム セマフォ オブジェクトの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-219">The name of a named system semaphore object.</span></span></param>
        <param name="createdNew"><span data-ttu-id="8e7c5-220">このメソッドから制御が戻るときに、ローカル セマフォが作成された場合 (<see langword="true" /> が <paramref name="name" /> または空の文字列の場合)、または指定した名前付きシステム セマフォが作成された場合は <see langword="null" /> が格納されます。指定した名前付きシステム セマフォが既に存在する場合は <see langword="false" /> が格納されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-220">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span></span> <span data-ttu-id="8e7c5-221">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-221">This parameter is passed uninitialized.</span></span></param>
        <param name="semaphoreSecurity"><span data-ttu-id="8e7c5-222">名前付きシステム セマフォに適用するアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-222">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span></span></param>
        <summary><span data-ttu-id="8e7c5-223">エントリ数の初期値と同時実行エントリの最大数を指定し、オプションでシステム セマフォ オブジェクトの名前を指定し、新しいシステム セマフォが作成されたかどうかを示す値を受け取る変数を指定し、システム セマフォのセキュリティ アクセス制御を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-223">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-224">このコンストラクターを使用して、名前付きシステムセマフォの作成時にアクセス制御セキュリティを適用し、他のコードがセマフォを制御できないようにします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-224">Use this constructor to apply access control security to a named system semaphore when it is created, preventing other code from taking control of the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-225">このコンストラクターは、名前付きシステムセマフォを表す <xref:System.Threading.Semaphore> オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-225">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="8e7c5-226">同じ名前付きシステムセマフォを表す複数の <xref:System.Threading.Semaphore> オブジェクトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-226">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-227">名前付きシステムセマフォが存在しない場合は、指定されたアクセス制御セキュリティを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-227">If the named system semaphore does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="8e7c5-228">名前付きセマフォが存在する場合、指定されたアクセス制御セキュリティは無視されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-228">If the named semaphore exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8e7c5-229">呼び出し元は、現在のユーザーに対して一部のアクセス権の付与を拒否または失敗した `semaphoreSecurity` 場合でも、新しく作成された <xref:System.Threading.Semaphore> オブジェクトを完全に制御できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-229">The caller has full control over the newly created <xref:System.Threading.Semaphore> object even if `semaphoreSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="8e7c5-230">ただし、現在のユーザーが、コンストラクターまたは <xref:System.Threading.Semaphore.OpenExisting%2A> のいずれかのメソッドを使用して、同じ名前付きセマフォを表すために別の <xref:System.Threading.Semaphore> オブジェクトを取得しようとすると、Windows アクセス制御セキュリティが適用されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-230">However, if the current user attempts to get another <xref:System.Threading.Semaphore> object to represent the same named semaphore, using either a constructor or the <xref:System.Threading.Semaphore.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="8e7c5-231">名前付きシステムセマフォが存在しない場合は、`initialCount` と `maximumCount`によって指定された初期カウントと最大カウントを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-231">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="8e7c5-232">名前付きシステムセマフォが既に存在する場合、`initialCount` と `maximumCount` は使用されませんが、無効な値でも例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-232">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="8e7c5-233">`createdNew` パラメーターを使用して、システムセマフォがこのコンストラクターによって作成されたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-233">Use the `createdNew` parameter to determine whether the system semaphore was created by this constructor.</span></span>  
  
 <span data-ttu-id="8e7c5-234">`initialCount` が `maximumCount`未満で、`createdNew` が `true`場合、この効果は、現在のスレッドが <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount`-`initialCount`) を呼び出した場合と同じになります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-234">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="8e7c5-235">`name`に `null` または空の文字列を指定すると、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> コンストラクターのオーバーロードを呼び出した場合と同様に、ローカルセマフォが作成されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-235">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="8e7c5-236">この場合、`createdNew` は常に `true`です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-236">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="8e7c5-237">名前付きセマフォはオペレーティングシステム全体にわたって表示されるため、プロセスの境界を越えてリソースの使用量を調整するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-237">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-238">次のコード例では、アクセス制御セキュリティを使用した名前付きセマフォのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-238">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="8e7c5-239">この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドオーバーロードを使用して、名前付きセマフォが存在するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-239">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span> <span data-ttu-id="8e7c5-240">セマフォが存在しない場合は、最大カウント2とアクセス制御セキュリティを使用して作成され、現在のユーザーがセマフォを使用する権限を拒否しますが、セマフォに対するアクセス許可の読み取りと変更の権限を付与します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-240">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span> <span data-ttu-id="8e7c5-241">コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドの呼び出しでアクセス違反例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-241">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="8e7c5-242">例外がキャッチされ、この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> メソッドオーバーロードを使用して、アクセス許可の読み取りと変更に必要な権限を持つセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-242">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="8e7c5-243">アクセス許可が変更されると、セマフォを入力して解放するために必要な権限を使用してセマフォが開かれます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-243">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="8e7c5-244">コンパイルされた例を3番目のコマンドウィンドウから実行すると、新しいアクセス許可を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-244">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-245"><paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-245"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span>  
  
<span data-ttu-id="8e7c5-246">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-246">-or-</span></span> 
 <span data-ttu-id="8e7c5-247"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-247"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8e7c5-248"><paramref name="maximumCount" /> が 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-248"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="8e7c5-249">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-249">-or-</span></span> 
 <span data-ttu-id="8e7c5-250"><paramref name="initialCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-250"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-251">名前付きセマフォが存在し、それにアクセス制御セキュリティがあり、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-251">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-252">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-252">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="8e7c5-253">名前付きセマフォを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-253">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-254">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-254">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-255">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-255">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8e7c5-256">名前付きシステム セマフォのアクセス制御セキュリティを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-256">Gets the access control security for a named system semaphore.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-257">名前付きシステム セマフォのアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-257">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-258"><xref:System.Threading.Semaphore.GetAccessControl%2A> メソッドは、(ビットごとの OR 演算を使用して組み合わされた) フラグの組み合わせを使用して、アクセス許可 (<xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>、<xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>、および <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>) を検索します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-258">The <xref:System.Threading.Semaphore.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8e7c5-259">ユーザーは、このメソッドを呼び出すための <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> 権限を持っている必要があり、<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> の権限でセマフォが開かれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-259">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights.</span></span>  
  
 <span data-ttu-id="8e7c5-260">ローカルセマフォでは、アクセス制御セキュリティは無関係です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-260">On a local semaphore, access control security is irrelevant.</span></span> <span data-ttu-id="8e7c5-261"><xref:System.Threading.Semaphore> オブジェクトが名前付きシステムセマフォを表していない場合、このメソッドは、すべてのユーザーに対してすべての権限を付与する <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-261">If the <xref:System.Threading.Semaphore> object does not represent a named system semaphore, this method returns a <xref:System.Security.AccessControl.SemaphoreSecurity> object that grants all rights to any user.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-262">次のコード例では、アクセス制御セキュリティを使用した名前付きセマフォのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-262">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="8e7c5-263">この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドオーバーロードを使用して、名前付きセマフォが存在するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-263">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-264">セマフォが存在しない場合は、最大カウント2とアクセス制御セキュリティを使用して作成され、現在のユーザーがセマフォを使用する権限を拒否します。ただし、セマフォに対するアクセス許可を読み取り、変更する権限を付与します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-264">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-265">コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドの呼び出しでアクセス違反例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-265">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="8e7c5-266">例外がキャッチされ、この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> メソッドオーバーロードを使用して、アクセス許可の読み取りと変更に必要な権限を持つセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-266">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span> <span data-ttu-id="8e7c5-267">システムセマフォのアクセス制御セキュリティは、<xref:System.Threading.Semaphore.GetAccessControl%2A> メソッドを使用して取得されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-267">The access control security for the system semaphore is obtained using the <xref:System.Threading.Semaphore.GetAccessControl%2A> method.</span></span>  
  
 <span data-ttu-id="8e7c5-268">アクセス許可が変更されると、セマフォを入力して解放するために必要な権限を使用してセマフォが開かれます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-268">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="8e7c5-269">コンパイルされた例を3番目のコマンドウィンドウから実行すると、新しいアクセス許可を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-269">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-270">現在の <see cref="T:System.Threading.Semaphore" /> オブジェクトは名前付きシステム セマフォを表していますが、ユーザーには <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-270">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span></span>  
  
<span data-ttu-id="8e7c5-271">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-271">-or-</span></span> 
<span data-ttu-id="8e7c5-272">現在の <see cref="T:System.Threading.Semaphore" /> オブジェクトは名前付きシステム セマフォを表していますが、 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 権限で開かれませんでした。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-272">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8e7c5-273">Windows 98 または Windows Millennium Edition はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-273">Not supported for Windows 98 or Windows Millennium Edition.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-274">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-274">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-275">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-275">Semaphore</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e7c5-276">既に存在する場合は、指定した名前付きセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-276">Opens a specified named semaphore, if it already exists.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e7c5-277">開くシステム セマフォの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-277">The name of the system semaphore to open.</span></span></param>
        <summary><span data-ttu-id="8e7c5-278">既に存在する場合は、指定した名前付きセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-278">Opens the specified named semaphore, if it already exists.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-279">名前付きシステム セマフォを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-279">An object that represents the named system semaphore.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-280"><xref:System.Threading.Semaphore.OpenExisting%2A> メソッドは、指定された名前付きセマフォを開こうとします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-280">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open the specified named semaphore.</span></span> <span data-ttu-id="8e7c5-281">システムセマフォが存在しない場合、このメソッドはシステムセマフォを作成するのではなく、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-281">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="8e7c5-282">システムセマフォがまだ存在しない場合に作成するには、`name` パラメーターを持つ <xref:System.Threading.Semaphore.%23ctor%2A> コンストラクターのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-282">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="8e7c5-283">`name` に同じ値を使用するこのメソッドを複数回呼び出すことは、返されるオブジェクトが同じ名前付きシステムセマフォを表す場合でも、必ずしも同じ <xref:System.Threading.Semaphore> オブジェクトを返すとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-283">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-284">このメソッドオーバーロードは、ビットごとの OR 演算を使用して、<xref:System.Threading.Semaphore.OpenExisting%2A> メソッドオーバーロードを呼び出し、<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> および <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 権限を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-284">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.OpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="8e7c5-285"><xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> フラグを指定すると、スレッドはセマフォに入ることができ、<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> フラグを指定すると、スレッドは <xref:System.Threading.Semaphore.Release%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-285">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-286">次のコード例では、アクセス制御セキュリティを使用した名前付きセマフォのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-286">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="8e7c5-287">この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドオーバーロードを使用して、名前付きセマフォが存在するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-287">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-288">セマフォが存在しない場合は、最大カウント2とアクセス制御セキュリティを使用して作成されます。これにより、現在のユーザーがセマフォを使用する権限を拒否しますが、セマフォに対するアクセス許可の読み取りと変更の権限が付与されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-288">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but which grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-289">コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドのオーバーロードの呼び出しでアクセス違反例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-289">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload.</span></span> <span data-ttu-id="8e7c5-290">例外がキャッチされ、この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> メソッドオーバーロードを使用して、アクセス許可の読み取りと変更に必要な権限を持つセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-290">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="8e7c5-291">アクセス許可が変更されると、セマフォを入力および解放するために必要な権限を使用してセマフォが開かれます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-291">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="8e7c5-292">コンパイルされた例を3番目のコマンドウィンドウから実行すると、新しいアクセス許可を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-292">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-293"><paramref name="name" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-293"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="8e7c5-294">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-294">-or-</span></span> 
 <span data-ttu-id="8e7c5-295"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-295"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8e7c5-296"><paramref name="name" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-296"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="8e7c5-297">名前付きセマフォが存在しません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-297">The named semaphore does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-298">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-298">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-299">名前付きセマフォは存在しますが、ユーザーにはそれを使用するために必要なセキュリティ アクセスがありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-299">The named semaphore exists, but the user does not have the security access required to use it.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-300">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-300">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-301">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-301">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e7c5-302">開くシステム セマフォの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-302">The name of the system semaphore to open.</span></span></param>
        <param name="rights"><span data-ttu-id="8e7c5-303">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-303">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <summary><span data-ttu-id="8e7c5-304">既に存在する場合は、必要なセキュリティ アクセスで指定した名前付きセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-304">Opens the specified named semaphore, if it already exists, with the desired security access.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-305">名前付きシステム セマフォを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-305">An object that represents the named system semaphore.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-306">`rights` パラメーターには、スレッドがセマフォに入ることを可能にするための <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> フラグと、スレッドが <xref:System.Threading.Semaphore.Release%2A> メソッドを呼び出すことができるようにするための <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> フラグを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-306">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="8e7c5-307"><xref:System.Threading.Semaphore.OpenExisting%2A> メソッドは、既存の名前付きセマフォを開こうとします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-307">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open an existing named semaphore.</span></span> <span data-ttu-id="8e7c5-308">システムセマフォが存在しない場合、このメソッドはシステムセマフォを作成するのではなく、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-308">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="8e7c5-309">システムセマフォがまだ存在しない場合に作成するには、`name` パラメーターを持つ <xref:System.Threading.Semaphore.%23ctor%2A> コンストラクターのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-309">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="8e7c5-310">`name` に同じ値を使用するこのメソッドを複数回呼び出すことは、返されるオブジェクトが同じ名前付きシステムセマフォを表す場合でも、必ずしも同じ <xref:System.Threading.Semaphore> オブジェクトを返すとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-310">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-311">次のコード例では、アクセス制御セキュリティを使用した名前付きセマフォのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-311">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="8e7c5-312">この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドオーバーロードを使用して、名前付きセマフォが存在するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-312">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-313">セマフォが存在しない場合は、最大カウント2とアクセス制御セキュリティを使用して作成され、現在のユーザーがセマフォを使用する権限を拒否します。ただし、セマフォに対するアクセス許可を読み取り、変更する権限を付与します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-313">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-314">コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドの呼び出しでアクセス違反例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-314">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="8e7c5-315">例外がキャッチされ、この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> メソッドオーバーロードを使用して、アクセス許可の読み取りと変更に必要な権限を持つセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-315">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="8e7c5-316">アクセス許可が変更されると、セマフォを入力および解放するために必要な権限を使用してセマフォが開かれます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-316">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="8e7c5-317">コンパイルされた例を3番目のコマンドウィンドウから実行すると、新しいアクセス許可を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-317">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-318"><paramref name="name" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-318"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="8e7c5-319">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-319">-or-</span></span> 
 <span data-ttu-id="8e7c5-320"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-320"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8e7c5-321"><paramref name="name" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-321"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="8e7c5-322">名前付きセマフォが存在しません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-322">The named semaphore does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-323">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-323">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-324">名前付きセマフォは存在しますが、必要なセキュリティ アクセス権がユーザーにありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-324">The named semaphore exists, but the user does not have the desired security access rights.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-325">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-325">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-326">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-326">Semaphore</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e7c5-327">セマフォから出ます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-327">Exits the semaphore.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8e7c5-328">セマフォから出て、前のカウントを返します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-328">Exits the semaphore and returns the previous count.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-329"><see cref="Overload:System.Threading.Semaphore.Release" /> メソッドが呼び出される前のセマフォのカウント。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-329">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-330">スレッドは通常、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを使用してセマフォに入ります。通常、スレッドはこのメソッドオーバーロードを使用して終了します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-330">Threads typically use the <xref:System.Threading.WaitHandle.WaitOne%2A> method to enter the semaphore, and they typically use this method overload to exit.</span></span>  
  
 <span data-ttu-id="8e7c5-331"><xref:System.Threading.SemaphoreFullException> が <xref:System.Threading.Semaphore.Release%2A> メソッドによってスローされた場合、必ずしも呼び出し元のスレッドに問題があるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-331">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="8e7c5-332">別のスレッドでプログラミングエラーが発生したため、スレッドは、入力した数よりも多くのスレッドを終了している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-332">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="8e7c5-333">現在の <xref:System.Threading.Semaphore> オブジェクトが名前付きシステムセマフォを表している場合、ユーザーは <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 権限を持っている必要があり、セマフォは <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 権限で開かれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-333">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-334">次のコード例では、最大数が3で、初期カウントが0のセマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-334">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="8e7c5-335">この例では、5つのスレッドを開始します。これは、セマフォを待機しています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-335">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="8e7c5-336">メインスレッドは、<xref:System.Threading.Semaphore.Release%28System.Int32%29> メソッドのオーバーロードを使用して、セマフォの数を最大値に増やし、3つのスレッドがセマフォに入るようにします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-336">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="8e7c5-337">各スレッドは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを使用して1秒間待機し、作業をシミュレートした後、<xref:System.Threading.Semaphore.Release> メソッドオーバーロードを呼び出して、セマフォを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-337">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-338">セマフォが解放されるたびに、前のセマフォ数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-338">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="8e7c5-339">コンソールメッセージは、セマフォの使用を追跡します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-339">Console messages track semaphore use.</span></span> <span data-ttu-id="8e7c5-340">シミュレートされた作業間隔は、出力を読みやすくするために、スレッドごとに若干増加します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-340">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="8e7c5-341">セマフォのカウントは既に最大値です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-341">The semaphore count is already at the maximum value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-342">名前付きセマフォで Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-342">A Win32 error occurred with a named semaphore.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-343">現在のセマフォは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-343">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span></span>  
  
<span data-ttu-id="8e7c5-344">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-344">-or-</span></span> 
<span data-ttu-id="8e7c5-345">現在のセマフォは名前付きシステム セマフォを表していますが、<see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> で開かれませんでした。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-345">The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-346">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-346">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-347">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-347">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="8e7c5-348">セマフォから出る回数。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-348">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="8e7c5-349">指定した回数だけセマフォから出て、前のカウントを返します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-349">Exits the semaphore a specified number of times and returns the previous count.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-350"><see cref="Overload:System.Threading.Semaphore.Release" /> メソッドが呼び出される前のセマフォのカウント。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-350">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-351">スレッドがセマフォに複数回入力した場合、このメソッドオーバーロードを使用すると、1回の呼び出しでセマフォ全体のカウントを復元できます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-351">If a thread has entered the semaphore multiple times, this method overload allows the entire semaphore count to be restored with one call.</span></span>  
  
 <span data-ttu-id="8e7c5-352"><xref:System.Threading.SemaphoreFullException> が <xref:System.Threading.Semaphore.Release%2A> メソッドによってスローされた場合、必ずしも呼び出し元のスレッドに問題があるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-352">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="8e7c5-353">別のスレッドでプログラミングエラーが発生したため、スレッドは、入力した数よりも多くのスレッドを終了している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-353">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="8e7c5-354">現在の <xref:System.Threading.Semaphore> オブジェクトが名前付きシステムセマフォを表している場合、ユーザーは <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 権限を持っている必要があり、セマフォは <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 権限で開かれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-354">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-355">次のコード例では、最大数が3で、初期カウントが0のセマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-355">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="8e7c5-356">この例では、5つのスレッドを開始します。これは、セマフォを待機しています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-356">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="8e7c5-357">メインスレッドは、<xref:System.Threading.Semaphore.Release%28System.Int32%29> メソッドのオーバーロードを使用して、セマフォの数を最大値に増やし、3つのスレッドがセマフォに入るようにします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-357">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="8e7c5-358">各スレッドは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを使用して1秒間待機し、作業をシミュレートした後、<xref:System.Threading.Semaphore.Release> メソッドオーバーロードを呼び出して、セマフォを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-358">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-359">セマフォが解放されるたびに、前のセマフォ数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-359">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="8e7c5-360">コンソールメッセージは、セマフォの使用を追跡します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-360">Console messages track semaphore use.</span></span> <span data-ttu-id="8e7c5-361">シミュレートされた作業間隔は、出力を読みやすくするために、スレッドごとに若干増加します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-361">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8e7c5-362"><paramref name="releaseCount" /> が 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-362"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="8e7c5-363">セマフォのカウントは既に最大値です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-363">The semaphore count is already at the maximum value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-364">名前付きセマフォで Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-364">A Win32 error occurred with a named semaphore.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-365">現在のセマフォは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-365">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span></span>  
  
<span data-ttu-id="8e7c5-366">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-366">-or-</span></span> 
<span data-ttu-id="8e7c5-367">現在のセマフォは名前付きシステム セマフォを表していますが、<see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 権限で開かれませんでした。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-367">The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-368">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-368">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-369">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-369">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity"><span data-ttu-id="8e7c5-370">名前付きシステム セマフォに適用するアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-370">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span></span></param>
        <summary><span data-ttu-id="8e7c5-371">名前付きシステム セマフォのアクセス制御セキュリティを設定します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-371">Sets the access control security for a named system semaphore.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-372">アクセス制御セキュリティを設定できるのは、名前付きシステムセマフォを表す <xref:System.Threading.Semaphore> オブジェクトだけです。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-372">You can set access control security only on <xref:System.Threading.Semaphore> objects that represent named system semaphores.</span></span>  
  
 <span data-ttu-id="8e7c5-373">ユーザーは、このメソッドを呼び出すための <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> 権限を持っている必要があり、<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> の権限でセマフォが開かれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-373">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e7c5-374">次のコード例では、アクセス制御セキュリティを使用した名前付きセマフォのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-374">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="8e7c5-375">この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドオーバーロードを使用して、名前付きセマフォが存在するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-375">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-376">セマフォが存在しない場合は、最大カウント2とアクセス制御セキュリティを使用して作成され、現在のユーザーがセマフォを使用する権限を拒否しますが、セマフォに対するアクセス許可の読み取りと変更の権限を付与します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-376">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="8e7c5-377">コンパイルされた例を2つのコマンドウィンドウから実行した場合、2番目のコピーは、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドの呼び出しでアクセス違反例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-377">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="8e7c5-378">例外がキャッチされ、この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> メソッドオーバーロードを使用して、アクセス許可の読み取りと変更に必要な権限を持つセマフォを開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-378">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="8e7c5-379">アクセス許可が変更された後、<xref:System.Threading.Semaphore.SetAccessControl%2A> メソッドを使用して、セマフォを入力および解放するために必要な権限を使用して開きます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-379">After the permissions are changed, using the <xref:System.Threading.Semaphore.SetAccessControl%2A> method, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="8e7c5-380">コンパイルされた例を3番目のコマンドウィンドウから実行すると、新しいアクセス許可を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-380">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8e7c5-381"><paramref name="semaphoreSecurity" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-381"><paramref name="semaphoreSecurity" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-382">ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-382">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span></span>  
  
<span data-ttu-id="8e7c5-383">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-383">-or-</span></span> 
<span data-ttu-id="8e7c5-384">セマフォは <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 権限で開かれませんでした。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-384">The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8e7c5-385">現在の <see cref="T:System.Threading.Semaphore" /> オブジェクトは名前付きシステム セマフォを表していません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-385">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8e7c5-386">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8e7c5-386">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="8e7c5-387">Semaphore</span><span class="sxs-lookup"><span data-stu-id="8e7c5-387">Semaphore</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e7c5-388">既に存在する場合は、指定した名前付きセマフォを開き操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-388">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * Semaphore -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e7c5-389">開くシステム セマフォの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-389">The name of the system semaphore to open.</span></span></param>
        <param name="result"><span data-ttu-id="8e7c5-390">このメソッドから制御が戻るときに、呼び出しに成功した場合は名前付きセマフォを表す <see cref="T:System.Threading.Semaphore" /> オブジェクトが格納されます。呼び出しに失敗した場合は <see langword="null" /> が格納されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-390">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="8e7c5-391">このパラメーターは未初期化として扱われます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-391">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="8e7c5-392">既に存在する場合は、指定した名前付きセマフォを開き操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-392">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-393">名前付きのセマフォが正常に開かれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-393"><see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-394">名前付きセマフォが存在しない場合、このメソッドはそれを作成しません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-394">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="8e7c5-395">システムセマフォがまだ存在しない場合に作成するには、`name` パラメーターを持つ <xref:System.Threading.Semaphore.%23ctor%2A> コンストラクターのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-395">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="8e7c5-396">名前付きセマフォが存在するかどうかが不明な場合は、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29> メソッドオーバーロードではなく、このメソッドオーバーロードを使用します。これにより、セマフォが存在しない場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-396">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="8e7c5-397">このメソッドオーバーロードは、ビットごとの OR 演算を使用して、<xref:System.Threading.Semaphore.TryOpenExisting%2A> メソッドオーバーロードを呼び出し、<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> および <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 権限を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-397">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.TryOpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="8e7c5-398"><xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> フラグを指定すると、スレッドはセマフォに入ることができ、<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> フラグを指定すると、スレッドは <xref:System.Threading.Semaphore.Release%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-398">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the   <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-399"><paramref name="name" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-399"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="8e7c5-400">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-400">-or-</span></span> 
 <span data-ttu-id="8e7c5-401"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-401"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8e7c5-402"><paramref name="name" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-402"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-403">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-403">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-404">名前付きセマフォは存在しますが、ユーザーにはそれを使用するために必要なセキュリティ アクセスがありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-404">The named semaphore exists, but the user does not have the security access required to use it.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights * Semaphore -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e7c5-405">開くシステム セマフォの名前。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-405">The name of the system semaphore to open.</span></span></param>
        <param name="rights"><span data-ttu-id="8e7c5-406">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-406">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <param name="result"><span data-ttu-id="8e7c5-407">このメソッドから制御が戻るときに、呼び出しに成功した場合は名前付きセマフォを表す <see cref="T:System.Threading.Semaphore" /> オブジェクトが格納されます。呼び出しに失敗した場合は <see langword="null" /> が格納されます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-407">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="8e7c5-408">このパラメーターは未初期化として扱われます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-408">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="8e7c5-409">既に存在する場合は、必要なセキュリティ アクセスを使って指定した名前付きセマフォを開き、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-409">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="8e7c5-410">名前付きのセマフォが正常に開かれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-410"><see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e7c5-411">名前付きセマフォが存在しない場合、このメソッドはそれを作成しません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-411">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="8e7c5-412">システムセマフォがまだ存在しない場合に作成するには、`name` パラメーターを持つ <xref:System.Threading.Semaphore.%23ctor%2A> コンストラクターのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-412">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="8e7c5-413">名前付きセマフォが存在するかどうかが不明な場合は、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> メソッドオーバーロードではなく、このメソッドオーバーロードを使用します。これにより、セマフォが存在しない場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-413">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="8e7c5-414">`rights` パラメーターには、スレッドがセマフォに入ることを可能にするための <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> フラグと、スレッドが <xref:System.Threading.Semaphore.Release%2A> メソッドを呼び出すことができるようにするための <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> フラグを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-414">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="8e7c5-415">`name` に同じ値を使用するこのメソッドを複数回呼び出すことは、返されるオブジェクトが同じ名前付きシステムセマフォを表す場合でも、必ずしも同じ <xref:System.Threading.Semaphore> オブジェクトを返すとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-415">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8e7c5-416"><paramref name="name" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-416"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="8e7c5-417">または</span><span class="sxs-lookup"><span data-stu-id="8e7c5-417">-or-</span></span> 
 <span data-ttu-id="8e7c5-418"><paramref name="name" /> が 260 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-418"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8e7c5-419"><paramref name="name" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-419"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8e7c5-420">Win32 エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-420">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="8e7c5-421">名前付きセマフォは存在しますが、ユーザーにはそれを使用するために必要なセキュリティ アクセスがありません。</span><span class="sxs-lookup"><span data-stu-id="8e7c5-421">The named semaphore exists, but the user does not have the security access required to use it.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
