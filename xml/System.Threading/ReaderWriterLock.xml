<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd429f03843f931a0285a89a893ee1aa7ced9ae2" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116073" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <TypeSignature Language="F#" Value="type ReaderWriterLock = class&#xA;    inherit CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="98e6c-101">単一ライターと複数リーダーをサポートするロックを定義します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-101">Defines a lock that supports single writers and multiple readers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="98e6c-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] には、<xref:System.Threading.ReaderWriterLockSlim> と <xref:System.Threading.ReaderWriterLock> という 2 つのリーダー/ライター ロックがあります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="98e6c-103">すべての新規開発で、<xref:System.Threading.ReaderWriterLockSlim> を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="98e6c-104"><xref:System.Threading.ReaderWriterLockSlim> は <xref:System.Threading.ReaderWriterLock> と似ていますが、再帰の規則や、ロック状態のアップグレードおよびダウングレードの規則が簡素化されています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="98e6c-105"><xref:System.Threading.ReaderWriterLockSlim> は、デッドロックの可能性を大幅に回避します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="98e6c-106">さらに、<xref:System.Threading.ReaderWriterLockSlim> のパフォーマンスは <xref:System.Threading.ReaderWriterLock> と比較して格段に優れています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="98e6c-107"><xref:System.Threading.ReaderWriterLock> は、リソースへのアクセスを同期するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="98e6c-108">任意の時点で、複数のスレッドに対する同時読み取りアクセス、または1つのスレッドに対する書き込みアクセスが許可されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="98e6c-109">リソースが頻繁に変更されない状況では、`ReaderWriterLock` は、<xref:System.Threading.Monitor>などの単純な1回限りのロックよりもスループットが向上します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="98e6c-110">`ReaderWriterLock` は、ほとんどのアクセスが読み取りであり、書き込みは頻繁で短時間で行われるので、最適に機能します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="98e6c-111">複数のリーダーが1つのライターと交互に使用されるため、読み取りと書き込みのどちらも長期間ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6c-112">リーダーロックまたはライターロックを長時間保持すると、他のスレッドが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="98e6c-113">最適なパフォーマンスを得るには、書き込みの実行時間を最小限に抑えるようにアプリケーションを再構築することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="98e6c-114">スレッドは、リーダーロックまたはライターロックを保持できますが、両方を同時に保持することはできません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="98e6c-115">ライターロックを取得するためにリーダーロックを解放するのではなく、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> と <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>を使用できます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="98e6c-116">再帰ロック要求は、ロックのロック数を増やします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="98e6c-117">リーダーとライターは個別にキューに配置されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="98e6c-118">スレッドがライターロックを解放すると、その時点でリーダーキューで待機しているすべてのスレッドにリーダーロックが付与されます。これらのリーダーロックがすべて解放されると、ライターキューで待機している次のスレッド (存在する場合) には、ライターロックが付与されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="98e6c-119">言い換えると、`ReaderWriterLock` リーダーのコレクションと1つのライターの間で代替ができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="98e6c-120">ライターキュー内のスレッドがアクティブなリーダーロックを解放するのを待機している間、新しいリーダーロックを要求しているスレッドがリーダーキューに蓄積されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="98e6c-121">既存のリーダーロックの所有者との同時アクセスを共有できる場合でも、要求は許可されません。これは、リーダーによってブロックされないようにライターを保護するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="98e6c-122">`ReaderWriterLock` のロックを取得するほとんどのメソッドは、タイムアウト値を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="98e6c-123">アプリケーションでデッドロックを回避するには、タイムアウトを使用します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="98e6c-124">たとえば、あるスレッドが1つのリソースに対してライターロックを取得し、2番目のリソースにリーダーロックを要求する場合があります。その間に、別のスレッドが2番目のリソースのライターロックを取得し、最初にリーダーロックを要求する場合があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="98e6c-125">タイムアウトが使用されていない限り、スレッドはデッドロック状態になります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="98e6c-126">タイムアウト間隔が経過し、ロック要求が許可されていない場合、メソッドは <xref:System.ApplicationException>をスローすることによって、呼び出し元スレッドに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="98e6c-127">スレッドは、この例外をキャッチし、次に実行するアクションを決定することができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="98e6c-128">タイムアウトはミリ秒単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="98e6c-129">タイムアウトを指定するために <xref:System.TimeSpan?displayProperty=nameWithType> を使用する場合、使用される値は、<xref:System.TimeSpan>によって表される整数のミリ秒単位の合計数です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="98e6c-130">次の表に、有効なタイムアウト値をミリ秒単位で示します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="98e6c-131">[値]</span><span class="sxs-lookup"><span data-stu-id="98e6c-131">Value</span></span>|<span data-ttu-id="98e6c-132">説明</span><span class="sxs-lookup"><span data-stu-id="98e6c-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="98e6c-133">-1</span><span class="sxs-lookup"><span data-stu-id="98e6c-133">-1</span></span>|<span data-ttu-id="98e6c-134">スレッドは、時間の長さに関係なく、ロックが取得されるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="98e6c-135">整数のタイムアウトを指定するメソッドの場合、定数 <xref:System.Threading.Timeout.Infinite> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="98e6c-136">0</span><span class="sxs-lookup"><span data-stu-id="98e6c-136">0</span></span>|<span data-ttu-id="98e6c-137">スレッドがロックの取得を待機していません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="98e6c-138">ロックをすぐに取得できない場合、メソッドはを返します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="98e6c-139">>0</span><span class="sxs-lookup"><span data-stu-id="98e6c-139">>0</span></span>|<span data-ttu-id="98e6c-140">ミリ秒数単位の待機時間。</span><span class="sxs-lookup"><span data-stu-id="98e6c-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="98e6c-141">-1 を除き、負のタイムアウト値は使用できません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="98e6c-142">-1 以外の負の整数を指定した場合は、代わりにタイムアウト値0が使用されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="98e6c-143">(つまり、ロックをすぐに取得できない場合、メソッドは待機せずに制御を戻します)。-1 以外の負のミリ秒数を表す <xref:System.TimeSpan> を指定した場合、<xref:System.ArgumentOutOfRangeException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-144">次の例では、<xref:System.Threading.ReaderWriterLock> を使用して、共有リソース (`resource`という整数値) を保護しています。これは、同時に読み取りが行われ、複数のスレッドによって排他的に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="98e6c-145"><xref:System.Threading.ReaderWriterLock> はクラスレベルで宣言されるので、すべてのスレッドから参照できます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="98e6c-146">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="98e6c-146">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-147">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-147">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-148">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-148">ReaderWriterLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98e6c-149"><see cref="T:System.Threading.ReaderWriterLock" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-149">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="98e6c-150">次のコード例は、<xref:System.Threading.ReaderWriterLock> クラスの新しいインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-150">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="98e6c-151">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-151">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-152">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-152">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-153">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-153">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98e6c-154">リーダー ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-154">Acquires a reader lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : int -&gt; unit" Usage="readerWriterLock.AcquireReaderLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="98e6c-155">ミリ秒単位のタイムアウト。</span><span class="sxs-lookup"><span data-stu-id="98e6c-155">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="98e6c-156">タイムアウトに <see cref="T:System.Int32" /> 値を使用して、リーダー ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-156">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-157">別のスレッドにライターロックがある場合、または少なくとも1つのスレッドがライターロックを待機している場合は、<xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> ブロックします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6c-158">現在のスレッドにライターロックが既に存在する場合、リーダーロックは取得されません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-158">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="98e6c-159">代わりに、ライターロックのロック数が増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-159">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="98e6c-160">これにより、スレッドが独自のライターロックでブロックされるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-160">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="98e6c-161">結果は <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>の呼び出しとまったく同じであり、ライターロックを解除するときに <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> への追加の呼び出しが必要になります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-161">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="98e6c-162">`AcquireReaderLock` は、再帰的なリーダーロック要求をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-162">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="98e6c-163">つまり、スレッドは AcquireReaderLock を複数回呼び出すことができます。これにより、毎回ロック数が増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-163">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="98e6c-164">`AcquireReaderLock`を呼び出すたびに <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-164">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="98e6c-165">または、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> を呼び出して、ロックカウントをすぐに0に減らすこともできます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-165">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="98e6c-166">再帰ロック要求は、要求側のスレッドをリーダーキューに配置せずに、常に直ちに許可されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-166">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="98e6c-167">長時間にわたってライターロック要求がブロックされないように、再帰ロックは慎重に使用してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-167">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="98e6c-168">有効なタイムアウト値については、「<xref:System.Threading.ReaderWriterLock>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-168">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-169">次のコード例は、リーダーロックを取得して解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-169">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="98e6c-170">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-170">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-171"><paramref name="millisecondsTimeout" /> は、ロック要求が許可される前に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-171"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-172">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-172">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-173">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-173">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireReaderLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="98e6c-174">タイムアウト期間を指定する <see langword="TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-174">A <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="98e6c-175">タイムアウトに <see cref="T:System.TimeSpan" /> 値を使用して、リーダー ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-175">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-176">別のスレッドにライターロックがある場合、または少なくとも1つのスレッドがライターロックを待機している場合は、<xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> ブロックします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6c-177">現在のスレッドにライターロックが既に存在する場合、リーダーロックは取得されません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-177">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="98e6c-178">代わりに、ライターロックのロック数が増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-178">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="98e6c-179">これにより、スレッドが独自のライターロックでブロックされるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-179">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="98e6c-180">結果は <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>の呼び出しとまったく同じであり、ライターロックを解除するときに <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> への追加の呼び出しが必要になります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-180">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="98e6c-181">`AcquireReaderLock` は、再帰的なリーダーロック要求をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-181">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="98e6c-182">つまり、スレッドは AcquireReaderLock を複数回呼び出すことができます。これにより、毎回ロック数が増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-182">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="98e6c-183">`AcquireReaderLock`を呼び出すたびに <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-183">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="98e6c-184">または、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> を呼び出して、ロックカウントをすぐに0に減らすこともできます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-184">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="98e6c-185">再帰ロック要求は、要求側のスレッドをリーダーキューに配置せずに、常に直ちに許可されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-185">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="98e6c-186">長時間にわたってライターロック要求がブロックされないように、再帰ロックは慎重に使用してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-186">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="98e6c-187">有効なタイムアウト値については、「<xref:System.Threading.ReaderWriterLock>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-187">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-188"><paramref name="timeout" /> は、ロック要求が許可される前に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-188"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98e6c-189"><paramref name="timeout" /> は、-1 ミリ秒以外の負の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-189"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-190">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-190">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-191">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-191">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98e6c-192">ライター ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-192">Acquires the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : int -&gt; unit" Usage="readerWriterLock.AcquireWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="98e6c-193">ミリ秒単位のタイムアウト。</span><span class="sxs-lookup"><span data-stu-id="98e6c-193">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="98e6c-194">タイムアウトに <see cref="T:System.Int32" /> 値を使用して、ライター ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-194">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-195">このメソッドは、別のスレッドがリーダーロックまたはライターロックを保持している場合にブロックします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-195">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="98e6c-196">ライターロックを複数のリーダーの同時実行ロックと交互に切り替える方法の詳細については、<xref:System.Threading.ReaderWriterLock> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-196">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="98e6c-197">リーダーロックが既に保持されているスレッドは、次の2つの方法のいずれかでライターロックを取得できます。 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>を呼び出す前にリーダーロックを解放するか、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-197">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98e6c-198">スレッドがリーダーロックを保持している間に `AcquireWriterLock` を呼び出すと、自身のリーダーロックでブロックされます。タイムアウトを無制限に指定すると、スレッドはデッドロック状態になります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-198">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="98e6c-199">このようなデッドロックを回避するには、<xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> を使用して、現在のスレッドがリーダーロックを既に持っているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-199">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="98e6c-200">`AcquireWriterLock` は、再帰的なライターロック要求をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-200">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="98e6c-201">つまり、スレッドは `AcquireWriterLock` を複数回呼び出すことができます。これにより、毎回ロック数が増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-201">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="98e6c-202">`AcquireWriterLock`を呼び出すたびに <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-202">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="98e6c-203">または、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> を呼び出して、ロックカウントをすぐに0に減らすこともできます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-203">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="98e6c-204">要求元のスレッドをライターキューに配置せずに、再帰的なロック要求は常にすぐに許可されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-204">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="98e6c-205">有効なタイムアウト値については、「<xref:System.Threading.ReaderWriterLock>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-205">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-206">次のコード例は、ライターロックを取得して解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-206">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="98e6c-207">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-207">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-208"><paramref name="timeout" /> は、ロック要求が許可される前に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-208"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-209">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-209">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-210">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-210">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="98e6c-211">タイムアウト期間を指定する <see langword="TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-211">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="98e6c-212">タイムアウトに <see cref="T:System.TimeSpan" /> 値を使用して、ライター ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-212">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-213">このメソッドは、別のスレッドがリーダーロックまたはライターロックを保持している場合にブロックします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-213">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="98e6c-214">ライターロックを複数のリーダーの同時実行ロックと交互に切り替える方法の詳細については、<xref:System.Threading.ReaderWriterLock> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-214">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="98e6c-215">リーダーロックが既に保持されているスレッドは、次の2つの方法のいずれかでライターロックを取得できます。 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>を呼び出す前にリーダーロックを解放するか、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-215">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98e6c-216">スレッドがリーダーロックを保持している間に `AcquireWriterLock` を呼び出すと、自身のリーダーロックでブロックされます。タイムアウトを無制限に指定すると、スレッドはデッドロック状態になります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-216">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="98e6c-217">このようなデッドロックを回避するには、<xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> を使用して、現在のスレッドがリーダーロックを既に持っているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-217">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="98e6c-218">`AcquireWriterLock` は、再帰的なライターロック要求をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-218">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="98e6c-219">つまり、スレッドは `AcquireWriterLock` を複数回呼び出すことができます。これにより、毎回ロック数が増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-219">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="98e6c-220">`AcquireWriterLock`を呼び出すたびに <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-220">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="98e6c-221">または、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> を呼び出して、ロックカウントをすぐに0に減らすこともできます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-221">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="98e6c-222">要求元のスレッドをライターキューに配置せずに、再帰的なロック要求は常にすぐに許可されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-222">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="98e6c-223">有効なタイムアウト値については、「<xref:System.Threading.ReaderWriterLock>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-223">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-224"><paramref name="timeout" /> は、ロック要求が許可される前に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-224"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98e6c-225"><paramref name="timeout" /> は、-1 ミリ秒以外の負の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-225"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-226">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-226">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-227">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-227">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberSignature Language="F#" Value="member this.AnyWritersSince : int -&gt; bool" Usage="readerWriterLock.AnyWritersSince seqNum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum"><span data-ttu-id="98e6c-228">シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="98e6c-228">The sequence number.</span></span></param>
        <summary><span data-ttu-id="98e6c-229">シーケンス番号の取得後にライター ロックを取得したスレッドがあったかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-229">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span></span></summary>
        <returns><span data-ttu-id="98e6c-230">シーケンス番号の取得後にライター ロックを取得したスレッドがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-230"><see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-231"><xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> と `AnyWritersSince` を使用して、アプリケーションのパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-231">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="98e6c-232">たとえば、リーダーロックを保持している間に取得した情報がスレッドによってキャッシュされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-232">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="98e6c-233">Reacquiring を解放して後でロックを解除すると、スレッドは `AnyWritersSince` を使用して、他のスレッドがリソースに一時的に書き込まれたかどうかを判断できます。それ以外の場合は、キャッシュされた情報を使用できます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-233">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="98e6c-234">この手法は、ロックによって保護されている情報の読み取りに負荷がかかる場合に便利です。たとえば、データベースクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-234">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="98e6c-235">シーケンス番号が役立つようにするには、呼び出し元がリーダーロックまたはライターロックを保持している必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-235">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-236">次のコード例は、<xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> メソッドと <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> プロパティを使用して、現在のスレッドが最後にライターロックを保持した後に、保護されたリソースに対して別のスレッドがライターロックを取得したかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-236">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="98e6c-237">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-237">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-238">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-238">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-239">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-239">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.DowngradeFromWriterLock : LockCookie -&gt; unit" Usage="readerWriterLock.DowngradeFromWriterLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="98e6c-240"><see cref="T:System.Threading.LockCookie" /> によって戻される <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-240">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="98e6c-241">スレッドのロック ステータスを、<see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> を呼び出す前の状態に復元します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-241">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> は、再帰ロックカウントに関係なくライターロックを解放し、ライターロックにアップグレードする前にスレッドによって保持されていたリーダーロックを復元します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="98e6c-243">リーダーロックのロック数が復元されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-243">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6c-244">`DowngradeFromWriterLock` は <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>を呼び出すことによって取得された <xref:System.Threading.LockCookie> を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-244">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="98e6c-245"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>によって返された `LockCookie` は使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-245">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="98e6c-246">ライターロックが解放されると、他のスレッドがライターロックを待機している場合でも、スレッドはライターロックからのダウングレード時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-246">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-247">次のコード例では、リーダーロックを要求し、リーダーロックをライターロックにアップグレードして、リーダーロックを再びダウングレードする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-247">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="98e6c-248">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-248">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-249">スレッドがライター ロックを保持していません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-249">The thread does not have the writer lock.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="98e6c-250"><paramref name="lockCookie" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="98e6c-250">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-251">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-251">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-252">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-252">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="readerWriterLock.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98e6c-253">ガベージ コレクターが <see cref="T:System.Threading.ReaderWriterLock" /> オブジェクトを再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-253">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-254">現在の <xref:System.Threading.ReaderWriterLock> オブジェクトを完了する準備が整うと、ガベージコレクターは <xref:System.Threading.ReaderWriterLock.Finalize%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-254">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReaderLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98e6c-255">現在のスレッドがリーダー ロックを保持しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-255">Gets a value indicating whether the current thread holds a reader lock.</span></span></summary>
        <value><span data-ttu-id="98e6c-256">現在のスレッドがリーダー ロックを保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-256"><see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="98e6c-257">次のコード例は、`IsReaderLockHeld` を使用してデッドロックを回避する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-257">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-258">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-258">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-259">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-259">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriterLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98e6c-260">現在のスレッドがライター ロックを保持しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-260">Gets a value indicating whether the current thread holds the writer lock.</span></span></summary>
        <value><span data-ttu-id="98e6c-261">現在のスレッドがライター ロックを保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-261"><see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="98e6c-262">次のコード例では、ライターロックを持つスレッドでリーダーロックを取得しようとすると、`ReaderWriterLock` はリーダーロックを付与せず、代わりにライターロックのロックカウントをインクリメントすることを示します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-262">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-263">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-263">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-264">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-264">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseLock : unit -&gt; System.Threading.LockCookie" Usage="readerWriterLock.ReleaseLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98e6c-265">スレッドがロックを取得した回数に関係なく、ロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-265">Releases the lock, regardless of the number of times the thread acquired the lock.</span></span></summary>
        <returns><span data-ttu-id="98e6c-266">解放されたロックを表す <see cref="T:System.Threading.LockCookie" /> 値。</span><span class="sxs-lookup"><span data-stu-id="98e6c-266">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> は、再帰ロックカウントに関係なく、リーダーロックまたはライターロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="98e6c-268">ロック数を含むロックの状態を復元するには、<xref:System.Threading.LockCookie> を <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>に渡します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-268">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-269">次のコード例は、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> メソッドを使用して、スレッドによって取得された回数に関係なく、ロックを解放する方法と、ロックの状態を後で復元する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-269">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="98e6c-270">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-270">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-271">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-271">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-272">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-272">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseReaderLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseReaderLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98e6c-273">ロック カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-273">Decrements the lock count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> は、ロック数をデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="98e6c-275">カウントが0になると、ロックが解放されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-275">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6c-276">スレッドにライターロックがある場合、`ReleaseReaderLock` を呼び出すと、<xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>の呼び出しと同じ効果があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-276">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="98e6c-277">スレッドにロックがない場合、`ReleaseReaderLock` を呼び出すと、<xref:System.ApplicationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-277">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-278">次のコード例は、リーダーロックを取得して解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-278">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="98e6c-279">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-279">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-280">スレッドがリーダー ロックもライター ロックも保持していません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-280">The thread does not have any reader or writer locks.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-281">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-281">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-282">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-282">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseWriterLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseWriterLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98e6c-283">ライター ロックのロック カウントがデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-283">Decrements the lock count on the writer lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> ライターロック数をデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="98e6c-285">カウントが0になると、ライターロックが解放されます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-285">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6c-286">スレッドがリーダーロックを持っている場合、またはロックがない場合、`ReleaseWriterLock` を呼び出すと <xref:System.ApplicationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-286">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-287">次のコード例は、ライターロックを取得して解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-287">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="98e6c-288">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-288">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-289">スレッドがライター ロックを保持していません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-289">The thread does not have the writer lock.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-290">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-290">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-291">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-291">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.RestoreLock : LockCookie -&gt; unit" Usage="readerWriterLock.RestoreLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="98e6c-292"><see cref="T:System.Threading.LockCookie" /> によって戻される <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-292">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></param>
        <summary><span data-ttu-id="98e6c-293">スレッドのロック ステータスを、<see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /> を呼び出す前の状態に復元します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-293">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-294">`RestoreLock` によって復元された状態には、再帰ロック数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-294">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="98e6c-295">スレッドは、別のスレッドがライターロックを取得した後にリーダーロックを復元しようとした場合、または別のスレッドがリーダーロックまたはライターロックを取得した後にライターロックを復元しようとした場合にブロックします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-295">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="98e6c-296">`RestoreLock` ではタイムアウトが許容されないため、デッドロックが発生しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-296">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98e6c-297">`RestoreLock`を呼び出す前に、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>の呼び出し以降に取得されたすべてのロックが解放されていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-297">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="98e6c-298">たとえば、スレッドがリーダーロックを取得し、それより前のライターロックを復元しようとすると、デッドロックが発生します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-298">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="98e6c-299">このような追加のロックを検出するには、<xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> と <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-299">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="98e6c-300"><xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>から返された <xref:System.Threading.LockCookie> は使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-300">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-301">次のコード例は、<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> メソッドを使用して、スレッドによって取得された回数に関係なく、ロックを解放する方法と、ロックの状態を後で復元する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-301">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="98e6c-302">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-302">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="98e6c-303"><paramref name="lockCookie" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="98e6c-303">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-304">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-304">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-305">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-305">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98e6c-306">リーダー ロックをライター ロックにアップグレードします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-306">Upgrades a reader lock to the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : int -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="98e6c-307">ミリ秒単位のタイムアウト。</span><span class="sxs-lookup"><span data-stu-id="98e6c-307">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="98e6c-308">タイムアウトに <see langword="Int32" /> 値を使用して、リーダー ロックをライター ロックにアップグレードします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-308">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="98e6c-309"><see cref="T:System.Threading.LockCookie" /> 値。</span><span class="sxs-lookup"><span data-stu-id="98e6c-309">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-310">スレッドが `UpgradeToWriterLock` を呼び出すと、ロックカウントに関係なくリーダーロックが解放され、スレッドはライターロックのキューの末尾に移動します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-310">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="98e6c-311">そのため、アップグレードを要求したスレッドにライターロックが付与される前に、他のスレッドがリソースに書き込みを行う可能性があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-311">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98e6c-312">タイムアウト例外は、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドを呼び出したスレッドがリーダーロックを再取得できるまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-312">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="98e6c-313">ライターロックを待機している他のスレッドが存在しない場合は、直ちに発生します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-313">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="98e6c-314">ただし、別のスレッドがライターロックのためにキューに登録されている場合、現在のすべてのリーダーがロックを解除し、1つのスレッドがライターロックを取得して解放するまで、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドを呼び出したスレッドがリーダーロックを再取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-314">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="98e6c-315">これは、ライターロックを要求した他のスレッドが、現在のスレッドが <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドを呼び出した後にそれを要求した場合にも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-315">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="98e6c-316">ロック状態を復元するには、`UpgradeToWriterLock`から返された <xref:System.Threading.LockCookie> を使用して <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-316">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="98e6c-317">この `LockCookie` を <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>で使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-317">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="98e6c-318">スレッドにリーダーロックがない場合は、`UpgradeToWriterLock`を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-318">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="98e6c-319">代わりに、<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> を使用してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-319">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="98e6c-320">有効なタイムアウト値については、「<xref:System.Threading.ReaderWriterLock>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-320">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-321">次のコード例では、リーダーロックを要求し、リーダーロックをライターロックにアップグレードして、リーダーロックを再びダウングレードする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-321">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="98e6c-322">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-323"><paramref name="millisecondsTimeout" /> は、ロック要求が許可される前に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-323"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-324">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-324">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-325">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-325">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : TimeSpan -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="98e6c-326">タイムアウト期間を指定する <see langword="TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="98e6c-326">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="98e6c-327">タイムアウトに <see langword="TimeSpan" /> 値を使用して、リーダー ロックをライター ロックにアップグレードします。</span><span class="sxs-lookup"><span data-stu-id="98e6c-327">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="98e6c-328"><see cref="T:System.Threading.LockCookie" /> 値。</span><span class="sxs-lookup"><span data-stu-id="98e6c-328">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-329">スレッドが `UpgradeToWriterLock` を呼び出すと、ロックカウントに関係なくリーダーロックが解放され、スレッドはライターロックのキューの末尾に移動します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-329">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="98e6c-330">そのため、アップグレードを要求したスレッドにライターロックが付与される前に、他のスレッドがリソースに書き込みを行う可能性があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-330">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98e6c-331">タイムアウト例外は、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドを呼び出したスレッドがリーダーロックを再取得できるまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-331">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="98e6c-332">ライターロックを待機している他のスレッドが存在しない場合は、直ちに発生します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-332">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="98e6c-333">ただし、別のスレッドがライターロックのためにキューに登録されている場合、現在のすべてのリーダーがロックを解除し、1つのスレッドがライターロックを取得して解放するまで、<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドを呼び出したスレッドがリーダーロックを再取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="98e6c-333">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="98e6c-334">これは、ライターロックを要求した他のスレッドが、現在のスレッドが <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドを呼び出した後にそれを要求した場合にも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-334">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="98e6c-335">ロック状態を復元するには、`UpgradeToWriterLock`から返された <xref:System.Threading.LockCookie> を使用して <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-335">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="98e6c-336">この `LockCookie` を <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>で使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-336">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="98e6c-337">スレッドにリーダーロックがない場合は、`UpgradeToWriterLock`を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-337">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="98e6c-338">代わりに、<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> を使用してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-338">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="98e6c-339">有効なタイムアウト値については、「<xref:System.Threading.ReaderWriterLock>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="98e6c-339">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="98e6c-340"><paramref name="timeout" /> は、ロック要求が許可される前に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-340"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98e6c-341"><paramref name="timeout" /> は、-1 ミリ秒以外の負の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-341"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-342">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-342">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-343">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-343">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WriterSeqNum : int" Usage="System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98e6c-344">現在のシーケンス番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-344">Gets the current sequence number.</span></span></summary>
        <value><span data-ttu-id="98e6c-345">現在のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="98e6c-345">The current sequence number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6c-346">シーケンス番号は、スレッドがライターロックを取得するたびに増加します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-346">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="98e6c-347">その間に他のスレッドがライターロックを取得したかどうかを確認する場合は、シーケンス番号を保存し、後で <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> に渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-347">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="98e6c-348">`WriterSeqNum` を使用すると、アプリケーションのパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-348">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="98e6c-349">たとえば、リーダーロックを保持している間に取得した情報がスレッドによってキャッシュされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-349">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="98e6c-350">Reacquiring を解放して後でロックを解除すると、スレッドは `AnyWritersSince`を呼び出して他のスレッドがリソースに書き込んだかどうかを判断できます。それ以外の場合は、キャッシュされた情報を使用できます。</span><span class="sxs-lookup"><span data-stu-id="98e6c-350">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="98e6c-351">この手法は、ロックによって保護されている情報の読み取りに負荷がかかる場合に便利です。たとえば、データベースクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="98e6c-351">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="98e6c-352">シーケンス番号が役立つようにするには、呼び出し元がリーダーロックまたはライターロックを保持している必要があります。</span><span class="sxs-lookup"><span data-stu-id="98e6c-352">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98e6c-353">次のコード例は、<xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> プロパティと <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> メソッドを使用して、現在のスレッドが最後にライターロックを保持した後に、保護されたリソースに対して別のスレッドがライターロックを取得したかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="98e6c-353">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="98e6c-354">このコードは、<xref:System.Threading.ReaderWriterLock> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="98e6c-354">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="98e6c-355">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="98e6c-355">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="98e6c-356">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="98e6c-356">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
