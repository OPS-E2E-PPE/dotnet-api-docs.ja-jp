<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c82e870460d87bc8e6ac6afbc269d9e2b7ffbbe" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82289607" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><see cref="T:System.Lazy`1" /> インスタンスが複数のスレッド間でアクセスを同期する方法を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この列挙体を使用して、<xref:System.Lazy%601> コンストラクターの `mode` パラメーターを指定します。 スレッド同期に対するすべてのコンストラクターの効果は、`mode` パラメーターがあるかどうかにかかわらず、この列挙体の観点から説明することができます。  
  
 <xref:System.Lazy%601> インスタンスは、ユーザー指定の初期化メソッドか、`T`のパラメーターなしのコンストラクターによって初期化されます。 初期化メソッドは、<xref:System.Lazy%601> コンストラクターの `valueFactory` パラメーターによって指定されます。 メソッドは、`T`のインスタンスを返します。これは、<xref:System.Lazy%601>のインスタンスによって遅延的にインスタンス化される型です。 コンストラクターに `valueFactory` パラメーターがない場合は、`T` のパラメーターなしのコンストラクターを使用して <xref:System.Lazy%601> インスタンスが初期化されます。 どちらの場合も、最初に <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティを呼び出すときに初期化が行われます。  
  
 この列挙体は、<xref:System.Lazy%601> インスタンスのスレッドセーフを指定するだけでなく、例外キャッシュにも影響します。 <xref:System.Lazy%601> インスタンスの例外がキャッシュされると、インスタンスを初期化する機会が1つだけ得られます。 最初に <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティを呼び出したときに例外がスローされた場合、その例外はキャッシュされ、後続の <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティへのすべての呼び出しで再スローされます。 例外のキャッシュの利点は、エラーが発生した場合でも、任意の2つのスレッドが常に同じ結果を得ることです。  
  
 [パブリケーションのみ] モードを指定すると、例外はキャッシュされません。 None または ExecutionAndPublication を指定する場合、キャッシュは初期化メソッドを指定するか、`T` のパラメーターなしのコンストラクターを使用できるようにするかによって異なります。 初期化メソッドを指定すると、この 2 つのモードで例外キャッシュが有効になります。 初期化メソッドは非常に単純にすることができます。 たとえば、の `T`: `new Lazy<Contents>(() => new Contents(), mode)` の場合はパラメーターなしのコンストラクターをC#、Visual Basic では `New Lazy(Of Contents)(Function() New Contents())` を呼び出すことができます。 初期化メソッドを指定しないコンストラクターを使用する場合、`T` のパラメーターなしのコンストラクターによってスローされる例外はキャッシュされません。 次の表は、例外のキャッシュ動作をまとめたものです。  
  
|モード|初期化メソッドの使用|`T` にパラメーターなしのコンストラクターを使用する|  
|----------|---------------------------------|---------------------------------------|  
|なし|キャッシュ済み|キャッシュなし|  
|文書のみ|キャッシュなし|キャッシュなし|  
|は executionandpublication|キャッシュ済み|キャッシュなし|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">遅延初期化</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>ロックを使って確実に 1 つのスレッドのみが <see cref="T:System.Lazy`1" /> インスタンスをスレッド セーフな方法で初期化します。 初期化メソッド (初期化メソッドがない場合は、パラメーターなしのコンストラクター) は内部でロックを使うため、デッドロックが発生することがあります。 初期化メソッドを指定した (<see cref="T:System.Lazy`1" /> パラメーター) <paramref name="valueFactory" /> コンストラクターを使った場合に、<see cref="P:System.Lazy`1.Value" /> プロパティを初回に呼び出したときに初期化メソッドが例外をスローした (または例外のハンドルに失敗した) 場合、その例外はキャッシュされ、それ以降に <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出した時点で再度スローされます。 初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使用する場合、<paramref name="T" /> についてパラメーターなしのコンストラクターからスローされる例外はキャッシュされません。 その場合、<see cref="P:System.Lazy`1.Value" /> プロパティへの後続の呼び出しで <see cref="T:System.Lazy`1" /> インスタンスが正常に初期化される可能性があります。 初期化メソッドが <see cref="P:System.Lazy`1.Value" /> インスタンスの <see cref="T:System.Lazy`1" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><see cref="T:System.Lazy`1" /> インスタンスはスレッド セーフではありません。インスタンスに複数のスレッドからアクセスした場合の動作は未定義です。 高いパフォーマンスが重要であり、<see cref="T:System.Lazy`1" /> インスタンスが複数のスレッドから初期化されないことが保証されている場合にのみ、このモードを使ってください。 初期化メソッドを指定した (<see cref="T:System.Lazy`1" /> パラメーター) <paramref name="valueFactory" /> コンストラクターを使った場合に、<see cref="P:System.Lazy`1.Value" /> プロパティを初回に呼び出したときに初期化メソッドが例外をスローした (または例外のハンドルに失敗した) 場合、その例外はキャッシュされ、それ以降に <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出した時点で再度スローされます。 初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使用する場合、<paramref name="T" /> についてパラメーターなしのコンストラクターからスローされる例外はキャッシュされません。 その場合、<see cref="P:System.Lazy`1.Value" /> プロパティへの後続の呼び出しで <see cref="T:System.Lazy`1" /> インスタンスが正常に初期化される可能性があります。 初期化メソッドが <see cref="P:System.Lazy`1.Value" /> インスタンスの <see cref="T:System.Lazy`1" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>複数のスレッドで <see cref="T:System.Lazy`1" /> のインスタンスを同時に初期化しようとすると、すべてのスレッドで初期化メソッド (または、初期化メソッドが存在しない場合はパラメーターなしのコンストラクター) の実行が許可されます。 初期化を最初に完了したスレッドが、<see cref="T:System.Lazy`1" /> インスタンスの値を設定します。 初期化メソッドを同時に実行したその他のスレッドには、その値が返されます。ただし、それらのスレッドで初期化メソッドが例外をスローした場合を除きます。 競合するスレッドによって作成された <paramref name="T" /> のインスタンスは、すべて破棄されます。 いずれかのスレッドで初期化メソッドが例外をスローした場合、その例外はそのスレッドの <see cref="P:System.Lazy`1.Value" /> プロパティの外に伝達されます。 例外はキャッシュされません。 <see cref="P:System.Lazy`1.IsValueCreated" /> プロパティの値は <see langword="false" /> のままになり、<see cref="P:System.Lazy`1.Value" /> プロパティの (例外がスローされたスレッドまたは他のスレッドによる) 後続の呼び出しで、初期化メソッドが再実行されます。 初期化メソッドが <see cref="P:System.Lazy`1.Value" /> インスタンスの <see cref="T:System.Lazy`1" /> プロパティに再帰的にアクセスしても、例外はスローされません。</summary>
      </Docs>
    </Member>
  </Members>
</Type>
