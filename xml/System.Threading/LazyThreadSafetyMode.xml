<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c82e870460d87bc8e6ac6afbc269d9e2b7ffbbe" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82289607" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="c5a0d-101"><see cref="T:System.Lazy`1" /> インスタンスが複数のスレッド間でアクセスを同期する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5a0d-102">この列挙体を使用して、<xref:System.Lazy%601> コンストラクターの `mode` パラメーターを指定します。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="c5a0d-103">スレッド同期に対するすべてのコンストラクターの効果は、`mode` パラメーターがあるかどうかにかかわらず、この列挙体の観点から説明することができます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="c5a0d-104"><xref:System.Lazy%601> インスタンスは、ユーザー指定の初期化メソッドか、`T`のパラメーターなしのコンストラクターによって初期化されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the parameterless constructor for `T`.</span></span> <span data-ttu-id="c5a0d-105">初期化メソッドは、<xref:System.Lazy%601> コンストラクターの `valueFactory` パラメーターによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="c5a0d-106">メソッドは、`T`のインスタンスを返します。これは、<xref:System.Lazy%601>のインスタンスによって遅延的にインスタンス化される型です。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="c5a0d-107">コンストラクターに `valueFactory` パラメーターがない場合は、`T` のパラメーターなしのコンストラクターを使用して <xref:System.Lazy%601> インスタンスが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-107">If a constructor does not have a `valueFactory` parameter, the parameterless constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="c5a0d-108">どちらの場合も、最初に <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティを呼び出すときに初期化が行われます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="c5a0d-109">この列挙体は、<xref:System.Lazy%601> インスタンスのスレッドセーフを指定するだけでなく、例外キャッシュにも影響します。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="c5a0d-110"><xref:System.Lazy%601> インスタンスの例外がキャッシュされると、インスタンスを初期化する機会が1つだけ得られます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="c5a0d-111">最初に <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティを呼び出したときに例外がスローされた場合、その例外はキャッシュされ、後続の <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティへのすべての呼び出しで再スローされます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c5a0d-112">例外のキャッシュの利点は、エラーが発生した場合でも、任意の2つのスレッドが常に同じ結果を得ることです。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="c5a0d-113">[パブリケーションのみ] モードを指定すると、例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="c5a0d-114">None または ExecutionAndPublication を指定する場合、キャッシュは初期化メソッドを指定するか、`T` のパラメーターなしのコンストラクターを使用できるようにするかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the parameterless constructor for `T` to be used.</span></span> <span data-ttu-id="c5a0d-115">初期化メソッドを指定すると、この 2 つのモードで例外キャッシュが有効になります。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="c5a0d-116">初期化メソッドは非常に単純にすることができます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-116">The initialization method can be very simple.</span></span> <span data-ttu-id="c5a0d-117">たとえば、の `T`: `new Lazy<Contents>(() => new Contents(), mode)` の場合はパラメーターなしのコンストラクターをC#、Visual Basic では `New Lazy(Of Contents)(Function() New Contents())` を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-117">For example, it might call the parameterless constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="c5a0d-118">初期化メソッドを指定しないコンストラクターを使用する場合、`T` のパラメーターなしのコンストラクターによってスローされる例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for `T` are not cached.</span></span> <span data-ttu-id="c5a0d-119">次の表は、例外のキャッシュ動作をまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="c5a0d-120">モード</span><span class="sxs-lookup"><span data-stu-id="c5a0d-120">Mode</span></span>|<span data-ttu-id="c5a0d-121">初期化メソッドの使用</span><span class="sxs-lookup"><span data-stu-id="c5a0d-121">Using initialization method</span></span>|<span data-ttu-id="c5a0d-122">`T` にパラメーターなしのコンストラクターを使用する</span><span class="sxs-lookup"><span data-stu-id="c5a0d-122">Using parameterless constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="c5a0d-123">なし</span><span class="sxs-lookup"><span data-stu-id="c5a0d-123">None</span></span>|<span data-ttu-id="c5a0d-124">キャッシュ済み</span><span class="sxs-lookup"><span data-stu-id="c5a0d-124">Cached</span></span>|<span data-ttu-id="c5a0d-125">キャッシュなし</span><span class="sxs-lookup"><span data-stu-id="c5a0d-125">Not cached</span></span>|  
|<span data-ttu-id="c5a0d-126">文書のみ</span><span class="sxs-lookup"><span data-stu-id="c5a0d-126">PublicationOnly</span></span>|<span data-ttu-id="c5a0d-127">キャッシュなし</span><span class="sxs-lookup"><span data-stu-id="c5a0d-127">Not cached</span></span>|<span data-ttu-id="c5a0d-128">キャッシュなし</span><span class="sxs-lookup"><span data-stu-id="c5a0d-128">Not cached</span></span>|  
|<span data-ttu-id="c5a0d-129">は executionandpublication</span><span class="sxs-lookup"><span data-stu-id="c5a0d-129">ExecutionAndPublication</span></span>|<span data-ttu-id="c5a0d-130">キャッシュ済み</span><span class="sxs-lookup"><span data-stu-id="c5a0d-130">Cached</span></span>|<span data-ttu-id="c5a0d-131">キャッシュなし</span><span class="sxs-lookup"><span data-stu-id="c5a0d-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="c5a0d-132">遅延初期化</span><span class="sxs-lookup"><span data-stu-id="c5a0d-132">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5a0d-133">ロックを使って確実に 1 つのスレッドのみが <see cref="T:System.Lazy`1" /> インスタンスをスレッド セーフな方法で初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span></span> <span data-ttu-id="c5a0d-134">初期化メソッド (初期化メソッドがない場合は、パラメーターなしのコンストラクター) は内部でロックを使うため、デッドロックが発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-134">If the initialization method (or the parameterless constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span></span> <span data-ttu-id="c5a0d-135">初期化メソッドを指定した (<see cref="T:System.Lazy`1" /> パラメーター) <paramref name="valueFactory" /> コンストラクターを使った場合に、<see cref="P:System.Lazy`1.Value" /> プロパティを初回に呼び出したときに初期化メソッドが例外をスローした (または例外のハンドルに失敗した) 場合、その例外はキャッシュされ、それ以降に <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出した時点で再度スローされます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="c5a0d-136">初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使用する場合、<paramref name="T" /> についてパラメーターなしのコンストラクターからスローされる例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="c5a0d-137">その場合、<see cref="P:System.Lazy`1.Value" /> プロパティへの後続の呼び出しで <see cref="T:System.Lazy`1" /> インスタンスが正常に初期化される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="c5a0d-138">初期化メソッドが <see cref="P:System.Lazy`1.Value" /> インスタンスの <see cref="T:System.Lazy`1" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5a0d-139"><see cref="T:System.Lazy`1" /> インスタンスはスレッド セーフではありません。インスタンスに複数のスレッドからアクセスした場合の動作は未定義です。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span></span> <span data-ttu-id="c5a0d-140">高いパフォーマンスが重要であり、<see cref="T:System.Lazy`1" /> インスタンスが複数のスレッドから初期化されないことが保証されている場合にのみ、このモードを使ってください。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span></span> <span data-ttu-id="c5a0d-141">初期化メソッドを指定した (<see cref="T:System.Lazy`1" /> パラメーター) <paramref name="valueFactory" /> コンストラクターを使った場合に、<see cref="P:System.Lazy`1.Value" /> プロパティを初回に呼び出したときに初期化メソッドが例外をスローした (または例外のハンドルに失敗した) 場合、その例外はキャッシュされ、それ以降に <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出した時点で再度スローされます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="c5a0d-142">初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使用する場合、<paramref name="T" /> についてパラメーターなしのコンストラクターからスローされる例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="c5a0d-143">その場合、<see cref="P:System.Lazy`1.Value" /> プロパティへの後続の呼び出しで <see cref="T:System.Lazy`1" /> インスタンスが正常に初期化される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="c5a0d-144">初期化メソッドが <see cref="P:System.Lazy`1.Value" /> インスタンスの <see cref="T:System.Lazy`1" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5a0d-145">複数のスレッドで <see cref="T:System.Lazy`1" /> のインスタンスを同時に初期化しようとすると、すべてのスレッドで初期化メソッド (または、初期化メソッドが存在しない場合はパラメーターなしのコンストラクター) の実行が許可されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the parameterless constructor, if there is no initialization method).</span></span> <span data-ttu-id="c5a0d-146">初期化を最初に完了したスレッドが、<see cref="T:System.Lazy`1" /> インスタンスの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="c5a0d-147">初期化メソッドを同時に実行したその他のスレッドには、その値が返されます。ただし、それらのスレッドで初期化メソッドが例外をスローした場合を除きます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span></span> <span data-ttu-id="c5a0d-148">競合するスレッドによって作成された <paramref name="T" /> のインスタンスは、すべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span></span> <span data-ttu-id="c5a0d-149">いずれかのスレッドで初期化メソッドが例外をスローした場合、その例外はそのスレッドの <see cref="P:System.Lazy`1.Value" /> プロパティの外に伝達されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span></span> <span data-ttu-id="c5a0d-150">例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-150">The exception is not cached.</span></span> <span data-ttu-id="c5a0d-151"><see cref="P:System.Lazy`1.IsValueCreated" /> プロパティの値は <see langword="false" /> のままになり、<see cref="P:System.Lazy`1.Value" /> プロパティの (例外がスローされたスレッドまたは他のスレッドによる) 後続の呼び出しで、初期化メソッドが再実行されます。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span></span> <span data-ttu-id="c5a0d-152">初期化メソッドが <see cref="P:System.Lazy`1.Value" /> インスタンスの <see cref="T:System.Lazy`1" /> プロパティに再帰的にアクセスしても、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c5a0d-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
