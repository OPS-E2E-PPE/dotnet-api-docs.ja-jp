<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43eb33d069ff4708c6978251697a86abcffa143c" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116229" /></Metadata><TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1d07b-101">オブジェクトへのアクセスを同期する機構を提供します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-101">Provides a mechanism that synchronizes access to objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-102"><xref:System.Threading.Monitor> クラスを使用すると、<xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>、<xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>、および <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> の各メソッドを呼び出すことによって、特定のオブジェクトのロックを取得および解放することによって、コードの領域へのアクセスを同期できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="1d07b-103">オブジェクトロックは、一般にクリティカルセクションと呼ばれる、コードブロックへのアクセスを制限する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="1d07b-104">スレッドがオブジェクトのロックを所有している間、他のスレッドがそのロックを取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="1d07b-105">また、<xref:System.Threading.Monitor> クラスを使用して、他のスレッドが別のロックされたオブジェクトを使用してコードを実行している場合を除き、他のスレッドがロック所有者によって実行されるアプリケーションコードのセクションにアクセスできないようにすることもできます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="1d07b-106">この記事の内容</span><span class="sxs-lookup"><span data-stu-id="1d07b-106">In this article:</span></span>  
  
 <span data-ttu-id="1d07b-107">[Monitor クラス: 概要](#Overview) </span><span class="sxs-lookup"><span data-stu-id="1d07b-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="1d07b-108">[Lock オブジェクト](#Lock) </span><span class="sxs-lookup"><span data-stu-id="1d07b-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="1d07b-109">[クリティカルセクション](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="1d07b-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="1d07b-110">[Pulse、system.threading.monitor.pulseall、Wait](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="1d07b-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="1d07b-111">モニターと待機ハンドル</span><span class="sxs-lookup"><span data-stu-id="1d07b-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="1d07b-112">Monitor クラス: 概要</span><span class="sxs-lookup"><span data-stu-id="1d07b-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="1d07b-113"><xref:System.Threading.Monitor> には、次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="1d07b-114">要求時にオブジェクトに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="1d07b-115">バインド解除されているため、任意のコンテキストから直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="1d07b-116"><xref:System.Threading.Monitor> クラスのインスタンスを作成できません。<xref:System.Threading.Monitor> クラスのメソッドはすべて静的です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="1d07b-117">各メソッドには、クリティカルセクションへのアクセスを制御する同期されたオブジェクトが渡されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-118"><xref:System.Threading.Monitor> クラスを使用して、値型ではなく、文字列 (つまり、<xref:System.String>以外の参照型) 以外のオブジェクトをロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="1d07b-119">詳細については、この記事で後述する「<xref:System.Threading.Monitor.Enter%2A> メソッドと[lock オブジェクト](#Lock)のオーバーロード」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="1d07b-120">次の表では、同期されたオブジェクトにアクセスするスレッドで実行できる操作について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="1d07b-121">操作</span><span class="sxs-lookup"><span data-stu-id="1d07b-121">Action</span></span>|<span data-ttu-id="1d07b-122">説明</span><span class="sxs-lookup"><span data-stu-id="1d07b-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="1d07b-123"><xref:System.Threading.Monitor.Enter%2A>、 <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="1d07b-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="1d07b-124">オブジェクトのロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-124">Acquires a lock for an object.</span></span> <span data-ttu-id="1d07b-125">この操作は、クリティカルセクションの開始を示すこともできます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="1d07b-126">他のスレッドは、別のロックされたオブジェクトを使用してクリティカルセクションの命令を実行しない限り、クリティカルセクションに入ることはできません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="1d07b-127">オブジェクトのロックを解除し、他のスレッドがオブジェクトにロックしてアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="1d07b-128">呼び出し元のスレッドは、別のスレッドがオブジェクトにアクセスしている間、待機します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="1d07b-129">パルスシグナルは、オブジェクトの状態に対する変更について、待機中のスレッドに通知するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="1d07b-130"><xref:System.Threading.Monitor.Pulse%2A> (シグナル)、<xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="1d07b-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="1d07b-131">1つ以上の待機中のスレッドにシグナルを送信します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="1d07b-132">シグナルは、ロックされたオブジェクトの状態が変化したこと、およびロックの所有者がロックを解放する準備ができたことを待機中のスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="1d07b-133">待機中のスレッドは、オブジェクトのロックを最終的に受け取る可能性があるように、オブジェクトの準備完了キューに配置されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="1d07b-134">スレッドがロック状態になったら、オブジェクトの新しい状態をチェックして、必要な状態に達したかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="1d07b-135">オブジェクトのロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-135">Releases the lock on an object.</span></span> <span data-ttu-id="1d07b-136">この操作は、ロックされたオブジェクトによって保護されているクリティカルセクションの終了もマークします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="1d07b-137">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、<xref:System.Threading.Monitor.Enter%2A> メソッドと <xref:System.Threading.Monitor.TryEnter%2A> メソッドに2組のオーバーロードがあります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="1d07b-138">1つのオーバーロードセットには、ロックC#を取得するときに例外がスローされた場合でも、ロックが取得された場合にはアトミックに `true` に設定される `ref` (in) または `ByRef` (Visual Basic) の <xref:System.Boolean> パラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="1d07b-139">ロックが保護されているリソースが一貫性のある状態ではない場合でも、常にロックを解放することが重要な場合は、これらのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="1d07b-140">Lock オブジェクト</span><span class="sxs-lookup"><span data-stu-id="1d07b-140">The lock object</span></span>  
 <span data-ttu-id="1d07b-141">Monitor クラスは、クリティカルセクションへのC#アクセスを制御するオブジェクトを操作する `static` (では) または `Shared` (Visual Basic) メソッドで構成されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="1d07b-142">同期されたオブジェクトごとに、次の情報が保持されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="1d07b-143">現在ロックを保持しているスレッドへの参照。</span><span class="sxs-lookup"><span data-stu-id="1d07b-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="1d07b-144">準備完了のキューへの参照。ロックを取得する準備ができているスレッドを格納します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="1d07b-145">待機中のキューへの参照。ロックされたオブジェクトの状態の変更の通知を待機しているスレッドを格納します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="1d07b-146"><xref:System.Threading.Monitor> は値型ではなく、オブジェクト (つまり、参照型) をロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-147">値型を <xref:System.Threading.Monitor.Enter%2A> と <xref:System.Threading.Monitor.Exit%2A> に渡すことができますが、値型は呼び出しごとに個別にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="1d07b-148">呼び出しごとに個別のオブジェクトが作成されるので、<xref:System.Threading.Monitor.Enter%2A> は決してコードをブロックすることはなく、保護していると想定しているコードは実際には同期されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="1d07b-149">さらに、<xref:System.Threading.Monitor.Exit%2A> に渡されたオブジェクトは <xref:System.Threading.Monitor.Enter%2A> に渡されたオブジェクトとは異なるため、<xref:System.Threading.Monitor> は「オブジェクトの同期メソッドが、コードの非同期ブロックから呼び出されました。」というメッセージとともに <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="1d07b-150">この問題を説明する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-150">The following example illustrates this problem.</span></span> <span data-ttu-id="1d07b-151">10 個のタスクが起動され、それぞれが 250 ミリ秒間スリープ状態になります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="1d07b-152">次に、各タスクはカウンター変数である `nTasks` を更新します。これは実際に起動、実行されるタスクの数をカウントするためのものです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="1d07b-153">`nTasks` は複数のタスクで同時に更新可能なグローバル変数なので、複数のタスクによる同時変更を防止するためにモニターを使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="1d07b-154">しかし、例に示す出力のように、各タスクは <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="1d07b-155">各タスクの <xref:System.Threading.SynchronizationLockException> メソッドに対する呼び出しの前に `nTasks` 変数がボックス化されるため、各タスクは <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="1d07b-156">つまり、各メソッドの呼び出しは他のメソッドから独立している個別の変数に渡されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="1d07b-157">`nTasks` は <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> メソッドへの呼び出しで再びボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1d07b-158">こうして 10 個の新しいボックス化された変数が作成されます。これらは互いに独立したものであり、`nTasks` からも <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> メソッドへの呼び出しで作成された 10 個のボックス化された変数からも独立しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1d07b-159">それで、以前ロックされていなかった新規に作成された変数のロックを解放しようとしているため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="1d07b-160">次の例に示すように、<xref:System.Threading.Monitor.Enter%2A> と <xref:System.Threading.Monitor.Exit%2A> の呼び出しの前に値型の変数をボックス化したり、ボックス化された同じオブジェクトを両方のメソッドに渡したりできますが、これを行う利点はありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="1d07b-161">ボックス化解除された変数への変更は、ボックス化されたコピーには反映されません。またボックス化されたコピーの値を変更する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="1d07b-162">同期するオブジェクトを選択するときは、プライベートまたは内部のオブジェクトのみをロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="1d07b-163">外部オブジェクトをロックするとデッドロックが発生する可能性があります。これは、関連のないコードが、異なる目的でロックする同じオブジェクトを選択する可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="1d07b-164">ロックに使用されるオブジェクトが <xref:System.MarshalByRefObject>から派生している場合は、複数のアプリケーションドメイン内のオブジェクトを同期できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="1d07b-165">クリティカルセクション</span><span class="sxs-lookup"><span data-stu-id="1d07b-165">The critical section</span></span>  
 <span data-ttu-id="1d07b-166"><xref:System.Threading.Monitor.Enter%2A> および <xref:System.Threading.Monitor.Exit%2A> メソッドを使用して、クリティカルセクションの開始と終了をマークします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-167"><xref:System.Threading.Monitor.Enter%2A> メソッドと <xref:System.Threading.Monitor.Exit%2A> メソッドによって提供される機能は、のC# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md)ステートメントと Visual Basic の[SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)ステートメントによって提供される機能と同じですが、言語構成要素によって <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> メソッドのオーバーロードと <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> メソッドが `try`にラップされる点が異なり`finally`</span><span class="sxs-lookup"><span data-stu-id="1d07b-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="1d07b-168">ブロックして、モニターがリリースされていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="1d07b-169">クリティカルセクションが一連の連続する命令である場合、<xref:System.Threading.Monitor.Enter%2A> メソッドによって取得されたロックは、ロックされたオブジェクトを使用して、囲まれたコードを1つのスレッドだけが実行できることを保証します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="1d07b-170">この場合は、そのコードを `try` ブロックに配置し、<xref:System.Threading.Monitor.Exit%2A> メソッドへの呼び出しを `finally` ブロックに配置することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="1d07b-171">これにより、例外が発生しても必ずロックが解放されるようになります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="1d07b-172">次のコードは、このパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="1d07b-173">この機能は、通常、クラスの静的メソッドまたはインスタンスメソッドへのアクセスを同期するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="1d07b-174">クリティカルセクションがメソッド全体にまたがっている場合は、メソッドに <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> を配置し、<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>のコンストラクターで <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> 値を指定することによって、ロック機能を実現できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1d07b-175">この属性を使用する場合、<xref:System.Threading.Monitor.Enter%2A> および <xref:System.Threading.Monitor.Exit%2A> メソッドの呼び出しは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="1d07b-176">次のコードは、このパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="1d07b-177">属性によって、メソッドが戻るまで、ロックを保持するために、現在のスレッドに注意してください。ロックがすぐに解放する場合は、使用、<xref:System.Threading.Monitor>クラスの C#[ロック](~/docs/csharp/language-reference/keywords/lock-statement.md)ステートメント、または Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)属性ではなく、メソッド内でステートメント。</span><span class="sxs-lookup"><span data-stu-id="1d07b-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="1d07b-178">指定されたオブジェクトをロックして解放する <xref:System.Threading.Monitor.Enter%2A> および <xref:System.Threading.Monitor.Exit%2A> ステートメントは、メンバーまたはクラスの境界の間またはその両方になる可能性がありますが、この方法はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="1d07b-179">Pulse、System.threading.monitor.pulseall、Wait</span><span class="sxs-lookup"><span data-stu-id="1d07b-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="1d07b-180">スレッドがロックを所有し、ロックによって保護されているクリティカルセクションに入った後は、<xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>、<xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>、および <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="1d07b-181">ロックを保持しているスレッドが <xref:System.Threading.Monitor.Wait%2A>を呼び出すと、ロックが解放され、スレッドが同期されたオブジェクトの待機キューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-181">When the thread that holds the lock calls <xref:System.Threading.Monitor.Wait%2A>, the lock is released and the thread is added to the waiting queue of the synchronized object.</span></span> <span data-ttu-id="1d07b-182">準備完了キュー内の最初のスレッド (存在する場合) は、ロックを取得し、クリティカルセクションに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-182">The first thread in the ready queue, if any, acquires the lock and enters the critical section.</span></span> <span data-ttu-id="1d07b-183"><xref:System.Threading.Monitor.Wait%2A> を呼び出したスレッドは、<xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> または <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> メソッドがロックを保持しているスレッドによって呼び出されたときに、待機キューから準備キューに移動されます (移動するには、スレッドが待機キューの先頭にある必要があります)。</span><span class="sxs-lookup"><span data-stu-id="1d07b-183">The thread that called <xref:System.Threading.Monitor.Wait%2A> is moved from the waiting queue to the ready queue when either the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or the <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method is called by the thread that holds the lock (to be moved, the thread must be at the head of the waiting queue).</span></span> <span data-ttu-id="1d07b-184"><xref:System.Threading.Monitor.Wait%2A> メソッドは、呼び出し元のスレッドがロックを再取得したときに戻ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-184">The <xref:System.Threading.Monitor.Wait%2A> method returns when the calling thread reacquires the lock.</span></span>  
  
 <span data-ttu-id="1d07b-185">ロックを保持しているスレッドが <xref:System.Threading.Monitor.Pulse%2A>を呼び出すと、待機キューの先頭にあるスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-185">When the thread that holds the lock calls <xref:System.Threading.Monitor.Pulse%2A>, the thread at the head of the waiting queue is moved to the ready queue.</span></span> <span data-ttu-id="1d07b-186"><xref:System.Threading.Monitor.PulseAll%2A> メソッドを呼び出すと、すべてのスレッドが待機キューから準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-186">The call to the <xref:System.Threading.Monitor.PulseAll%2A> method moves all the threads from the waiting queue to the ready queue.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="1d07b-187">モニターと待機ハンドル</span><span class="sxs-lookup"><span data-stu-id="1d07b-187">Monitors and wait handles</span></span>  
 <span data-ttu-id="1d07b-188"><xref:System.Threading.Monitor> クラスと <xref:System.Threading.WaitHandle> オブジェクトの使用方法の違いに注意することが重要です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-188">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="1d07b-189"><xref:System.Threading.Monitor> クラスは純粋に管理され、完全に移植可能であり、オペレーティングシステムのリソース要件に関してより効率的です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-189">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="1d07b-190"><xref:System.Threading.WaitHandle> オブジェクトはオペレーティング システムの待機可能オブジェクトを表しており、マネージドとアンマネージド コード間で同期するのに便利です。また一度に多くのオブジェクトを待機できる機能などの高度なオペレーティング システム機能を公開します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-190"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-191">次の例では、<xref:System.Threading.Monitor> クラスを使用して、<xref:System.Random> クラスによって表される乱数ジェネレーターの1つのインスタンスへのアクセスを同期します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-191">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="1d07b-192">この例では、スレッドプールのスレッドで非同期的に実行される10個のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-192">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="1d07b-193">各タスクは、1万の乱数を生成し、平均値を計算し、生成された乱数の合計数と合計を保持する2つのプロシージャレベル変数を更新します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-193">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="1d07b-194">すべてのタスクが実行された後、これらの2つの値を使用して全体的な平均が計算されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-194">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="1d07b-195">スレッドプールのスレッドで実行されているすべてのタスクからアクセスできるため、`total` および `n` の変数へのアクセスも同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-195">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="1d07b-196">この目的には、<xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-196">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="1d07b-197">次の例では、<xref:System.Threading.Monitor> クラス (`lock` または `SyncLock` 言語コンストラクトで実装)、<xref:System.Threading.Interlocked> クラス、および <xref:System.Threading.AutoResetEvent> クラスを組み合わせて使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-197">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="1d07b-198">2 つの `internal` クラス (C# の場合) または `Friend` クラス (Visual Basic の場合)、`SyncResource` と `UnSyncResource` を定義します。これらはそれぞれ、リソースへの同期アクセスと非同期アクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-198">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="1d07b-199">同期アクセスと非同期アクセスの違い (各メソッド呼び出しが迅速に完了する場合に違いが生じる可能性がある) を示すために、次の例では、メソッドにランダムな遅延を含めてあります。<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> プロパティが偶数であるスレッドでは、メソッドが <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> を呼び出して、2,000 ミリ秒の遅延を生じさせます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-199">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="1d07b-200">`SyncResource` クラスはパブリックではなく、同期されたリソースでロックを取得するクライアント コードは存在しないので、内部クラス自体がロックを取得することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-200">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="1d07b-201">これにより、悪意のあるコードがパブリック オブジェクトでロックを取得するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-201">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="1d07b-202">例では、リソースにアクセスしようとするスレッドの数を定義する変数 `numOps` を定義します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-202">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="1d07b-203">アプリケーション スレッドは、同期アクセスの場合も非同期アクセスの場合もそれぞれ 5 回、<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-203">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="1d07b-204"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> メソッドにはパラメーターが 1 つしかありません。パラメーターを受け入れず値を返さないデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-204">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="1d07b-205">同期アクセスの場合は `SyncUpdateResource` メソッドを呼び出し、非同期アクセスの場合は `UnSyncUpdateResource` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-205">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="1d07b-206">メソッドが呼び出されるたびに、アプリケーションスレッドは[AutoResetEvent](xref:System.Threading.WaitHandle.WaitOne*)メソッドを呼び出して、<xref:System.Threading.AutoResetEvent> インスタンスがシグナル状態になるまでブロックされるようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-206">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="1d07b-207">`SyncUpdateResource` メソッドを呼び出すたびに、内部 `SyncResource.Access` メソッドが呼び出され、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> メソッドが呼び出されて、`numOps` カウンターがデクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-207">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="1d07b-208"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> メソッドは、カウンターをデクリメントするために使用されます。それ以外の場合、最初のスレッドのデクリメントされた値が変数に格納される前に、2番目のスレッドが値にアクセスすることはありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-208">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="1d07b-209">最後に同期されたワーカースレッドがカウンターをゼロにデクリメントすると、同期されたすべてのスレッドがリソースへのアクセスを完了したことを示すために、`SyncUpdateResource` メソッドは <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> メソッドを呼び出します。これにより、メインスレッドに実行を継続するように通知されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-209">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="1d07b-210">`UnSyncUpdateResource` メソッドを呼び出すたびに、内部 `UnSyncResource.Access` メソッドが呼び出され、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> メソッドが呼び出されて、`numOps` カウンターがデクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-210">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="1d07b-211">ここでも、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> メソッドを使用してカウンターをデクリメントし、最初のスレッドのデクリメントされた値が変数に割り当てられる前に、2番目のスレッドが値にアクセスしないようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-211">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="1d07b-212">最後の同期されていないワーカースレッドがカウンターをゼロにデクリメントすると、そのリソースにアクセスする必要がある非同期のスレッドがないことが示され、`UnSyncUpdateResource` メソッドは、メインスレッドに実行を継続するように通知する <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-212">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="1d07b-213">例の出力からわかるように、同期アクセスでは、呼び出し元スレッドが保護リソースを終了してからでないと別のスレッドがそれにアクセスできません。つまり各スレッドはその先行処理を待機します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-213">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="1d07b-214">その一方で、ロックがない `UnSyncResource.Access` メソッドは、スレッドが到達する順序で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-214">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="1d07b-215">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-215">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-216">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-216">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="1d07b-217">スレッド処理オブジェクトと機能</span><span class="sxs-lookup"><span data-stu-id="1d07b-217">Threading Objects and Features</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d07b-218">指定したオブジェクトの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-218">Acquires an exclusive lock on a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-219">モニター ロックを取得する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-219">The object on which to acquire the monitor lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-220">指定したオブジェクトの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-220">Acquires an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-221">パラメーターとして渡されたオブジェクトの <xref:System.Threading.Monitor> を取得するには、`Enter` を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-221">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="1d07b-222">別のスレッドがオブジェクトに対して `Enter` を実行したが、対応する <xref:System.Threading.Monitor.Exit%2A>をまだ実行していない場合、現在のスレッドは、他のスレッドがオブジェクトを解放するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-222">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="1d07b-223">同じスレッドが、ブロックせずに複数回 `Enter` を呼び出すことができます。ただし、オブジェクトを待機している他のスレッドがブロック解除される前に、同じ数の `Exit` 呼び出しを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-223">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="1d07b-224">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-224">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-225">値型の変数を `Enter`に渡すと、オブジェクトとしてボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-225">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="1d07b-226">同じ変数を再び `Enter` に渡すと、別のオブジェクトとしてボックス化され、スレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-226">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="1d07b-227">この場合、`Monitor` するコードは保護されていません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-227">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="1d07b-228">さらに、変数を `Exit`に渡す場合でも、別の個別のオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-228">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="1d07b-229">`Exit` に渡されたオブジェクトは `Enter`に渡されたオブジェクトとは異なるため、`Monitor` は <xref:System.Threading.SynchronizationLockException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-229">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="1d07b-230">詳細については、概念説明のトピック「[モニター](xref:System.Threading.Monitor)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-230">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="1d07b-231"><xref:System.Threading.Thread.Interrupt%2A> は、オブジェクトへの `Monitor` の入力を待機しているスレッドを中断できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-231"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="1d07b-232"><xref:System.Threading.ThreadInterruptedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-232">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="1d07b-233">C# を使用して、 `try`.`finally`</span><span class="sxs-lookup"><span data-stu-id="1d07b-233">Use a C# `try`…`finally`</span></span> <span data-ttu-id="1d07b-234">ブロック (`Try`.`Finally`</span><span class="sxs-lookup"><span data-stu-id="1d07b-234">block (`Try`…`Finally`</span></span> <span data-ttu-id="1d07b-235">VVisual Basic)、モニターを解放するか、または、C# を使用する`lock`ステートメント (`SyncLock` Visual Basic でのステートメント)、ラップ、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>メソッド、`try`.`finally`</span><span class="sxs-lookup"><span data-stu-id="1d07b-235">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="1d07b-236">ブロックです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-236">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-237">`Enter` メソッドの使用方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-237">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-238"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-238">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-239">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-239">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj * bool -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-240">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-240">The object on which to wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="1d07b-241">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-241">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="1d07b-242">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-242">The input must be <see langword="false" />.</span></span> <span data-ttu-id="1d07b-243">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-243">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="1d07b-244">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-244">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span>  
  
<span data-ttu-id="1d07b-245">メモ   例外が発生しない場合、このメソッドの出力は常に <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-245">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="1d07b-246">指定したオブジェクトの排他ロックを取得し、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-246">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-247">`obj` パラメーターとして渡されたオブジェクトの <xref:System.Threading.Monitor> を取得するには、`Enter` を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-247">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="1d07b-248">別のスレッドがオブジェクトに対して `Enter` を実行したが、対応する <xref:System.Threading.Monitor.Exit%2A>をまだ実行していない場合、現在のスレッドは、他のスレッドがオブジェクトを解放するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-248">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="1d07b-249">同じスレッドが、ブロックせずに複数回 `Enter` を呼び出すことができます。ただし、オブジェクトを待機している他のスレッドがブロック解除される前に、同じ数の `Exit` 呼び出しを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-249">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="1d07b-250">例外がスローされたためにロックが取得されなかった場合は、このメソッドの終了後に、`lockTaken` パラメーターに指定された変数が `false` ます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-250">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="1d07b-251">これにより、プログラムは常に、ロックを解放する必要があるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-251">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="1d07b-252">このメソッドが例外をスローせずに戻る場合、`lockTaken` パラメーターに指定された変数は常に `true`されるため、テストする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-252">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="1d07b-253">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-253">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-254">値型の変数を `Enter`に渡すと、オブジェクトとしてボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-254">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="1d07b-255">同じ変数を再び `Enter` に渡すと、別のオブジェクトとしてボックス化され、スレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-255">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="1d07b-256">この場合、`Monitor` するコードは保護されていません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-256">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="1d07b-257">さらに、変数を `Exit`に渡すと、別の別のオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-257">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="1d07b-258">`Exit` に渡されたオブジェクトは `Enter`に渡されたオブジェクトとは異なるため、`Monitor` は <xref:System.Threading.SynchronizationLockException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-258">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="1d07b-259">詳細については、概念説明のトピック「[モニター](xref:System.Threading.Monitor)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-259">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="1d07b-260"><xref:System.Threading.Thread.Interrupt%2A> は、オブジェクトへの `Monitor` の入力を待機しているスレッドを中断できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-260"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="1d07b-261"><xref:System.Threading.ThreadInterruptedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-261">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-262">次のコードは、<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> メソッドのオーバーロードを使用するための基本的なパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-262">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="1d07b-263">このオーバーロードでは、メソッドが例外をスローした場合でも、`ref` パラメーター (`ByRef` Visual Basic `lockTaken`) に渡される変数の値が常に設定されます。したがって、変数の値は、ロックを解放する必要があるかどうかをテストするための信頼性の高い方法です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-263">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d07b-264"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-264">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-265"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-265">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-266">ロックを解放する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-266">The object on which to release the lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-267">指定したオブジェクトの排他ロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-267">Releases an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-268">呼び出し元のスレッドは、`obj` パラメーターのロックを所有している必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-268">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="1d07b-269">呼び出し元のスレッドが、指定されたオブジェクトに対するロックを所有していて、そのオブジェクトに対して同じ数の `Exit` と <xref:System.Threading.Monitor.Enter%2A> 呼び出しを行った場合は、ロックが解放されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-269">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="1d07b-270">呼び出し元のスレッドが `Enter``Exit` 何回も呼び出されていない場合、ロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-270">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="1d07b-271">ロックが解除され、他のスレッドがそのオブジェクトの準備完了キューにある場合、スレッドの1つがロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-271">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="1d07b-272">他のスレッドがロックの取得を待機している待機キューにある場合、ロックの所有者が `Exit`を呼び出すと、そのスレッドは準備完了キューに自動的に移動されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-272">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="1d07b-273">1つ以上の待機中のスレッドを準備完了キューに移動するには、`Exit`を呼び出す前に <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-273">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-274">`Exit` メソッドの使用方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-274">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-275"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-275">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-276">現在のスレッドが、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-276">The current thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-277">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-277">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-278">テストするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-278">The object to test.</span></span></param>
        <summary><span data-ttu-id="1d07b-279">現在のスレッドが指定したオブジェクトのロックを保持しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-279">Determines whether the current thread holds the lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="1d07b-280">現在のスレッドが <see langword="true" /> のロックを保持している場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-280"><see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-281">このメソッドの動作のメソッドを使用して取得されるロックに対してのみ、<xref:System.Threading.Monitor>クラス、またはを使用して、C#`lock`ステートメントまたは Visual Basic`SyncLock`ステートメントで実装される<xref:System.Threading.Monitor>します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-281">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="1d07b-282">このメソッドは、<xref:System.Diagnostics.Debug.Assert%2A> メソッドや <xref:System.Diagnostics.Contracts.Contract> クラスなどの診断ツールと共に使用して、<xref:System.Threading.Monitor> クラスに関連するロックの問題をデバッグします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-282">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-283"><paramref name="obj" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-283"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LockContentionCount">
      <MemberSignature Language="C#" Value="public static long LockContentionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 LockContentionCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Monitor.LockContentionCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LockContentionCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long LockContentionCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LockContentionCount : int64" Usage="System.Threading.Monitor.LockContentionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d07b-284">モニターのロックを取得しようとするときに、接続があった回数を取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-284">Gets the number of times there was contention when trying to take the monitor's lock.</span></span></summary>
        <value><span data-ttu-id="1d07b-285">モニターのロックを取得しようとしたときに競合が発生した回数。</span><span class="sxs-lookup"><span data-stu-id="1d07b-285">The number of times there was contention when trying to take the monitor's lock.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-286">スレッドが待機するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-286">The object a thread is waiting for.</span></span></param>
        <summary><span data-ttu-id="1d07b-287">ロックされたオブジェクトの状態が変更されたことを、待機キュー内のスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-287">Notifies a thread in the waiting queue of a change in the locked object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-288">`Pulse`を使用して待機中のオブジェクトを通知できるのは、ロックの現在の所有者だけです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-288">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="1d07b-289">現在、指定したオブジェクトのロックを所有しているスレッドは、このメソッドを呼び出して、ロックの行の次のスレッドを通知します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-289">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="1d07b-290">パルスを受け取ると、待機中のスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-290">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="1d07b-291">`Pulse` 呼び出されたスレッドがロックを解放すると、準備完了キュー内の次のスレッド (これは、必ずしも公開されていたスレッドではありません) がロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-291">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d07b-292"><xref:System.Threading.Monitor> クラスは、<xref:System.Threading.Monitor.Pulse%2A> メソッドが呼び出されたことを示す状態を保持しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-292">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="1d07b-293">したがって、待機しているスレッドがないときに <xref:System.Threading.Monitor.Pulse%2A> を呼び出した場合、<xref:System.Threading.Monitor.Wait%2A> を呼び出す次のスレッドは <xref:System.Threading.Monitor.Pulse%2A> が呼び出されたことがないかのようにブロックされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-293">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="1d07b-294">2つのスレッドが <xref:System.Threading.Monitor.Pulse%2A> を使用し、対話する <xref:System.Threading.Monitor.Wait%2A> 場合、デッドロックが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-294">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="1d07b-295">これを <xref:System.Threading.AutoResetEvent> クラスの動作と比較します。 <xref:System.Threading.EventWaitHandle.Set%2A> メソッドを呼び出して <xref:System.Threading.AutoResetEvent> を通知し、待機中のスレッドが存在しない場合、スレッドが <xref:System.Threading.WaitHandle.WaitOne%2A>、<xref:System.Threading.WaitHandle.WaitAny%2A>、または <xref:System.Threading.WaitHandle.WaitAll%2A>を呼び出すまで、<xref:System.Threading.AutoResetEvent> はシグナル状態のままになります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-295">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="1d07b-296"><xref:System.Threading.AutoResetEvent> は、そのスレッドを解放し、非シグナル状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-296">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="1d07b-297">同期されたオブジェクトには、現在ロックを保持しているスレッドへの参照、準備完了キューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照が保持されていることに注意してください。オブジェクトの状態が変更されたことを示す通知を待機しているスレッドを格納します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-297">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-298">`Pulse`、<xref:System.Threading.Monitor.PulseAll%2A>、および <xref:System.Threading.Monitor.Wait%2A> メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-298">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-299">複数のスレッドを通知するには、<xref:System.Threading.Monitor.PulseAll%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-299">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-300"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-300">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-301">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-301">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-302">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-302">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-303">パルスを送るオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-303">The object that sends the pulse.</span></span></param>
        <summary><span data-ttu-id="1d07b-304">オブジェクトの状態が変更されたことを、待機中のすべてのスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-304">Notifies all waiting threads of a change in the object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-305">現在、指定されたオブジェクトのロックを所有しているスレッドは、このメソッドを呼び出して、オブジェクトのロックの取得を待機しているすべてのスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-305">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="1d07b-306">シグナルが送信されると、待機中のスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-306">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="1d07b-307">`PulseAll` 呼び出されたスレッドがロックを解放すると、準備完了キュー内の次のスレッドがロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-307">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="1d07b-308">同期されたオブジェクトには、現在ロックを保持しているスレッドへの参照、準備完了キューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照が保持されていることに注意してください。オブジェクトの状態が変更されたことを示す通知を待機しているスレッドを格納します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-308">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-309"><xref:System.Threading.Monitor.Pulse%2A>、`PulseAll`、および <xref:System.Threading.Monitor.Wait%2A> メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-309">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-310"><xref:System.Threading.Monitor.Pulse%2A> メソッドの解説では、スレッドが待機していないときに <xref:System.Threading.Monitor.Pulse%2A> が呼び出された場合の処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-310">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="1d07b-311">1つのスレッドを通知するには、`Pulse` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-311">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-312"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-312">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-313">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-313">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-314">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-314">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d07b-315">指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-315">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-316">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-316">The object on which to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-317">指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-317">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="1d07b-318">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-318"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-319">成功した場合、このメソッドは `obj` パラメーターの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-319">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="1d07b-320">このメソッドは、ロックが使用可能かどうかにかかわらず、直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-320">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="1d07b-321">このメソッドは <xref:System.Threading.Monitor.Enter%2A>に似ていますが、現在のスレッドをブロックすることはありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-321">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="1d07b-322">スレッドがブロックせずに入力できない場合、メソッドは `false,`を返します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-322">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-323">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-323">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-324">詳細については、<xref:System.Threading.Monitor> に関する記事を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-324">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="1d07b-325">スレッドがクリティカルセクションを入力しないようにするには、メソッドの戻り値を調べて、その戻り値が `true`場合にのみ、クリティカルセクションでコードを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-325">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="1d07b-326">次のコード片は、このメソッドの呼び出しに使用されるパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-326">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="1d07b-327">例外が発生した場合に、呼び出し元のスレッドがクリティカルセクションのロックを解放するには、`finally` ブロックで <xref:System.Threading.Monitor.Exit%2A> を呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-327">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-328">次のコード例は、`TryEnter` メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-328">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-329"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-329">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-330">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-330">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * bool -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-331">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-331">The object on which to acquire the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="1d07b-332">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-332">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="1d07b-333">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-333">The input must be <see langword="false" />.</span></span> <span data-ttu-id="1d07b-334">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-334">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="1d07b-335">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-335">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-336">指定したオブジェクトの排他ロックの取得を試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-336">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-337">成功した場合、このメソッドは `obj` パラメーターの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-337">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="1d07b-338">このメソッドは、ロックが使用可能かどうかにかかわらず、直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-338">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="1d07b-339">例外がスローされたためにロックが取得されなかった場合は、このメソッドの終了後に、`lockTaken` パラメーターに指定された変数が `false` ます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-339">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="1d07b-340">これにより、プログラムは常に、ロックを解放する必要があるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-340">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="1d07b-341">このメソッドは <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>に似ていますが、現在のスレッドをブロックすることはありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-341">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="1d07b-342">スレッドがブロックせずに入力できない場合、メソッドから制御が戻ったときに、`lockTaken` 引数が `false` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-342">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-343">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-343">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-344">詳細については、「<xref:System.Threading.Monitor>」の記事を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-344">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="1d07b-345">スレッドがクリティカルセクションを入力しないようにするには、`lockTaken` の値を調べ、その値が `true`の場合にのみクリティカルセクションでコードを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-345">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="1d07b-346">次のコード片は、このメソッドの呼び出しに使用されるパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-346">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="1d07b-347">例外が発生した場合に、呼び出し元のスレッドがクリティカルセクションのロックを解放するには、`finally` ブロックで <xref:System.Threading.Monitor.Exit%2A> を呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-347">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-348">次のコードは、<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> メソッドのオーバーロードを使用するための基本的なパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-348">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="1d07b-349">このオーバーロードでは、メソッドが例外をスローした場合でも、`ref` パラメーター (`ByRef` Visual Basic `lockTaken`) に渡される変数の値が常に設定されます。したがって、変数の値は、ロックを解放する必要があるかどうかをテストするための信頼性の高い方法です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-349">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d07b-350"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-350">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-351"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-352">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-352">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="1d07b-353">ロックを待機するミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="1d07b-353">The number of milliseconds to wait for the lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-354">指定したミリ秒間に、指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-354">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="1d07b-355">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-355"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-356">`millisecondsTimeout` パラメーターが <xref:System.Threading.Timeout.Infinite>に等しい場合、このメソッドは <xref:System.Threading.Monitor.Enter%2A>に相当します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-356">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="1d07b-357">`millisecondsTimeout` が0の場合、このメソッドは <xref:System.Threading.Monitor.TryEnter%2A>と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-357">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-358">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-358">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-359">詳細については、<xref:System.Threading.Monitor> に関する記事を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-359">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="1d07b-360">スレッドがクリティカルセクションを入力しないようにするには、メソッドの戻り値を調べて、その戻り値が `true`場合にのみ、クリティカルセクションでコードを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-360">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="1d07b-361">次のコード片は、このメソッドの呼び出しに使用されるパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-361">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="1d07b-362">例外が発生した場合に、呼び出し元のスレッドがクリティカルセクションのロックを解放するには、`finally` ブロックで <xref:System.Threading.Monitor.Exit%2A> を呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-362">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-363"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-363">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-364"><paramref name="millisecondsTimeout" /> は負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-364"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-365">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-365">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-366">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-366">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="1d07b-367">ロックを待機する時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-367">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span></span> <span data-ttu-id="1d07b-368">-1 ミリ秒という値は、無期限の待機を指定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-368">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="1d07b-369">指定した時間内に、指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-369">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="1d07b-370">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-370"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-371">ミリ秒に変換された `timeout` パラメーターの値が-1 と等しい場合、このメソッドは <xref:System.Threading.Monitor.Enter%2A>と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-371">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="1d07b-372">`timeout` の値が0の場合、このメソッドは <xref:System.Threading.Monitor.TryEnter%2A>と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-372">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-373">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-373">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-374">詳細については、<xref:System.Threading.Monitor> クラスに関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-374">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="1d07b-375">スレッドがクリティカルセクションを入力しないようにするには、メソッドの戻り値を調べて、その戻り値が `true`場合にのみ、クリティカルセクションでコードを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-375">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="1d07b-376">次のコード片は、このメソッドの呼び出しに使用されるパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-376">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="1d07b-377">例外が発生した場合に、呼び出し元のスレッドがクリティカルセクションのロックを解放するには、`finally` ブロックで <xref:System.Threading.Monitor.Exit%2A> を呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-377">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-378"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-378">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-379"><paramref name="timeout" /> ミリ秒の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-379">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-380">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-380">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int * bool -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-381">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-381">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="1d07b-382">ロックを待機するミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="1d07b-382">The number of milliseconds to wait for the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="1d07b-383">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-383">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="1d07b-384">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-384">The input must be <see langword="false" />.</span></span> <span data-ttu-id="1d07b-385">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-385">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="1d07b-386">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-386">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-387">指定したオブジェクトの排他ロックの取得を指定したミリ秒間試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-387">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-388">`millisecondsTimeout` パラメーターが <xref:System.Threading.Timeout.Infinite>に等しい場合、このメソッドは <xref:System.Threading.Monitor.Enter%28System.Object%29>に相当します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-388">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="1d07b-389">`millisecondsTimeout` が0の場合、このメソッドは <xref:System.Threading.Monitor.TryEnter%28System.Object%29>と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-389">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="1d07b-390">例外がスローされたためにロックが取得されなかった場合は、このメソッドの終了後に、`lockTaken` パラメーターに指定された変数が `false` ます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-390">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="1d07b-391">これにより、プログラムは常に、ロックを解放する必要があるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-391">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-392">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-392">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-393">詳細については、<xref:System.Threading.Monitor> クラスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-393">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="1d07b-394">スレッドがクリティカルセクションを入力しないようにするには、`lockTaken` の値を調べ、その値が `true`の場合にのみクリティカルセクションでコードを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-394">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="1d07b-395">次のコード片は、このメソッドの呼び出しに使用されるパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-395">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="1d07b-396">例外が発生した場合に、呼び出し元のスレッドがクリティカルセクションのロックを解放するには、`finally` ブロックで <xref:System.Threading.Monitor.Exit%2A> を呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-396">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="1d07b-397">次のコードは、<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> メソッドのオーバーロードを使用するための基本的なパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-397">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="1d07b-398">このオーバーロードでは、メソッドが例外をスローした場合でも、`ref` パラメーター (`ByRef` Visual Basic `lockTaken`) に渡される変数の値が常に設定されます。したがって、変数の値は、ロックを解放する必要があるかどうかをテストするための信頼性の高い方法です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-398">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d07b-399"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-399">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-400"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-400">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-401"><paramref name="millisecondsTimeout" /> は負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-401"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan * bool -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-402">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-402">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="1d07b-403">ロックを待機する時間。</span><span class="sxs-lookup"><span data-stu-id="1d07b-403">The amount of time to wait for the lock.</span></span> <span data-ttu-id="1d07b-404">-1 ミリ秒という値は、無期限の待機を指定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-404">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="1d07b-405">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-405">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="1d07b-406">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-406">The input must be <see langword="false" />.</span></span> <span data-ttu-id="1d07b-407">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-407">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="1d07b-408">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-408">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="1d07b-409">指定したオブジェクトの排他ロックの取得を指定した時間にわたって試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-409">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-410">ミリ秒に変換された `timeout` パラメーターの値が-1 と等しい場合、このメソッドは <xref:System.Threading.Monitor.Enter%28System.Object%29>と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-410">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="1d07b-411">`timeout` の値が0の場合、このメソッドは <xref:System.Threading.Monitor.TryEnter%28System.Object%29>と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-411">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="1d07b-412">例外がスローされたためにロックが取得されなかった場合は、このメソッドの終了後に、`lockTaken` パラメーターに指定された変数が `false` ます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-412">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="1d07b-413">これにより、プログラムは常に、ロックを解放する必要があるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-413">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-414">値型ではなく、オブジェクト (参照型) をロックするには <xref:System.Threading.Monitor> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-414">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="1d07b-415">詳細については、<xref:System.Threading.Monitor> クラスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-415">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="1d07b-416">スレッドがクリティカルセクションを入力しないようにするには、`lockTaken` の値を調べ、その値が `true`の場合にのみクリティカルセクションでコードを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-416">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="1d07b-417">次のコード片は、このメソッドの呼び出しに使用されるパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-417">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="1d07b-418">例外が発生した場合に、呼び出し元のスレッドがクリティカルセクションのロックを解放するには、`finally` ブロックで <xref:System.Threading.Monitor.Exit%2A> を呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-418">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d07b-419"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-419">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-420"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-420">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-421"><paramref name="timeout" /> ミリ秒の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-421">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-422">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-422">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d07b-423">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-423">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-424">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-424">The object on which to wait.</span></span></param>
        <summary><span data-ttu-id="1d07b-425">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-425">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
        <returns><span data-ttu-id="1d07b-426">呼び出し元が、指定したオブジェクトのロックを再取得したために呼び出しが返された場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-426"><see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span></span> <span data-ttu-id="1d07b-427">このメソッドは、ロックが再取得されないと制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-427">This method does not return if the lock is not reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-428">現在、指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるようにオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-428">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="1d07b-429">ロックの再取得を待機している間に、呼び出し元がブロックされました。</span><span class="sxs-lookup"><span data-stu-id="1d07b-429">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="1d07b-430">このメソッドは、別のスレッドの操作の結果として発生する状態の変化を呼び出し元が待機する必要があるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-430">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="1d07b-431">スレッドが `Wait`を呼び出すと、オブジェクトのロックが解放され、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-431">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="1d07b-432">オブジェクトの準備完了キュー内の次のスレッド (存在する場合) は、ロックを取得し、オブジェクトを排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-432">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="1d07b-433">`Wait` を呼び出すすべてのスレッドは、ロックの所有者によって送信された <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A>からのシグナルを受信するまで待機キューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-433">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="1d07b-434">`Pulse` が送信されると、待機キューの先頭にあるスレッドだけが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-434">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="1d07b-435">`PulseAll` が送信されると、そのオブジェクトを待機しているすべてのスレッドが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-435">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="1d07b-436">シグナルを受信すると、1つまたは複数のスレッドが待機キューを離れ、準備完了キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-436">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="1d07b-437">準備完了キュー内のスレッドは、ロックを再取得することが許可されています。</span><span class="sxs-lookup"><span data-stu-id="1d07b-437">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="1d07b-438">このメソッドは、呼び出し元のスレッドがオブジェクトのロックを再取得たときにを返します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-438">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="1d07b-439">ロックの所有者が `Pulse` または `PulseAll`を呼び出さない場合、このメソッドは無期限にブロックされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d07b-439">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="1d07b-440">呼び出し元は、指定されたオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> が呼び出された回数に関係なく、一度 `Wait` を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-440">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="1d07b-441">概念的には、`Wait` メソッドは、呼び出し元がオブジェクトに対して `Enter` 呼び出した回数を格納し、ロックされたオブジェクトを完全に解放するために必要な回数だけ `Exit` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-441">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="1d07b-442">その後、オブジェクトの再取得を待機している間、呼び出し元はブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-442">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="1d07b-443">呼び出し元がロックを再取得すると、システムは、呼び出し元に対して保存された `Enter` カウントを復元するために必要な回数だけ `Enter` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-443">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="1d07b-444">を呼び出すと、指定したオブジェクトのロックのみが解放されます。 `Wait` は、呼び出し元が他のオブジェクトのロックの所有者である場合、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-444">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="1d07b-445">同期されたオブジェクトには、現在ロックを保持しているスレッドへの参照、準備完了キューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照が保持されていることに注意してください。オブジェクトの状態が変更されたことを示す通知を待機しているスレッドを格納します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-445">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-446"><xref:System.Threading.Monitor.Pulse%2A>、<xref:System.Threading.Monitor.PulseAll%2A>、および `Wait` メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-446">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-447"><xref:System.Threading.Monitor.Pulse%2A> メソッドの解説では、スレッドが待機していないときに <xref:System.Threading.Monitor.Pulse%2A> が呼び出された場合の処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-447">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-448"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-448">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-449">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-449">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="1d07b-450"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-450">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="1d07b-451">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-451">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-452">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-452">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-453">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-453">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="1d07b-454">スレッドが実行待ちキューに入るまでの待機時間 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="1d07b-454">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="1d07b-455">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-455">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="1d07b-456">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-456">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="1d07b-457">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-457"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="1d07b-458">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-458">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-459">このメソッドは、`obj` パラメーターに対して排他ロックを再取得するまで、を返しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-459">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="1d07b-460">現在、指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるようにオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-460">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="1d07b-461">ロックの再取得を待機している間に、呼び出し元がブロックされました。</span><span class="sxs-lookup"><span data-stu-id="1d07b-461">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="1d07b-462">このメソッドは、別のスレッドの操作の結果として発生する状態の変化を呼び出し元が待機する必要があるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-462">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="1d07b-463">タイムアウトにより、<xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを最初に呼び出さずに、別のスレッドがロックを解放した場合に、現在のスレッドが無期限にブロックされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-463">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="1d07b-464">また、スレッドを準備完了キューに移動し、待機キュー内で他のスレッドをバイパスして、ロックをすぐに再取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-464">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="1d07b-465">スレッドは、<xref:System.Threading.Monitor.Wait%2A> メソッドの戻り値をテストして、タイムアウト前にロックを再取得するかどうかを判断できます。スレッドは、待機に入る原因となった条件を評価し、必要に応じて <xref:System.Threading.Monitor.Wait%2A> メソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-465">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="1d07b-466">スレッドが `Wait`を呼び出すと、オブジェクトのロックが解放され、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-466">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="1d07b-467">オブジェクトの準備完了キュー内の次のスレッド (存在する場合) は、ロックを取得し、オブジェクトを排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-467">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="1d07b-468">ロックを保持するスレッドが <xref:System.Threading.Monitor.PulseAll%2A>を呼び出すか、またはキュー内の次のスレッドが呼び出され、ロックを保持しているスレッドが <xref:System.Threading.Monitor.Pulse%2A>を呼び出すまで、`Wait` を呼び出したスレッドは待機キューに残ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-468">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="1d07b-469">ただし、別のスレッドがこのオブジェクトの <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを呼び出す前に `millisecondsTimeout` が経過すると、ロックを取り戻すために元のスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-469">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-470">`millisecondsTimeout` パラメーターに <xref:System.Threading.Timeout.Infinite> が指定されている場合、ロックの所有者が <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A>を呼び出す場合を除き、このメソッドは無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-470">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="1d07b-471">`millisecondsTimeout` が0の場合、`Wait` を呼び出すスレッドはロックを解放し、ロックを取り戻すためにすぐに準備完了キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-471">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="1d07b-472">呼び出し元は、指定されたオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> が呼び出された回数に関係なく、一度 `Wait` を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-472">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="1d07b-473">概念的には、`Wait` メソッドは、呼び出し元がオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> 呼び出した回数を格納し、ロックされたオブジェクトを完全に解放するために必要な回数だけ <xref:System.Threading.Monitor.Exit%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-473">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="1d07b-474">その後、オブジェクトの再取得を待機している間、呼び出し元はブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-474">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="1d07b-475">呼び出し元がロックを再取得すると、システムは、呼び出し元に対して保存された <xref:System.Threading.Monitor.Enter%2A> カウントを復元するために必要な回数だけ <xref:System.Threading.Monitor.Enter%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-475">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="1d07b-476">を呼び出すと、指定したオブジェクトのロックのみが解放されます。 `Wait` は、呼び出し元が他のオブジェクトのロックの所有者である場合、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-476">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-477">同期されたオブジェクトは、現在ロックを保持しているスレッドへの参照、準備されたキューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照を保持します。これには、オブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="1d07b-477">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-478"><xref:System.Threading.Monitor.Pulse%2A>、<xref:System.Threading.Monitor.PulseAll%2A>、および `Wait` メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-478">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-479"><xref:System.Threading.Monitor.Pulse%2A> メソッドの解説では、スレッドが待機していないときに <xref:System.Threading.Monitor.Pulse%2A> が呼び出された場合の処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-479">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-480"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-480">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-481">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-481">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="1d07b-482"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-482">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="1d07b-483">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-483">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-484"><paramref name="millisecondsTimeout" /> パラメーターの値が負で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-484">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-485">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-485">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-486">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-486">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="1d07b-487">スレッドが実行待ちキューに入るまでの時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-487">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="1d07b-488">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-488">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="1d07b-489">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-489">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="1d07b-490">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-490"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="1d07b-491">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-491">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-492">このメソッドは、`obj` パラメーターに対して排他ロックを再取得するまで、を返しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-492">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="1d07b-493">現在、指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるようにオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-493">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="1d07b-494">ロックの再取得を待機している間に、呼び出し元がブロックされました。</span><span class="sxs-lookup"><span data-stu-id="1d07b-494">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="1d07b-495">このメソッドは、別のスレッドの操作の結果として発生する状態の変化を呼び出し元が待機する必要があるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-495">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="1d07b-496">タイムアウトにより、<xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを最初に呼び出さずに、別のスレッドがロックを解放した場合に、現在のスレッドが無期限にブロックされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-496">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="1d07b-497">また、スレッドを準備完了キューに移動し、待機キュー内で他のスレッドをバイパスして、ロックをすぐに再取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-497">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="1d07b-498">スレッドは、<xref:System.Threading.Monitor.Wait%2A> メソッドの戻り値をテストして、タイムアウト前にロックを再取得するかどうかを判断できます。スレッドは、待機に入る原因となった条件を評価し、必要に応じて <xref:System.Threading.Monitor.Wait%2A> メソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-498">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="1d07b-499">スレッドが `Wait`を呼び出すと、オブジェクトのロックが解放され、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-499">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="1d07b-500">オブジェクトの準備完了キュー内の次のスレッド (存在する場合) は、ロックを取得し、オブジェクトを排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-500">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="1d07b-501">ロックを保持するスレッドが <xref:System.Threading.Monitor.PulseAll%2A>を呼び出すか、またはキュー内の次のスレッドが呼び出され、ロックを保持しているスレッドが <xref:System.Threading.Monitor.Pulse%2A>を呼び出すまで、`Wait` を呼び出したスレッドは待機キューに残ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-501">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="1d07b-502">ただし、別のスレッドがこのオブジェクトの <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを呼び出す前に `timeout` が経過すると、ロックを取り戻すために元のスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-502">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-503">`timeout` パラメーターに-1 ミリ秒を表す <xref:System.TimeSpan> が指定されている場合、ロックの所有者が <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A>を呼び出す場合を除き、このメソッドは無期限にブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-503">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="1d07b-504">`timeout` が0ミリ秒の場合、`Wait` を呼び出すスレッドはロックを解放し、ロックを取り戻すためにすぐに準備完了キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-504">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="1d07b-505">呼び出し元は、指定されたオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> が呼び出された回数に関係なく、一度 `Wait` を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-505">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="1d07b-506">概念的には、`Wait` メソッドは、呼び出し元がオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> 呼び出した回数を格納し、ロックされたオブジェクトを完全に解放するために必要な回数だけ <xref:System.Threading.Monitor.Exit%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-506">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="1d07b-507">その後、オブジェクトの再取得を待機している間、呼び出し元はブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-507">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="1d07b-508">呼び出し元がロックを再取得すると、システムは、呼び出し元に対して保存された <xref:System.Threading.Monitor.Enter%2A> カウントを復元するために必要な回数だけ <xref:System.Threading.Monitor.Enter%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-508">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="1d07b-509">を呼び出すと、指定したオブジェクトのロックのみが解放されます。 `Wait` は、呼び出し元が他のオブジェクトのロックの所有者である場合、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-509">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-510">同期されたオブジェクトは、現在ロックを保持しているスレッドへの参照、準備されたキューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照を保持します。これには、オブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="1d07b-510">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-511"><xref:System.Threading.Monitor.Pulse%2A>、<xref:System.Threading.Monitor.PulseAll%2A>、および `Wait` メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-511">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-512"><xref:System.Threading.Monitor.Pulse%2A> メソッドの解説では、スレッドが待機していないときに <xref:System.Threading.Monitor.Pulse%2A> が呼び出された場合の処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-512">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-513"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-513">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-514">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-514">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="1d07b-515"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-515">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="1d07b-516">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-516">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-517"><paramref name="timeout" /> パラメーターのミリ秒単位の値が負で、かつ <see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) ではありません。または <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-517">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-518">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-518">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-519">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-519">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="1d07b-520">スレッドが実行待ちキューに入るまでの待機時間 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="1d07b-520">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="1d07b-521">待機の前にコンテキストの同期ドメイン (同期されたコンテキストの場合) を終了および再取得する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-521"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1d07b-522">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-522">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="1d07b-523">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-523">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="1d07b-524">このメソッドは、コンテキストの同期ドメイン (同期されたコンテキストの場合) が待機の前に終了し、後で再取得されるかどうかも指定します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-524">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span></span></summary>
        <returns><span data-ttu-id="1d07b-525">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-525"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="1d07b-526">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-526">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-527">このメソッドは、`obj` パラメーターに対して排他ロックを再取得するまで、を返しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-527">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="1d07b-528">現在、指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるようにオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-528">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="1d07b-529">ロックの再取得を待機している間に、呼び出し元がブロックされました。</span><span class="sxs-lookup"><span data-stu-id="1d07b-529">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="1d07b-530">このメソッドは、別のスレッドの操作の結果として発生する状態の変化を呼び出し元が待機する必要があるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-530">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="1d07b-531">タイムアウトにより、<xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを最初に呼び出さずに、別のスレッドがロックを解放した場合に、現在のスレッドが無期限にブロックされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-531">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="1d07b-532">また、スレッドを準備完了キューに移動し、待機キュー内で他のスレッドをバイパスして、ロックをすぐに再取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-532">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="1d07b-533">スレッドは、<xref:System.Threading.Monitor.Wait%2A> メソッドの戻り値をテストして、タイムアウト前にロックを再取得するかどうかを判断できます。スレッドは、待機に入る原因となった条件を評価し、必要に応じて <xref:System.Threading.Monitor.Wait%2A> メソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-533">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="1d07b-534">スレッドが `Wait`を呼び出すと、ロックが解放され、待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-534">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="1d07b-535">この時点で、準備完了キュー内の次のスレッド (存在する場合) は、ロックの制御を許可されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-535">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="1d07b-536">ロックを保持するスレッドが <xref:System.Threading.Monitor.PulseAll%2A>を呼び出すか、またはキュー内の次のスレッドが呼び出され、ロックを保持しているスレッドが <xref:System.Threading.Monitor.Pulse%2A>を呼び出すまで、`Wait` を呼び出したスレッドは待機キューに残ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-536">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="1d07b-537">ただし、別のスレッドがこのオブジェクトの <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを呼び出す前に `millisecondsTimeout` が経過すると、ロックを取り戻すために元のスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-537">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-538">`millisecondsTimeout` パラメーターに <xref:System.Threading.Timeout.Infinite> が指定されている場合、ロックの所有者が <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A>を呼び出す場合を除き、このメソッドは無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-538">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="1d07b-539">`millisecondsTimeout` が0の場合、`Wait` を呼び出すスレッドはロックを解放し、ロックを取り戻すためにすぐに準備完了キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-539">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="1d07b-540">呼び出し元は、指定されたオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> が呼び出された回数に関係なく、一度 `Wait` を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-540">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="1d07b-541">概念的には、`Wait` メソッドは、呼び出し元がオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> 呼び出した回数を格納し、ロックされたオブジェクトを完全に解放するために必要な回数だけ <xref:System.Threading.Monitor.Exit%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-541">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="1d07b-542">その後、オブジェクトの再取得を待機している間、呼び出し元はブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-542">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="1d07b-543">呼び出し元がロックを再取得すると、システムは、呼び出し元に対して保存された <xref:System.Threading.Monitor.Enter%2A> カウントを復元するために必要な回数だけ <xref:System.Threading.Monitor.Enter%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-543">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="1d07b-544">を呼び出すと、指定したオブジェクトのロックのみが解放されます。 `Wait` は、呼び出し元が他のオブジェクトのロックの所有者である場合、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-544">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-545">同期されたオブジェクトは、現在ロックを保持しているスレッドへの参照、準備されたキューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照を保持します。これには、オブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="1d07b-545">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-546"><xref:System.Threading.Monitor.Pulse%2A>、<xref:System.Threading.Monitor.PulseAll%2A>、および `Wait` メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-546">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-547"><xref:System.Threading.Monitor.Pulse%2A> メソッドの解説では、スレッドが待機していないときに <xref:System.Threading.Monitor.Pulse%2A> が呼び出された場合の処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-547">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1d07b-548">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="1d07b-548">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1d07b-549">`exitContext` パラメーターは、<xref:System.Threading.Monitor.Wait%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-549">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1d07b-550">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-550">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1d07b-551"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-551">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1d07b-552">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.Monitor.Wait%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-552">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="1d07b-553"><xref:System.Threading.Monitor.Wait%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-553">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="1d07b-554">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 属性が適用されている場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-554">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="1d07b-555">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-555">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1d07b-556">メンバーの呼び出し履歴内のコードが <xref:System.Threading.Monitor.Wait%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-556">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1d07b-557"><xref:System.Threading.Monitor.Wait%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-557">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-558"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-558">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-559"><see langword="Wait" /> は、同期されたコード ブロック内からは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-559"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="1d07b-560"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-560">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="1d07b-561">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-561">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-562"><paramref name="millisecondsTimeout" /> パラメーターの値が負で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-562">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-563">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-563">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d07b-564">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d07b-564">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="1d07b-565">スレッドが実行待ちキューに入るまでの時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-565">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="1d07b-566">待機の前にコンテキストの同期ドメイン (同期されたコンテキストの場合) を終了および再取得する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-566"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1d07b-567">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-567">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="1d07b-568">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-568">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="1d07b-569">または、待機の前に同期化されたコンテキストの同期ドメインを終了し、ドメインを後で再取得します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-569">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span></span></summary>
        <returns><span data-ttu-id="1d07b-570">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d07b-570"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="1d07b-571">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-571">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d07b-572">このメソッドは、`obj` パラメーターに対して排他ロックを再取得するまで、を返しません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-572">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="1d07b-573">現在、指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるようにオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-573">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="1d07b-574">ロックの再取得を待機している間に、呼び出し元がブロックされました。</span><span class="sxs-lookup"><span data-stu-id="1d07b-574">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="1d07b-575">このメソッドは、別のスレッドの操作の結果として発生する状態の変化を呼び出し元が待機する必要があるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-575">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="1d07b-576">タイムアウトにより、<xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを最初に呼び出さずに、別のスレッドがロックを解放した場合に、現在のスレッドが無期限にブロックされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-576">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="1d07b-577">また、スレッドを準備完了キューに移動し、待機キュー内で他のスレッドをバイパスして、ロックをすぐに再取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-577">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="1d07b-578">スレッドは、<xref:System.Threading.Monitor.Wait%2A> メソッドの戻り値をテストして、タイムアウト前にロックを再取得するかどうかを判断できます。スレッドは、待機に入る原因となった条件を評価し、必要に応じて <xref:System.Threading.Monitor.Wait%2A> メソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-578">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="1d07b-579">スレッドが `Wait`を呼び出すと、ロックが解放され、待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-579">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="1d07b-580">この時点で、準備完了キュー内の次のスレッド (存在する場合) は、ロックの制御を許可されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-580">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="1d07b-581">ロックを保持するスレッドが <xref:System.Threading.Monitor.PulseAll%2A>を呼び出すか、またはキュー内の次のスレッドが呼び出され、ロックを保持しているスレッドが <xref:System.Threading.Monitor.Pulse%2A>を呼び出すまで、`Wait` を呼び出したスレッドは待機キューに残ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-581">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="1d07b-582">ただし、別のスレッドがこのオブジェクトの <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A> メソッドを呼び出す前に `timeout` ミリ秒が経過した場合、ロックを取り戻すために元のスレッドは準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-582">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-583">`timeout` パラメーターに-1 ミリ秒を表す <xref:System.TimeSpan> が指定されている場合、ロックの所有者が <xref:System.Threading.Monitor.Pulse%2A> または <xref:System.Threading.Monitor.PulseAll%2A>を呼び出す場合を除き、このメソッドは無期限にブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-583">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="1d07b-584">`timeout` が0ミリ秒の場合、`Wait` を呼び出すスレッドはロックを解放し、ロックを取り戻すためにすぐに準備完了キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-584">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="1d07b-585">呼び出し元は、指定されたオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> が呼び出された回数に関係なく、一度 `Wait` を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-585">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="1d07b-586">概念的には、`Wait` メソッドは、呼び出し元がオブジェクトに対して <xref:System.Threading.Monitor.Enter%2A> 呼び出した回数を格納し、ロックされたオブジェクトを完全に解放するために必要な回数だけ <xref:System.Threading.Monitor.Exit%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-586">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="1d07b-587">その後、オブジェクトの再取得を待機している間、呼び出し元はブロックします。</span><span class="sxs-lookup"><span data-stu-id="1d07b-587">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="1d07b-588">呼び出し元がロックを再取得すると、システムは、呼び出し元に対して保存された <xref:System.Threading.Monitor.Enter%2A> カウントを復元するために必要な回数だけ <xref:System.Threading.Monitor.Enter%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-588">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="1d07b-589">を呼び出すと、指定したオブジェクトのロックのみが解放されます。 `Wait` は、呼び出し元が他のオブジェクトのロックの所有者である場合、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-589">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d07b-590">同期されたオブジェクトは、現在ロックを保持しているスレッドへの参照、準備されたキューへの参照、ロックを取得する準備ができているスレッドを含む、待機キューへの参照など、いくつかの参照を保持します。これには、オブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="1d07b-590">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="1d07b-591"><xref:System.Threading.Monitor.Pulse%2A>、<xref:System.Threading.Monitor.PulseAll%2A>、および `Wait` メソッドは、同期されたコードブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-591">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="1d07b-592"><xref:System.Threading.Monitor.Pulse%2A> メソッドの解説では、スレッドが待機していないときに <xref:System.Threading.Monitor.Pulse%2A> が呼び出された場合の処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-592">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1d07b-593">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="1d07b-593">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1d07b-594">`exitContext` パラメーターは、<xref:System.Threading.Monitor.Wait%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-594">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1d07b-595">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-595">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1d07b-596"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-596">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1d07b-597">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.Monitor.Wait%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="1d07b-597">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="1d07b-598"><xref:System.Threading.Monitor.Wait%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-598">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="1d07b-599">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 属性が適用されている場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-599">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="1d07b-600">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-600">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1d07b-601">メンバーの呼び出し履歴内のコードが <xref:System.Threading.Monitor.Wait%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-601">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1d07b-602"><xref:System.Threading.Monitor.Wait%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-602">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d07b-603"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d07b-603">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="1d07b-604"><see langword="Wait" /> は、同期されたコード ブロック内からは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="1d07b-604"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="1d07b-605">Wait を呼び出すスレッドは、後で待機状態の途中で中断されます。</span><span class="sxs-lookup"><span data-stu-id="1d07b-605">The thread that invokes Wait is later interrupted from the waiting state.</span></span> <span data-ttu-id="1d07b-606">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="1d07b-606">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d07b-607"><paramref name="timeout" /> パラメーターが負で <see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) を表していないか、<see cref="F:System.Int32.MaxValue" /> よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="1d07b-607">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="1d07b-608">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="1d07b-608">Managed Threading</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
