<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49637a5939ed2eae8a51099cf9e801166599037f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75158583" /></Metadata><TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type ThreadAbortException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="90f56-101"><see cref="M:System.Threading.Thread.Abort(System.Object)" /> メソッドが呼び出されるときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="90f56-101">The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method.</span></span> <span data-ttu-id="90f56-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="90f56-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90f56-103"><xref:System.Threading.Thread.Abort%2A> メソッドに呼び出しを行ってスレッドを破棄すると、共通言語ランタイムによって <xref:System.Threading.ThreadAbortException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="90f56-103">When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="90f56-104"><xref:System.Threading.ThreadAbortException> は、キャッチできる特殊な例外ですが、`catch` ブロックの最後に再び自動的に発生します。</span><span class="sxs-lookup"><span data-stu-id="90f56-104"><xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block.</span></span> <span data-ttu-id="90f56-105">この例外が発生すると、ランタイムはスレッドを終了する前にすべての `finally` ブロックを実行します。</span><span class="sxs-lookup"><span data-stu-id="90f56-105">When this exception is raised, the runtime executes all the `finally` blocks before ending the thread.</span></span> <span data-ttu-id="90f56-106">スレッドは `finally` ブロックで無制限の計算を実行できます。または <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> を呼び出して中止を取り消すことができるため、スレッドが終了する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="90f56-106">Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> to cancel the abort, there is no guarantee that the thread will ever end.</span></span> <span data-ttu-id="90f56-107">中止されたスレッドが終了するまで待機する場合は、<xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="90f56-107">If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90f56-108"><xref:System.Threading.Thread.Join%2A> は、スレッドが実際に実行を停止するまで戻らないブロック呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="90f56-108"><xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.</span></span>  
  
<span data-ttu-id="90f56-109">**.Net Core のみ:** この型は .NET Core に存在しますが、<xref:System.Threading.Thread.Abort%2A> はサポートされていないため、共通言語ランタイムは <xref:System.Threading.ThreadAbortException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="90f56-109">**.NET Core only:** Even though this type exists in .NET Core, since <xref:System.Threading.Thread.Abort%2A> is not supported, the common language runtime won't ever throw <xref:System.Threading.ThreadAbortException>.</span></span>

> [!NOTE]
>  <span data-ttu-id="90f56-110">マネージ実行可能ファイルのすべてのフォアグラウンドスレッドが終了した後に、共通言語ランタイム (CLR) がバックグラウンドスレッドを停止すると、<xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>は使用されません。</span><span class="sxs-lookup"><span data-stu-id="90f56-110">When the common language runtime (CLR) stops background threads after all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90f56-111">したがって、<xref:System.Threading.ThreadAbortException> を使用して、バックグラウンドスレッドが CLR によって終了されていることを検出することはできません。</span><span class="sxs-lookup"><span data-stu-id="90f56-111">Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.</span></span>  
  
 <span data-ttu-id="90f56-112"><xref:System.Threading.ThreadAbortException> では、値0x80131530 を持つ HRESULT COR_E_THREADABORTED を使用します。</span><span class="sxs-lookup"><span data-stu-id="90f56-112"><xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90f56-113">継承された <xref:System.Exception.Data%2A> プロパティの値は常に `null`です。</span><span class="sxs-lookup"><span data-stu-id="90f56-113">The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90f56-114">次の例は、スレッドを中止する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="90f56-114">The following example demonstrates aborting a thread.</span></span> <span data-ttu-id="90f56-115">`ThreadAbortException` を受け取るスレッドは、<xref:System.Threading.Thread.ResetAbort%2A> メソッドを使用して abort 要求をキャンセルし、実行を続行します。</span><span class="sxs-lookup"><span data-stu-id="90f56-115">The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.</span></span>  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 <span data-ttu-id="90f56-116">このコードを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="90f56-116">This code produces the following output:</span></span>  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
    <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="90f56-117">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="90f56-117">Destroying threads</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionState : obj" Usage="System.Threading.ThreadAbortException.ExceptionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90f56-118">スレッドの中止に関連するアプリケーション固有の情報を含むオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="90f56-118">Gets an object that contains application-specific information related to the thread abort.</span></span></summary>
        <value><span data-ttu-id="90f56-119">アプリケーション固有の情報を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="90f56-119">An object containing application-specific information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90f56-120">このプロパティによって返されるオブジェクトは、<xref:System.Threading.Thread.Abort%2A> メソッドの `stateInfo` パラメーターを使用して指定されます。</span><span class="sxs-lookup"><span data-stu-id="90f56-120">The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method.</span></span> <span data-ttu-id="90f56-121">このオブジェクトの正確な内容と使用方法は、アプリケーションで定義されています。通常、このメソッドは、中断されるスレッドにとって意味のある情報を伝えるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="90f56-121">The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90f56-122">次のコード例は、中断されているスレッドに情報を渡す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="90f56-122">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="90f56-123">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="90f56-123">Destroying threads</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
