<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3965a4e3783add7e31bdac53c27fd8dd885d253d" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83481002" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit WaitHandle" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="72b5d-101">通知を受けたときに、単一の待機中のスレッドを解放した後、自動的にリセットされるスレッドの同期イベントを表します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-101">Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread.</span></span> <span data-ttu-id="72b5d-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="72b5d-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72b5d-103">スレッド操作 (またはスレッドシグナリング) には、`AutoResetEvent`、<xref:System.Threading.ManualResetEvent>、および <xref:System.Threading.EventWaitHandle> を使用します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-103">You use `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="72b5d-104">詳細については、「[同期プリミティブの概要](~/docs/standard/threading/overview-of-synchronization-primitives.md)」の「[スレッドの操作」または「シグナル通知](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="72b5d-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="72b5d-105">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="72b5d-106">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="72b5d-107">直接的に型を破棄するには、`try`/`catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="72b5d-108">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="72b5d-109">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="72b5d-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="72b5d-110">スレッドは、 [AutoResetEvent system.threading.waithandle.waitone](xref:System.Threading.WaitHandle.WaitOne%2A)を呼び出すことによってシグナルを待機します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-110">A thread waits for a signal by calling [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span></span> <span data-ttu-id="72b5d-111">`AutoResetEvent` がシグナル状態でない場合、スレッドは[AutoResetEvent](xref:System.Threading.EventWaitHandle.Set%2A)が呼び出されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks until [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) is called.</span></span>  
  
 <span data-ttu-id="72b5d-112">`Set` を呼び出すと `AutoResetEvent` は待機中のスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="72b5d-113">`AutoResetEvent` は、1つの待機中のスレッドが解放されるまでシグナル状態のままになり、自動的に非シグナル状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="72b5d-114">待機中のスレッドがない場合、状態は無期限にシグナル状態のままになります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="72b5d-115"><xref:System.Threading.AutoResetEvent> がシグナル状態のときにスレッドが <xref:System.Threading.WaitHandle.WaitOne%2A> を呼び出すと、スレッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="72b5d-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="72b5d-116"><xref:System.Threading.AutoResetEvent> はスレッドを直ちに解放し、シグナル状態ではない状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="72b5d-117"><xref:System.Threading.EventWaitHandle.Set%2A> メソッドを呼び出すたびにスレッドが解放される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="72b5d-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="72b5d-118">2つの呼び出しが近接していて、スレッドが解放される前に2回目の呼び出しが行われる場合、1つのスレッドのみが解放されます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="72b5d-119">これは、2回目の呼び出しが行われなかった場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="72b5d-119">It's as if the second call did not happen.</span></span> <span data-ttu-id="72b5d-120">また、待機中のスレッドがなく、<xref:System.Threading.AutoResetEvent> が既にシグナル状態になっているときに <xref:System.Threading.EventWaitHandle.Set%2A> が呼び出された場合、呼び出しは無効になります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="72b5d-121">コンストラクターにブール値を渡すことによって、`AutoResetEvent` の初期状態を制御できます。初期状態がシグナル状態である場合は `true`、それ以外の場合は `false` ます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="72b5d-122">`AutoResetEvent` は、`static` <xref:System.Threading.WaitHandle.WaitAll%2A> および <xref:System.Threading.WaitHandle.WaitAny%2A> メソッドと共に使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-122">`AutoResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="72b5d-123">.NET Framework バージョン2.0 以降では、<xref:System.Threading.AutoResetEvent> は新しい <xref:System.Threading.EventWaitHandle> クラスから派生します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-123">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="72b5d-124"><xref:System.Threading.AutoResetEvent> は、<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>で作成された <xref:System.Threading.EventWaitHandle> と機能的には同等です。</span><span class="sxs-lookup"><span data-stu-id="72b5d-124">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72b5d-125"><xref:System.Threading.AutoResetEvent> クラスとは異なり、<xref:System.Threading.EventWaitHandle> クラスは、名前付きシステム同期イベントへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-125">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72b5d-126">次の例は、ユーザーが**enter**キーを押すたびに (基本クラスで) <xref:System.Threading.EventWaitHandle.Set%2A> メソッドを呼び出すことによって、<xref:System.Threading.AutoResetEvent> を使用して一度に1つのスレッドを解放する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="72b5d-126">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="72b5d-127">この例では、シグナル状態で作成された <xref:System.Threading.AutoResetEvent> を待機する3つのスレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-127">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="72b5d-128"><xref:System.Threading.AutoResetEvent> が既にシグナル状態になっているため、最初のスレッドがすぐに解放されます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-128">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="72b5d-129">これにより、<xref:System.Threading.AutoResetEvent> が非シグナル状態にリセットされ、後続のスレッドがブロックされるようになります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-129">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="72b5d-130">ブロックされたスレッドは、ユーザーが**enter**キーを押すことによって一度に1つずつ解放されるまで解放されません。</span><span class="sxs-lookup"><span data-stu-id="72b5d-130">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="72b5d-131">スレッドは、最初の <xref:System.Threading.AutoResetEvent>から解放された後、シグナル状態ではない状態で作成された別の <xref:System.Threading.AutoResetEvent> で待機します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-131">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="72b5d-132">3つすべてのスレッドがブロックされるため、<xref:System.Threading.EventWaitHandle.Set%2A> メソッドを3回呼び出してすべてを解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-132">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="72b5d-133">このクラスはスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="72b5d-133">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="72b5d-134">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="72b5d-134">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="72b5d-135">同期プリミティブの概要</span><span class="sxs-lookup"><span data-stu-id="72b5d-135">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="72b5d-136">初期状態をシグナル状態に設定する場合は <see langword="true" />。初期状態を非シグナル状態に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72b5d-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="72b5d-137">初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<see cref="T:System.Threading.AutoResetEvent" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="72b5d-138">次の例では、<xref:System.Threading.AutoResetEvent> を使用して、2つのスレッドのアクティビティを同期します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="72b5d-139">最初のスレッド (アプリケーションスレッド) は `Main`を実行します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="72b5d-140">保護されたリソースに値を書き込みます。これは、`number`という名前の `static` (Visual Basic で`Shared`) フィールドです。</span><span class="sxs-lookup"><span data-stu-id="72b5d-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="72b5d-141">2番目のスレッドは、静的な `ThreadProc` メソッドを実行します。このメソッドは、`Main`によって書き込まれた値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="72b5d-142">`ThreadProc` メソッドは、<xref:System.Threading.AutoResetEvent>を待機します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="72b5d-143">`Main` が <xref:System.Threading.AutoResetEvent>で <xref:System.Threading.EventWaitHandle.Set%2A> メソッドを呼び出すと、`ThreadProc` メソッドは1つの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="72b5d-144"><xref:System.Threading.AutoResetEvent> はすぐにリセットされるため、`ThreadProc` メソッドはもう一度待機します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="72b5d-145">プログラムロジックでは、`ThreadProc` メソッドが同じ値を2回読み取らないことを保証します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="72b5d-146">`ThreadProc` メソッドが `Main`によって書き込まれたすべての値を読み取ることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="72b5d-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="72b5d-147">この保証には、2番目の <xref:System.Threading.AutoResetEvent> ロックが必要です。</span><span class="sxs-lookup"><span data-stu-id="72b5d-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="72b5d-148">各書き込み操作の後、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを呼び出すことによって `Main` が生成され、2番目のスレッドで実行できるようになります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="72b5d-149">それ以外の場合、シングルプロセッサコンピューターでは、`Main` は2つの読み取り操作の間に多数の値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="72b5d-150">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="72b5d-150">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="72b5d-151">同期プリミティブの概要</span><span class="sxs-lookup"><span data-stu-id="72b5d-151">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="72b5d-152">イベントの状態を非シグナル状態に設定し、スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="72b5d-152">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="72b5d-153">正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72b5d-153"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="72b5d-154">イベントの状態をシグナル状態に設定し、待機している最大で 1 つのスレッドが進行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="72b5d-154">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="72b5d-155">正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72b5d-155"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="72b5d-156">Set メソッドは、1つのスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="72b5d-156">The Set method releases a single thread.</span></span> <span data-ttu-id="72b5d-157">待機中のスレッドがない場合、待機ハンドルは、スレッドが待機を試みるか、Reset メソッドが呼び出されるまで、シグナル状態のままになります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-157">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="72b5d-158">Set メソッドを呼び出すたびにスレッドが解放される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="72b5d-158">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="72b5d-159">2つの呼び出しが近すぎて、スレッドが解放される前に2回目の呼び出しが行われるようにすると、2回目の呼び出しが行われなかったかのように、1つのスレッドのみが解放されます。</span><span class="sxs-lookup"><span data-stu-id="72b5d-159">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="72b5d-160">また、待機中のスレッドがなく、<xref:System.Threading.AutoResetEvent> が既にシグナル状態になっているときに Set メソッドが呼び出された場合、呼び出しは無効になります。</span><span class="sxs-lookup"><span data-stu-id="72b5d-160">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
