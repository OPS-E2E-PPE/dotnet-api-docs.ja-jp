<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26789cc7b48bf0a4ceeb2935cbe3d0c8376def10" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78781155" /></Metadata><TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ReaderWriterLockSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="09250-101">リソースへのアクセス管理に使用するロックを表し、複数のスレッドによる読み取りや排他アクセスでの書き込みを実現します。</span><span class="sxs-lookup"><span data-stu-id="09250-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-102">複数のスレッドによって読み取られ、一度に1つのスレッドによって書き込まれるリソースを保護するには、<xref:System.Threading.ReaderWriterLockSlim> を使用します。</span><span class="sxs-lookup"><span data-stu-id="09250-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="09250-103"><xref:System.Threading.ReaderWriterLockSlim> を使用すると、複数のスレッドを読み取りモードにすることができ、1つのスレッドをロックの排他所有権を持つ書き込みモードにすることができます。また、読み取りアクセス権を持つ1つのスレッドを、アップグレード可能な読み取りモードにすることができます</span><span class="sxs-lookup"><span data-stu-id="09250-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-104"><xref:System.Threading.ReaderWriterLockSlim> は <xref:System.Threading.ReaderWriterLock> と似ていますが、再帰の規則や、ロック状態のアップグレードおよびダウングレードの規則が簡素化されています。</span><span class="sxs-lookup"><span data-stu-id="09250-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="09250-105"><xref:System.Threading.ReaderWriterLockSlim> は、デッドロックの可能性を大幅に回避します。</span><span class="sxs-lookup"><span data-stu-id="09250-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="09250-106">さらに、<xref:System.Threading.ReaderWriterLockSlim> のパフォーマンスは <xref:System.Threading.ReaderWriterLock> と比較して格段に優れています。</span><span class="sxs-lookup"><span data-stu-id="09250-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="09250-107">すべての新規開発で、<xref:System.Threading.ReaderWriterLockSlim> を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="09250-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="09250-108">既定では、<xref:System.Threading.ReaderWriterLockSlim> の新しいインスタンスは、<xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> フラグを使用して作成され、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="09250-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="09250-109">この既定のポリシーは、すべての新しい開発で推奨されます。再帰によって不要な複雑さが発生し、コードのデッドロックが発生しやすくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="09250-110"><xref:System.Threading.Monitor> または <xref:System.Threading.ReaderWriterLock>を使用する既存のプロジェクトからの移行を簡単にするために、<xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> フラグを使用して、再帰を許可する <xref:System.Threading.ReaderWriterLockSlim> のインスタンスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="09250-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="09250-111">スレッドは、読み取りモード、書き込みモード、およびアップグレード可能な読み取りモードの3つのモードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="09250-112">(このトピックの残りの部分では、"アップグレード可能な読み取りモード" を "アップグレード可能モード" と呼びます。 "enter `x` mode" という語句は、長い語句 "`x` モードでロックを入力します。" に設定されています。)</span><span class="sxs-lookup"><span data-stu-id="09250-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="09250-113">再帰ポリシーに関係なく、一度に1つのスレッドだけが書き込みモードになることがあります。</span><span class="sxs-lookup"><span data-stu-id="09250-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="09250-114">スレッドが書き込みモードの場合、他のスレッドはどのモードでもロックに入ることができません。</span><span class="sxs-lookup"><span data-stu-id="09250-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="09250-115">アップグレード可能モードでは、いつでも1つのスレッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="09250-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="09250-116">任意の数のスレッドを読み取りモードにすることができます。また、他のスレッドが読み取りモードの間は、アップグレード可能モードで1つのスレッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="09250-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="09250-117">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="09250-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="09250-118">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="09250-119">直接的に型を破棄するには、`try`/`catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="09250-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="09250-120">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="09250-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="09250-121">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="09250-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="09250-122"><xref:System.Threading.ReaderWriterLockSlim> にはマネージスレッドアフィニティがあります。つまり、各 <xref:System.Threading.Thread> オブジェクトは、ロックモードを開始および終了するために独自のメソッド呼び出しを行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="09250-123">スレッドが別のスレッドのモードを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="09250-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="09250-124"><xref:System.Threading.ReaderWriterLockSlim> が再帰を許可しない場合、ロックに入ろうとするスレッドはいくつかの理由でブロックされることがあります。</span><span class="sxs-lookup"><span data-stu-id="09250-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="09250-125">書き込みモードに入るのを待機しているスレッドがある場合、または書き込みモードで1つのスレッドがある場合は、読み取りモードを開始しようとするスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="09250-126">ライターがキューに置かれたときに新しいリーダーをブロックすることは、ライターを優先するロック公平性ポリシーです。</span><span class="sxs-lookup"><span data-stu-id="09250-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="09250-127">現在の公平性ポリシーでは、最も一般的なシナリオでスループットを向上させるために、読み取りと書き込みのバランスを取ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="09250-128">将来のバージョンの [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] では、新しい公平性ポリシーが導入される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="09250-129">アップグレード可能モードでスレッドが既に存在する場合、書き込みモードに入るのを待機しているスレッドがある場合、または書き込みモードのスレッドが1つの場合は、アップグレード可能モードに入ろうとするスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="09250-130">3つのモードのいずれかにスレッドがある場合は、書き込みモードに入ろうとするスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="09250-131">ロックのアップグレードとダウングレード</span><span class="sxs-lookup"><span data-stu-id="09250-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="09250-132">アップグレード可能モードは、通常、スレッドが保護されたリソースから読み取りを行う場合に使用しますが、何らかの条件が満たされた場合に書き込みが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="09250-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="09250-133">アップグレード可能モードで <xref:System.Threading.ReaderWriterLockSlim> に入ったスレッドには、保護されたリソースへの読み取りアクセス権があり、<xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> または <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> メソッドを呼び出すことによって、書き込みモードにアップグレードできます。</span><span class="sxs-lookup"><span data-stu-id="09250-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="09250-134">アップグレード可能モードのスレッドは一度に1つしか存在できないため、再帰が許可されていない場合 (既定のポリシー)、書き込みモードへのアップグレードはデッドロックを行うことができません。</span><span class="sxs-lookup"><span data-stu-id="09250-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="09250-135">再帰ポリシーに関係なく、最初に読み取りモードに入ったスレッドは、デッドロックの強い確率を生成するため、アップグレード可能モードまたは書き込みモードにアップグレードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="09250-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="09250-136">たとえば、読み取りモードの2つのスレッドが書き込みモードに入る場合、デッドロックが発生します。</span><span class="sxs-lookup"><span data-stu-id="09250-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="09250-137">アップグレード可能モードは、このようなデッドロックを回避するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="09250-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="09250-138">読み取りモードの他のスレッドがある場合は、アップグレードするスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="09250-139">スレッドがブロックされている間、読み取りモードに移行しようとしている他のスレッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="09250-140">すべてのスレッドが読み取りモードから終了すると、ブロックされたアップグレード可能スレッドが書き込みモードになります。</span><span class="sxs-lookup"><span data-stu-id="09250-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="09250-141">書き込みモードに入るのを待機している他のスレッドがある場合、アップグレード可能モードの単一スレッドがリソースに排他的にアクセスできないため、ブロックされたままになります。</span><span class="sxs-lookup"><span data-stu-id="09250-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="09250-142">アップグレード可能モードのスレッドが書き込みモードを終了すると、読み取りモードに入るのを待機している他のスレッドが書き込みモードに入るのを待機しているスレッドがない限り、その処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="09250-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="09250-143">アップグレード可能モードのスレッドは、保護されたリソースに書き込みを行う唯一のスレッドである限り、無制限にアップグレードおよびダウングレードできます。</span><span class="sxs-lookup"><span data-stu-id="09250-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="09250-144">複数のスレッドが書き込みモードまたはアップグレード可能モードに入ることを許可する場合は、1つのスレッドがアップグレード可能モードを独占できないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="09250-145">そうしないと、書き込みモードを直接入力しようとするスレッドは無期限にブロックされ、ブロックされている間は、他のスレッドは読み取りモードに入ることができなくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="09250-146">アップグレード可能モードのスレッドは、最初に <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> メソッドを呼び出し、次に <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> メソッドを呼び出すことによって、読み取りモードにダウングレードできます。</span><span class="sxs-lookup"><span data-stu-id="09250-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="09250-147">このダウングレードパターンは、<xref:System.Threading.LockRecursionPolicy.NoRecursion>でも、すべてのロック再帰ポリシーで許可されます。</span><span class="sxs-lookup"><span data-stu-id="09250-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="09250-148">読み取りモードにダウングレードした後、スレッドは読み取りモードから終了するまで、アップグレード可能モードに再入力することはできません。</span><span class="sxs-lookup"><span data-stu-id="09250-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="09250-149">再帰的にロックに入る</span><span class="sxs-lookup"><span data-stu-id="09250-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="09250-150">ロックポリシーを指定する <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> コンストラクターを使用して <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>を指定することにより、再帰ロックエントリをサポートする <xref:System.Threading.ReaderWriterLockSlim> を作成できます。</span><span class="sxs-lookup"><span data-stu-id="09250-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-151">新しい開発では、再帰を使用しないことをお勧めします。これにより、不要な複雑さが発生し、コードのデッドロックが発生しやすくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="09250-152">再帰を許可する <xref:System.Threading.ReaderWriterLockSlim> の場合、スレッドが入力できるモードについて次のようになります。</span><span class="sxs-lookup"><span data-stu-id="09250-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="09250-153">読み取りモードのスレッドは、再帰的に読み取りモードに入ることができますが、書き込みモードまたはアップグレード可能モードに入ることはできません。</span><span class="sxs-lookup"><span data-stu-id="09250-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="09250-154">これを行おうとすると、<xref:System.Threading.LockRecursionException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="09250-155">読み取りモードを開始して、書き込みモードまたはアップグレード可能モードを入力すると、デッドロックの確率が高いパターンになります。したがって、これは許可されません。</span><span class="sxs-lookup"><span data-stu-id="09250-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="09250-156">前に説明したように、ロックをアップグレードする必要がある場合は、アップグレード可能モードが用意されています。</span><span class="sxs-lookup"><span data-stu-id="09250-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="09250-157">アップグレード可能モードのスレッドは、書き込みモードまたは読み取りモードにすることができ、3つのモードのいずれかを再帰的に入力できます。</span><span class="sxs-lookup"><span data-stu-id="09250-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="09250-158">ただし、読み取りモードに他のスレッドがある場合は、書き込みモードを開始しようとしてもブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="09250-159">書き込みモードのスレッドは、読み取りモードまたはアップグレード可能モードにすることができ、3つのモードのいずれかを再帰的に入力できます。</span><span class="sxs-lookup"><span data-stu-id="09250-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="09250-160">ロックに入っていないスレッドは、任意のモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="09250-161">この試行は、再帰的でないロックを入力しようとした場合と同じ理由でブロックされることがあります。</span><span class="sxs-lookup"><span data-stu-id="09250-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="09250-162">スレッドは、各モードがそのモードに入った回数だけ正確に終了する限り、任意の順序で入力されたモードを終了できます。</span><span class="sxs-lookup"><span data-stu-id="09250-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="09250-163">スレッドが、モードを何度も終了しようとした場合、または入力されていないモードを終了しようとした場合は、<xref:System.Threading.SynchronizationLockException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="09250-164">ロックの状態</span><span class="sxs-lookup"><span data-stu-id="09250-164">Lock States</span></span>  
 <span data-ttu-id="09250-165">ロックは、その状態の観点から考えると役に立つかもしれません。</span><span class="sxs-lookup"><span data-stu-id="09250-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="09250-166"><xref:System.Threading.ReaderWriterLockSlim> には、[未入力]、[読み取り]、[アップグレード]、[書き込み] の4つの状態のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="09250-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="09250-167">[未入力]: この状態では、スレッドはロックに入っていません (またはすべてのスレッドがロックを終了しました)。</span><span class="sxs-lookup"><span data-stu-id="09250-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="09250-168">Read: この状態では、1つまたは複数のスレッドが、保護されたリソースへの読み取りアクセスのロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="09250-169">スレッドは、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> または <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> メソッドを使用するか、アップグレード可能モードからダウングレードすることによって、読み取りモードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="09250-170">アップグレード: この状態では、1つのスレッドが読み取りアクセスのロックに入り、書き込みアクセスにアップグレードするオプション (アップグレード可能モード) と、0個以上のスレッドが読み取りアクセスのロックに入りました。</span><span class="sxs-lookup"><span data-stu-id="09250-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="09250-171">アップグレードするオプションを使用して、一度に1つ以上のスレッドがロックに入ることはできません。アップグレード可能モードに入ろうとした追加のスレッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="09250-172">書き込み: この状態では、1つのスレッドが、保護されたリソースへの書き込みアクセスのロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="09250-173">そのスレッドは、ロックを排他的に所有しています。</span><span class="sxs-lookup"><span data-stu-id="09250-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="09250-174">何らかの理由でロックに入ろうとするその他のスレッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="09250-175">次の表では、スレッド `t` が左端の列で説明されているアクションを実行する場合に、再帰を許可しないロックの状態間の遷移について説明します。</span><span class="sxs-lookup"><span data-stu-id="09250-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="09250-176">アクションの実行時に、`t` にモードがありません。</span><span class="sxs-lookup"><span data-stu-id="09250-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="09250-177">(`t` がアップグレード可能モードである特殊なケースは、表の脚注に記載されています。)一番上の行には、ロックの開始状態が記述されています。</span><span class="sxs-lookup"><span data-stu-id="09250-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="09250-178">これらのセルは、スレッドに対して何が行われるかを記述し、ロック状態に対する変更をかっこで示します。</span><span class="sxs-lookup"><span data-stu-id="09250-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="09250-179">未入力 (N)</span><span class="sxs-lookup"><span data-stu-id="09250-179">Not entered (N)</span></span>|<span data-ttu-id="09250-180">読み取り (R)</span><span class="sxs-lookup"><span data-stu-id="09250-180">Read (R)</span></span>|<span data-ttu-id="09250-181">アップグレード (U)</span><span class="sxs-lookup"><span data-stu-id="09250-181">Upgrade (U)</span></span>|<span data-ttu-id="09250-182">書き込み (W)</span><span class="sxs-lookup"><span data-stu-id="09250-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="09250-183">`t` が読み取りモードに入る</span><span class="sxs-lookup"><span data-stu-id="09250-183">`t` enters read mode</span></span>|<span data-ttu-id="09250-184">`t` に入力 (R) します。</span><span class="sxs-lookup"><span data-stu-id="09250-184">`t` enters (R).</span></span>|<span data-ttu-id="09250-185">スレッドが書き込みモードを待機している場合、`t` ブロックします。それ以外の場合は、`t` に入ります。</span><span class="sxs-lookup"><span data-stu-id="09250-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="09250-186">スレッドが書き込みモードを待機している場合、`t` ブロックします。それ以外の場合は、`t` に入ります。<sup>1</sup></span><span class="sxs-lookup"><span data-stu-id="09250-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="09250-187">`t` ブロック。</span><span class="sxs-lookup"><span data-stu-id="09250-187">`t` blocks.</span></span>|  
|<span data-ttu-id="09250-188">`t` がアップグレード可能モードに移行する</span><span class="sxs-lookup"><span data-stu-id="09250-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="09250-189">`t` (U) に入ります。</span><span class="sxs-lookup"><span data-stu-id="09250-189">`t` enters (U).</span></span>|<span data-ttu-id="09250-190">スレッドが書き込みモードまたはアップグレードモードを待機している場合、`t` ブロックします。それ以外の場合は、`t` (U) になります。</span><span class="sxs-lookup"><span data-stu-id="09250-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="09250-191">`t` ブロック。</span><span class="sxs-lookup"><span data-stu-id="09250-191">`t` blocks.</span></span>|<span data-ttu-id="09250-192">`t` ブロック。</span><span class="sxs-lookup"><span data-stu-id="09250-192">`t` blocks.</span></span>|  
|<span data-ttu-id="09250-193">`t` が書き込みモードに入る</span><span class="sxs-lookup"><span data-stu-id="09250-193">`t` enters write mode</span></span>|<span data-ttu-id="09250-194">`t` 入力します (W)。</span><span class="sxs-lookup"><span data-stu-id="09250-194">`t` enters (W).</span></span>|<span data-ttu-id="09250-195">`t` ブロック。</span><span class="sxs-lookup"><span data-stu-id="09250-195">`t` blocks.</span></span>|<span data-ttu-id="09250-196">`t` ブロック。<sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="09250-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="09250-197">`t` ブロック。</span><span class="sxs-lookup"><span data-stu-id="09250-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="09250-198"><sup>1</sup>アップグレード可能モードで `t` 開始すると、読み取りモードになります。</span><span class="sxs-lookup"><span data-stu-id="09250-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="09250-199">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="09250-199">This action never blocks.</span></span> <span data-ttu-id="09250-200">ロック状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="09250-200">The lock state does not change.</span></span> <span data-ttu-id="09250-201">(アップグレード可能モードを終了すると、スレッドは読み取りモードへのダウングレードを完了できます)。</span><span class="sxs-lookup"><span data-stu-id="09250-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="09250-202"><sup>2</sup> `t` アップグレード可能モードで開始すると、読み取りモードのスレッドがある場合はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="09250-203">それ以外の場合は、書き込みモードにアップグレードされます。</span><span class="sxs-lookup"><span data-stu-id="09250-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="09250-204">ロックの状態が書き込み (W) に変わります。</span><span class="sxs-lookup"><span data-stu-id="09250-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="09250-205">読み取りモードのスレッドがあるため `t` ブロックされる場合、書き込みモードに入るのを待機しているスレッドがある場合でも、最後のスレッドが読み取りモードを終了するとすぐに書き込みモードになります。</span><span class="sxs-lookup"><span data-stu-id="09250-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="09250-206">スレッドがロックを終了したために状態の変更が発生した場合、次のように、起こされる次のスレッドが選択されます。</span><span class="sxs-lookup"><span data-stu-id="09250-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="09250-207">まず、書き込みモードを待機していて、既にアップグレード可能モードになっているスレッドがあります (このようなスレッドは1つしか存在できません)。</span><span class="sxs-lookup"><span data-stu-id="09250-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="09250-208">失敗。書き込みモードを待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="09250-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="09250-209">失敗した場合は、アップグレード可能モードを待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="09250-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="09250-210">失敗。読み取りモードを待機しているすべてのスレッド。</span><span class="sxs-lookup"><span data-stu-id="09250-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="09250-211">最初の2つのケースでは、その後のロックの状態は常に書き込み (W) になります。3番目のケースでは、終了したスレッドが状態の変更をトリガーしたときのロックの状態に関係なく、アップグレード (U) されます。</span><span class="sxs-lookup"><span data-stu-id="09250-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="09250-212">最後のケースでは、状態の変更後にアップグレード可能モードでスレッドが存在する場合、ロックの状態は Upgrade (U) になり、それ以外の場合は前の状態に関係なく読み取り (R) が行われます。</span><span class="sxs-lookup"><span data-stu-id="09250-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-213">次の例は、整数キーを持つ文字列を保持する単純な同期キャッシュを示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="09250-214"><xref:System.Threading.ReaderWriterLockSlim> のインスタンスは、内部キャッシュとして機能する <xref:System.Collections.Generic.Dictionary%602> へのアクセスを同期するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="09250-215">この例には、キャッシュへの追加、キャッシュからの削除、およびキャッシュからの読み取りを行うための単純なメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="09250-216">タイムアウトを示すために、この例には、指定されたタイムアウト内で実行できる場合にのみキャッシュに追加されるメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="09250-217">アップグレード可能モードを示すために、この例には、キーに関連付けられた値を取得し、それを新しい値と比較するメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="09250-218">値が変更されていない場合、メソッドは、変更されていないことを示す状態を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="09250-219">キーの値が見つからない場合は、キーと値のペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="09250-219">If no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="09250-220">値が変更された場合は、更新されます。</span><span class="sxs-lookup"><span data-stu-id="09250-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="09250-221">アップグレード可能モードを使用すると、スレッドは必要に応じて読み取りアクセスから書き込みアクセスにアップグレードでき、デッドロックのリスクはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="09250-222">この例には、アップグレード可能モードを示すメソッドの戻り値を指定する、入れ子になった列挙体が含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-223">この例では、パラメーターなしのコンストラクターを使用してロックを作成するため、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="09250-223">The example uses the parameterless constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="09250-224">ロックで再帰が許可されていない場合、<xref:System.Threading.ReaderWriterLockSlim> のプログラミングはより簡単で、エラーが発生しにくくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="09250-225">次のコードでは、`SynchronizedCache` オブジェクトを使用して、野菜の名前の辞書を格納します。</span><span class="sxs-lookup"><span data-stu-id="09250-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="09250-226">3つのタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="09250-226">It creates three tasks.</span></span> <span data-ttu-id="09250-227">最初の例では、配列に格納されている野菜の名前を `SynchronizedCache` インスタンスに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="09250-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="09250-228">2番目と3番目のタスクは、野菜の名前を表示します。最初の部分は昇順 (小さいインデックスから大きいインデックスの順)、2番目のタスクは降順です。</span><span class="sxs-lookup"><span data-stu-id="09250-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="09250-229">最後のタスクは、文字列 "cucumber" を検索し、見つかった場合は <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> メソッドを呼び出して、文字列 "green bean" を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="09250-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="09250-230">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="09250-230">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="09250-231"><see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="09250-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-232"><see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを既定のプロパティ値で初期化します。</span><span class="sxs-lookup"><span data-stu-id="09250-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-233">このコンストラクターで初期化された <xref:System.Threading.ReaderWriterLockSlim> は、再帰を許可しません。</span><span class="sxs-lookup"><span data-stu-id="09250-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="09250-234">つまり、<xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> プロパティが <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="09250-235">再帰ポリシーとその影響の詳細については、<xref:System.Threading.LockRecursionPolicy> 列挙型と <xref:System.Threading.ReaderWriterLockSlim> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="09250-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-236">次の例は、整数キーを持つ文字列を保持する単純な同期キャッシュを示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="09250-237"><xref:System.Threading.ReaderWriterLockSlim> のインスタンスは、内部キャッシュとして機能する <xref:System.Collections.Generic.Dictionary%602> へのアクセスを同期するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="09250-238">パラメーターなしのコンストラクターは、ロックを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="09250-239">この例には、キャッシュへの追加、キャッシュからの削除、およびキャッシュからの読み取りを行うための単純なメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="09250-240">タイムアウトを示すために、この例には、指定されたタイムアウト内で実行できる場合にのみキャッシュに追加されるメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="09250-241">アップグレード可能モードを示すために、この例には、キーに関連付けられた値を取得し、それを新しい値と比較するメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="09250-242">値が変更されていない場合、メソッドは、変更されていないことを示す状態を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="09250-243">キーの値が見つからない場合は、キーと値のペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="09250-243">If no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="09250-244">値が変更された場合は、更新されます。</span><span class="sxs-lookup"><span data-stu-id="09250-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="09250-245">アップグレード可能モードを使用すると、スレッドは必要に応じて読み取りアクセスから書き込みアクセスにアップグレードでき、デッドロックのリスクはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="09250-246">この例には、アップグレード可能モードを示すメソッドの戻り値を指定する、入れ子になった列挙体が含まれています。</span><span class="sxs-lookup"><span data-stu-id="09250-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-247">この例では、パラメーターなしのコンストラクターを使用してロックを作成するため、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="09250-247">The example uses the parameterless constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="09250-248">ロックで再帰が許可されていない場合、<xref:System.Threading.ReaderWriterLockSlim> のプログラミングはより簡単で、エラーが発生しにくくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="09250-249">次のコードでは、`SynchronizedCache` オブジェクトを使用して、野菜の名前の辞書を格納します。</span><span class="sxs-lookup"><span data-stu-id="09250-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="09250-250">3つのタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="09250-250">It creates three tasks.</span></span> <span data-ttu-id="09250-251">最初の例では、配列に格納されている野菜の名前を `SynchronizedCache` インスタンスに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="09250-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="09250-252">2番目と3番目のタスクは、野菜の名前を表示します。最初の部分は昇順 (小さいインデックスから大きいインデックスの順)、2番目のタスクは降順です。</span><span class="sxs-lookup"><span data-stu-id="09250-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="09250-253">最後のタスクは、文字列 "cucumber" を検索し、見つかった場合は <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> メソッドを呼び出して、文字列 "green bean" を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="09250-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="F#" Value="new System.Threading.ReaderWriterLockSlim : System.Threading.LockRecursionPolicy -&gt; System.Threading.ReaderWriterLockSlim" Usage="new System.Threading.ReaderWriterLockSlim recursionPolicy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy"><span data-ttu-id="09250-254">ロック再帰ポリシーを指定する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="09250-254">One of the enumeration values that specifies the lock recursion policy.</span></span></param>
        <summary><span data-ttu-id="09250-255">ロック再帰ポリシーを指定して、<see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="09250-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-256">再帰ポリシーは、ロックに入るスレッドに対して複数回制限を設定します。</span><span class="sxs-lookup"><span data-stu-id="09250-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="09250-257">たとえば、ロックが <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> で作成され、スレッドが読み取りモードでロックに入った場合、スレッドが読み取りモードでロックを再入力しようとすると <xref:System.Threading.LockRecursionException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="09250-258">同様に、スレッドが書き込みモードでロックに入った場合、スレッドが任意のモードでロックを再入力しようとすると <xref:System.Threading.LockRecursionException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-259">アップグレード可能モードのスレッドは、[ロックの再帰] ポリシー設定に関係なく、書き込みモードにアップグレードするか、読み取りモードにダウングレードできます。</span><span class="sxs-lookup"><span data-stu-id="09250-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="09250-260">再帰ポリシーに関係なく、最初に読み取りモードに入ったスレッドは、デッドロックの強い確率を生成するため、アップグレード可能モードまたは書き込みモードにアップグレードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="09250-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="09250-261">再帰ポリシーとその影響の詳細については、<xref:System.Threading.LockRecursionPolicy> 列挙型と <xref:System.Threading.ReaderWriterLockSlim> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="09250-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-262">次の例は、2つの例外シナリオを示しています。1つは <xref:System.Threading.LockRecursionPolicy> 設定に依存し、もう1つはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="09250-263">最初のシナリオでは、スレッドは読み取りモードに入り、再帰的に読み取りモードに入ろうとします。</span><span class="sxs-lookup"><span data-stu-id="09250-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="09250-264"><xref:System.Threading.ReaderWriterLockSlim> が、再帰ポリシーを <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>に設定するパラメーターなしのコンストラクターを使用して作成された場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the parameterless constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="09250-265"><xref:System.Threading.ReaderWriterLockSlim>を作成するために <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> を使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="09250-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="09250-266">2番目のシナリオでは、スレッドは読み取りモードに入り、書き込みモードに入ろうとします。</span><span class="sxs-lookup"><span data-stu-id="09250-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="09250-267">ロックの再帰ポリシーに関係なく、<xref:System.Threading.LockRecursionException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="09250-268">次のコードでは、`SynchronizedCache` オブジェクトを使用して、野菜の名前の辞書を格納します。</span><span class="sxs-lookup"><span data-stu-id="09250-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="09250-269">3つのタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="09250-269">It creates three tasks.</span></span> <span data-ttu-id="09250-270">最初の例では、配列に格納されている野菜の名前を `SynchronizedCache` インスタンスに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="09250-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="09250-271">2番目と3番目のタスクは、野菜の名前を表示します。最初の部分は昇順 (小さいインデックスから大きいインデックスの順)、2番目のタスクは降順です。</span><span class="sxs-lookup"><span data-stu-id="09250-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="09250-272">最後のタスクは、文字列 "cucumber" を検索し、見つかった場合は <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> メソッドを呼び出して、文字列 "green bean" を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="09250-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-273">読み取りモードでロックに入った一意のスレッドの総数を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-273">Gets the total number of unique threads that have entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="09250-274">読み取りモードでロックに入った一意のスレッドの数。</span><span class="sxs-lookup"><span data-stu-id="09250-274">The number of unique threads that have entered the lock in read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-275">スレッドは、ロックが再帰を許可していて、スレッドが読み取りモードに複数回入った場合でも、1回だけカウントされます。</span><span class="sxs-lookup"><span data-stu-id="09250-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="09250-276">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-277">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-278">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-279">次の例は、読み取りモードのスレッド数がしきい値を超えた場合に、<xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> プロパティを使用してイベントログエントリを生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="readerWriterLockSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-280"><see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="09250-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-281"><xref:System.Threading.ReaderWriterLockSlim> を使い終わったら、<xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="09250-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="09250-282"><xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>メソッドによって、<xref:System.Threading.ReaderWriterLockSlim> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="09250-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="09250-283"><xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>呼び出し後は、<xref:System.Threading.ReaderWriterLockSlim>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Threading.ReaderWriterLockSlim> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="09250-284">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="09250-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-285"><xref:System.Threading.ReaderWriterLockSlim> オブジェクトへの最後の参照を解放する前に、常に <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="09250-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="09250-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="09250-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="09250-287">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-287">-or-</span></span> 
 <span data-ttu-id="09250-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="09250-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="09250-289">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-289">-or-</span></span> 
 <span data-ttu-id="09250-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="09250-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-291">読み取りモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-291">Tries to enter the lock in read mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-292">このメソッドは、呼び出し元のスレッドがロックに入るまでブロックします。そのため、が返されることはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-292">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="09250-293"><xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> メソッドを使用して、指定した間隔でブロックし、呼び出し元のスレッドがその期間に読み取りモードに入っていない場合はを返します。</span><span class="sxs-lookup"><span data-stu-id="09250-293">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="09250-294">複数のスレッドが同時に読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-294">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="09250-295">1つ以上のスレッドが書き込みモードに入るのを待機している場合、そのスレッドがタイムアウトになるか、または書き込みモードに入ってから終了するまで、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> メソッドを呼び出すスレッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-295">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-296">ロックで再帰が許可されている場合、読み取りモードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、読み取りモードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-296">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="09250-297">他のスレッドが読み取りモードの間は、最大で1つのスレッドをアップグレード可能モードにすることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-297">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="09250-298">追加のスレッドがアップグレード可能モードに入るのを待機していて、書き込みモードに入るのを待機しているスレッドが存在しない場合、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> メソッドを呼び出すスレッドはすぐに読み取りモードになり、ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="09250-298">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-299">次の例は、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> メソッドを使用して、読み取りモードでロックを入力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-299">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="09250-300">この例に示すメソッドは、キーに関連付けられている値を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-300">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="09250-301">キーが見つからない場合、内部 <xref:System.Collections.Generic.Dictionary%602> によってスローされた例外は、メソッドを終了できます。</span><span class="sxs-lookup"><span data-stu-id="09250-301">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="09250-302">`finally` ブロックは、呼び出し元が読み取りモードを終了するように、<xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> メソッドを実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-302">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="09250-303">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-303">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-304"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティは <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> です。現在のスレッドは、読み取りロックを保持しながら読み取りロックを取得しようとしました。</span><span class="sxs-lookup"><span data-stu-id="09250-304">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span></span>  
  
<span data-ttu-id="09250-305">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-305">-or-</span></span> 
<span data-ttu-id="09250-306"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティは <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> です。現在のスレッドは、書き込みロックを保持しながら読み取りロックを取得しようとしました。</span><span class="sxs-lookup"><span data-stu-id="09250-306">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span></span>  
  
<span data-ttu-id="09250-307">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-307">-or-</span></span> 
<span data-ttu-id="09250-308">再帰の回数は、カウンターの容量を超える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-308">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-309">この制限は非常に大きいため、アプリケーションで、この例外が発生することはないはずです。</span><span class="sxs-lookup"><span data-stu-id="09250-309">This limit is so large that applications should never encounter this exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-310"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-310">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-311">アップグレード可能モードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-311">Tries to enter the lock in upgradeable mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-312">このメソッドは、呼び出し元のスレッドがロックに入るまでブロックします。そのため、が返されることはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-312">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="09250-313"><xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> メソッドを使用して、指定した間隔でブロックし、呼び出し元のスレッドがその間隔中にアップグレード可能モードに入っていない場合はを返します。</span><span class="sxs-lookup"><span data-stu-id="09250-313">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="09250-314">スレッドが読み取りモードで <xref:System.Threading.ReaderWriterLockSlim> によって保護されているリソースに通常アクセスする場合は、アップグレード可能モードを使用します。ただし、特定の条件が満たされた場合は、書き込みモードに入る必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-314">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="09250-315">アップグレード可能モードのスレッドは、読み取りモードにダウングレードすることも、書き込みモードにアップグレードすることもできます。</span><span class="sxs-lookup"><span data-stu-id="09250-315">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="09250-316">特定の時点で、1つのスレッドのみがアップグレード可能モードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-316">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="09250-317">スレッドがアップグレード可能モードであり、書き込みモードに入るのを待機しているスレッドがない場合、アップグレード可能モードに入るのを待機しているスレッドがあっても、他の任意の数のスレッドで読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-317">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-318">1つ以上のスレッドが書き込みモードに入るのを待機している場合、そのスレッドがタイムアウトになるか、または書き込みモードに入ってから終了するまで、<xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> メソッドを呼び出すスレッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-318">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-319">ロックが再帰を許可している場合、アップグレード可能モードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、アップグレード可能モードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-319">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-320">次の例は、<xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> メソッドを使用して、アップグレード可能モードでロックを入力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-320">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="09250-321">`finally` ブロックは、呼び出し元がアップグレード可能モードを終了するように、<xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> メソッドを実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-321">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-322">この例に示すメソッドは、キーに関連付けられている値を取得し、それを新しい値と比較します。</span><span class="sxs-lookup"><span data-stu-id="09250-322">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="09250-323">値が変更されていない場合、メソッドは、変更されていないことを示す状態を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-323">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="09250-324">キーの値が見つからないため、キーと値のペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="09250-324">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="09250-325">値が変更された場合は、更新されます。</span><span class="sxs-lookup"><span data-stu-id="09250-325">If the value has changed, it is updated.</span></span> <span data-ttu-id="09250-326">アップグレード可能モードを使用すると、スレッドは必要に応じて読み取りロックをアップグレードでき、デッドロックのリスクはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-326">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="09250-327">この例では、パラメーターなしのコンストラクターを使用してロックを作成するため、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="09250-327">The example uses the parameterless constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="09250-328">ロックで再帰が許可されていない場合、<xref:System.Threading.ReaderWriterLockSlim> のプログラミングはより簡単で、エラーが発生しにくくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-328">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="09250-329">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-329">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-330"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にいずれかのモードでロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-330">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="09250-331">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-331">-or-</span></span> 
<span data-ttu-id="09250-332">現在のスレッドは既に読み取りモードに入っているため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。</span><span class="sxs-lookup"><span data-stu-id="09250-332">The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="09250-333">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-333">-or-</span></span> 
<span data-ttu-id="09250-334">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-334">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-335">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-335">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-336"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-336">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberSignature Language="F#" Value="member this.EnterWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-337">書き込みモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-337">Tries to enter the lock in write mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-338">このメソッドは、呼び出し元のスレッドがロックに入るまでブロックします。そのため、が返されることはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-338">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="09250-339"><xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> メソッドを使用して、指定した間隔でブロックし、呼び出し元のスレッドがその間隔中に書き込みモードに入っていない場合はを返します。</span><span class="sxs-lookup"><span data-stu-id="09250-339">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="09250-340">他のスレッドが読み取りモードでロックに入った場合、<xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> メソッドを呼び出すスレッドは、読み取りモードを終了するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-340">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="09250-341">書き込みモードに入るのを待機しているスレッドがある場合、読み取りモードまたはアップグレード可能モードに入ろうとする追加のスレッドは、書き込みモードに入ろうとしているすべてのスレッドがタイムアウトになるか、または書き込みモードに入ってから終了するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-341">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-342">ロックで再帰が許可されている場合、書き込みモードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、書き込みモードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-342">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-343">次の例は、<xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> メソッドを使用して、書き込みモードでロックを入力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-343">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="09250-344">この例のメソッドは、同期されたキャッシュに新しいキーと値のペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="09250-344">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="09250-345">キーが既にキャッシュに存在する場合、内部 <xref:System.Collections.Generic.Dictionary%602> によってスローされた例外は、メソッドを終了できます。</span><span class="sxs-lookup"><span data-stu-id="09250-345">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="09250-346">`finally` ブロックは、呼び出し元が書き込みモードを終了することを保証するために、<xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> メソッドを実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-346">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="09250-347">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-347">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-348"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にいずれかのモードでロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-348">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="09250-349">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-349">-or-</span></span> 
<span data-ttu-id="09250-350">現在のスレッドは読み取りモードに入っており、まだ書き込みロックを持っていないため、書き込みモードでロックに入ろうとするとデッドロックの可能性が生じます。</span><span class="sxs-lookup"><span data-stu-id="09250-350">The current thread has entered read mode and doesn't already own a write lock, so trying to enter the lock in write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="09250-351">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-351">-or-</span></span> 
<span data-ttu-id="09250-352">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-352">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-353">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-353">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-354"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-354">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-355">読み取りモードの再帰カウントを減らし、結果のカウントが 0 (ゼロ) の場合には読み取りモードを終了します。</span><span class="sxs-lookup"><span data-stu-id="09250-355">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-356">このメソッドは、再帰の順序には影響しません。</span><span class="sxs-lookup"><span data-stu-id="09250-356">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="09250-357">たとえば、スレッドがアップグレード可能モードでロックに入り、読み取りモードでロックに入る場合、スレッドが2つのモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="09250-357">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="09250-358">ロックで再帰が許可されている場合、スレッドは書き込みモードでロックに入り、読み取りモードで再帰的に入力することができます。スレッドが読み取りモードと書き込みモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="09250-358">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="09250-359">ロックを終了すると、他の待機中のスレッドを通知する場合があります。</span><span class="sxs-lookup"><span data-stu-id="09250-359">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-360">次の例は、`finally` ブロックを使用して <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> メソッドを実行し、呼び出し元が読み取りモードを終了するようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-360">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="09250-361">この例に示すメソッドは、キーに関連付けられている値を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-361">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="09250-362">キーが見つからない場合、内部 <xref:System.Collections.Generic.Dictionary%602> によってスローされた例外は、メソッドを終了できます。</span><span class="sxs-lookup"><span data-stu-id="09250-362">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="09250-363"><xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> メソッドは、読み取りモードを開始するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-363">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="09250-364">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-364">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="09250-365">現在のスレッドは読み取りモードでロックに入っていません。</span><span class="sxs-lookup"><span data-stu-id="09250-365">The current thread has not entered the lock in read mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-366">アップグレード可能モードの再帰カウントを減らし、結果のカウントが 0 (ゼロ) の場合にはアップグレード可能モードを終了します。</span><span class="sxs-lookup"><span data-stu-id="09250-366">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-367">このメソッドは、再帰の順序には影響しません。</span><span class="sxs-lookup"><span data-stu-id="09250-367">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="09250-368">たとえば、スレッドがアップグレード可能モードでロックに入った後、書き込みモードでロックに入ると、スレッドが2つのモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="09250-368">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="09250-369">ロックで再帰が許可されている場合、スレッドは書き込みモードでロックに入ることができ、アップグレード可能モードで再帰的に入力することができます。スレッドがアップグレード可能モードと書き込みモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="09250-369">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="09250-370">ロックを終了すると、他の待機中のスレッドを通知する場合があります。</span><span class="sxs-lookup"><span data-stu-id="09250-370">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-371">次の例は、`finally` ブロックを使用して <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> メソッドを実行し、呼び出し元がアップグレード可能モードを終了するようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-371">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-372">この例に示すメソッドは、キーに関連付けられている値を取得し、それを新しい値と比較します。</span><span class="sxs-lookup"><span data-stu-id="09250-372">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="09250-373">値が変更されていない場合、メソッドは、変更されていないことを示す状態を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-373">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="09250-374">キーの値が見つからないため、キーと値のペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="09250-374">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="09250-375">値が変更された場合は、更新されます。</span><span class="sxs-lookup"><span data-stu-id="09250-375">If the value has changed, it is updated.</span></span> <span data-ttu-id="09250-376">アップグレード可能モードを使用すると、スレッドは必要に応じて読み取りロックをアップグレードでき、デッドロックのリスクはありません。</span><span class="sxs-lookup"><span data-stu-id="09250-376">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="09250-377">この例では、パラメーターなしのコンストラクターを使用してロックを作成するため、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="09250-377">The example uses the parameterless constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="09250-378">ロックで再帰が許可されていない場合、<xref:System.Threading.ReaderWriterLockSlim> のプログラミングはより簡単で、エラーが発生しにくくなります。</span><span class="sxs-lookup"><span data-stu-id="09250-378">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="09250-379">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-379">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="09250-380">現在のスレッドはアップグレード可能モードでロックに入っていません。</span><span class="sxs-lookup"><span data-stu-id="09250-380">The current thread has not entered the lock in upgradeable mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberSignature Language="F#" Value="member this.ExitWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09250-381">書き込みモードの再帰カウントを減らし、結果のカウントが 0 (ゼロ) の場合には書き込みモードを終了します。</span><span class="sxs-lookup"><span data-stu-id="09250-381">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-382">このメソッドは、再帰の順序には影響しません。</span><span class="sxs-lookup"><span data-stu-id="09250-382">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="09250-383">たとえば、スレッドがアップグレード可能モードでロックに入った後、書き込みモードでロックに入ると、スレッドが2つのモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="09250-383">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="09250-384">ロックで再帰が許可されている場合、スレッドは書き込みモードでロックに入り、読み取りモードで再帰的に入力することができます。スレッドが読み取りモードと書き込みモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="09250-384">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="09250-385">ロックを終了すると、他の待機中のスレッドを通知する場合があります。</span><span class="sxs-lookup"><span data-stu-id="09250-385">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-386">次の例では、`finally` ブロックを使用して <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> メソッドを実行し、呼び出し元が書き込みモードを終了するようにする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="09250-386">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="09250-387">この例のメソッドは、同期されたキャッシュに新しいキーと値のペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="09250-387">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="09250-388">キーが既にキャッシュに存在する場合、内部 <xref:System.Collections.Generic.Dictionary%602> によってスローされた例外は、メソッドを終了できます。</span><span class="sxs-lookup"><span data-stu-id="09250-388">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="09250-389"><xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> メソッドは、書き込みモードでロックを開始するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-389">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="09250-390">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-390">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="09250-391">現在のスレッドは書き込みモードでロックに入っていません。</span><span class="sxs-lookup"><span data-stu-id="09250-391">The current thread has not entered the lock in write mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-392">現在のスレッドが読み取りモードでロックに入ったかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-392">Gets a value that indicates whether the current thread has entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="09250-393">現在のスレッドが読み取りモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-393"><see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-394">このプロパティは、アサートまたはその他のデバッグのために使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="09250-394">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="09250-395">プログラムの実行フローを制御するために使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="09250-395">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-396">次の例は、現在のスレッドが予期せず読み取りモードに入った場合に、<xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> プロパティを使用してアサートを生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-396">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUpgradeableReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-397">現在のスレッドがアップグレード可能モードでロックに入ったかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-397">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="09250-398">現在のスレッドがアップグレード可能モードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-398"><see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-399">このプロパティは、アサートまたはその他のデバッグのために使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="09250-399">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="09250-400">プログラムの実行フローを制御するために使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="09250-400">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-401">次の例は、現在のスレッドが予期せずアップグレード可能モードに入った場合に、<xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> プロパティを使用してアサートを生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-401">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-402">現在のスレッドが書き込みモードでロックに入ったかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-402">Gets a value that indicates whether the current thread has entered the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="09250-403">現在のスレッドが書き込みモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-403"><see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-404">このプロパティは、アサートまたはその他のデバッグのために使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="09250-404">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="09250-405">プログラムの実行フローを制御するために使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="09250-405">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-406">次の例は、現在のスレッドが予期せず書き込みモードに入った場合に、<xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> プロパティを使用してアサートを生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="09250-406">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursionPolicy : System.Threading.LockRecursionPolicy" Usage="System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-407">現在の <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトの再帰ポリシーを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-407">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="09250-408">ロック再帰ポリシーを指定する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="09250-408">One of the enumeration values that specifies the lock recursion policy.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-409">再帰ポリシーは、ロックに入るスレッドに対して複数回制限を設定します。</span><span class="sxs-lookup"><span data-stu-id="09250-409">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="09250-410">たとえば、ロックが <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> で作成され、スレッドが読み取りモードでロックに入った場合、スレッドが読み取りモードでロックを再入力しようとすると <xref:System.Threading.LockRecursionException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="09250-410">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-411">アップグレード可能モードのスレッドは、[ロックの再帰] ポリシー設定に関係なく、書き込みモードにアップグレードするか、読み取りモードにダウングレードできます。</span><span class="sxs-lookup"><span data-stu-id="09250-411">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="09250-412">再帰ポリシーに関係なく、最初に読み取りモードに入ったスレッドは、デッドロックの強い確率を生成するため、アップグレード可能モードまたは書き込みモードにアップグレードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="09250-412">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="09250-413">再帰ポリシーとその影響の詳細については、<xref:System.Threading.LockRecursionPolicy> 列挙型と <xref:System.Threading.ReaderWriterLockSlim> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="09250-413">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-414">現在のスレッドが読み取りモードでロックに入った回数を、再帰を示す値として取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-414">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="09250-415">現在のスレッドが読み取りモードに入っていない場合は 0 (ゼロ)。スレッドが読み取りモードに入ったが、再帰的に入力していない場合は1。スレッドが再帰的に*n* -1 回ロックに入った場合は*n* 。</span><span class="sxs-lookup"><span data-stu-id="09250-415">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-416">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-416">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-417">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-417">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-418">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-418">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-419">現在のスレッドがアップグレード可能モードでロックに入った回数を、再帰を示す値として取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-419">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="09250-420">現在のスレッドがアップグレード可能モードに入っていない場合は0。スレッドがアップグレード可能モードに入ったが、再帰的に入力されていない場合は1。スレッドが再帰的に*n* -1 回アップグレード可能モードに入った場合は*n* 。</span><span class="sxs-lookup"><span data-stu-id="09250-420">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-421">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-421">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-422">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-422">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-423">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-423">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-424">現在のスレッドが書き込みモードでロックに入った回数を、再帰を示す値として取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-424">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="09250-425">0: 現在のスレッドが書き込みモードに入っていない場合は、スレッドが書き込みモードに入ったが、再帰的に入力していない場合は1。スレッドが書き込みモードに再帰的に*n* -1 回入力した場合は*n* 。</span><span class="sxs-lookup"><span data-stu-id="09250-425">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-426">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-426">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-427">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-427">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-428">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-428">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="09250-429">オプションのタイムアウトを指定して、読み取りモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-429">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="09250-430">待機するミリ秒数。無制限に待機する場合は -1 (<see cref="F:System.Threading.Timeout.Infinite" />)。</span><span class="sxs-lookup"><span data-stu-id="09250-430">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="09250-431">オプションのタイムアウトを表す整数を指定して、読み取りモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-431">Tries to enter the lock in read mode, with an optional integer time-out.</span></span></summary>
        <returns><span data-ttu-id="09250-432">呼び出し元のスレッドが読み取りモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-432"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-433">`millisecondsTimeout` が 0 (ゼロ) の場合、このメソッドはロック状態を確認し、目的の状態が使用できない場合は `false` を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="09250-433">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="09250-434">複数のスレッドが同時に読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-434">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="09250-435">1つ以上のスレッドが書き込みモードに入るのを待機している場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> メソッドを呼び出すスレッドは、それらのスレッドがタイムアウトになるか、書き込みモードに入ってから終了されるか、または呼び出し元のスレッドのタイムアウト期間が経過するまで、ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-435">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-436">ロックで再帰が許可されている場合、読み取りモードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、読み取りモードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-436">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="09250-437">1つのスレッドは、他のスレッドが読み取りモードの間は、アップグレード可能モードにすることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-437">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="09250-438">追加のスレッドがアップグレード可能モードに入るのを待機していて、書き込みモードに入るのを待機しているスレッドが存在しない場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> メソッドを呼び出すスレッドはすぐに読み取りモードになり、ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="09250-438">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-439"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-439">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="09250-440">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-440">-or-</span></span> 
<span data-ttu-id="09250-441">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-441">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-442">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-442">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="09250-443"><paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="09250-443">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-444"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-444">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="09250-445">待機する間隔。無制限に待機する場合は -1 ミリ秒。</span><span class="sxs-lookup"><span data-stu-id="09250-445">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="09250-446">オプションのタイムアウトを指定して、読み取りモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-446">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="09250-447">呼び出し元のスレッドが読み取りモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-447"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-448">`timeout` が 0 (ゼロ) の場合、このメソッドはロック状態を確認し、目的の状態が使用できない場合は `false` を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="09250-448">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="09250-449">複数のスレッドが同時に読み取りモードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-449">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="09250-450">1つ以上のスレッドが書き込みモードに入るためにキューに入れられている場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> メソッドを呼び出すスレッドは、スレッドがタイムアウトになるか、書き込みモードに入ってから終了されるか、または呼び出し元スレッドのタイムアウト期間が経過するまで、ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-450">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-451">ロックで再帰が許可されている場合、読み取りモードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、読み取りモードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-451">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="09250-452">1つのスレッドは、他のスレッドが読み取りモードの間は、アップグレード可能モードにすることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-452">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="09250-453">追加のスレッドがアップグレード可能モードに入るのを待機していて、書き込みモードに入るのを待機しているスレッドが存在しない場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> メソッドを呼び出すスレッドはすぐに読み取りモードになり、ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="09250-453">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-454"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-454">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="09250-455">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-455">-or-</span></span> 
<span data-ttu-id="09250-456">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-456">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-457">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-457">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="09250-458"><paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="09250-458">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="09250-459">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-459">-or-</span></span> 
<span data-ttu-id="09250-460"><paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span><span class="sxs-lookup"><span data-stu-id="09250-460">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-461"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-461">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="09250-462">オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-462">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="09250-463">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="09250-463">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="09250-464">オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-464">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="09250-465">呼び出し元のスレッドがアップグレード可能モードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-465"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-466">`millisecondsTimeout` が 0 (ゼロ) の場合、このメソッドはロック状態を確認し、目的の状態が使用できない場合は `false` を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="09250-466">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="09250-467">スレッドが読み取りモードで <xref:System.Threading.ReaderWriterLockSlim> によって保護されているリソースに通常アクセスする場合は、アップグレード可能モードを使用します。ただし、特定の条件が満たされた場合は、書き込みモードに入る必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-467">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="09250-468">アップグレード可能モードのスレッドは、書き込みモードにアップグレードすることも、読み取りモードにダウングレードすることもできます。</span><span class="sxs-lookup"><span data-stu-id="09250-468">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="09250-469">任意の時点で、1つのスレッドのみがアップグレード可能モードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-469">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="09250-470">スレッドがアップグレード可能モードであり、書き込みモードに入るのを待機しているスレッドがない場合、アップグレード可能モードに入るのを待機しているスレッドがあっても、他の任意の数のスレッドで読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-470">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-471">1つ以上のスレッドが書き込みモードに入るのを待機している場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> メソッドを呼び出すスレッドは、それらのスレッドがタイムアウトになるか、書き込みモードに入ってから終了されるか、または呼び出し元のスレッドのタイムアウト期間が経過するまで、ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-471">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-472">ロックが再帰を許可している場合、アップグレード可能モードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、アップグレード可能モードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-472">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-473"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-473">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="09250-474">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-474">-or-</span></span> 
<span data-ttu-id="09250-475">現在のスレッドは最初に読み取りモードでロックに入ったため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。</span><span class="sxs-lookup"><span data-stu-id="09250-475">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="09250-476">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-476">-or-</span></span> 
<span data-ttu-id="09250-477">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-477">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-478">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-478">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="09250-479"><paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="09250-479">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-480"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-480">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="09250-481">待機する間隔。無制限に待機する場合は -1 ミリ秒。</span><span class="sxs-lookup"><span data-stu-id="09250-481">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="09250-482">オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-482">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="09250-483">呼び出し元のスレッドがアップグレード可能モードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-483"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-484">`timeout` が 0 (ゼロ) の場合、このメソッドはロック状態を確認し、目的の状態が使用できない場合は `false` を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="09250-484">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="09250-485">スレッドが読み取りモードの <xref:System.Threading.ReaderWriterLockSlim> によって保護されているリソースに通常アクセスする場合は、アップグレード可能モードを使用します。ただし、特定の条件が満たされた場合は、書き込みモードに入る必要があります。</span><span class="sxs-lookup"><span data-stu-id="09250-485">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="09250-486">アップグレード可能モードのスレッドは、書き込みモードにアップグレードすることも、読み取りモードにダウングレードすることもできます。</span><span class="sxs-lookup"><span data-stu-id="09250-486">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="09250-487">任意の時点で、1つのスレッドのみがアップグレード可能モードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-487">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="09250-488">スレッドがアップグレード可能モードであり、書き込みモードに入るのを待機しているスレッドがない場合、アップグレード可能モードに入るのを待機しているスレッドがあっても、他の任意の数のスレッドで読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-488">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="09250-489">1つ以上のスレッドが書き込みモードに入るのを待機している場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> メソッドを呼び出すスレッドは、それらのスレッドがタイムアウトになるか、書き込みモードに入ってから終了されるか、または呼び出し元のスレッドのタイムアウト期間が経過するまで、ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-489">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-490">ロックが再帰を許可している場合、アップグレード可能モードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、アップグレード可能モードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-490">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-491"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-491">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="09250-492">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-492">-or-</span></span> 
<span data-ttu-id="09250-493">現在のスレッドは最初に読み取りモードでロックに入ったため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。</span><span class="sxs-lookup"><span data-stu-id="09250-493">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="09250-494">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-494">-or-</span></span> 
<span data-ttu-id="09250-495">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-495">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-496">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-496">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="09250-497"><paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="09250-497">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="09250-498">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-498">-or-</span></span> 
<span data-ttu-id="09250-499"><paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span><span class="sxs-lookup"><span data-stu-id="09250-499">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-500"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-500">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="09250-501">オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-501">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="09250-502">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="09250-502">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="09250-503">オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-503">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="09250-504">呼び出し元のスレッドが書き込みモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-504"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-505">`millisecondsTimeout` が 0 (ゼロ) の場合、このメソッドはロック状態を確認し、目的の状態が使用できない場合は `false` を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="09250-505">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="09250-506">他のスレッドが読み取りモードでロックに入った場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> メソッドを呼び出すスレッドは、これらのスレッドが読み取りモードを終了するか、タイムアウト間隔が経過するまでブロックされるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-506">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="09250-507">書き込みモードに入るのを待機しているスレッドはブロックされますが、読み取りモードまたはアップグレード可能モードに入ろうとする追加のスレッドは、書き込みモードに入るのを待機しているすべてのスレッドがタイムアウトになるか、または書き込みモードに入ってから終了します。</span><span class="sxs-lookup"><span data-stu-id="09250-507">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-508">ロックで再帰が許可されている場合、書き込みモードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、書き込みモードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-508">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-509">次の例では、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> メソッドを使用して、書き込みモードでロックを入力し、タイムアウトを指定する方法を示します。この例のメソッドは、同期されたキャッシュに新しいキーと値のペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="09250-509">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="09250-510">スレッドがロックに入る前に指定されたタイムアウト期間が経過すると、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-510">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="09250-511">このメソッドは、キーと値のペアが追加された場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="09250-511">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="09250-512">キーが既にキャッシュに存在する場合、内部 <xref:System.Collections.Generic.Dictionary%602> によってスローされた例外は、メソッドを終了できます。</span><span class="sxs-lookup"><span data-stu-id="09250-512">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="09250-513">`finally` ブロックは、呼び出し元がロックを終了することを保証するために、<xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> メソッドを実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="09250-513">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="09250-514">このコードは、<xref:System.Threading.ReaderWriterLockSlim> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="09250-514">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-515"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-515">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="09250-516">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-516">-or-</span></span> 
<span data-ttu-id="09250-517">現在のスレッドは最初に読み取りモードでロックに入ったため、書き込みモードに入ろうとするとデッドロックの可能性が生じます。</span><span class="sxs-lookup"><span data-stu-id="09250-517">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="09250-518">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-518">-or-</span></span> 
<span data-ttu-id="09250-519">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-519">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-520">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-520">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="09250-521"><paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="09250-521">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-522"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-522">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="09250-523">待機する間隔。無制限に待機する場合は -1 ミリ秒。</span><span class="sxs-lookup"><span data-stu-id="09250-523">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="09250-524">オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</span><span class="sxs-lookup"><span data-stu-id="09250-524">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="09250-525">呼び出し元のスレッドが書き込みモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="09250-525"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-526">`timeout` が 0 (ゼロ) の場合、このメソッドはロック状態を確認し、目的の状態が使用できない場合は `false` を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="09250-526">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="09250-527">他のスレッドが読み取りモードでロックに入った場合、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> メソッドを呼び出すスレッドは、これらのスレッドが読み取りモードを終了するか、タイムアウト間隔が経過するまでブロックされるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="09250-527">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="09250-528">書き込みモードに入るのを待機しているスレッドはブロックされますが、読み取りモードまたはアップグレード可能モードに入ろうとする追加のスレッドは、書き込みモードに入るのを待機しているすべてのスレッドがタイムアウトになるか、または書き込みモードに入ってから終了します。</span><span class="sxs-lookup"><span data-stu-id="09250-528">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09250-529">ロックで再帰が許可されている場合、書き込みモードでロックに入ったスレッドは、他のスレッドが書き込みモードに入るのを待機している場合でも、書き込みモードに再帰的に入ることができます。</span><span class="sxs-lookup"><span data-stu-id="09250-529">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="09250-530"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span><span class="sxs-lookup"><span data-stu-id="09250-530">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="09250-531">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-531">-or-</span></span> 
<span data-ttu-id="09250-532">現在のスレッドは最初に読み取りモードでロックに入ったため、書き込みモードに入ろうとするとデッドロックの可能性が生じます。</span><span class="sxs-lookup"><span data-stu-id="09250-532">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="09250-533">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-533">-or-</span></span> 
<span data-ttu-id="09250-534">再帰の回数がカウンターの容量をオーバーします。</span><span class="sxs-lookup"><span data-stu-id="09250-534">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="09250-535">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span><span class="sxs-lookup"><span data-stu-id="09250-535">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="09250-536"><paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="09250-536">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="09250-537">- または -</span><span class="sxs-lookup"><span data-stu-id="09250-537">-or-</span></span> 
<span data-ttu-id="09250-538"><paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span><span class="sxs-lookup"><span data-stu-id="09250-538">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="09250-539"><see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="09250-539">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-540">読み取りモードでロックに入るのを待機しているスレッドの総数を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-540">Gets the total number of threads that are waiting to enter the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="09250-541">読み取りモードに入るのを待機しているスレッドの総数。</span><span class="sxs-lookup"><span data-stu-id="09250-541">The total number of threads that are waiting to enter read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-542">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-542">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-543">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-543">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-544">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-544">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-545">次の例では、<xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> プロパティを使用して、ブロックされている (読み取りモードに入るのを待機している) スレッドの数がしきい値を超えた場合にイベントログエントリを生成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="09250-545">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-546">アップグレード可能モードでロックに入るのを待機しているスレッドの総数を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-546">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="09250-547">アップグレード可能モードに入るのを待機しているスレッドの総数。</span><span class="sxs-lookup"><span data-stu-id="09250-547">The total number of threads that are waiting to enter upgradeable mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-548">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-548">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-549">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-549">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-550">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-550">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-551">次の例では、<xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> プロパティを使用して、ブロックされている (アップグレード可能モードに入るのを待機している) スレッドの数がしきい値を超えた場合にイベントログエントリを生成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="09250-551">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09250-552">書き込みモードでロックに入るのを待機しているスレッドの総数を取得します。</span><span class="sxs-lookup"><span data-stu-id="09250-552">Gets the total number of threads that are waiting to enter the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="09250-553">書き込みモードに入るのを待機しているスレッドの総数。</span><span class="sxs-lookup"><span data-stu-id="09250-553">The total number of threads that are waiting to enter write mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09250-554">このプロパティは、デバッグ、プロファイル、およびログ記録の目的でのみ使用し、アルゴリズムの動作を制御するためには使用しません。</span><span class="sxs-lookup"><span data-stu-id="09250-554">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="09250-555">結果は、計算されるとすぐに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="09250-555">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="09250-556">このため、このプロパティに基づいて決定を行うのは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="09250-556">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09250-557">次の例では、<xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> プロパティを使用して、ブロックされているスレッドの数 (書き込みモードに入るのを待機している) がしきい値を超えた場合にイベントログエントリを生成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="09250-557">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
