<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a8eb4215ed628bdaa031341b2056155e8c79a5fb" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82289464" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e6307-101"><see cref="E:System.Windows.Forms.Application.ThreadException" /> イベントのデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="e6307-101">Provides data for the <see cref="E:System.Windows.Forms.Application.ThreadException" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6307-102"><xref:System.Threading.ThreadExceptionEventArgs> は、未処理の例外が発生したときにスレッドによって作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-102">A <xref:System.Threading.ThreadExceptionEventArgs> is created by a thread when an unhandled exception occurs.</span></span> <span data-ttu-id="e6307-103"><xref:System.Threading.ThreadExceptionEventArgs> には、発生した <xref:System.Exception> が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6307-103"><xref:System.Threading.ThreadExceptionEventArgs> contains the <xref:System.Exception> that occurred.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6307-104">次の例では、フォームの `button1` をクリックして、<xref:System.Windows.Forms.Application.ThreadException> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="e6307-104">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="e6307-105">この例では、2つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6307-105">The example creates two classes.</span></span> <span data-ttu-id="e6307-106">`ErrorHandler` クラスは、フォームと、イベントを発生させるボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6307-106">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="e6307-107">`CustomExceptionHandler` クラスは、例外を処理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="e6307-107">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="e6307-108">`ErrorHandler` クラスの `Main` では、例外処理クラス、つまり `CustomExceptionHandler`のインスタンスの新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-108">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="e6307-109">次に、インスタンスがイベントに追加され、アプリケーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-109">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="e6307-110">`CustomExceptionHandler` クラスの `OnThreadException` メソッドで、この例では `try...catch...finally` ステートメントを使用して例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="e6307-110">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="e6307-111">`ShowThreadExceptionDialog` メソッドは、表示するメッセージを作成し、メッセージボックスに表示します。</span><span class="sxs-lookup"><span data-stu-id="e6307-111">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="e6307-112">発生した <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="e6307-112">The <see cref="T:System.Exception" /> that occurred.</span></span></param>
        <summary><span data-ttu-id="e6307-113"><see cref="T:System.Threading.ThreadExceptionEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e6307-113">Initializes a new instance of the <see cref="T:System.Threading.ThreadExceptionEventArgs" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e6307-114">次の例では、フォームの `button1` をクリックして、<xref:System.Windows.Forms.Application.ThreadException> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="e6307-114">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="e6307-115">この例では、2つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6307-115">The example creates two classes.</span></span> <span data-ttu-id="e6307-116">`ErrorHandler` クラスは、フォームと、イベントを発生させるボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6307-116">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="e6307-117">`CustomExceptionHandler` クラスは、例外を処理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="e6307-117">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="e6307-118">`ErrorHandler` クラスの `Main` では、例外処理クラス、つまり `CustomExceptionHandler`のインスタンスの新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-118">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="e6307-119">次に、インスタンスがイベントに追加され、アプリケーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-119">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="e6307-120">`CustomExceptionHandler` クラスの `OnThreadException` メソッドで、この例では `try...catch...finally` ステートメントを使用して例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="e6307-120">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="e6307-121">`ShowThreadExceptionDialog` メソッドは、表示するメッセージを作成し、メッセージボックスに表示します。</span><span class="sxs-lookup"><span data-stu-id="e6307-121">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e6307-122">発生した <see cref="T:System.Exception" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e6307-122">Gets the <see cref="T:System.Exception" /> that occurred.</span></span></summary>
        <value><span data-ttu-id="e6307-123">発生した <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="e6307-123">The <see cref="T:System.Exception" /> that occurred.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e6307-124">次の例では、フォームの `button1` をクリックして、<xref:System.Windows.Forms.Application.ThreadException> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="e6307-124">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="e6307-125">この例では、2つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6307-125">The example creates two classes.</span></span> <span data-ttu-id="e6307-126">`ErrorHandler` クラスは、フォームと、イベントを発生させるボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6307-126">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="e6307-127">`CustomExceptionHandler` クラスは、例外を処理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="e6307-127">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="e6307-128">`ErrorHandler` クラスの `Main` では、例外処理クラス、つまり `CustomExceptionHandler`のインスタンスの新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-128">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="e6307-129">次に、インスタンスがイベントに追加され、アプリケーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e6307-129">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="e6307-130">`CustomExceptionHandler` クラスの `OnThreadException` メソッドで、この例では `try...catch...finally` ステートメントを使用して例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="e6307-130">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="e6307-131">`ShowThreadExceptionDialog` メソッドは、表示するメッセージを作成し、メッセージボックスに表示します。</span><span class="sxs-lookup"><span data-stu-id="e6307-131">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
