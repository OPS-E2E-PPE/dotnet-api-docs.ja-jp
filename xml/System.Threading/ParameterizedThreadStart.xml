<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a27f0b92c5f9b53691bdec768065422021c571f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75115995" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">スレッド プロシージャ用のデータを含むオブジェクト。</param>
    <summary><see cref="T:System.Threading.Thread" /> で実行するメソッドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージスレッドが作成されると、スレッドで実行されるメソッドは次のように表されます。  
  
-   <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> コンストラクターに渡される <xref:System.Threading.ThreadStart> デリゲート。  パラメーターを持たず、またはでC# `void` を返すメソッドは Visual Basic の `Sub` プロシージャであり、デリゲートを表すことができます。  
  
-   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> コンストラクターに渡される <xref:System.Threading.ParameterizedThreadStart> デリゲート。 <xref:System.Object> 型の1つのパラメーターを持ち、またはでC# void を返すメソッドは、デリゲートを表す Visual Basic のサブプロシージャです。  
  
 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> メソッドが呼び出されるまで、スレッドは実行を開始しません。 <xref:System.Threading.ThreadStart> または <xref:System.Threading.ParameterizedThreadStart> デリゲートがスレッドで呼び出され、デリゲートによって表されるメソッドの最初の行から実行が開始されます。 <xref:System.Threading.ParameterizedThreadStart> デリゲートの場合、<xref:System.Threading.Thread.Start%28System.Object%29> メソッドに渡されるオブジェクトはデリゲートに渡されます。  
  
> [!NOTE]
>  Visual Basic とC#ユーザーは、スレッドの作成時に、<xref:System.Threading.ThreadStart> または <xref:System.Threading.ParameterizedThreadStart> デリゲートコンストラクターを省略できます。 Visual Basic では、メソッドを <xref:System.Threading.Thread.%23ctor%2A> コンストラクターに渡すときに `AddressOf` 演算子を使用します。たとえば、`Dim t As New Thread(AddressOf ThreadProc)`のようにします。 でC#は、単にスレッドプロシージャの名前を指定します。 コンパイラは、正しいデリゲートコンストラクターを選択します。  
  
> [!NOTE]
>  でC++インスタンスメソッドの <xref:System.Threading.ParameterizedThreadStart> デリゲートを作成すると、コンストラクターの最初のパラメーターがインスタンス変数になります。 静的メソッドの場合、コンストラクターの最初のパラメーターは0です。 静的メソッドの場合、デリゲートコンストラクターはパラメーターを1つだけ必要とします。これは、クラス名で修飾されたコールバックメソッドのアドレスです。  
  
 <xref:System.Threading.ParameterizedThreadStart> デリゲートと <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> メソッドオーバーロードを使用すると、スレッドプロシージャにデータを簡単に渡すことができますが、オブジェクトを <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>に渡すことができるため、この手法はタイプセーフではありません。 スレッドプロシージャにデータを渡すより堅牢な方法は、スレッドプロシージャとデータフィールドの両方をワーカーオブジェクトに配置することです。 詳細については、「[開始時にスレッドを作成してデータを渡す](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)」を参照してください。  
  
 <xref:System.Threading.ParameterizedThreadStart> デリゲートは、1つのパラメーターのみをサポートします。 次のいずれかのパラメーターを指定することにより、複数のデータ項目を <xref:System.Threading.ParameterizedThreadStart> に渡すことができます。  
  
-   配列。  
  
-   すべてのデータ項目が同じ型である場合は、コレクション型。  
  
-   <xref:System.Tuple%602> や <xref:System.Tuple%604>などのタプル型。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Threading.ParameterizedThreadStart> デリゲートを使用して、静的メソッドとインスタンスメソッドを実行します。 最初の <xref:System.Threading.ParameterizedThreadStart> デリゲートは静的な `DoWork` メソッドによって表され、2番目のデリゲートはインスタンス `DoMoreWork` メソッドによって表されます。 どちらのメソッドも <xref:System.Threading.ParameterizedThreadStart> デリゲートシグネチャに一致します。つまり、<xref:System.Object> 型の1つのパラメーターを持ち、値を返しません。  
  
> [!NOTE]
>  Visual Basic とC#コンパイラは、`DoWork` および `DoMoreWork` メソッドのシグネチャから <xref:System.Threading.ParameterizedThreadStart> デリゲートを推論し、正しいコンストラクターを呼び出します。 したがって、コードに明示的なコンストラクター呼び出しはありません。  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">スレッドの作成</related>
  </Docs>
</Type>
