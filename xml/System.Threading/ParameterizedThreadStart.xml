<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d02da3012983817bab528dfce300e3ebd672f897" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83541680" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="fbda7-101">スレッド プロシージャ用のデータを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fbda7-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="fbda7-102"><see cref="T:System.Threading.Thread" /> で実行するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="fbda7-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fbda7-103">マネージスレッドが作成されると、スレッドで実行されるメソッドは次のように表されます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="fbda7-104"><xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> コンストラクターに渡される <xref:System.Threading.ThreadStart> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fbda7-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="fbda7-105">パラメーターを持たず、またはでC# `void` を返すメソッドは Visual Basic の `Sub` プロシージャであり、デリゲートを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="fbda7-106"><xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> コンストラクターに渡される <xref:System.Threading.ParameterizedThreadStart> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fbda7-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="fbda7-107"><xref:System.Object> 型の1つのパラメーターを持ち、またはでC# void を返すメソッドは、デリゲートを表す Visual Basic のサブプロシージャです。</span><span class="sxs-lookup"><span data-stu-id="fbda7-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="fbda7-108"><xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> メソッドが呼び出されるまで、スレッドは実行を開始しません。</span><span class="sxs-lookup"><span data-stu-id="fbda7-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="fbda7-109"><xref:System.Threading.ThreadStart> または <xref:System.Threading.ParameterizedThreadStart> デリゲートがスレッドで呼び出され、デリゲートによって表されるメソッドの最初の行から実行が開始されます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="fbda7-110"><xref:System.Threading.ParameterizedThreadStart> デリゲートの場合、<xref:System.Threading.Thread.Start%28System.Object%29> メソッドに渡されるオブジェクトはデリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbda7-111">Visual Basic とC#ユーザーは、スレッドの作成時に、<xref:System.Threading.ThreadStart> または <xref:System.Threading.ParameterizedThreadStart> デリゲートコンストラクターを省略できます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="fbda7-112">Visual Basic では、メソッドを <xref:System.Threading.Thread.%23ctor%2A> コンストラクターに渡すときに `AddressOf` 演算子を使用します。たとえば、`Dim t As New Thread(AddressOf ThreadProc)`のようにします。</span><span class="sxs-lookup"><span data-stu-id="fbda7-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="fbda7-113">でC#は、単にスレッドプロシージャの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="fbda7-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="fbda7-114">コンパイラは、正しいデリゲートコンストラクターを選択します。</span><span class="sxs-lookup"><span data-stu-id="fbda7-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbda7-115">でC++インスタンスメソッドの <xref:System.Threading.ParameterizedThreadStart> デリゲートを作成すると、コンストラクターの最初のパラメーターがインスタンス変数になります。</span><span class="sxs-lookup"><span data-stu-id="fbda7-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="fbda7-116">静的メソッドの場合、コンストラクターの最初のパラメーターは0です。</span><span class="sxs-lookup"><span data-stu-id="fbda7-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="fbda7-117">静的メソッドの場合、デリゲートコンストラクターはパラメーターを1つだけ必要とします。これは、クラス名で修飾されたコールバックメソッドのアドレスです。</span><span class="sxs-lookup"><span data-stu-id="fbda7-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="fbda7-118"><xref:System.Threading.ParameterizedThreadStart> デリゲートと <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> メソッドオーバーロードを使用すると、スレッドプロシージャにデータを簡単に渡すことができますが、オブジェクトを <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>に渡すことができるため、この手法はタイプセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="fbda7-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fbda7-119">スレッドプロシージャにデータを渡すより堅牢な方法は、スレッドプロシージャとデータフィールドの両方をワーカーオブジェクトに配置することです。</span><span class="sxs-lookup"><span data-stu-id="fbda7-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="fbda7-120">詳細については、「[開始時にスレッドを作成してデータを渡す](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fbda7-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="fbda7-121"><xref:System.Threading.ParameterizedThreadStart> デリゲートは、1つのパラメーターのみをサポートします。</span><span class="sxs-lookup"><span data-stu-id="fbda7-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="fbda7-122">次のいずれかのパラメーターを指定することにより、複数のデータ項目を <xref:System.Threading.ParameterizedThreadStart> に渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="fbda7-123">配列。</span><span class="sxs-lookup"><span data-stu-id="fbda7-123">An array.</span></span>  
  
-   <span data-ttu-id="fbda7-124">すべてのデータ項目が同じ型である場合は、コレクション型。</span><span class="sxs-lookup"><span data-stu-id="fbda7-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="fbda7-125"><xref:System.Tuple%602> や <xref:System.Tuple%604>などのタプル型。</span><span class="sxs-lookup"><span data-stu-id="fbda7-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fbda7-126">次のコード例では、<xref:System.Threading.ParameterizedThreadStart> デリゲートを使用して、静的メソッドとインスタンスメソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="fbda7-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="fbda7-127">最初の <xref:System.Threading.ParameterizedThreadStart> デリゲートは静的な `DoWork` メソッドによって表され、2番目のデリゲートはインスタンス `DoMoreWork` メソッドによって表されます。</span><span class="sxs-lookup"><span data-stu-id="fbda7-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="fbda7-128">どちらのメソッドも <xref:System.Threading.ParameterizedThreadStart> デリゲートシグネチャに一致します。つまり、<xref:System.Object> 型の1つのパラメーターを持ち、値を返しません。</span><span class="sxs-lookup"><span data-stu-id="fbda7-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbda7-129">Visual Basic とC#コンパイラは、`DoWork` および `DoMoreWork` メソッドのシグネチャから <xref:System.Threading.ParameterizedThreadStart> デリゲートを推論し、正しいコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fbda7-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="fbda7-130">したがって、コードに明示的なコンストラクター呼び出しはありません。</span><span class="sxs-lookup"><span data-stu-id="fbda7-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="fbda7-131">スレッドの作成</span><span class="sxs-lookup"><span data-stu-id="fbda7-131">Creating Threads</span></span></related>
  </Docs>
</Type>
