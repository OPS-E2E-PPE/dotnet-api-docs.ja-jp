<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="502b2cd9e76ecdee9e16d526beb79dc5562a215f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75158622" /></Metadata><TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type SemaphoreSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="85484-101">リソースまたはリソースのプールに同時にアクセスできるスレッドの数を制限する <see cref="T:System.Threading.Semaphore" /> の軽量版を表します。</span><span class="sxs-lookup"><span data-stu-id="85484-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-102">セマフォには、ローカルセマフォと名前付きシステムセマフォの2種類があります。</span><span class="sxs-lookup"><span data-stu-id="85484-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="85484-103">前者はアプリに対してローカルです。</span><span class="sxs-lookup"><span data-stu-id="85484-103">The former is local to an app.</span></span> <span data-ttu-id="85484-104">後者はオペレーティングシステム全体に表示され、プロセス間の同期に適しています。</span><span class="sxs-lookup"><span data-stu-id="85484-104">The latter is visible throughout the operating system and is suitable for inter-process synchronization.</span></span> <span data-ttu-id="85484-105"><xref:System.Threading.SemaphoreSlim> は、Windows カーネルセマフォを使用しない <xref:System.Threading.Semaphore> クラスに代わる軽量の手段です。</span><span class="sxs-lookup"><span data-stu-id="85484-105">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="85484-106"><xref:System.Threading.Semaphore> クラスとは異なり、<xref:System.Threading.SemaphoreSlim> クラスは名前付きシステムセマフォをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="85484-106">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="85484-107">ローカルセマフォとしてのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="85484-107">You can use it as a local semaphore only.</span></span> <span data-ttu-id="85484-108"><xref:System.Threading.SemaphoreSlim> クラスは、1つのアプリ内で同期するために推奨されるセマフォです。</span><span class="sxs-lookup"><span data-stu-id="85484-108">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="85484-109">ライトウェイトセマフォは、アプリケーションに対してローカルなリソースのプールへのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="85484-109">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="85484-110">セマフォをインスタンス化するときに、同時にセマフォに入ることができるスレッドの最大数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="85484-110">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="85484-111">また、セマフォに同時に入力できるスレッドの初期数を指定します。</span><span class="sxs-lookup"><span data-stu-id="85484-111">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="85484-112">これにより、セマフォのカウントが定義されます。</span><span class="sxs-lookup"><span data-stu-id="85484-112">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="85484-113">スレッドがセマフォに入るたびにカウントがデクリメントされ、スレッドがセマフォを解放するたびに増加します。</span><span class="sxs-lookup"><span data-stu-id="85484-113">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="85484-114">セマフォを入力するために、スレッドは <xref:System.Threading.SemaphoreSlim.Wait%2A> または <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> のいずれかのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="85484-114">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="85484-115">セマフォを解放するには、<xref:System.Threading.SemaphoreSlim.Release%2A> のオーバーロードのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="85484-115">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="85484-116">カウントがゼロになると、後続のいずれかの `Wait` メソッドの呼び出しは、他のスレッドがセマフォを解放するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="85484-116">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="85484-117">複数のスレッドがブロックされている場合は、スレッドがセマフォに入るタイミングを制御する FIFO や LIFO などの保証された順序はありません。</span><span class="sxs-lookup"><span data-stu-id="85484-117">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="85484-118">セマフォを使用してリソースを保護するコードの基本的な構造は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="85484-118">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="85484-119">すべてのスレッドがセマフォを解放すると、セマフォの作成時に指定された最大値にカウントされます。</span><span class="sxs-lookup"><span data-stu-id="85484-119">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="85484-120">セマフォのカウントは、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティから取得できます。</span><span class="sxs-lookup"><span data-stu-id="85484-120">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="85484-121"><xref:System.Threading.SemaphoreSlim> クラスは、<xref:System.Threading.SemaphoreSlim.Wait%2A>、<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>、および <xref:System.Threading.SemaphoreSlim.Release%2A> メソッドの呼び出しでスレッド id またはタスク id を強制しません。</span><span class="sxs-lookup"><span data-stu-id="85484-121">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="85484-122">さらに、<xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> コンストラクターを使用して <xref:System.Threading.SemaphoreSlim> オブジェクトをインスタンス化する場合、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティは、コンストラクターによって設定された値を超えて増加する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="85484-122">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="85484-123"><xref:System.Threading.SemaphoreSlim.Wait%2A> または <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> メソッドへの呼び出しが <xref:System.Threading.SemaphoreSlim.Release%2A> メソッドの呼び出しと適切に組み合わされていることをプログラマが確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="85484-123">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85484-124">次の例では、3つのスレッドの最大数と、ゼロスレッドの初期カウントを使用して、セマフォを作成します。</span><span class="sxs-lookup"><span data-stu-id="85484-124">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="85484-125">この例では、5つのタスクを開始し、そのすべてのブロックがセマフォを待機しています。</span><span class="sxs-lookup"><span data-stu-id="85484-125">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="85484-126">メインスレッドは <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> オーバーロードを呼び出して、セマフォ数を最大値に増やします。これにより、3つのタスクがセマフォに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="85484-126">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="85484-127">セマフォが解放されるたびに、前のセマフォ数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="85484-127">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="85484-128">コンソールメッセージは、セマフォの使用を追跡します。</span><span class="sxs-lookup"><span data-stu-id="85484-128">Console messages track semaphore use.</span></span> <span data-ttu-id="85484-129">シミュレートされた作業間隔は、出力が読みやすくなるように、スレッドごとに若干増加します。</span><span class="sxs-lookup"><span data-stu-id="85484-129">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="85484-130"><see cref="T:System.Threading.SemaphoreSlim" /> のすべてのパブリックメンバーとプロテクトメンバーはスレッドセーフであり、複数のスレッドから同時に使用することができます。ただし、<see cref="M:System.Threading.SemaphoreSlim.Dispose" />を除き、<see cref="T:System.Threading.SemaphoreSlim" /> の他のすべての操作が完了している場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="85484-130">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-131">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-131">Semaphore and SemaphoreSlim</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85484-132">
          <see cref="T:System.Threading.SemaphoreSlim" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="85484-132">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim initialCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="85484-133">同時に許可されるセマフォの要求の初期数。</span><span class="sxs-lookup"><span data-stu-id="85484-133">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="85484-134">同時に許可される要求の初期数を指定して、<see cref="T:System.Threading.SemaphoreSlim" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="85484-134">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-135">`initialCount` パラメーターは、許可できるセマフォに入る同時要求の数を定義します。</span><span class="sxs-lookup"><span data-stu-id="85484-135">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="85484-136">ただし、同時に許可できる要求の最大数は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="85484-136">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="85484-137">このコンストラクターを呼び出すことによってインスタンス化された <xref:System.Threading.SemaphoreSlim> オブジェクトは、<xref:System.Threading.SemaphoreSlim.Release%2A> メソッドを呼び出したときに `initialCount`を超える <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティの値が増加した場合に <xref:System.Threading.SemaphoreFullException> 例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="85484-137">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="85484-138">これは、メソッドを <xref:System.Threading.SemaphoreSlim.Wait%2A> または <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> するよりも <xref:System.Threading.SemaphoreSlim.Release%2A> メソッドへの呼び出しが多い場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="85484-138">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="85484-139">許可できるセマフォに入る同時要求の最大数を設定するには、<xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="85484-139">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-140"><paramref name="initialCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="85484-140"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-141">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-141">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int * int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim (initialCount, maxCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="85484-142">同時に許可されるセマフォの要求の初期数。</span><span class="sxs-lookup"><span data-stu-id="85484-142">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maxCount"><span data-ttu-id="85484-143">同時に許可されるセマフォの要求の最大数。</span><span class="sxs-lookup"><span data-stu-id="85484-143">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="85484-144">同時に許可される要求の初期数および最大数を指定して、<see cref="T:System.Threading.SemaphoreSlim" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="85484-144">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-145"><paramref name="initialCount" /> が 0 より小さいか、<paramref name="initialCount" /> が <paramref name="maxCount" /> を超えているか、または <paramref name="maxCount" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="85484-145"><paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-146">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-146">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableWaitHandle : System.Threading.WaitHandle" Usage="System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="85484-147">セマフォの待機に使用できる <see cref="T:System.Threading.WaitHandle" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="85484-147">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></summary>
        <value><span data-ttu-id="85484-148">セマフォの待機に使用できる <see cref="T:System.Threading.WaitHandle" /> です。</span><span class="sxs-lookup"><span data-stu-id="85484-148">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-149">このプロパティは、SemaphoreSlim で、待機ハンドルが同じ他のカーネルベースの同期オブジェクトと一緒に待機する必要がある場合にのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="85484-149">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="85484-150"><xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> での待機が正常に終了した場合、<xref:System.Threading.SemaphoreSlim> 自体での待機が正常に行われることはありません。また、セマフォのカウントがデクリメントされることもありません。</span><span class="sxs-lookup"><span data-stu-id="85484-150">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="85484-151">使用可能な待機ハンドルがシグナル状態になった後は、具体的に <xref:System.Threading.SemaphoreSlim> を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="85484-151">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-152"><see cref="T:System.Threading.SemaphoreSlim" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-152">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-153">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-153">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCount : int" Usage="System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="85484-154"><see cref="T:System.Threading.SemaphoreSlim" /> オブジェクトに入る、残りのスレッド数を取得します。</span><span class="sxs-lookup"><span data-stu-id="85484-154">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="85484-155">セマフォに入る、残りのスレッド数。</span><span class="sxs-lookup"><span data-stu-id="85484-155">The number of remaining threads that can enter the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-156"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティの初期値は、<xref:System.Threading.SemaphoreSlim.%23ctor%2A> クラスコンストラクターの呼び出しによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="85484-156">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="85484-157"><xref:System.Threading.SemaphoreSlim.Wait%2A> または <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> メソッドの呼び出しごとにデクリメントされ、<xref:System.Threading.SemaphoreSlim.Release%2A> メソッドの各呼び出しによってインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="85484-157">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-158">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-158">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85484-159"><see cref="T:System.Threading.SemaphoreSlim" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="85484-159">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="semaphoreSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="85484-160"><see cref="T:System.Threading.SemaphoreSlim" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="85484-160">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-161">`Dispose` を使い終わったら、<xref:System.Threading.SemaphoreSlim>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="85484-161">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="85484-162">`Dispose`メソッドによって、<xref:System.Threading.SemaphoreSlim> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="85484-162">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="85484-163">`Dispose`呼び出し後は、<xref:System.Threading.SemaphoreSlim>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Threading.SemaphoreSlim> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="85484-163">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="85484-164">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="85484-164">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85484-165">`Dispose`への最後の参照を解放する前に、必ず<xref:System.Threading.SemaphoreSlim>を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="85484-165">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="85484-166">そうしないと、ガベージ コレクターが <xref:System.Threading.SemaphoreSlim> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="85484-166">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-167">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-167">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="semaphoreSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="85484-168">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85484-168"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="85484-169"><see cref="T:System.Threading.SemaphoreSlim" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを解放することもできます。</span><span class="sxs-lookup"><span data-stu-id="85484-169">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-170"><xref:System.Threading.SemaphoreSlim>のほとんどのメンバーとは異なり、<xref:System.Threading.SemaphoreSlim.Dispose%2A> はスレッドセーフではなく、このインスタンスの他のメンバーと同時に使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="85484-170">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-171">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-171">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85484-172"><see cref="T:System.Threading.SemaphoreSlim" /> のオブジェクトを解放します。</span><span class="sxs-lookup"><span data-stu-id="85484-172">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphoreSlim.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="85484-173"><see cref="T:System.Threading.SemaphoreSlim" /> のオブジェクトを一度解放します。</span><span class="sxs-lookup"><span data-stu-id="85484-173">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span></span></summary>
        <returns><span data-ttu-id="85484-174"><see cref="T:System.Threading.SemaphoreSlim" /> の前のカウント。</span><span class="sxs-lookup"><span data-stu-id="85484-174">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-175"><xref:System.Threading.SemaphoreSlim.Release> メソッドを呼び出すと、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティが1ずつインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="85484-175">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="85484-176">このメソッドが呼び出される前に <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティの値が0の場合、メソッドは、<xref:System.Threading.SemaphoreSlim.Wait%2A> または <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> メソッドの呼び出しによってブロックされた1つのスレッドまたはタスクがセマフォに入ることを許可します。</span><span class="sxs-lookup"><span data-stu-id="85484-176">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-177">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-177">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="85484-178"><see cref="T:System.Threading.SemaphoreSlim" /> は、既にその最大サイズに達しました。</span><span class="sxs-lookup"><span data-stu-id="85484-178">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-179">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-179">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphoreSlim.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="85484-180">セマフォから出る回数。</span><span class="sxs-lookup"><span data-stu-id="85484-180">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="85484-181">指定された回数だけ、<see cref="T:System.Threading.SemaphoreSlim" /> オブジェクトを解放します。</span><span class="sxs-lookup"><span data-stu-id="85484-181">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="85484-182"><see cref="T:System.Threading.SemaphoreSlim" /> の前のカウント。</span><span class="sxs-lookup"><span data-stu-id="85484-182">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-183"><xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> メソッドを呼び出すと、`releaseCount`によって <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティがインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="85484-183">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="85484-184">このメソッドが呼び出される前に <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティの値が0の場合、メソッドは、<xref:System.Threading.SemaphoreSlim.Wait%2A> または <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> メソッドの呼び出しによってブロックされている `releaseCount` スレッドまたはタスクを、セマフォに入ることを許可します。</span><span class="sxs-lookup"><span data-stu-id="85484-184">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-185">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-185">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-186"><paramref name="releaseCount" /> が 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="85484-186"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="85484-187"><see cref="T:System.Threading.SemaphoreSlim" /> は、既にその最大サイズに達しました。</span><span class="sxs-lookup"><span data-stu-id="85484-187">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-188">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-188">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85484-189"><see cref="T:System.Threading.SemaphoreSlim" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-189">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="semaphoreSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="85484-190"><see cref="T:System.Threading.SemaphoreSlim" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-190">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-191">スレッドまたはタスクがセマフォに入ることができる場合は、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティを1ずつデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="85484-191">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-192">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-192">The current instance has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-193">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-193">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="semaphoreSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="85484-194">待機するミリ秒数です。<see cref="F:System.Threading.Timeout.Infinite" /> (-1) の場合は無期限に待機します。または、ゼロの場合は待機ハンドルの状態をテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-194">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="85484-195">タイムアウト値を 32 ビット符号付き整数で指定して、<see cref="T:System.Threading.SemaphoreSlim" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-195">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span></span></summary>
        <returns><span data-ttu-id="85484-196">現在のスレッドが <see langword="true" /> に正常に入った場合は <see cref="T:System.Threading.SemaphoreSlim" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85484-196"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="85484-197">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-197">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="85484-198">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-198">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-199">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-199">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="85484-200">スレッドまたはタスクがセマフォに入ることができる場合は、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティを1ずつデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="85484-200">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="85484-201"><xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> を呼び出すときにスレッドまたはタスクがブロックされ、`millisecondsTimeout` によって指定されたタイムアウト間隔が切れる場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="85484-201">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="85484-202">スレッドまたはタスクがセマフォに入ることはありません。</span><span class="sxs-lookup"><span data-stu-id="85484-202">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="85484-203"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティはデクリメントされません。</span><span class="sxs-lookup"><span data-stu-id="85484-203">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-204"><paramref name="millisecondsTimeout" /> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="85484-204"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-205"><see cref="T:System.Threading.SemaphoreSlim" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-205">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-206">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-206">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="semaphoreSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="85484-207">観察する <see cref="T:System.Threading.CancellationToken" /> トークン。</span><span class="sxs-lookup"><span data-stu-id="85484-207">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="85484-208"><see cref="T:System.Threading.SemaphoreSlim" /> を観察すると同時に、<see cref="T:System.Threading.CancellationToken" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-208">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-209">スレッドまたはタスクがセマフォに入ることができる場合は、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティを1ずつデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="85484-209">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="85484-210">`cancellationToken` が取り消された場合、スレッドまたはタスクはセマフォに入るのではなく、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティはデクリメントされません。</span><span class="sxs-lookup"><span data-stu-id="85484-210">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="85484-211">代わりに、メソッドは <xref:System.OperationCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="85484-211">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="85484-212"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="85484-212"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-213">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-213">The current instance has already been disposed.</span></span>  
  
<span data-ttu-id="85484-214">または</span><span class="sxs-lookup"><span data-stu-id="85484-214">-or-</span></span> 
<span data-ttu-id="85484-215"><see cref="T:System.Threading.CancellationTokenSource" /> を作成した <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-215">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-216">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-216">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="85484-217">キャンセル</span><span class="sxs-lookup"><span data-stu-id="85484-217">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="semaphoreSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="85484-218"><see cref="T:System.TimeSpan" /> は、待機するミリ秒数を表します。<see cref="T:System.TimeSpan" /> が -1 ミリ秒の場合は、無期限に待機します。<see cref="T:System.TimeSpan" /> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-218">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="85484-219"><see cref="T:System.Threading.SemaphoreSlim" /> を使用してタイムアウトを指定し、<see cref="T:System.TimeSpan" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-219">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span></span></summary>
        <returns><span data-ttu-id="85484-220">現在のスレッドが <see langword="true" /> に正常に入った場合は <see cref="T:System.Threading.SemaphoreSlim" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85484-220"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="85484-221">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-221">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="85484-222">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-222">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-223">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-223">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="85484-224">スレッドまたはタスクがセマフォに入ることができる場合は、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティを1ずつデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="85484-224">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="85484-225"><xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> を呼び出すときにスレッドまたはタスクがブロックされ、`millisecondsTimeout` によって指定されたタイムアウト間隔が切れる場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="85484-225">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="85484-226">スレッドまたはタスクがセマフォに入ることはありません。</span><span class="sxs-lookup"><span data-stu-id="85484-226">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="85484-227"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティはデクリメントされません。</span><span class="sxs-lookup"><span data-stu-id="85484-227">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-228"><paramref name="timeout" /> が -1 以外の負数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-228"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="85484-229">または</span><span class="sxs-lookup"><span data-stu-id="85484-229">-or-</span></span>

<span data-ttu-id="85484-230"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-230"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-231">semaphoreSlim インスタンスが破棄されました。</span><span class="sxs-lookup"><span data-stu-id="85484-231">The semaphoreSlim instance has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-232">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-232">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="85484-233">待機するミリ秒数です。<see cref="F:System.Threading.Timeout.Infinite" /> (-1) の場合は無期限に待機します。または、ゼロの場合は待機ハンドルの状態をテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-233">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="85484-234">観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="85484-234">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="85484-235"><see cref="T:System.Threading.SemaphoreSlim" /> を観察すると同時に、タイムアウト値を 32 ビット符号付き整数で指定して、<see cref="T:System.Threading.CancellationToken" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-235">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="85484-236">現在のスレッドが <see langword="true" /> に正常に入った場合は <see cref="T:System.Threading.SemaphoreSlim" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85484-236"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="85484-237">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-237">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="85484-238">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-238">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-239">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-239">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="85484-240">スレッドまたはタスクがセマフォに入ることができる場合は、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティを1ずつデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="85484-240">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="85484-241">`cancellationToken` が取り消された場合、または <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> の呼び出し時にスレッドまたはタスクがブロックされ、`millisecondsTimeout` で指定されたタイムアウト時間が経過した場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="85484-241">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="85484-242">スレッドまたはタスクがセマフォに入ることはありません。</span><span class="sxs-lookup"><span data-stu-id="85484-242">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="85484-243"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティはデクリメントされません。</span><span class="sxs-lookup"><span data-stu-id="85484-243">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="85484-244">`cancellationToken` が取り消された場合、メソッドは <xref:System.OperationCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="85484-244">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="85484-245"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="85484-245"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-246"><paramref name="millisecondsTimeout" /> が -1 以外の負数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-246"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="85484-247">または</span><span class="sxs-lookup"><span data-stu-id="85484-247">-or-</span></span>

<span data-ttu-id="85484-248"><paramref name="millisecondsTimeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-248"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-249"><see cref="T:System.Threading.SemaphoreSlim" /> インスタンスが破棄されたか、<see cref="T:System.Threading.CancellationTokenSource" /> を作成した <paramref name="cancellationToken" /> が破棄されました。</span><span class="sxs-lookup"><span data-stu-id="85484-249">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-250">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-250">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="85484-251"><see cref="T:System.TimeSpan" /> は、待機するミリ秒数を表します。<see cref="T:System.TimeSpan" /> が -1 ミリ秒の場合は、無期限に待機します。<see cref="T:System.TimeSpan" /> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-251">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="85484-252">観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="85484-252">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="85484-253"><see cref="T:System.Threading.SemaphoreSlim" /> を観察すると同時に、タイムアウトを指定する <see cref="T:System.TimeSpan" /> を使用して、<see cref="T:System.Threading.CancellationToken" /> に入れるようになるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="85484-253">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="85484-254">現在のスレッドが <see langword="true" /> に正常に入った場合は <see cref="T:System.Threading.SemaphoreSlim" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85484-254"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="85484-255">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-255">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="85484-256">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-256">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-257">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-257">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="85484-258">スレッドまたはタスクがセマフォに入ることができる場合は、<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティを1ずつデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="85484-258">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="85484-259">`cancellationToken` が取り消された場合、または <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> の呼び出し時にスレッドまたはタスクがブロックされ、`millisecondsTimeout` で指定されたタイムアウト時間が経過した場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="85484-259">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="85484-260">スレッドまたはタスクがセマフォに入ることはありません。</span><span class="sxs-lookup"><span data-stu-id="85484-260">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="85484-261"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> プロパティはデクリメントされません。</span><span class="sxs-lookup"><span data-stu-id="85484-261">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="85484-262">`cancellationToken` が取り消された場合、メソッドは <xref:System.OperationCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="85484-262">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="85484-263"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="85484-263"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-264"><paramref name="timeout" /> が -1 以外の負数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-264"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="85484-265">- または -</span><span class="sxs-lookup"><span data-stu-id="85484-265">-or-.</span></span>

<span data-ttu-id="85484-266"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-266"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-267">semaphoreSlim インスタンスが破棄されました。</span><span class="sxs-lookup"><span data-stu-id="85484-267">The semaphoreSlim instance has been disposed.</span></span>
          
<span data-ttu-id="85484-268">または</span><span class="sxs-lookup"><span data-stu-id="85484-268">-or-</span></span>

<span data-ttu-id="85484-269"><see cref="T:System.Threading.CancellationTokenSource" /> を作成した <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-269">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="85484-270">Semaphore と SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="85484-270">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="85484-271">キャンセル</span><span class="sxs-lookup"><span data-stu-id="85484-271">Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85484-272"><see cref="T:System.Threading.SemaphoreSlim" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-272">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : unit -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="85484-273"><see cref="T:System.Threading.SemaphoreSlim" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-273">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <returns><span data-ttu-id="85484-274">セマフォに入っているときに完了するタスク。</span><span class="sxs-lookup"><span data-stu-id="85484-274">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-275"><see cref="T:System.Threading.SemaphoreSlim" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-275">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="85484-276">待機するミリ秒数です。<see cref="F:System.Threading.Timeout.Infinite" /> (-1) の場合は無期限に待機します。または、ゼロの場合はハンドルの状態をテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-276">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="85484-277">32 ビット符号付き整数を使用して時間間隔を測定しながら、<see cref="T:System.Threading.SemaphoreSlim" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-277">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="85484-278">現在のスレッドが正常に <see langword="true" /> を入力した場合は <see cref="T:System.Threading.SemaphoreSlim" />、それ以外の場合は <see langword="false" /> で完了するタスク。</span><span class="sxs-lookup"><span data-stu-id="85484-278">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-279">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-279">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="85484-280">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-280">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-281">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-281">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-282">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-282">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-283"><paramref name="millisecondsTimeout" /> が -1 以外の負数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-283"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="85484-284">または</span><span class="sxs-lookup"><span data-stu-id="85484-284">-or-</span></span> 
<span data-ttu-id="85484-285"><paramref name="millisecondsTimeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-285"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="85484-286">観察する <see cref="T:System.Threading.CancellationToken" /> トークン。</span><span class="sxs-lookup"><span data-stu-id="85484-286">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="85484-287"><see cref="T:System.Threading.SemaphoreSlim" /> を観察すると同時に、<see cref="T:System.Threading.CancellationToken" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-287">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="85484-288">セマフォに入っているときに完了するタスク。</span><span class="sxs-lookup"><span data-stu-id="85484-288">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-289">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-289">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="85484-290"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="85484-290"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="85484-291"><see cref="T:System.TimeSpan" /> は、待機するミリ秒数を表します。<see cref="T:System.TimeSpan" /> が -1 ミリ秒の場合は、無期限に待機します。<see cref="T:System.TimeSpan" /> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-291">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="85484-292"><see cref="T:System.Threading.SemaphoreSlim" /> を使用して時間間隔を測定しながら、<see cref="T:System.TimeSpan" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-292">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="85484-293">現在のスレッドが正常に <see langword="true" /> を入力した場合は <see cref="T:System.Threading.SemaphoreSlim" />、それ以外の場合は <see langword="false" /> で完了するタスク。</span><span class="sxs-lookup"><span data-stu-id="85484-293">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-294">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-294">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="85484-295">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-295">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-296">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-296">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-297">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-297">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-298"><paramref name="timeout" /> が -1 以外の負数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-298"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="85484-299">または</span><span class="sxs-lookup"><span data-stu-id="85484-299">-or-</span></span> 
<span data-ttu-id="85484-300"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-300"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="85484-301">待機するミリ秒数です。<see cref="F:System.Threading.Timeout.Infinite" /> (-1) の場合は無期限に待機します。または、ゼロの場合はハンドルの状態をテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-301">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="85484-302">観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="85484-302">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="85484-303">32 ビット符号付き整数を使用して時間間隔を測定しながら、<see cref="T:System.Threading.SemaphoreSlim" /> を観察すると同時に、<see cref="T:System.Threading.CancellationToken" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-303">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="85484-304">現在のスレッドが正常に <see langword="true" /> を入力した場合は <see cref="T:System.Threading.SemaphoreSlim" />、それ以外の場合は <see langword="false" /> で完了するタスク。</span><span class="sxs-lookup"><span data-stu-id="85484-304">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-305">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-305">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="85484-306">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-306">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-307">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-307">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-308"><paramref name="millisecondsTimeout" /> が -1 以外の数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-308"><paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="85484-309">または</span><span class="sxs-lookup"><span data-stu-id="85484-309">-or-</span></span>

<span data-ttu-id="85484-310"><paramref name="millisecondsTimeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-310"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-311">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-311">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="85484-312"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="85484-312"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="85484-313"><see cref="T:System.TimeSpan" /> は、待機するミリ秒数を表します。<see cref="T:System.TimeSpan" /> が -1 ミリ秒の場合は、無期限に待機します。<see cref="T:System.TimeSpan" /> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="85484-313">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="85484-314">観察する <see cref="T:System.Threading.CancellationToken" /> トークン。</span><span class="sxs-lookup"><span data-stu-id="85484-314">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="85484-315"><see cref="T:System.Threading.SemaphoreSlim" /> を使用して時間間隔を測定しながら、<see cref="T:System.TimeSpan" /> を観察すると同時に、<see cref="T:System.Threading.CancellationToken" /> に移行するために非同期に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-315">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="85484-316">現在のスレッドが正常に <see langword="true" /> を入力した場合は <see cref="T:System.Threading.SemaphoreSlim" />、それ以外の場合は <see langword="false" /> で完了するタスク。</span><span class="sxs-lookup"><span data-stu-id="85484-316">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85484-317">タイムアウトが-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="85484-317">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="85484-318">タイムアウトが0ミリ秒に設定されている場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="85484-318">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="85484-319">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="85484-319">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85484-320"><paramref name="timeout" /> が -1 以外の負数です。これは無制限のタイムアウトを表します。</span><span class="sxs-lookup"><span data-stu-id="85484-320"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="85484-321">または</span><span class="sxs-lookup"><span data-stu-id="85484-321">-or-</span></span>

<span data-ttu-id="85484-322"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="85484-322"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="85484-323"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="85484-323"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="85484-324"><see cref="T:System.Threading.SemaphoreSlim" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="85484-324">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
