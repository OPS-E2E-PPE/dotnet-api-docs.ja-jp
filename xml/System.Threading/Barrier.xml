<Type Name="Barrier" FullName="System.Threading.Barrier">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e62c86fad3685985a4549e94a86e829255571ce" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75030773" /></Metadata><TypeSignature Language="C#" Value="public class Barrier : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Barrier extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Barrier" />
  <TypeSignature Language="VB.NET" Value="Public Class Barrier&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Barrier : IDisposable" />
  <TypeSignature Language="F#" Value="type Barrier = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7276c-101">複数のタスクが、複数のフェーズを通じて 1 つのアルゴリズムで並行して協調的に実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="7276c-101">Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-102">タスクのグループは、一連のフェーズを通過することによって連携します。グループ内の各は、特定のフェーズの <xref:System.Threading.Barrier> に到着したことを通知し、他のすべてのが到着するまで暗黙的に待機します。</span><span class="sxs-lookup"><span data-stu-id="7276c-102">A group of tasks cooperate by moving through a series of phases, where each in the group signals it has arrived at the <xref:System.Threading.Barrier> in a given phase and implicitly waits for all others to arrive.</span></span> <span data-ttu-id="7276c-103">同じ <xref:System.Threading.Barrier> を複数のフェーズで使用できます。</span><span class="sxs-lookup"><span data-stu-id="7276c-103">The same <xref:System.Threading.Barrier> can be used for multiple phases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7276c-104">次の例は、バリアの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7276c-104">The following example shows how to use a barrier:</span></span>  
  
 [!code-csharp[System.Threading.Barrier#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.barrier/cs/barrier.cs#01)]
 [!code-vb[System.Threading.Barrier#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.barrier/vb/barrier.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="7276c-105"><see cref="T:System.Threading.Barrier" /> のすべてのパブリックメンバーとプロテクトメンバーはスレッドセーフであり、複数のスレッドから同時に使用することができます。 Dispose は例外ですが、<see cref="T:System.Threading.Barrier" /> の他のすべての操作が完了している場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7276c-105">All public and protected members of <see cref="T:System.Threading.Barrier" /> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <see cref="T:System.Threading.Barrier" /> have completed.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-106">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-106">Barrier (.NET Framework)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-107">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-107">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7276c-108"><see cref="T:System.Threading.Barrier" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7276c-108">Initializes a new instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-109">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-109">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-110">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-110">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Barrier (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (participantCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Barrier(int participantCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Barrier : int -&gt; System.Threading.Barrier" Usage="new System.Threading.Barrier participantCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="7276c-111">参加しているスレッドの数。</span><span class="sxs-lookup"><span data-stu-id="7276c-111">The number of participating threads.</span></span></param>
        <summary><span data-ttu-id="7276c-112"><see cref="T:System.Threading.Barrier" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7276c-112">Initializes a new instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-113"><paramref name="participantCount" /> が 0 未満であるか、または 32,767 を超えています。</span><span class="sxs-lookup"><span data-stu-id="7276c-113"><paramref name="participantCount" /> is less than 0 or greater than 32,767.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-114">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-114">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-115">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-115">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Barrier (int participantCount, Action&lt;System.Threading.Barrier&gt; postPhaseAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 participantCount, class System.Action`1&lt;class System.Threading.Barrier&gt; postPhaseAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (participantCount As Integer, postPhaseAction As Action(Of Barrier))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Barrier(int participantCount, Action&lt;System::Threading::Barrier ^&gt; ^ postPhaseAction);" />
      <MemberSignature Language="F#" Value="new System.Threading.Barrier : int * Action&lt;System.Threading.Barrier&gt; -&gt; System.Threading.Barrier" Usage="new System.Threading.Barrier (participantCount, postPhaseAction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
        <Parameter Name="postPhaseAction" Type="System.Action&lt;System.Threading.Barrier&gt;" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="7276c-116">参加しているスレッドの数。</span><span class="sxs-lookup"><span data-stu-id="7276c-116">The number of participating threads.</span></span></param>
        <param name="postPhaseAction"><span data-ttu-id="7276c-117">各フェーズ後に実行する <see cref="T:System.Action`1" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-117">The <see cref="T:System.Action`1" /> to be executed after each phase.</span></span> <span data-ttu-id="7276c-118">null (Visual Basic の場合は Nothing) は操作が行われないことを示すために渡されることがあります。</span><span class="sxs-lookup"><span data-stu-id="7276c-118">null (Nothing in Visual Basic) may be passed to indicate no action is taken.</span></span></param>
        <summary><span data-ttu-id="7276c-119"><see cref="T:System.Threading.Barrier" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7276c-119">Initializes a new instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-120">`postPhaseAction` デリゲートは、すべての参加要素が1つのフェーズでバリアに到達した後に実行されます。</span><span class="sxs-lookup"><span data-stu-id="7276c-120">The `postPhaseAction` delegate will be executed after all participants have arrived at the barrier in one phase.</span></span> <span data-ttu-id="7276c-121">PostPhaseAction デリゲートが実行を完了するまで、参加者は次のフェーズにリリースされません。</span><span class="sxs-lookup"><span data-stu-id="7276c-121">The participants will not be released to the next phase until the postPhaseAction delegate has completed execution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-122"><paramref name="participantCount" /> が 0 未満であるか、または 32,767 を超えています。</span><span class="sxs-lookup"><span data-stu-id="7276c-122"><paramref name="participantCount" /> is less than 0 or greater than 32,767.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-123">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-123">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-124">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-124">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AddParticipant">
      <MemberSignature Language="C#" Value="public long AddParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AddParticipant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.AddParticipant" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParticipant () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AddParticipant();" />
      <MemberSignature Language="F#" Value="member this.AddParticipant : unit -&gt; int64" Usage="barrier.AddParticipant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7276c-125">参加要素が 1 つ追加されることを <see cref="T:System.Threading.Barrier" /> に通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-125">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be an additional participant.</span></span></summary>
        <returns><span data-ttu-id="7276c-126">新しい参加要素が最初に参加するバリアのフェーズ番号。</span><span class="sxs-lookup"><span data-stu-id="7276c-126">The phase number of the barrier in which the new participants will first participate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-127">バリアが現在フェーズ後のアクションを実行している場合、この呼び出しは、フェーズ後のアクションが完了し、バリアが次のフェーズに移動するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="7276c-127">If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-128">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-128">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-129">参加要素を追加すると、バリアの参加要素数が 32,767 を超えます。</span><span class="sxs-lookup"><span data-stu-id="7276c-129">Adding a participant would cause the barrier's participant count to exceed 32,767.</span></span>  
  
 <span data-ttu-id="7276c-130">- または -</span><span class="sxs-lookup"><span data-stu-id="7276c-130">-or-</span></span>  
  
 <span data-ttu-id="7276c-131">メソッドは、フェーズ後アクション内から呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-131">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-132">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-132">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-133">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-133">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AddParticipants">
      <MemberSignature Language="C#" Value="public long AddParticipants (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AddParticipants(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.AddParticipants(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParticipants (participantCount As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AddParticipants(int participantCount);" />
      <MemberSignature Language="F#" Value="member this.AddParticipants : int -&gt; int64" Usage="barrier.AddParticipants participantCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="7276c-134">バリアに追加する追加の参加要素の数。</span><span class="sxs-lookup"><span data-stu-id="7276c-134">The number of additional participants to add to the barrier.</span></span></param>
        <summary><span data-ttu-id="7276c-135">複数の参加要素が追加されることを <see cref="T:System.Threading.Barrier" /> に通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-135">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be additional participants.</span></span></summary>
        <returns><span data-ttu-id="7276c-136">新しい参加要素が最初に参加するバリアのフェーズ番号。</span><span class="sxs-lookup"><span data-stu-id="7276c-136">The phase number of the barrier in which the new participants will first participate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-137">バリアが現在フェーズ後のアクションを実行している場合、この呼び出しは、フェーズ後のアクションが完了し、バリアが次のフェーズに移動するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="7276c-137">If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-138">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-138">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-139"><paramref name="participantCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="7276c-139"><paramref name="participantCount" /> is less than 0.</span></span>  
  
<span data-ttu-id="7276c-140">- または -</span><span class="sxs-lookup"><span data-stu-id="7276c-140">-or-</span></span> 
<span data-ttu-id="7276c-141"><paramref name="participantCount" /> 参加要素を追加すると、バリアの参加要素数が 32,767 を超えます。</span><span class="sxs-lookup"><span data-stu-id="7276c-141">Adding <paramref name="participantCount" /> participants would cause the barrier's participant count to exceed 32,767.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-142">メソッドは、フェーズ後アクション内から呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-142">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-143">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-143">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-144">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-144">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentPhaseNumber">
      <MemberSignature Language="C#" Value="public long CurrentPhaseNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 CurrentPhaseNumber" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.CurrentPhaseNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPhaseNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long CurrentPhaseNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPhaseNumber : int64" Usage="System.Threading.Barrier.CurrentPhaseNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7276c-145">バリアの現在のフェーズの番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="7276c-145">Gets the number of the barrier's current phase.</span></span></summary>
        <value><span data-ttu-id="7276c-146">バリアの現在のフェーズの番号を返します。</span><span class="sxs-lookup"><span data-stu-id="7276c-146">Returns the number of the barrier's current phase.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-147">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-147">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-148">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-148">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7276c-149"><see cref="T:System.Threading.Barrier" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7276c-149">Releases resources used by the current instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-150">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-150">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-151">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-151">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="barrier.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7276c-152"><see cref="T:System.Threading.Barrier" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7276c-152">Releases all resources used by the current instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-153"><xref:System.Threading.Barrier> を使い終わったら、`Dispose`を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7276c-153">Call `Dispose` when you are finished using the <xref:System.Threading.Barrier>.</span></span> <span data-ttu-id="7276c-154">`Dispose`メソッドによって、<xref:System.Threading.Barrier> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="7276c-154">The `Dispose` method leaves the <xref:System.Threading.Barrier> in an unusable state.</span></span> <span data-ttu-id="7276c-155">`Dispose`呼び出し後は、<xref:System.Threading.Barrier>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Threading.Barrier> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7276c-155">After calling `Dispose`, you must release all references to the <xref:System.Threading.Barrier> so the garbage collector can reclaim the memory that the <xref:System.Threading.Barrier> was occupying.</span></span>  
  
 <span data-ttu-id="7276c-156">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7276c-156">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7276c-157"><xref:System.Threading.Barrier>への最後の参照を解放する前に、必ず`Dispose`を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="7276c-157">Always call `Dispose` before you release your last reference to the <xref:System.Threading.Barrier>.</span></span> <span data-ttu-id="7276c-158">そうしないと、ガベージ コレクターが <xref:System.Threading.Barrier> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="7276c-158">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.Barrier> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-159">メソッドは、フェーズ後アクション内から呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-159">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-160">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-160">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-161">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-161">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="barrier.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="7276c-162">マネージド リソースとアンマネージド リソースの両方を解放する場合は true、アンマネージド リソースだけを解放する場合は false。</span><span class="sxs-lookup"><span data-stu-id="7276c-162">true to release both managed and unmanaged resources; false to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="7276c-163"><see cref="T:System.Threading.Barrier" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを解放することもできます。</span><span class="sxs-lookup"><span data-stu-id="7276c-163">Releases the unmanaged resources used by the <see cref="T:System.Threading.Barrier" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-164"><xref:System.Threading.Barrier>のほとんどのメンバーとは異なり、Dispose はスレッドセーフではなく、このインスタンスの他のメンバーと同時に使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="7276c-164">Unlike most of the members of <xref:System.Threading.Barrier>, Dispose is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-165">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-165">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-166">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-166">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ParticipantCount">
      <MemberSignature Language="C#" Value="public int ParticipantCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ParticipantCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.ParticipantCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParticipantCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ParticipantCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ParticipantCount : int" Usage="System.Threading.Barrier.ParticipantCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7276c-167">バリア内の参加要素の合計数を取得します。</span><span class="sxs-lookup"><span data-stu-id="7276c-167">Gets the total number of participants in the barrier.</span></span></summary>
        <value><span data-ttu-id="7276c-168">バリア内の参加要素の合計数を返します。</span><span class="sxs-lookup"><span data-stu-id="7276c-168">Returns the total number of participants in the barrier.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-169">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-169">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-170">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-170">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ParticipantsRemaining">
      <MemberSignature Language="C#" Value="public int ParticipantsRemaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ParticipantsRemaining" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.ParticipantsRemaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParticipantsRemaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ParticipantsRemaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ParticipantsRemaining : int" Usage="System.Threading.Barrier.ParticipantsRemaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7276c-171">現在のフェーズでまだ通知していないバリア内の参加要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="7276c-171">Gets the number of participants in the barrier that haven't yet signaled in the current phase.</span></span></summary>
        <value><span data-ttu-id="7276c-172">現在のフェーズでまだ通知されていないバリア内の参加要素の数を返します。</span><span class="sxs-lookup"><span data-stu-id="7276c-172">Returns the number of participants in the barrier that haven't yet signaled in the current phase.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-173">フェーズ後のアクションデリゲートの実行中、または ParticipantCount が0の場合は0になります。</span><span class="sxs-lookup"><span data-stu-id="7276c-173">This could be 0 during a post-phase action delegate execution or if the ParticipantCount is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-174">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-174">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-175">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-175">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveParticipant">
      <MemberSignature Language="C#" Value="public void RemoveParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveParticipant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.RemoveParticipant" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveParticipant ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveParticipant();" />
      <MemberSignature Language="F#" Value="member this.RemoveParticipant : unit -&gt; unit" Usage="barrier.RemoveParticipant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7276c-176">参加要素が 1 つ削除されることを <see cref="T:System.Threading.Barrier" /> に通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-176">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be one less participant.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-177">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-177">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-178">バリアでは、既に 0 個の参加要素があります。</span><span class="sxs-lookup"><span data-stu-id="7276c-178">The barrier already has 0 participants.</span></span>  
  
 <span data-ttu-id="7276c-179">- または -</span><span class="sxs-lookup"><span data-stu-id="7276c-179">-or-</span></span>  
  
 <span data-ttu-id="7276c-180">メソッドは、フェーズ後アクション内から呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-180">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-181">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-181">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-182">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-182">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveParticipants">
      <MemberSignature Language="C#" Value="public void RemoveParticipants (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveParticipants(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.RemoveParticipants(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveParticipants (participantCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveParticipants(int participantCount);" />
      <MemberSignature Language="F#" Value="member this.RemoveParticipants : int -&gt; unit" Usage="barrier.RemoveParticipants participantCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="7276c-183">バリアから削除する追加の参加要素の数。</span><span class="sxs-lookup"><span data-stu-id="7276c-183">The number of additional participants to remove from the barrier.</span></span></param>
        <summary><span data-ttu-id="7276c-184">複数の参加要素が削除されることを <see cref="T:System.Threading.Barrier" /> に通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-184">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be fewer participants.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-185">`participantCount` の参加者が既にバリアを待機している場合、この削除によってバリアが満たされ、フェーズ後アクションが実行され、この参加者が削除されると、その参加要素がバリアに到達したかのようにすべての参加者がウェイクアップされます。</span><span class="sxs-lookup"><span data-stu-id="7276c-185">If `participantCount` participants are already waiting on the barrier, this removal fulfills the barrier, the post phase action is executed and all of the participants are woken as if this participant being removed had successfully reached the barrier.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-186">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-186">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-187">参加要素の総数が、指定した <paramref name="participantCount" /> より小さくなっています。</span><span class="sxs-lookup"><span data-stu-id="7276c-187">The total participant count is less than the specified <paramref name="participantCount" /></span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-188">バリアでは、既に 0 個の参加要素があります。</span><span class="sxs-lookup"><span data-stu-id="7276c-188">The barrier already has 0 participants.</span></span>  
  
 <span data-ttu-id="7276c-189">- または -</span><span class="sxs-lookup"><span data-stu-id="7276c-189">-or-</span></span>  
  
 <span data-ttu-id="7276c-190">メソッドは、フェーズ後アクション内から呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-190">The method was invoked from within a post-phase action.</span></span>  
  
 <span data-ttu-id="7276c-191">- または -</span><span class="sxs-lookup"><span data-stu-id="7276c-191">-or-</span></span>  
  
 <span data-ttu-id="7276c-192">現在の参加要素数が、指定された participantCount より小さい値です</span><span class="sxs-lookup"><span data-stu-id="7276c-192">current participant count is less than the specified participantCount</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-193">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-193">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-194">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-194">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7276c-195">参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-195">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-196">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-196">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-197">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-197">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public void SignalAndWait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalAndWait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignalAndWait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignalAndWait();" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : unit -&gt; unit" Usage="barrier.SignalAndWait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7276c-198">参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-198">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-199">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-199">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-200">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</span><span class="sxs-lookup"><span data-stu-id="7276c-200">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <exception cref="T:System.Threading.BarrierPostPhaseException"><span data-ttu-id="7276c-201">すべての参加しているスレッドが SignalAndWait を呼び出した後に、バリアのフェーズ後のアクションから例外がスローされた場合、その例外は BarrierPostPhaseException にラップされ、参加しているすべてのスレッドでスローされます。</span><span class="sxs-lookup"><span data-stu-id="7276c-201">If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-202">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-202">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-203">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-203">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : int -&gt; bool" Usage="barrier.SignalAndWait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="7276c-204">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="7276c-204">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="7276c-205">32 ビット符号付き整数を使用してタイムアウトを計測し、参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-205">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</span></span></summary>
        <returns><span data-ttu-id="7276c-206">指定した時間内にすべての参加要素がバリアに到達した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-206"><see langword="true" /> if all participants reached the barrier within the specified time; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-207">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-207">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-208"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="7276c-208"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-209">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</span><span class="sxs-lookup"><span data-stu-id="7276c-209">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <exception cref="T:System.Threading.BarrierPostPhaseException"><span data-ttu-id="7276c-210">すべての参加しているスレッドが SignalAndWait を呼び出した後に、バリアのフェーズ後のアクションから例外がスローされた場合、その例外は BarrierPostPhaseException にラップされ、参加しているすべてのスレッドでスローされます。</span><span class="sxs-lookup"><span data-stu-id="7276c-210">If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-211">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-211">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-212">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-212">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public void SignalAndWait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalAndWait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignalAndWait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : System.Threading.CancellationToken -&gt; unit" Usage="barrier.SignalAndWait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="7276c-213">観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-213">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="7276c-214">取り消しトークンを観察すると同時に、参加要素がバリアに到達し、他のすべての参加要素がバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-214">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="7276c-215"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-215"><paramref name="cancellationToken" /> has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-216">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-216">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-217">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</span><span class="sxs-lookup"><span data-stu-id="7276c-217">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-218">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-218">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-219">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-219">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : TimeSpan -&gt; bool" Usage="barrier.SignalAndWait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="7276c-220">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-220">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="7276c-221"><see cref="T:System.TimeSpan" /> オブジェクトを使用して時間間隔を計測し、参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-221">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <see cref="T:System.TimeSpan" /> object to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="7276c-222">他のすべての参加要素がバリアに到達した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-222"><see langword="true" /> if all other participants reached the barrier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-223">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-223">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-224"><paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが 32,767 を超えています。</span><span class="sxs-lookup"><span data-stu-id="7276c-224"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-225">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</span><span class="sxs-lookup"><span data-stu-id="7276c-225">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-226">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-226">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-227">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-227">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : int * System.Threading.CancellationToken -&gt; bool" Usage="barrier.SignalAndWait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="7276c-228">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="7276c-228">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7276c-229">観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-229">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="7276c-230">取り消しトークンを観察すると同時に、32 ビット符号付き整数を使用してタイムアウトを計測し、参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-230">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="7276c-231">指定した時間内にすべての参加要素がバリアに到達した場合は true。それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="7276c-231">if all participants reached the barrier within the specified time; otherwise false</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7276c-232">シグナルが有効になる前に `cancellationToken` が取り消された場合、<xref:System.OperationCanceledException> がスローされ、<xref:System.Threading.Barrier.ParticipantsRemaining%2A> の値は減少しません。</span><span class="sxs-lookup"><span data-stu-id="7276c-232">If the `cancellationToken` was canceled before the signal took effect, then an <xref:System.OperationCanceledException> is thrown and the <xref:System.Threading.Barrier.ParticipantsRemaining%2A> value is not decreased.</span></span> <span data-ttu-id="7276c-233">`cancellationToken` がキャンセルされなかった場合、またはシグナルが有効になった後にキャンセルされた場合、<xref:System.Threading.Barrier.ParticipantsRemaining%2A> は減少し、<xref:System.OperationCanceledException> はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7276c-233">If the `cancellationToken` is not canceled or is canceled after the signal takes effect then <xref:System.Threading.Barrier.ParticipantsRemaining%2A> is decreased and no <xref:System.OperationCanceledException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="7276c-234"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-234"><paramref name="cancellationToken" /> has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-235">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-235">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-236"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="7276c-236"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-237">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</span><span class="sxs-lookup"><span data-stu-id="7276c-237">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-238">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-238">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-239">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-239">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="barrier.SignalAndWait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="7276c-240">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-240">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7276c-241">観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-241">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="7276c-242">取り消しトークンを観察すると同時に、<see cref="T:System.TimeSpan" /> オブジェクトを使用して時間間隔を計測し、参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</span><span class="sxs-lookup"><span data-stu-id="7276c-242">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <see cref="T:System.TimeSpan" /> object to measure the time interval, while observing a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="7276c-243">他のすべての参加要素がバリアに到達した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7276c-243"><see langword="true" /> if all other participants reached the barrier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="7276c-244"><paramref name="cancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="7276c-244"><paramref name="cancellationToken" /> has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7276c-245">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7276c-245">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7276c-246"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="7276c-246"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7276c-247">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</span><span class="sxs-lookup"><span data-stu-id="7276c-247">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="7276c-248">バリア (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="7276c-248">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="7276c-249">方法: バリアを使用して同時実行操作を同期する</span><span class="sxs-lookup"><span data-stu-id="7276c-249">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
