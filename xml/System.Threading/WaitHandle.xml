<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fbce55b04133a4694fe97ebb54a82f8f2eb02c60" /><Meta Name="ms.sourcegitcommit" Value="48fd27f6aa659b18a958a72b9c956a9db49f2d96" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/12/2020" /><Meta Name="ms.locfileid" Value="79190961" /></Metadata><TypeSignature Language="C#" Value="public abstract class WaitHandle : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WaitHandle extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0ecf2-101">共有リソースへの排他アクセスの待機に使用するオペレーティング システム固有のオブジェクトをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-101">Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-102"><xref:System.Threading.WaitHandle> クラスは、ネイティブオペレーティングシステムの同期ハンドルをカプセル化し、複数の待機操作を可能にするランタイム内のすべての同期オブジェクトを表すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-102">The <xref:System.Threading.WaitHandle> class encapsulates a native operating system synchronization handle and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="0ecf2-103">他の同期オブジェクトとの待機ハンドルの比較については、「[同期プリミティブの概要](~/docs/standard/threading/overview-of-synchronization-primitives.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="0ecf2-104"><xref:System.Threading.WaitHandle> クラス自体は abstract です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="0ecf2-105"><xref:System.Threading.WaitHandle> から派生したクラスは、共有リソースへのアクセスを取得または解放することを示すシグナリング機構を定義しますが、共有リソースへのアクセスを待機している間、継承された <xref:System.Threading.WaitHandle> メソッドを使用してブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="0ecf2-106"><xref:System.Threading.WaitHandle> から派生したクラスには次のものがあります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="0ecf2-107"><xref:System.Threading.Mutex> クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="0ecf2-108">「 [Mutex](~/docs/standard/threading/mutexes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="0ecf2-109"><xref:System.Threading.EventWaitHandle> クラスとその派生クラス、<xref:System.Threading.AutoResetEvent> および <xref:System.Threading.ManualResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span>  
  
-   <span data-ttu-id="0ecf2-110"><xref:System.Threading.Semaphore> クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-110">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="0ecf2-111">「[セマフォと SemaphoreSlim」を](~/docs/standard/threading/semaphore-and-semaphoreslim.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-111">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="0ecf2-112">スレッドは、<xref:System.Threading.WaitHandle>から派生したクラスによって継承されるインスタンスメソッド <xref:System.Threading.WaitHandle.WaitOne%2A>を呼び出すことによって、個々の待機ハンドルでブロックできます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-112">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="0ecf2-113"><xref:System.Threading.WaitHandle> の派生クラスは、スレッドアフィニティによって異なります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-113">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="0ecf2-114">イベント待機ハンドル (<xref:System.Threading.EventWaitHandle>、<xref:System.Threading.AutoResetEvent>、および <xref:System.Threading.ManualResetEvent>) と、セマフォにはスレッドアフィニティがありません。任意のスレッドは、イベント待機ハンドルまたはセマフォにシグナルを送ることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-114">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="0ecf2-115">一方、ミューテックスにはスレッドアフィニティがあります。ミューテックスを所有するスレッドは、ミューテックスを解放する必要があります。スレッドが所有していないミューテックスで <xref:System.Threading.Mutex.ReleaseMutex%2A> メソッドを呼び出した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-115">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="0ecf2-116"><xref:System.Threading.WaitHandle> クラスは <xref:System.MarshalByRefObject>から派生するため、これらのクラスを使用して、アプリケーションドメインの境界を越えてスレッドのアクティビティを同期できます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-116">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="0ecf2-117"><xref:System.Threading.WaitHandle> クラスには、その派生クラスに加えて、1つまたは複数の同期オブジェクトがシグナルを受信するまでスレッドをブロックする静的メソッドが多数あります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-117">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal.</span></span> <span data-ttu-id="0ecf2-118">チェックの内容は次のとおりです</span><span class="sxs-lookup"><span data-stu-id="0ecf2-118">These include:</span></span>  
  
-   <span data-ttu-id="0ecf2-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>。スレッドは、1つの待機ハンドルをシグナルし、別の待機ハンドルをすぐに待機できます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="0ecf2-120"><xref:System.Threading.WaitHandle.WaitAll%2A>。配列内のすべての待機ハンドルがシグナルを受信するまでスレッドが待機できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-120"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="0ecf2-121"><xref:System.Threading.WaitHandle.WaitAny%2A>、指定された待機ハンドルのセットのいずれかがシグナル状態になるまでスレッドが待機できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-121"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled.</span></span>  
  
 <span data-ttu-id="0ecf2-122">これらのメソッドのオーバーロードは、待機を破棄するためのタイムアウト間隔と、待機に入る前に同期コンテキストを終了する機会を提供し、他のスレッドが同期コンテキストを使用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-122">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0ecf2-123">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-123">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="0ecf2-124">型またはその派生型の使用が完了したら、直接または間接的に破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-124">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="0ecf2-125">直接的に型を破棄するには、<xref:System.Threading.WaitHandle.Close%2A>`try`/ ブロック内で `catch` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-125">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="0ecf2-126">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-126">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="0ecf2-127">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-127">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="0ecf2-128"><xref:System.Threading.WaitHandle> は <xref:System.IDisposable.Dispose%2A> パターンを実装します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-128"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="0ecf2-129">「Dispose メソッドの実装」 (~/docs/standard/garbage-collection/implementing-dispose) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-129">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="0ecf2-130"><xref:System.Threading.WaitHandle>から派生する場合は、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A> プロパティを使用して、ネイティブオペレーティングシステムハンドルを格納します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-130">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native operating system handle.</span></span> <span data-ttu-id="0ecf2-131">追加のアンマネージリソースを使用しない限り、保護された <xref:System.Threading.WaitHandle.Dispose%2A> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-131">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-132">次のコード例では、2つのスレッドがバックグラウンドタスクを実行できます。一方、メインスレッドは、<xref:System.Threading.WaitHandle> クラスの静的 <xref:System.Threading.WaitHandle.WaitAny%2A> および <xref:System.Threading.WaitHandle.WaitAll%2A> メソッドを使用してタスクの完了を待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-132">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0ecf2-133">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-133">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0ecf2-134">スレッド</span><span class="sxs-lookup"><span data-stu-id="0ecf2-134">Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="0ecf2-135">スレッド処理オブジェクトと機能</span><span class="sxs-lookup"><span data-stu-id="0ecf2-135">Threading Objects and Features</span></span></related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="0ecf2-136">ミューテックス</span><span class="sxs-lookup"><span data-stu-id="0ecf2-136">Mutexes</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/cd94fc34-ac15-427f-b723-a1240a4fab7d"><span data-ttu-id="0ecf2-137">EventWaitHandle、AutoResetEvent、および ManualResetEvent</span><span class="sxs-lookup"><span data-stu-id="0ecf2-137">EventWaitHandle, AutoResetEvent, and ManualResetEvent</span></span></related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0ecf2-138">集合</span><span class="sxs-lookup"><span data-stu-id="0ecf2-138">Semaphores</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public WaitHandle ();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WaitHandle();" FrameworkAlternate="netframework-1.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ecf2-139"><see cref="T:System.Threading.WaitHandle" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-139">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ecf2-140">現在の <see cref="T:System.Threading.WaitHandle" /> によって保持されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-140">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-141">このメソッドは、<xref:System.Threading.WaitHandle> クラスとその派生クラスの <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> メソッドのパブリック実装です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-141">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="0ecf2-142">このメソッドは、`true` 引数を使用して `Dispose(Boolean)` のオーバーロードを呼び出し、<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> メソッドを呼び出す、標準の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-142">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0ecf2-143">`WaitHandle` または派生クラスのインスタンスによって保持されているすべてのリソースを解放するには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-143">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="0ecf2-144">このメソッドが呼び出されると、現在のインスタンスへの参照によって未定義の動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-144">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-145"><xref:System.Threading.WaitHandle>への最後の参照を解放する前に、常に <xref:System.Threading.WaitHandle.Close%2A> または <xref:System.Threading.WaitHandle.Dispose> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-145">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="0ecf2-146">それ以外の場合、使用しているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-146">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ecf2-147">派生クラスで割り当てられたリソースを解放するには、<see langword="Dispose(Boolean)" /> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-147">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="0ecf2-148">Dispose メソッドの実装</span><span class="sxs-lookup"><span data-stu-id="0ecf2-148">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0ecf2-149"><see cref="T:System.Threading.WaitHandle" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-149">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ecf2-150"><see cref="T:System.Threading.WaitHandle" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-150">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-151">このメソッドは、<xref:System.Threading.WaitHandle.Close%2A> メソッドに相当します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-151">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-152"><xref:System.Threading.WaitHandle>への最後の参照を解放する前に、常に <xref:System.Threading.WaitHandle.Close%2A> または <xref:System.Threading.WaitHandle.Dispose> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-152">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="0ecf2-153">それ以外の場合、使用しているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-153">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="0ecf2-154">アンマネージ リソースのクリーンアップ</span><span class="sxs-lookup"><span data-stu-id="0ecf2-154">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing"><span data-ttu-id="0ecf2-155">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-155"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="0ecf2-156">派生クラスでオーバーライドされると、<see cref="T:System.Threading.WaitHandle" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-156">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-157">このメソッドは、<xref:System.Threading.WaitHandle.Close%2A> と、`explicitDisposing` パラメーターを `true`に設定した <xref:System.Threading.WaitHandle.Dispose> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-157">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="0ecf2-158">`explicitDisposing` パラメーターが `true`場合、このメソッドは、この <xref:System.Threading.WaitHandle> オブジェクトが参照するすべてのマネージオブジェクトによって保持されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-158">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ecf2-159">派生クラスで割り当てられたリソースを解放するには、<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-159">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span></span>  
  
<span data-ttu-id="0ecf2-160"><see cref="M:System.Threading.WaitHandle.Close" /> または <see cref="M:System.Threading.WaitHandle.Dispose" /> メソッドは、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-160">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="0ecf2-161">このメソッドをオーバーライドする場合は、<see langword="Dispose" /> または <see langword="Close" />の以前の呼び出しで以前に破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-161">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="0ecf2-162">Dispose メソッドの実装</span><span class="sxs-lookup"><span data-stu-id="0ecf2-162">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ecf2-163">現在のインスタンスに保持されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-163">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <span data-ttu-id="0ecf2-164">このメンバーは .NET Framework バージョン2.0 以降のバージョンから削除されています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-164">This member has been removed from the .NET Framework version 2.0 and subsequent versions.</span></span> <span data-ttu-id="0ecf2-165">このトピックは、このトピックの「バージョン情報」に記載されているバージョンにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-165">This topic applies only to the versions listed in "Version Information" later in this topic.</span></span>


<span data-ttu-id="0ecf2-166">アプリケーションコードはこのメソッドを呼び出しません。ガベージコレクターによる終了処理が無効になっていない限り、ガベージコレクションの実行中に自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-166">Application code does not call this method; it is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled.</span></span> <span data-ttu-id="0ecf2-167">詳細については、「<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>」および「<xref:System.Object.Finalize>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-167">For more information, see <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> and <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="0ecf2-168">このメソッドは、<xref:System.Object.Finalize> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-168">This method overrides <xref:System.Object.Finalize>.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ecf2-169">ネイティブ オペレーティング システム ハンドルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-169">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="0ecf2-170">ネイティブ オペレーティング システム ハンドルを表す <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-170">An <see cref="T:System.IntPtr" /> representing the native operating system handle.</span></span> <span data-ttu-id="0ecf2-171">既定値は <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> フィールドの値です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-171">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-172">新しい値を <xref:System.Threading.WaitHandle.Handle%2A> プロパティに割り当てると、前のハンドルは閉じられません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-172">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="0ecf2-173">これにより、ハンドルがリークする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-173">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="0ecf2-174">このプロパティは .NET Framework バージョン2.0 以降では使用しないでください。代わりに、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A> プロパティを使用してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-174">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="0ecf2-175">このプロパティを有効なハンドルに設定すると、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A> プロパティも設定されますが、<xref:System.Threading.WaitHandle.InvalidHandle> に設定すると、ハンドルのリークが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-175">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ecf2-176">無効なネイティブ オペレーティング システム ハンドルを表します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-176">Represents an invalid native operating system handle.</span></span> <span data-ttu-id="0ecf2-177">このフィールドは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-177">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-178"><xref:System.Threading.WaitHandle.Handle%2A> プロパティを初期化する目的で内部的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-178">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ecf2-179">この値を使用して、<see cref="P:System.Threading.WaitHandle.Handle" /> プロパティに有効なネイティブオペレーティングシステムハンドルが含まれているかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-179">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ecf2-180">ネイティブ オペレーティング システム ハンドルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-180">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="0ecf2-181">ネイティブ オペレーティング システム ハンドルを表す <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-181">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-182"><xref:System.Threading.WaitHandle.SafeWaitHandle%2A> プロパティに新しい値を割り当てると、前の <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> オブジェクトが収集されたときに、前のハンドルが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-182">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="0ecf2-183">ハンドルを手動で閉じないでください。この結果、<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> がハンドルを閉じようとすると <xref:System.ObjectDisposedException> が発生します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-183">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="0ecf2-184"><xref:System.Threading.WaitHandle> は <xref:System.IDisposable.Dispose%2A> パターンを実装します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-184"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="0ecf2-185">「 [Dispose メソッドの実装」を](~/docs/standard/garbage-collection/implementing-dispose.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-185">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span> <span data-ttu-id="0ecf2-186"><xref:System.Threading.WaitHandle>から派生する場合は、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A> プロパティを使用して、ネイティブハンドルのオペレーティングシステムハンドルを格納します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-186">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="0ecf2-187">追加のアンマネージリソースを使用しない限り、保護された <xref:System.Threading.WaitHandle.Dispose%2A> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-187">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0ecf2-188">1 つの <see cref="T:System.Threading.WaitHandle" /> を通知し、別のハンドルを待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-188">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="0ecf2-189">通知対象の <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-189">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="0ecf2-190">待機対象の <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-190">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <summary><span data-ttu-id="0ecf2-191">1 つの <see cref="T:System.Threading.WaitHandle" /> を通知し、別のハンドルを待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-191">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-192">通知と待機の両方が正常に完了した場合は <see langword="true" />。待機が完了しない場合、メソッドから制御は戻りません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-192"><see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-193">この操作はアトミックであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-193">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="0ecf2-194">現在のスレッドが `toSignal` 通知した後、`toWaitOn`で待機する前に、別のプロセッサで実行されているスレッドは `toWaitOn` シグナル状態になるか、待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-194">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-195">次のコード例では、<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> メソッドのオーバーロードを使用して、メインスレッドがブロックされたスレッドを通知し、スレッドがタスクを完了するまで待機することができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-195">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="0ecf2-196">この例では、5つのスレッドを開始し、<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> フラグを使用して作成された <xref:System.Threading.EventWaitHandle> でブロックできるようにします。次に、ユーザーが ENTER キーを押すたびに1つのスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-196">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="0ecf2-197">この例では、別の5つのスレッドをキューに置いて、<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> フラグを使用して作成された <xref:System.Threading.EventWaitHandle> を使用してすべてを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-197">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-198"><paramref name="toSignal" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-198"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-199">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-199">-or-</span></span> 
 <span data-ttu-id="0ecf2-200"><paramref name="toWaitOn" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-200"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-201"><see cref="F:System.Threading.ApartmentState.STA" /> 状態のスレッドでメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-201">The method was called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-202"><paramref name="toSignal" /> はセマフォで、カウントは既に最大値になっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-202"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-203">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-203">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-204">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-204">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="0ecf2-205">通知対象の <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-205">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="0ecf2-206">待機対象の <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-206">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-207">待機する間隔を表す整数。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-207">An integer that represents the interval to wait.</span></span> <span data-ttu-id="0ecf2-208">この値が <see cref="F:System.Threading.Timeout.Infinite" />、つまり -1 の場合、待機は無期限となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-208">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-209">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-209"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-210">1 つの <see cref="T:System.Threading.WaitHandle" /> を通知し、別のハンドルを待機します。タイムアウト間隔として 32 ビット符号付き整数を指定し、待機に入る前にコンテキストの同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-210">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-211">通知および待機の両方が正常に完了した場合は <see langword="true" />。通知は完了したが、待機がタイムアウトになった場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-211"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-212">この操作はアトミックであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-212">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="0ecf2-213">現在のスレッドが `toSignal` 通知した後、`toWaitOn`で待機する前に、別のプロセッサで実行されているスレッドは `toWaitOn` シグナル状態になるか、待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-213">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="0ecf2-214">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-214">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-215">`toWaitOn` の状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-215">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-216">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-216">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-217">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-217">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-218">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-218">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-219"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-219">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-220">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-220">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="0ecf2-221">スレッドは、<xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-221">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-222">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-222">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-223">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-223">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-224">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-224">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-225"><xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-225">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-226"><paramref name="toSignal" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-226"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-227">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-227">-or-</span></span> 
 <span data-ttu-id="0ecf2-228"><paramref name="toWaitOn" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-228"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-229">メソッドは <see cref="F:System.Threading.ApartmentState.STA" /> 状態のスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-229">The method is called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-230">カウントの最大値を超えるため、<see cref="T:System.Threading.WaitHandle" /> はシグナル状態にはできません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-230">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-231"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-231"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-232">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-232">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-233">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-233">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="0ecf2-234">通知対象の <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-234">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="0ecf2-235">待機対象の <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-235">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="timeout"><span data-ttu-id="0ecf2-236">待機間隔を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-236">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span></span> <span data-ttu-id="0ecf2-237">この値が -1 の場合、待機は無期限となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-237">If the value is -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-238">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-238"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-239">1 つの <see cref="T:System.Threading.WaitHandle" /> を通知し、別のハンドルを待機します。タイムアウト間隔として <see cref="T:System.TimeSpan" /> を指定し、待機に入る前にコンテキストの同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-239">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-240">通知および待機の両方が正常に完了した場合は <see langword="true" />。通知は完了したが、待機がタイムアウトになった場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-240"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-241">この操作はアトミックであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-241">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="0ecf2-242">現在のスレッドが `toSignal` 通知した後、`toWaitOn`で待機する前に、別のプロセッサで実行されているスレッドは `toWaitOn` シグナル状態になるか、待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-242">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="0ecf2-243">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-243">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0ecf2-244">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-244">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-245">`toWaitOn` の状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-245">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-246">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-246">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-247">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-247">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-248">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-248">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-249"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-249">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-250">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-250">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="0ecf2-251">スレッドは、<xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-251">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-252">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-252">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-253">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-253">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-254">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-254">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-255"><xref:System.Threading.WaitHandle.SignalAndWait%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-255">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-256"><paramref name="toSignal" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-256"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-257">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-257">-or-</span></span> 
 <span data-ttu-id="0ecf2-258"><paramref name="toWaitOn" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-258"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-259"><see cref="F:System.Threading.ApartmentState.STA" /> 状態のスレッドでメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-259">The method was called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-260"><paramref name="toSignal" /> はセマフォで、カウントは既に最大値になっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-260"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-261"><paramref name="timeout" /> は、-1 以外の負のミリ秒値となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-261"><paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span></span>  
  
<span data-ttu-id="0ecf2-262">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-262">-or-</span></span> 
 <span data-ttu-id="0ecf2-263"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-263"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-264">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-264">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-265">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-265">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="waitHandle.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ecf2-266"><see cref="T:System.Threading.WaitHandle" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-266">Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="0ecf2-267">`Dispose` を呼び出すと、<xref:System.Threading.WaitHandle> によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-267">Calling `Dispose` allows the resources used by the <xref:System.Threading.WaitHandle> to be reallocated for other purposes.</span></span> <span data-ttu-id="0ecf2-268">`Dispose`の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-268">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0ecf2-269">指定した配列内のすべての要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-269">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-270">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-270">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="0ecf2-271">この配列には、同一オブジェクトに対する複数の参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-271">This array cannot contain multiple references to the same object.</span></span></param>
        <summary><span data-ttu-id="0ecf2-272">指定した配列内のすべての要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-272">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-273"><see langword="true" /> 内のすべての要素がシグナルを受信した場合は <paramref name="waitHandles" />。それ以外の場合は、待機を続けます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-273"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-274"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-274"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-275">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドはミューテックスが破棄されたときに `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-275">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-276">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-276">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-277">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-277">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-278">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-278">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-279">すべてのハンドルがシグナル状態になると、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドはを返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-279">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="0ecf2-280">64を超えるハンドルが渡されると、<xref:System.NotSupportedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-280">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="0ecf2-281">配列に重複が含まれている場合、呼び出しは <xref:System.DuplicateWaitObjectException>で失敗します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-281">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-282"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、<xref:System.Threading.ApartmentState.STA> 状態のスレッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-282">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="0ecf2-283">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、`exitContext`の `millisecondsTimeout` と `true` の-1 (または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-283">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-284">次のコード例では、スレッドプールを使用して、ファイルのグループに対して非同期的に作成および書き込みを行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-284">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="0ecf2-285">各書き込み操作は、作業項目としてキューに登録され、完了時に通知されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-285">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="0ecf2-286">メインスレッドは、すべての項目がシグナル状態になるのを待機してから終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-286">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-287"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-287">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span> <span data-ttu-id="0ecf2-288">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-288">-or-</span></span> 
<span data-ttu-id="0ecf2-289"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-289">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-290">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-290">-or-</span></span> 
 <span data-ttu-id="0ecf2-291"><paramref name="waitHandles" /> は要素を持たない配列で、.NET Framework のバージョンが 2.0 以降です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-291"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="0ecf2-292"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.ArgumentException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-292">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0ecf2-293"><paramref name="waitHandles" /> 配列に、重複する要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-293">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-294"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-294">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="0ecf2-295">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-295">-or-</span></span> 
<span data-ttu-id="0ecf2-296">現在のスレッドの状態が <see cref="F:System.Threading.ApartmentState.STA" /> であり、<paramref name="waitHandles" /> に複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-296">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="0ecf2-297"><paramref name="waitHandles" /> は要素を持たない配列で、.NET Framework のバージョンが 1.0 または 1.1 です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-297"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-298">スレッドがミューテックスを解放せずに終了したため、待機が終了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-298">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-299">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-299">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-300"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-300">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-301">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-301">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="0ecf2-302">この配列には、同一オブジェクトに対する複数の参照 (重複) を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-302">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-303">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-303">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="0ecf2-304"><see cref="T:System.Int32" /> 値を使用して時間間隔を指定し、指定した配列内のすべての要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-304">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-305"><see langword="true" /> 内のすべての要素がシグナルを受信した場合は<paramref name="waitHandles" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-305"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-306">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-306">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-307">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-307">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-308"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、待機が終了したときにを返します。これは、すべてのハンドルがシグナル状態になったとき、またはタイムアウトが発生したときのいずれかを意味します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-308">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="0ecf2-309">64を超えるハンドルが渡されると、<xref:System.NotSupportedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-309">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="0ecf2-310">配列に重複がある場合、呼び出しは <xref:System.DuplicateWaitObjectException>で失敗します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-310">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-311"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、<xref:System.Threading.ApartmentState.STA> 状態のスレッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-311">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="0ecf2-312">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> のオーバーロードを呼び出し、`exitContext`に `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-312">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-313"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-313">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-314">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-314">-or-</span></span> 
<span data-ttu-id="0ecf2-315"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-315">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-316">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-316">-or-</span></span> 
 <span data-ttu-id="0ecf2-317"><paramref name="waitHandles" /> は、要素を持たない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-317"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="0ecf2-318"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.ArgumentException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-318">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0ecf2-319"><paramref name="waitHandles" /> 配列に、重複する要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-319">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-320"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-320">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="0ecf2-321">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-321">-or-</span></span> 
<span data-ttu-id="0ecf2-322">現在のスレッドの状態が <see cref="F:System.Threading.ApartmentState.STA" /> であり、<paramref name="waitHandles" /> に複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-322">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-323"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-323"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-324">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-324">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-325">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-325">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-326"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-326">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-327">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-327">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="0ecf2-328">この配列には、同一オブジェクトに対する複数の参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-328">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="0ecf2-329">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-329">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="0ecf2-330"><see cref="T:System.TimeSpan" /> 値を使用して時間間隔を指定し、指定した配列内のすべての要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-330">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-331"><see langword="true" /> 内のすべての要素がシグナルを受信した場合は<paramref name="waitHandles" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-331"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-332">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-332">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-333">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-333">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-334"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、待機が終了したときにを返します。これは、すべてのハンドルがシグナル状態になるか、タイムアウトが発生することを意味します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-334">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="0ecf2-335">64を超えるハンドルが渡されると、<xref:System.NotSupportedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-335">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="0ecf2-336">配列に重複が含まれている場合、呼び出しは失敗します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-336">If the array contains duplicates, the call will fail.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-337"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、<xref:System.Threading.ApartmentState.STA> 状態のスレッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-337">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="0ecf2-338">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-338">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0ecf2-339">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> のオーバーロードを呼び出し、`exitContext`に `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-339">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-340"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-340">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-341">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-341">-or-</span></span> 
<span data-ttu-id="0ecf2-342"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-342">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-343">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-343">-or-</span></span> 
 <span data-ttu-id="0ecf2-344"><paramref name="waitHandles" /> は、要素を持たない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-344"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="0ecf2-345"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.ArgumentException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-345">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0ecf2-346"><paramref name="waitHandles" /> 配列に、重複する要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-346">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-347"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-347">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="0ecf2-348">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-348">-or-</span></span> 
<span data-ttu-id="0ecf2-349">現在のスレッドの状態が <see cref="F:System.Threading.ApartmentState.STA" /> であり、<paramref name="waitHandles" /> に複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-349">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-350"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-350"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="0ecf2-351">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-351">-or-</span></span> 
 <span data-ttu-id="0ecf2-352"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-352"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-353">スレッドがミューテックスを解放せずに終了したため、待機が終了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-353">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-354">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-354">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-355"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-355">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-356">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-356">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="0ecf2-357">この配列には、同一オブジェクトに対する複数の参照 (重複) を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-357">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-358">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-358">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-359">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-359"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-360">指定した配列内のすべての要素がシグナルを受信するまで待機します。<see cref="T:System.Int32" /> 値を使用して時間間隔を指定し、待機の前でも同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-360">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-361"><see langword="true" /> 内のすべての要素がシグナルを受信した場合は<paramref name="waitHandles" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-361"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-362">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-362">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-363">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-363">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-364"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-364"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-365">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドはミューテックスが破棄されたときに `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-365">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-366">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-366">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-367">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-367">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-368">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-368">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-369"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、待機が終了したときにを返します。これは、すべてのハンドルがシグナル状態になったとき、またはタイムアウトが発生したときのいずれかを意味します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-369">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="0ecf2-370">64を超えるハンドルが渡されると、<xref:System.NotSupportedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-370">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="0ecf2-371">配列に重複がある場合、呼び出しは <xref:System.DuplicateWaitObjectException>で失敗します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-371">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-372"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、<xref:System.Threading.ApartmentState.STA> 状態のスレッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-372">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-373">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-373">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-374">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-374">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-375">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-375">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-376"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-376">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-377">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.WaitAll%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-377">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="0ecf2-378">スレッドは、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-378">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-379">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 属性がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-379">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="0ecf2-380">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-380">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-381">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.WaitAll%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-381">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-382"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-382">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-383">次のコード例では、スレッドプールを使用して、ファイルのグループに対して非同期的に作成および書き込みを行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-383">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="0ecf2-384">各書き込み操作は、作業項目としてキューに登録され、完了時に通知されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-384">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="0ecf2-385">メインスレッドは、すべての項目がシグナル状態になるのを待機してから終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-385">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-386"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-386">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-387">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-387">-or-</span></span> 
<span data-ttu-id="0ecf2-388"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-388">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-389">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-389">-or-</span></span> 
 <span data-ttu-id="0ecf2-390"><paramref name="waitHandles" /> は要素を持たない配列で、.NET Framework のバージョンが 2.0 以降です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-390"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="0ecf2-391"><paramref name="waitHandles" /> 配列に、重複する要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-391">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-392"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-392">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="0ecf2-393">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-393">-or-</span></span> 
<span data-ttu-id="0ecf2-394">現在のスレッドの状態が <see cref="F:System.Threading.ApartmentState.STA" /> であり、<paramref name="waitHandles" /> に複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-394">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="0ecf2-395"><paramref name="waitHandles" /> は要素を持たない配列で、.NET Framework のバージョンが 1.0 または 1.1 です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-395"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-396"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-396"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-397">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-397">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-398">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-398">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-399"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-399">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-400">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-400">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="0ecf2-401">この配列には、同一オブジェクトに対する複数の参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-401">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="0ecf2-402">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-402">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-403">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-403"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-404">指定した配列内のすべての要素がシグナルを受信するまで待機します。<see cref="T:System.TimeSpan" /> 値を使用して時間間隔を指定し、待機の前でも同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-404">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-405"><see langword="true" /> 内のすべての要素がシグナルを受信した場合は <paramref name="waitHandles" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-405"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-406">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-406">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-407">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-407">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-408"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-408"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-409">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドはミューテックスが破棄されたときに `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-409">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-410">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-410">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-411">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-411">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-412">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-412">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-413"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、待機が終了したときにを返します。これは、すべてのハンドルがシグナル状態になるか、タイムアウトが発生することを意味します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-413">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="0ecf2-414">64を超えるハンドルが渡されると、<xref:System.NotSupportedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-414">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="0ecf2-415">配列に重複が含まれている場合、呼び出しは失敗します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-415">If the array contains duplicates, the call will fail.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-416"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドは、<xref:System.Threading.ApartmentState.STA> 状態のスレッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-416">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="0ecf2-417">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-417">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-418">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-418">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-419">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.WaitAll%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-419">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-420">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-420">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-421"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-421">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-422">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.WaitAll%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-422">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="0ecf2-423"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-423">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-424">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-424">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-425">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-425">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-426">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.WaitAll%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-426">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-427"><xref:System.Threading.WaitHandle.WaitAll%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-427">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-428">次のコード例では、スレッドプールを使用して、ファイルのグループに対して非同期的に作成および書き込みを行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-428">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="0ecf2-429">各書き込み操作は、作業項目としてキューに登録され、完了時に通知されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-429">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="0ecf2-430">メインスレッドは、すべての項目がシグナル状態になるのを待機してから終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-430">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-431"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-431">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-432">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-432">-or-</span></span> 
<span data-ttu-id="0ecf2-433"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-433">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-434">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-434">-or-</span></span> 
 <span data-ttu-id="0ecf2-435"><paramref name="waitHandles" /> は要素を持たない配列で、.NET Framework のバージョンが 2.0 以降です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-435"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="0ecf2-436"><paramref name="waitHandles" /> 配列に、重複する要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-436">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-437"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-437">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="0ecf2-438">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-438">-or-</span></span> 
<span data-ttu-id="0ecf2-439"><see cref="T:System.STAThreadAttribute" /> 属性は、現在のスレッドのスレッド プロシージャに適用されており、<paramref name="waitHandles" /> には複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-439">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="0ecf2-440"><paramref name="waitHandles" /> は要素を持たない配列で、.NET Framework のバージョンが 1.0 または 1.1 です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-440"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-441"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-441"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="0ecf2-442">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-442">-or-</span></span> 
 <span data-ttu-id="0ecf2-443"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-443"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-444">スレッドがミューテックスを解放せずに終了したため、待機が終了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-444">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-445">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-445">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-446"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-446">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0ecf2-447">指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-447">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-448">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-448">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <summary><span data-ttu-id="0ecf2-449">指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-449">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-450">待機を実行するオブジェクトの配列インデックス。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-450">The array index of the object that satisfied the wait.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-451"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-451"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-452">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、ミューテックスが破棄されたために待機が完了した場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-452">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-453">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-453">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-454">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-454">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-455">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-455">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-456"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、中断されたミューテックスが原因で待機が完了した場合にのみ、<xref:System.Threading.AbandonedMutexException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-456">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="0ecf2-457">解放された mutex が、破棄された mutex よりも小さいインデックス番号で `waitHandles` 含まれる場合、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは正常に完了し、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-457">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-458">バージョン2.0 より前の .NET Framework のバージョンでは、<xref:System.Threading.Mutex>を明示的に解放せずにスレッドが終了または中止し、`Mutex` が別のスレッドの `WaitAny` 配列のインデックス 0 (ゼロ) にある場合、`WaitAny` によって返されるインデックスは、0ではなく128になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-458">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="0ecf2-459">ハンドルがシグナル状態になると、このメソッドはを返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-459">This method returns when any handle is signaled.</span></span> <span data-ttu-id="0ecf2-460">呼び出し中に複数のオブジェクトがシグナル状態になると、戻り値は、シグナルが発生したすべてのオブジェクトの最小のインデックス値を持つシグナル化されたオブジェクトの配列インデックスになります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-460">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="0ecf2-461">待機ハンドルの最大数は64、現在のスレッドが <xref:System.Threading.ApartmentState.STA> 状態の場合は63です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-461">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>

 <span data-ttu-id="0ecf2-462">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、`exitContext`の `millisecondsTimeout` と `true` の-1 (または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-462">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-463">次のコード例は、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-463">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-464"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-464">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-465">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-465">-or-</span></span> 
<span data-ttu-id="0ecf2-466"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-466">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-467"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-467">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="0ecf2-468">.NET Framework のバージョンが 1.0 または 1.1 であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-468"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-469">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-469">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-470">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-470">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0ecf2-471">.NET Framework のバージョンが 2.0 以降であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-471"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-472"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-472">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-473">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-473">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-474">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-474">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="0ecf2-475">32 ビット符号付き整数を使用して時間間隔を指定し、指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-475">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-476">待機を実行したオブジェクトの配列インデックス。または、待機を実行したオブジェクトがなく <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> に等しい時間間隔が経過した場合は <paramref name="millisecondsTimeout" /> となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-476">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-477">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-477">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-478">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-478">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-479"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、中断されたミューテックスが原因で待機が完了した場合にのみ、<xref:System.Threading.AbandonedMutexException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-479">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="0ecf2-480">解放された mutex が、破棄された mutex よりも小さいインデックス番号で `waitHandles` 含まれる場合、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは正常に完了し、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-480">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="0ecf2-481">このメソッドは、待機が終了したとき、いずれかのハンドルがシグナル状態になったとき、またはタイムアウトが発生したときに、を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-481">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="0ecf2-482">呼び出し中に複数のオブジェクトがシグナル状態になると、戻り値は、シグナルが発生したすべてのオブジェクトの最小のインデックス値を持つシグナル化されたオブジェクトの配列インデックスになります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-482">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="0ecf2-483">待機ハンドルの最大数は64、現在のスレッドが <xref:System.Threading.ApartmentState.STA> 状態の場合は63です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-483">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="0ecf2-484">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> のオーバーロードを呼び出し、`exitContext`に `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-484">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-485"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-485">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-486">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-486">-or-</span></span> 
<span data-ttu-id="0ecf2-487"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-487">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-488"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-488">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-489"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-489"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-490">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-490">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-491">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-491">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0ecf2-492"><paramref name="waitHandles" /> は、要素を持たない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-492"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-493"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-493">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-494">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-494">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="0ecf2-495">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-495">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="0ecf2-496"><see cref="T:System.TimeSpan" /> を使用して時間間隔を指定し、指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-496">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-497">待機を実行したオブジェクトの配列インデックス。または、待機を実行したオブジェクトがなく <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> に等しい時間間隔が経過した場合は <paramref name="timeout" /> となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-497">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-498">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-498">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-499">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-499">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-500"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、中断されたミューテックスが原因で待機が完了した場合にのみ、<xref:System.Threading.AbandonedMutexException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-500">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="0ecf2-501">解放された mutex が、破棄された mutex よりも小さいインデックス番号で `waitHandles` 含まれる場合、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは正常に完了し、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-501">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="0ecf2-502">このメソッドは、待機が終了したとき、いずれかのハンドルがシグナル状態になったとき、またはタイムアウトが発生したときに、を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-502">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="0ecf2-503">呼び出し中に複数のオブジェクトがシグナル状態になると、戻り値は、シグナルが発生したすべてのオブジェクトの最小のインデックス値を持つシグナル化されたオブジェクトの配列インデックスになります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-503">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="0ecf2-504">待機ハンドルの最大数は64、現在のスレッドが <xref:System.Threading.ApartmentState.STA> 状態の場合は63です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-504">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>

 <span data-ttu-id="0ecf2-505">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-505">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0ecf2-506">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> のオーバーロードを呼び出し、`exitContext`に `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-506">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-507"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-507">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-508">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-508">-or-</span></span> 
<span data-ttu-id="0ecf2-509"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-509">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-510"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-510">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-511"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-511"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="0ecf2-512">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-512">-or-</span></span> 
 <span data-ttu-id="0ecf2-513"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-513"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-514">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-514">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-515">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-515">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0ecf2-516"><paramref name="waitHandles" /> は、要素を持たない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-516"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-517"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-517">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-518">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-518">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-519">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-519">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-520">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-520"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-521">32 ビットの符号付き整数を使用して時間間隔を指定し、待機する前に同期ドメインを終了するかどうかを指定して、指定した配列内のいずれかの要素がシグナルを受信するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-521">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-522">待機を実行したオブジェクトの配列インデックス。または、待機を実行したオブジェクトがなく <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> に等しい時間間隔が経過した場合は <paramref name="millisecondsTimeout" /> となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-522">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-523">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-523">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-524">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-524">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-525"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-525"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-526">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、ミューテックスが破棄されたために待機が完了した場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-526">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-527">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-527">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-528">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-528">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-529">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-529">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-530"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、中断されたミューテックスが原因で待機が完了した場合にのみ、<xref:System.Threading.AbandonedMutexException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-530">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="0ecf2-531">解放された mutex が、破棄された mutex よりも小さいインデックス番号で `waitHandles` 含まれる場合、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは正常に完了し、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-531">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-532">バージョン2.0 より前の .NET Framework のバージョンでは、<xref:System.Threading.Mutex>を明示的に解放せずにスレッドが終了または中止し、`Mutex` が別のスレッドの `WaitAny` 配列のインデックス 0 (ゼロ) にある場合、`WaitAny` によって返されるインデックスは、0ではなく128になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-532">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="0ecf2-533">このメソッドは、待機が終了したとき、いずれかのハンドルがシグナル状態になったとき、またはタイムアウトが発生したときに、を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-533">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="0ecf2-534">呼び出し中に複数のオブジェクトがシグナル状態になると、戻り値は、シグナルが発生したすべてのオブジェクトの最小のインデックス値を持つシグナル化されたオブジェクトの配列インデックスになります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-534">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="0ecf2-535">待機ハンドルの最大数は64、現在のスレッドが <xref:System.Threading.ApartmentState.STA> 状態の場合は63です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-535">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-536">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-536">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-537">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-537">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-538">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-538">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-539"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-539">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-540">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.WaitAny%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-540">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="0ecf2-541">スレッドは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-541">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-542">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-542">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-543">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-543">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-544">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.WaitAny%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-544">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-545"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-545">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-546">次のコード例は、スレッドプールを使用して複数のディスク上のファイルを同時に検索する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-546">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="0ecf2-547">領域に関する考慮事項については、各ディスクのルートディレクトリのみが検索されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-547">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-548"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-548">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-549">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-549">-or-</span></span> 
<span data-ttu-id="0ecf2-550"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-550">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-551"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-551">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="0ecf2-552">.NET Framework のバージョンが 1.0 または 1.1 であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-552"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-553"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-553"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-554">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-554">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-555">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-555">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0ecf2-556">.NET Framework のバージョンが 2.0 以降であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-556"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-557"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-557">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="0ecf2-558">現在のインスタンスが待機する対象のオブジェクトを格納している <see langword="WaitHandle" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-558">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="0ecf2-559">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-559">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-560">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-560"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-561">指定した配列内のいずれかの要素がシグナルを受信するまで待機します。<see cref="T:System.TimeSpan" /> を使用して時間間隔を指定し、待機の前でも同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-561">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-562">待機を実行したオブジェクトの配列インデックス。または、待機を実行したオブジェクトがなく <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> に等しい時間間隔が経過した場合は <paramref name="timeout" /> となります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-562">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-563">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-563">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-564">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-564">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-565"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-565"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-566">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、ミューテックスが破棄されたために待機が完了した場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-566">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-567">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-567">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-568">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-568">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-569">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-569">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-570"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは、中断されたミューテックスが原因で待機が完了した場合にのみ、<xref:System.Threading.AbandonedMutexException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-570">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="0ecf2-571">解放された mutex が、破棄された mutex よりも小さいインデックス番号で `waitHandles` 含まれる場合、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドは正常に完了し、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-571">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ecf2-572">バージョン2.0 より前の .NET Framework のバージョンでは、<xref:System.Threading.Mutex>を明示的に解放せずにスレッドが終了または中止し、`Mutex` が別のスレッドの `WaitAny` 配列のインデックス 0 (ゼロ) にある場合、`WaitAny` によって返されるインデックスは、0ではなく128になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-572">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="0ecf2-573">このメソッドは、待機が終了したとき、いずれかのハンドルがシグナル状態になったとき、またはタイムアウトが発生したときに、を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-573">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="0ecf2-574">呼び出し中に複数のオブジェクトがシグナル状態になると、戻り値は、シグナルが発生したすべてのオブジェクトの最小のインデックス値を持つシグナル化されたオブジェクトの配列インデックスになります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-574">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="0ecf2-575">待機ハンドルの最大数は64、現在のスレッドが <xref:System.Threading.ApartmentState.STA> 状態の場合は63です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-575">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>

 <span data-ttu-id="0ecf2-576">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-576">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-577">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-577">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-578">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-578">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-579">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-579">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-580"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-580">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-581">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.WaitAny%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-581">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="0ecf2-582">スレッドは、<xref:System.Threading.WaitHandle.WaitAny%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-582">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-583">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-583">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-584">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-584">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-585">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.WaitAny%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-585">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-586"><xref:System.Threading.WaitHandle.WaitAny%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-586">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-587">次のコード例は、スレッドプールを使用して複数のディスク上のファイルを同時に検索する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-587">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="0ecf2-588">領域に関する考慮事項については、各ディスクのルートディレクトリのみが検索されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-588">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0ecf2-589"><paramref name="waitHandles" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-589">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0ecf2-590">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-590">-or-</span></span> 
<span data-ttu-id="0ecf2-591"><paramref name="waitHandles" /> 配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-591">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0ecf2-592"><paramref name="waitHandles" /> のオブジェクトの数が、システムで許可されている範囲を超えています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-592">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="0ecf2-593">.NET Framework のバージョンが 1.0 または 1.1 であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-593"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-594"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-594"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="0ecf2-595">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-595">-or-</span></span> 
 <span data-ttu-id="0ecf2-596"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-596"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-597">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-597">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-598">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-598">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0ecf2-599">.NET Framework のバージョンが 2.0 以降であるにもかかわらず、<paramref name="waitHandles" /> が要素のない配列です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-599"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-600"><paramref name="waitHandles" /> 配列には、別のアプリケーション ドメインの<see cref="T:System.Threading.WaitHandle" /> の透過プロキシが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-600">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0ecf2-601">現在の <see cref="T:System.Threading.WaitHandle" /> がシグナルを受け取るまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-601">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ecf2-602">現在の <see cref="T:System.Threading.WaitHandle" /> がシグナルを受け取るまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-602">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-603">現在のインスタンスがシグナルを受け取った場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-603"><see langword="true" /> if the current instance receives a signal.</span></span> <span data-ttu-id="0ecf2-604">現在のインスタンスがシグナルを受け取らない場合は、<see cref="M:System.Threading.WaitHandle.WaitOne" /> はシグナルを受け取るまで待機を続けます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-604">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne" /> never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-605"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-605"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-606">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドはミューテックスが破棄されたときに `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-606">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-607">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-607">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-608">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-608">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-609">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-609">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-610">このメソッドの呼び出し元は、現在のインスタンスがシグナルを受信するまで無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-610">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="0ecf2-611"><xref:System.Threading.WaitHandle> が別のスレッドからのシグナルを受信するまでブロックするには、このメソッドを使用します (非同期操作の完了時にが生成されるなど)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-611">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="0ecf2-612">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-612">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="0ecf2-613">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、最初のパラメーターに-1 または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> を指定し、2番目のパラメーターに `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-613">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="0ecf2-614">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-614">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-615">次のコード例は、待機ハンドルを使用して、バックグラウンドスレッドの実行が完了するのを待機している間にプロセスを終了しないようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-615">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0ecf2-616">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-616">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-617">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-617">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-618">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-618">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-619">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-619">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-620">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-620">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="0ecf2-621">32 ビット符号付き整数を使用して時間間隔をミリ秒単位で指定し、現在の <see cref="T:System.Threading.WaitHandle" /> がシグナルを受信するまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-621">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-622">現在のインスタンスがシグナルを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-622"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-623">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-623">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-624">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-624">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-625">このメソッドの呼び出し元は、現在のインスタンスがシグナルを受信するか、タイムアウトが発生するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-625">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="0ecf2-626"><xref:System.Threading.WaitHandle> が別のスレッドからのシグナルを受信するまでブロックするには、このメソッドを使用します (非同期操作の完了時にが生成されるなど)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-626">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="0ecf2-627">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-627">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="0ecf2-628">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-628">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="0ecf2-629">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> のオーバーロードを呼び出し、`exitContext`に `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-629">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-630">次のコード例は、待機ハンドルを使用して、バックグラウンドスレッドの実行が完了するのを待機している間にプロセスを終了しないようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-630">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0ecf2-631">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-631">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-632"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-632"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-633">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-633">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-634">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-634">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-635">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-635">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="0ecf2-636">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-636">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="0ecf2-637"><see cref="T:System.TimeSpan" /> を使用して時間間隔を指定し、現在のインスタンスがシグナルを受信するまで現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-637">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-638">現在のインスタンスがシグナルを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-638"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-639">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-639">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-640">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-640">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-641">このメソッドの呼び出し元は、現在のインスタンスがシグナルを受信するか、タイムアウトが発生するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-641">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="0ecf2-642"><xref:System.Threading.WaitHandle> が別のスレッドからのシグナルを受信するまでブロックするには、このメソッドを使用します (非同期操作の完了時にが生成されるなど)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-642">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="0ecf2-643">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-643">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="0ecf2-644">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-644">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="0ecf2-645">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-645">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0ecf2-646">このメソッドのオーバーロードを呼び出すことは、<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> のオーバーロードを呼び出し、`exitContext`に `false` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-646">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0ecf2-647">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-647">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-648"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-648"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="0ecf2-649">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-649">-or-</span></span> 
 <span data-ttu-id="0ecf2-650"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-650"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-651">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-651">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-652">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-652">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-653">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-653">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="0ecf2-654">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-654">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-655">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-655"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-656">現在の <see cref="T:System.Threading.WaitHandle" /> がシグナルを受信するまで現在のスレッドをブロックします。時間間隔を指定するために 32 ビット符号付き整数を使用し、待機の前でも同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-656">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-657">現在のインスタンスがシグナルを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-657"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-658">`millisecondsTimeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-658">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-659">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-659">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-660"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-660"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-661">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドはミューテックスが破棄されたときに `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-661">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-662">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-662">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-663">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-663">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-664">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-664">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-665">このメソッドの呼び出し元は、現在のインスタンスがシグナルを受信するか、タイムアウトが発生するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-665">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="0ecf2-666"><xref:System.Threading.WaitHandle> が別のスレッドからのシグナルを受信するまでブロックするには、このメソッドを使用します (非同期操作の完了時にが生成されるなど)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-666">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="0ecf2-667">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-667">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="0ecf2-668">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-668">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-669">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-669">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-670">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-670">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-671">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-671">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-672"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-672">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-673">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-673">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="0ecf2-674">スレッドは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-674">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-675">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-675">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-676">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-676">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-677">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-677">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-678"><xref:System.Threading.WaitHandle.WaitOne%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-678">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-679">次の例は、<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> メソッドのオーバーロードが同期ドメイン内で呼び出された場合の動作を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-679">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="0ecf2-680">まず、スレッドは `exitContext` が `false` に設定された状態で待機し、待機タイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-680">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="0ecf2-681">2番目のスレッドは、最初のスレッドが終了した後に実行され、`exitContext` を `true`に設定して待機します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-681">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="0ecf2-682">この2番目のスレッドの待機ハンドルを通知する呼び出しはブロックされず、スレッドは待機タイムアウト前に完了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-682">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0ecf2-683">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-683">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-684"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-684"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-685">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-685">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-686">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-686">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-687">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-687">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="0ecf2-688">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-688">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="0ecf2-689">待機する前にコンテキストの同期ドメインを終了し (同期されたコンテキスト内にいる場合)、後で再取得する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-689"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0ecf2-690">現在のインスタンスがシグナルを受信するまで現在のスレッドをブロックします。<see cref="T:System.TimeSpan" /> を使用して時間間隔を指定し、待機の前でも同期ドメインを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-690">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="0ecf2-691">現在のインスタンスがシグナルを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-691"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-692">`timeout` がゼロの場合、メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-692">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="0ecf2-693">待機ハンドルの状態をテストし、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-693">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="0ecf2-694"><xref:System.Threading.AbandonedMutexException> は .NET Framework バージョン2.0 で新しく追加されたものです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-694"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="0ecf2-695">以前のバージョンでは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドはミューテックスが破棄されたときに `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-695">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="0ecf2-696">多くの場合、放棄ミューテックスは深刻なコーディングエラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-696">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="0ecf2-697">システム全体のミューテックスの場合は、アプリケーションが突然 (たとえば、Windows タスクマネージャーを使用して) 終了したことを示している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-697">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="0ecf2-698">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-698">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="0ecf2-699">このメソッドの呼び出し元は、現在のインスタンスがシグナルを受信するか、タイムアウトが発生するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-699">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="0ecf2-700"><xref:System.Threading.WaitHandle> が別のスレッドからのシグナルを受信するまでブロックするには、このメソッドを使用します (非同期操作の完了時にが生成されるなど)。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-700">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="0ecf2-701">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-701">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="0ecf2-702">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-702">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="0ecf2-703">`timeout` の最大値は <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-703">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="0ecf2-704">コンテキストの終了に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="0ecf2-704">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="0ecf2-705">`exitContext` パラメーターは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドが既定以外のマネージコンテキストの内部から呼び出されない限り、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-705">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="0ecf2-706">これは、スレッドが <xref:System.ContextBoundObject>から派生したクラスのインスタンスの呼び出し内にある場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-706">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="0ecf2-707"><xref:System.String>など、<xref:System.ContextBoundObject>から派生していないクラスでメソッドを現在実行している場合でも、現在のアプリケーションドメインのスタックに <xref:System.ContextBoundObject> がある場合は、既定以外のコンテキストにすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-707">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="0ecf2-708">コードが既定以外のコンテキストで実行されている場合、`exitContext` に `true` を指定すると、スレッドは <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを実行する前に、既定以外のマネージコンテキスト (つまり、既定のコンテキストに遷移する) を終了します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-708">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="0ecf2-709">スレッドは、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドの呼び出しが完了した後、元の既定以外のコンテキストに戻ります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-709">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="0ecf2-710">これは、コンテキストバインドクラスに <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-710">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="0ecf2-711">その場合、クラスのメンバーへのすべての呼び出しが自動的に同期され、同期ドメインがクラスのコード本文全体になります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-711">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="0ecf2-712">メンバーの呼び出し履歴内のコードが <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出し、`exitContext`の `true` を指定した場合、スレッドは同期ドメインを終了します。これにより、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドが続行されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-712">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="0ecf2-713"><xref:System.Threading.WaitHandle.WaitOne%2A> メソッドから制御が戻ったとき、呼び出しを行ったスレッドは、同期ドメインの再入力を待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-713">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-714">次のコード例は、待機ハンドルを使用して、バックグラウンドスレッドの実行が完了するのを待機している間にプロセスを終了しないようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-714">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0ecf2-715">現在のインスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-715">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0ecf2-716"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-716"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="0ecf2-717">または</span><span class="sxs-lookup"><span data-stu-id="0ecf2-717">-or-</span></span> 
 <span data-ttu-id="0ecf2-718"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-718"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="0ecf2-719">ミュー テックスを解放しないままスレッドが終了したため、待機が完了しました。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-719">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="0ecf2-720">Windows 98 または Windows Millennium Edition では、この例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-720">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0ecf2-721">別のアプリケーション ドメインでは、現在のインスタンスは <see cref="T:System.Threading.WaitHandle" /> の透過プロキシです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-721">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary><span data-ttu-id="0ecf2-722">待機ハンドルがシグナル状態になる前に <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作がタイムアウトになったことを示します。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-722">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span></span> <span data-ttu-id="0ecf2-723">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-723">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ecf2-724">このフィールドは、`WaitAny`の可能性のある戻り値の1つです。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-724">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ecf2-725">次のコード例は、スレッドプールを使用して複数のディスク上のファイルを同時に検索する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-725">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="0ecf2-726">領域に関する考慮事項については、各ディスクのルートディレクトリのみが検索されます。</span><span class="sxs-lookup"><span data-stu-id="0ecf2-726">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
