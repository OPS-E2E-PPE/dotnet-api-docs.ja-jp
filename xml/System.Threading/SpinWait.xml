<Type Name="SpinWait" FullName="System.Threading.SpinWait">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c195bd777032f903cf1e3730f7441966c8be85a7" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83967306" /></Metadata><TypeSignature Language="C#" Value="public struct SpinWait" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinWait extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinWait" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinWait" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinWait" />
  <TypeSignature Language="F#" Value="type SpinWait = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="dfa2e-101">スピンベースの待機のサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-101">Provides support for spin-based waiting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfa2e-102"><xref:System.Threading.SpinWait> は、一般的なスピンロジックをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-102"><xref:System.Threading.SpinWait> encapsulates common spinning logic.</span></span> <span data-ttu-id="dfa2e-103">シングルプロセッサコンピューターでは、が常に使用されます。また、ハイパースレッディングテクノロジを採用する Intel プロセッサを搭載しているコンピューターでは、ハードウェアスレッドの枯渇を防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-103">On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation.</span></span> <span data-ttu-id="dfa2e-104">SpinWait は、スピンと真の生成を適切に組み合わせてカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-104">SpinWait encapsulates a good mixture of spinning and true yielding.</span></span>  
  
 <span data-ttu-id="dfa2e-105"><xref:System.Threading.SpinWait> は値型です。つまり、低レベルのコードでは、不要な割り当てオーバーヘッドを懸念することなく SpinWait を利用できます。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-105"><xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads.</span></span> <span data-ttu-id="dfa2e-106">通常のアプリケーションでは、SpinWait は一般的には便利ではありません。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-106">SpinWait is not generally useful for ordinary applications.</span></span> <span data-ttu-id="dfa2e-107">ほとんどの場合、<xref:System.Threading.Monitor>など、.NET Framework によって提供される同期クラスを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-107">In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>.</span></span> <span data-ttu-id="dfa2e-108">ただし、スピン待機が必要な場合は、ほとんどの場合、<xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> 方法よりも <xref:System.Threading.SpinWait> の型を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-108">For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfa2e-109">次の例では、<xref:System.Threading.SpinWait>を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-109">The following example shows how to use a <xref:System.Threading.SpinWait>:</span></span>  
  
 [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]
 [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="dfa2e-110"><see cref="T:System.Threading.SpinWait" /> は同時実行アプリケーションで使用するように設計されていますが、複数のスレッドから同時に使用するようには設計されていません。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-110">While <see cref="T:System.Threading.SpinWait" /> is designed to be used in concurrent applications, it is not designed to be used from multiple threads concurrently.</span></span> <span data-ttu-id="dfa2e-111"><see cref="T:System.Threading.SpinWait" /> メンバーはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-111"><see cref="T:System.Threading.SpinWait" /> members are not thread-safe.</span></span> <span data-ttu-id="dfa2e-112">複数のスレッドをスピンする必要がある場合は、それぞれが独自の <see cref="T:System.Threading.SpinWait" />のインスタンスを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-112">If multiple threads must spin, each should use its own instance of <see cref="T:System.Threading.SpinWait" />.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-113">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-113">SpinWait</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-114">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-114">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Threading.SpinWait.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfa2e-115">このインスタンスで <see cref="M:System.Threading.SpinWait.SpinOnce" /> が呼び出された回数を取得します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-115">Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span></span></summary>
        <value><span data-ttu-id="dfa2e-116">このインスタンスで <see cref="M:System.Threading.SpinWait.SpinOnce" /> が呼び出された回数を表す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-116">Returns an integer that represents the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-117">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-117">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-118">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-118">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NextSpinWillYield">
      <MemberSignature Language="C#" Value="public bool NextSpinWillYield { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NextSpinWillYield" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.NextSpinWillYield" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSpinWillYield As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NextSpinWillYield { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSpinWillYield : bool" Usage="System.Threading.SpinWait.NextSpinWillYield" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfa2e-119">次に <see cref="M:System.Threading.SpinWait.SpinOnce" /> を呼び出したときにプロセッサが生成され、強制的にコンテキストが切り替えられるかどうかを取得します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-119">Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span></span></summary>
        <value><span data-ttu-id="dfa2e-120">次に <see cref="M:System.Threading.SpinWait.SpinOnce" /> を呼び出したときにプロセッサが生成され、強制的にコンテキストが切り替えられるかどうか。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-120">Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfa2e-121">シングル CPU コンピューターでは、<xref:System.Threading.SpinWait.SpinOnce%2A> は常にプロセッサを生成します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-121">On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor.</span></span> <span data-ttu-id="dfa2e-122">複数の Cpu が搭載されているコンピューターでは、呼び出しの数が指定されていないと <xref:System.Threading.SpinWait.SpinOnce%2A> が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-122">On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-123">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-123">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-124">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-124">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="spinWait.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfa2e-125">スピン カウンターをリセットします。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-125">Resets the spin counter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfa2e-126">これにより、<xref:System.Threading.SpinWait.SpinOnce%2A> と <xref:System.Threading.SpinWait.NextSpinWillYield%2A> は、このインスタンスで <xref:System.Threading.SpinWait.SpinOnce%2A> の呼び出しが発行されていなくても動作します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-126">This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance.</span></span> <span data-ttu-id="dfa2e-127"><xref:System.Threading.SpinWait> インスタンスが何度も再利用された場合は、すぐに発生しないようにリセットすると便利な場合があります。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-127">If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfa2e-128">単純なロックフリースタック実装で SpinWait を使用する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-128">The following is an example of using SpinWait in a simple lock-free stack implementation.</span></span> <span data-ttu-id="dfa2e-129">(これはほんの一例です。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-129">(This is just an example.</span></span> <span data-ttu-id="dfa2e-130">効率的でスレッドセーフなスタックが必要な場合は、System.collections.concurrent.concurrentstack の使用を検討してください)。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-130">If an efficient, thread-safe stack is needed, consider using ConcurrentStack.)</span></span>  
  
 [!code-csharp[System.Threading.SpinWait.Reset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/reset.cs#01)]
 [!code-vb[System.Threading.SpinWait.Reset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/reset.vb#01)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-131">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-131">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-132">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-132">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce();" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : unit -&gt; unit" Usage="spinWait.SpinOnce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfa2e-133">単一のスピンを実行します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-133">Performs a single spin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfa2e-134">このメソッドは、通常、ループ内で呼び出され、このインスタンス上で <xref:System.Threading.SpinWait.SpinOnce%2A> が呼び出された回数に基づいて動作を変更することがあります。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-134">This method is typically called in a loop and may change in behavior based on the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> has been called so far on this instance.</span></span> <span data-ttu-id="dfa2e-135">各スピンを実行すると、<xref:System.Threading.Thread.SpinWait%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-135">Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called.</span></span> <span data-ttu-id="dfa2e-136">カウントは <xref:System.Threading.SpinWait.SpinOnce%2A> が呼び出された回数に保持されます。しきい値に達すると、<xref:System.Threading.Thread.Yield%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-136">A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-137">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-137">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-138">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-138">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce (int sleep1Threshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce(int32 sleep1Threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce (sleep1Threshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce(int sleep1Threshold);" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : int -&gt; unit" Usage="spinWait.SpinOnce sleep1Threshold" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sleep1Threshold" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sleep1Threshold"><span data-ttu-id="dfa2e-139"><see langword="Thread.Sleep(1)" /> が使用された後のスピンの最小回数。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-139">A minimum spin count after which <see langword="Thread.Sleep(1)" /> may be used.</span></span> <span data-ttu-id="dfa2e-140">-1 の値は <see langword="Thread.Sleep(1)" /> の使用を無効にします。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-140">A value of -1 disables the use of <see langword="Thread.Sleep(1)" />.</span></span></param>
        <summary><span data-ttu-id="dfa2e-141">単一のスピンを実行して、スピンの最小回数の後に <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-141">Performs a single spin and calls <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> after a minimum spin count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="dfa2e-142">このメソッドは、通常、ループ内で呼び出され、このインスタンス上で <xref:System.Threading.SpinWait.SpinOnce> が呼び出された回数に基づいて動作を変更することがあります。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-142">This method is typically called in a loop and may change in behavior based on the number of times <xref:System.Threading.SpinWait.SpinOnce> has been called so far on this instance.</span></span>

        ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfa2e-143"><paramref name="sleep1Threshold" /> が -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-143"><paramref name="sleep1Threshold" /> is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpinUntil">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dfa2e-144">指定した条件が満たされるまで回転します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-144">Spins until the specified condition is satisfied.</span></span></summary>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-145">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-145">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-146">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-146">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static void SpinUntil (Func&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinUntil(class System.Func`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinUntil (condition As Func(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinUntil(Func&lt;bool&gt; ^ condition);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; -&gt; unit" Usage="System.Threading.SpinWait.SpinUntil condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="dfa2e-147">true を返すまで繰り返し実行されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-147">A delegate to be executed over and over until it returns true.</span></span></param>
        <summary><span data-ttu-id="dfa2e-148">指定した条件が満たされるまで回転します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-148">Spins until the specified condition is satisfied.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dfa2e-149"><paramref name="condition" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-149">The <paramref name="condition" /> argument is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-150">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-150">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-151">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-151">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * int -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="dfa2e-152">true を返すまで繰り返し実行されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-152">A delegate to be executed over and over until it returns true.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="dfa2e-153">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-153">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="dfa2e-154">指定した条件が満たされるか、指定したタイムアウトが経過するまで回転します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-154">Spins until the specified condition is satisfied or until the specified timeout is expired.</span></span></summary>
        <returns><span data-ttu-id="dfa2e-155">タイムアウト内に条件が満たされた場合は <see langword="true" />、それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-155"><see langword="true" /> if the condition is satisfied within the timeout; otherwise, false</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dfa2e-156"><paramref name="condition" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-156">The <paramref name="condition" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfa2e-157"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-157"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-158">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-158">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-159">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-159">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * TimeSpan -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="dfa2e-160">true を返すまで繰り返し実行されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-160">A delegate to be executed over and over until it returns true.</span></span></param>
        <param name="timeout"><span data-ttu-id="dfa2e-161">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す TimeSpan。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-161">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="dfa2e-162">指定した条件が満たされるか、指定したタイムアウトが経過するまで回転します。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-162">Spins until the specified condition is satisfied or until the specified timeout is expired.</span></span></summary>
        <returns><span data-ttu-id="dfa2e-163">タイムアウト内に条件が満たされた場合は <see langword="true" />、それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-163"><see langword="true" /> if the condition is satisfied within the timeout; otherwise, false</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dfa2e-164"><paramref name="condition" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-164">The <paramref name="condition" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfa2e-165"><paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="dfa2e-165"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/spinwait"><span data-ttu-id="dfa2e-166">SpinWait</span><span class="sxs-lookup"><span data-stu-id="dfa2e-166">SpinWait</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation"><span data-ttu-id="dfa2e-167">方法: SpinWait を使用して 2 フェーズ待機操作を実装する</span><span class="sxs-lookup"><span data-stu-id="dfa2e-167">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
