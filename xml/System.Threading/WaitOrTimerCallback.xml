<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="460d7a2efdca4ff1e7aea687a6afae634dd19c5a" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83945599" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.ThreadPool" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="8643d-101">コールバック メソッドが実行されるたびに使用する情報を格納したオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8643d-101">An object containing information to be used by the callback method each time it executes.</span></span></param>
    <param name="timedOut"><span data-ttu-id="8643d-102"><see cref="T:System.Threading.WaitHandle" /> がタイムアウトした場合は <see langword="true" />。シグナル通知された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8643d-102"><see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span></span></param>
    <summary><span data-ttu-id="8643d-103"><see cref="T:System.Threading.WaitHandle" /> がシグナル通知されたとき、またはタイムアウトしたときに呼び出されるメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="8643d-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8643d-104"><xref:System.Threading.WaitOrTimerCallback> は、登録された待機ハンドルがタイムアウトになったとき、またはシグナル状態になったときに実行するコールバックメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="8643d-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="8643d-105">コールバックメソッドを <xref:System.Threading.WaitOrTimerCallback> コンストラクターに渡すことによって、デリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="8643d-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="8643d-106">メソッドには、ここに示す署名が必要です。</span><span class="sxs-lookup"><span data-stu-id="8643d-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="8643d-107"><xref:System.Threading.WaitOrTimerCallback> デリゲートと <xref:System.Threading.WaitHandle> を <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>に渡すことによって、登録された待機ハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="8643d-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8643d-108">コールバックメソッドは、<xref:System.Threading.WaitHandle> がタイムアウトするたびに、またはシグナル状態になるたびに実行されます。</span><span class="sxs-lookup"><span data-stu-id="8643d-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="8643d-109">Visual Basic ユーザーは、<xref:System.Threading.WaitOrTimerCallback> コンストラクターを省略できます。また、コールバックメソッドを <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>に渡すときに `AddressOf` 演算子を使用するだけです。</span><span class="sxs-lookup"><span data-stu-id="8643d-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="8643d-110">Visual Basic は、正しいデリゲートコンストラクターを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8643d-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="8643d-111">コールバックメソッドに情報を渡す必要がある場合は、必要な情報を含むオブジェクトを作成し、登録された待機ハンドルを作成するときに <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> に渡します。</span><span class="sxs-lookup"><span data-stu-id="8643d-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="8643d-112">コールバックメソッドを実行するたびに、`state` パラメーターにこのオブジェクトが格納されます。</span><span class="sxs-lookup"><span data-stu-id="8643d-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="8643d-113">コールバックメソッドを使用してスレッドプールスレッドを同期する方法の詳細については、「[マネージスレッドプール](/dotnet/standard/threading/the-managed-thread-pool)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8643d-113">For more information about using callback methods to synchronize thread pool threads, see [The managed thread pool](/dotnet/standard/threading/the-managed-thread-pool).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8643d-114">次の例は、<xref:System.Threading.WaitOrTimerCallback> デリゲートを使用して、待機ハンドルがシグナル状態になったときに実行されるコールバックメソッドを表す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8643d-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="8643d-115">また、この例では、<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドを使用して、指定された待機ハンドルがシグナル状態になったときに指定されたコールバックメソッドを実行する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="8643d-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="8643d-116">この例では、コールバックメソッドが `WaitProc`、待機ハンドルが <xref:System.Threading.AutoResetEvent>です。</span><span class="sxs-lookup"><span data-stu-id="8643d-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="8643d-117">この例では、実行時にコールバックに渡される情報を保持する `TaskInfo` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="8643d-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="8643d-118">この例では、`TaskInfo` オブジェクトを作成し、いくつかの文字列データを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="8643d-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="8643d-119"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドによって返される <xref:System.Threading.RegisteredWaitHandle> は、コールバックメソッドが <xref:System.Threading.RegisteredWaitHandle>にアクセスできるように、`TaskInfo` オブジェクトの `Handle` フィールドに割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8643d-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="8643d-120">`TaskInfo` オブジェクトに加え、<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドの呼び出しでは、タスクが待機する <xref:System.Threading.AutoResetEvent>、`WaitProc` コールバックメソッドを表す <xref:System.Threading.WaitOrTimerCallback> デリゲート、1秒のタイムアウト間隔、および複数のコールバックを指定します。</span><span class="sxs-lookup"><span data-stu-id="8643d-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="8643d-121">メインスレッドが <xref:System.Threading.EventWaitHandle.Set%2A> メソッドを呼び出すことによって <xref:System.Threading.AutoResetEvent> に通知すると、<xref:System.Threading.WaitOrTimerCallback> デリゲートが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8643d-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="8643d-122">`WaitProc` メソッドは、タイムアウトが発生したかどうかを判断するために <xref:System.Threading.RegisteredWaitHandle> をテストします。</span><span class="sxs-lookup"><span data-stu-id="8643d-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="8643d-123">待機ハンドルがシグナル状態になったためにコールバックが呼び出された場合、`WaitProc` メソッドは <xref:System.Threading.RegisteredWaitHandle>を登録解除し、さらにコールバックを停止します。</span><span class="sxs-lookup"><span data-stu-id="8643d-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="8643d-124">タイムアウトが発生した場合、タスクは待機を続けます。</span><span class="sxs-lookup"><span data-stu-id="8643d-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="8643d-125">`WaitProc` メソッドは、メッセージをコンソールに出力することによって終了します。</span><span class="sxs-lookup"><span data-stu-id="8643d-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/threading/threads-and-threading"><span data-ttu-id="8643d-126">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="8643d-126">Threads and Threading</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/the-managed-thread-pool"><span data-ttu-id="8643d-127">マネージド スレッド プール</span><span class="sxs-lookup"><span data-stu-id="8643d-127">The managed thread pool</span></span></related>
  </Docs>
</Type>
