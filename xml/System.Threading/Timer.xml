<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="da0d4fc270490b1788950f4b1369a5dde2067b24" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78780310" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Timer" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定した間隔で、スレッド プール スレッドでメソッドを実行するための機構を提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Timer> を実行するメソッドを指定するには、<xref:System.Threading.TimerCallback> デリゲートを使用します。 <xref:System.Threading.TimerCallback> デリゲートのシグネチャは次のとおりです。  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 タイマーデリゲートは、タイマーが構築されるときに指定され、変更することはできません。 タイマーを作成したスレッドでは、メソッドは実行されません。システムによって提供される <xref:System.Threading.ThreadPool> のスレッドで実行されます。  
  
> [!TIP]
> .NET には `Timer`という4つのクラスが含まれており、それぞれに異なる機能が用意されています。  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>。イベントを発生させ、一定の間隔で1つ以上のイベントシンクでコードを実行します。 クラスは、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを目的としています。ユーザーインターフェイスはなく、実行時には表示されません。
> - <xref:System.Threading.Timer?displayProperty=nameWithType>、スレッドプールのスレッドで定期的に1つのコールバックメソッドを実行します。 コールバックメソッドは、タイマーがインスタンス化され、変更できないときに定義されます。 このクラスは <xref:System.Timers.Timer?displayProperty=nameWithType> クラスと同様に、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを意図しています。ユーザーインターフェイスはなく、実行時には表示されません。
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework のみ)。イベントを発生させ、一定の間隔で1つ以上のイベントシンクでコードを実行する Windows フォームコンポーネントです。 コンポーネントにはユーザーインターフェイスがなく、シングルスレッド環境で使用できるように設計されています。UI スレッドで実行されます。
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework のみ)、非同期または同期 web ページのポストバックを定期的に実行する ASP.NET コンポーネント。
  
 タイマーを作成するときに、メソッドの最初の実行までの待機時間 (期限) と、その後の実行 (期間) の間に待機する時間を指定できます。 <xref:System.Threading.Timer> クラスには、システムクロックと同じ解決策があります。 つまり、期間がシステムクロックの解像度よりも少ない場合、<xref:System.Threading.TimerCallback> デリゲートは、Windows 7 および Windows 8 システムで約15ミリ秒のシステムクロックの解像度で定義された間隔で実行されます。 <xref:System.Threading.Timer.Change%2A> メソッドを使用して、期限と期間を変更したり、タイマーを無効にしたりすることができます。  
  
> [!NOTE]
>  <xref:System.Threading.Timer>を使用している限り、参照を保持する必要があります。 すべてのマネージオブジェクトと同様に、<xref:System.Threading.Timer> には参照がない場合にガベージコレクションが適用されます。 <xref:System.Threading.Timer> がまだアクティブになっているという事実は、収集が妨げられることはありません。  
  
 タイマーが不要になった場合は、<xref:System.Threading.Timer.Dispose%2A> メソッドを使用して、タイマーによって保持されているリソースを解放します。 <xref:System.Threading.Timer.Dispose> メソッドのオーバーロードが呼び出された後にコールバックが発生する可能性があることに注意してください。タイマーは、スレッドプールのスレッドによって実行されるコールバックをキューに置いているためです。 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドオーバーロードを使用して、すべてのコールバックが完了するまで待機することができます。  
  
 タイマーによって実行されるコールバックメソッドは <xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。 タイマー間隔がコールバックの実行に必要な時間より短い場合、またはすべてのスレッドプールスレッドが使用中で、コールバックが複数回キューに配置されている場合、コールバックは2つのスレッドプールスレッドで同時に実行できます。  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> は、コールバックメソッドを使用し、スレッドプールのスレッドによって提供される単純で軽量なタイマーです。 コールバックはユーザーインターフェイススレッドでは発生しないため、Windows フォームでの使用はお勧めしません。 <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> は Windows フォームで使用する方が適しています。 サーバーベースのタイマー機能については、イベントを発生させ、追加機能を持つ <xref:System.Timers.Timer?displayProperty=nameWithType>を使用することを検討してください。  
  
   
  
## Examples  
 次の例では、シグネチャが <xref:System.Threading.TimerCallback> デリゲートと同じである `CheckStatus` メソッドを含む `StatusChecker` クラスを定義します。 `CheckStatus` メソッドの `state` 引数は、アプリケーションスレッドと、コールバックデリゲートを実行するスレッドプールスレッドを同期するために使用される <xref:System.Threading.AutoResetEvent> オブジェクトです。 `StatusChecker` クラスには、次の2つの状態変数も含まれています。  
  
 `invokeCount`  
 コールバックメソッドが呼び出された回数を示します。  
  
 `maxCount`  
 コールバックメソッドを呼び出すことができる最大回数を決定します。  
  
 アプリケーションスレッドは、1秒間待機し、250ミリ秒ごとに `CheckStatus` コールバックメソッドを実行するタイマーを作成します。 アプリケーションスレッドは、<xref:System.Threading.AutoResetEvent> オブジェクトがシグナル状態になるまでブロックします。 `CheckStatus` のコールバックメソッドが `maxCount` 回実行されると、`AutoResetEvent.Set` メソッドを呼び出して、<xref:System.Threading.AutoResetEvent> オブジェクトの状態をシグナル状態に設定します。 これが初めて発生すると、アプリケーションスレッドは <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> メソッドを呼び出して、コールバックメソッドが0.5 秒ごとに実行されるようになります。 この場合、<xref:System.Threading.AutoResetEvent> オブジェクトがシグナル状態になるまで、再度ブロックされます。 この場合、タイマーは <xref:System.Threading.Timer.Dispose%2A> メソッドを呼び出すことによって破棄され、アプリケーションは終了します。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">マネージド スレッド プール</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</param>
        <summary>状態オブジェクトとして新しく作成した <see cref="T:System.Threading.Timer" /> を使用して、無制限の期間および無制限の期限を指定して <see cref="T:System.Threading.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Timer> オブジェクト自体を状態オブジェクトとして使用する場合は、このコンストラクターを呼び出します。 タイマーを作成したら、<xref:System.Threading.Timer.Change%2A> メソッドを使用して、間隔と期限を設定します。  
  
 このコンストラクターは、最初のコールバックから、<xref:System.Threading.Timer> オブジェクトが状態オブジェクトに割り当てられる前に最初のコールバックが発生しないようにするために、コールバック間の無限の時間を指定します。  
  
 `callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。 タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。  
  
   
  
## Examples  
 次のコード例では、タイマー自体を状態オブジェクトとして使用して、新しいタイマーを作成します。 <xref:System.Threading.Timer.Change%2A> メソッドは、タイマーを開始するために使用されます。 タイマーのコールバックが発生したときに、状態オブジェクトを使用してタイマーをオフにします。  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。 タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を指定するために 32 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。 `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。  
  
 <xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。 `period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> で `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合、`callback` が1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。  
  
 `callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。 タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。  
  
   
  
## Examples  
 次のコード例は、`TimerCallback` デリゲートを作成し、`Timer` クラスの新しいインスタンスを初期化する方法を示しています。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。 タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 64 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。 `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。  
  
 <xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。 `period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> で `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合、`callback` が1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。  
  
 `callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。 タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> パラメーターがそのメソッドを呼び出す前に遅延する時間。 -1 ミリ秒を指定して、タイマーが開始されないようにします。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> によって参照されるメソッドの呼び出し時間間隔。 -1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。 `dueTime` が負の 1 (-1) ミリ秒の場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。  
  
 <xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。 `period` がゼロ (0) または負の 1 (-1) ミリ秒で、`dueTime` が正の場合、`callback` は一度だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。  
  
 `callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。 タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。  
  
   
  
## Examples  
 次のコード例は、`TimerCallback` デリゲートを作成し、`Timer` クラスの新しいインスタンスを初期化する方法を示しています。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> または <paramref name="period" /> の値のミリ秒数が負の値で <see cref="F:System.Threading.Timeout.Infinite" /> と等しくないか、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。 タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 32 ビット符号なし整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。 `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。  
  
 <xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。 `period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> で `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合、`callback` が1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。  
  
 `callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。 タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static long ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Timer.ActiveCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long ActiveCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int64" Usage="System.Threading.Timer.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在アクティブなタイマーの数を取得します。 アクティブなタイマーは、将来のある時点でティックするように登録されており、まだキャンセルされていません。</summary>
        <value>現在アクティブなタイマーの数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。 タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 32 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。 `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。  
  
 `period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>で、`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの定期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に正の値を指定することによって、再度有効にすることができます。  
  
 <xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。  
  
   
  
## Examples  
 次のコード例では、`Timer` を開始し、呼び出しの回数を設定した後でその期間を変更する方法を示します。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。 タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに再開します。  この値は 4294967294 以下であることが必要です。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 64 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。 `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。  
  
 `period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>で、`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの定期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に正の値を指定することによって、再度有効にすることができます。  
  
 <xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> または <paramref name="period" /> が -1 未満です。
        
- または -

<paramref name="dueTime" /> または <paramref name="period" /> が 4294967294 より大きい値です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.TimeSpan" /> は、<see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間を表します。 タイマーが再開されないようにする -1 を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す時間間隔。 -1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。 `dueTime` が負の 1 (-1) ミリ秒の場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。  
  
 `period` がゼロ (0) または負の 1 (-1) ミリ秒で、`dueTime` が正の場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に0より大きい値を指定することによって、再度有効にすることができます。  
  
 <xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。  
  
   
  
## Examples  
 次のコード例では、`Timer` を開始し、呼び出しの回数を設定した後でその期間を変更する方法を示します。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが -1 未満です (ミリ秒単位)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です (ミリ秒単位)。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。 タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 32 ビット符号なし整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。  
  
 `dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。 `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。  
  
 `period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>で、`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの定期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に正の値を指定することによって、再度有効にすることができます。  
  
 <xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Dispose` を呼び出すと、<xref:System.Threading.Timer> によって使用されるリソースを他の目的で再割り当てできます。 `Dispose`の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。  
  
> [!NOTE]
>  <xref:System.Threading.Timer.Dispose> メソッドのオーバーロードが呼び出された後にコールバックが発生する可能性があります。これは、タイマーがスレッドプールスレッドによって実行されるコールバックをキューに置いているためです。 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドオーバーロードを使用して、すべてのコールバックが完了するまで待機することができます。  
  
   
  
## Examples  
 次のコード例は、`Timer`によって保持されているリソースを解放する方法を示しています。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><see langword="Timer" /> が破棄されたことが通知される <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放し、タイマーが破棄されたときに通知します。</summary>
        <returns>関数が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Dispose` を呼び出すと、<xref:System.Threading.Timer> によって使用されるリソースを他の目的で再割り当てできます。 `Dispose`の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。  
  
 このメソッドが完了すると、`notifyObject` パラメーターによって指定された <xref:System.Threading.WaitHandle> が通知されます。タイマーが破棄されたことが確実になるまでブロックできるようにする場合は、<xref:System.Threading.Timer.Dispose%2A> メソッドのこのオーバーロードを使用します。 現在キューに置かれているすべてのコールバックが完了するまで、タイマーは破棄されません。  
  
> [!NOTE]
>  コールバックで <xref:System.Threading.Timer.Change%2A> メソッドを使用して `dueTime` パラメーターを0に設定すると、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドのオーバーロードが呼び出されたときに競合状態が発生する可能性があります。 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドのオーバーロードで、コールバックがキューに登録されていないことが検出される前に、タイマーが新しいコールバックをキューに入れた場合、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> はブロックし続けそれ以外の場合は、新しいコールバックがキューに置かれている間にタイマーが破棄され、新しいコールバックが <xref:System.Threading.Timer.Change%2A> メソッドを呼び出すと <xref:System.ObjectDisposedException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="notifyObject" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <returns>タイマーに関連付けられているすべての作業が終わったときに完了する <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
