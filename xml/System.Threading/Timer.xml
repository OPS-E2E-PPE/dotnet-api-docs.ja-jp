<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d0582d4efcfd08ea59ebe6531a7f82eb9248913" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83518641" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Timer" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Timer" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9ffe8-101">指定した間隔で、スレッド プール スレッドでメソッドを実行するための機構を提供します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span></span> <span data-ttu-id="9ffe8-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-103"><xref:System.Threading.Timer> を実行するメソッドを指定するには、<xref:System.Threading.TimerCallback> デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="9ffe8-104"><xref:System.Threading.TimerCallback> デリゲートのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="9ffe8-105">タイマーデリゲートは、タイマーが構築されるときに指定され、変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="9ffe8-106">タイマーを作成したスレッドでは、メソッドは実行されません。システムによって提供される <xref:System.Threading.ThreadPool> のスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="9ffe8-107">.NET には `Timer`という4つのクラスが含まれており、それぞれに異なる機能が用意されています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="9ffe8-108"><xref:System.Timers.Timer?displayProperty=nameWithType>。イベントを発生させ、一定の間隔で1つ以上のイベントシンクでコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="9ffe8-109">クラスは、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを目的としています。ユーザーインターフェイスはなく、実行時には表示されません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="9ffe8-110"><xref:System.Threading.Timer?displayProperty=nameWithType>、スレッドプールのスレッドで定期的に1つのコールバックメソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="9ffe8-111">コールバックメソッドは、タイマーがインスタンス化され、変更できないときに定義されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="9ffe8-112">このクラスは <xref:System.Timers.Timer?displayProperty=nameWithType> クラスと同様に、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを意図しています。ユーザーインターフェイスはなく、実行時には表示されません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="9ffe8-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework のみ)。イベントを発生させ、一定の間隔で1つ以上のイベントシンクでコードを実行する Windows フォームコンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="9ffe8-114">コンポーネントにはユーザーインターフェイスがなく、シングルスレッド環境で使用できるように設計されています。UI スレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="9ffe8-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework のみ)、非同期または同期 web ページのポストバックを定期的に実行する ASP.NET コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="9ffe8-116">タイマーを作成するときに、メソッドの最初の実行までの待機時間 (期限) と、その後の実行 (期間) の間に待機する時間を指定できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="9ffe8-117"><xref:System.Threading.Timer> クラスには、システムクロックと同じ解決策があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="9ffe8-118">つまり、期間がシステムクロックの解像度よりも少ない場合、<xref:System.Threading.TimerCallback> デリゲートは、Windows 7 および Windows 8 システムで約15ミリ秒のシステムクロックの解像度で定義された間隔で実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="9ffe8-119"><xref:System.Threading.Timer.Change%2A> メソッドを使用して、期限と期間を変更したり、タイマーを無効にしたりすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ffe8-120"><xref:System.Threading.Timer>を使用している限り、参照を保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="9ffe8-121">すべてのマネージオブジェクトと同様に、<xref:System.Threading.Timer> には参照がない場合にガベージコレクションが適用されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="9ffe8-122"><xref:System.Threading.Timer> がまだアクティブになっているという事実は、収集が妨げられることはありません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="9ffe8-123">タイマーが不要になった場合は、<xref:System.Threading.Timer.Dispose%2A> メソッドを使用して、タイマーによって保持されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="9ffe8-124"><xref:System.Threading.Timer.Dispose> メソッドのオーバーロードが呼び出された後にコールバックが発生する可能性があることに注意してください。タイマーは、スレッドプールのスレッドによって実行されるコールバックをキューに置いているためです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="9ffe8-125"><xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドオーバーロードを使用して、すべてのコールバックが完了するまで待機することができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="9ffe8-126">タイマーによって実行されるコールバックメソッドは <xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="9ffe8-127">タイマー間隔がコールバックの実行に必要な時間より短い場合、またはすべてのスレッドプールスレッドが使用中で、コールバックが複数回キューに配置されている場合、コールバックは2つのスレッドプールスレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ffe8-128"><xref:System.Threading.Timer?displayProperty=nameWithType> は、コールバックメソッドを使用し、スレッドプールのスレッドによって提供される単純で軽量なタイマーです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="9ffe8-129">コールバックはユーザーインターフェイススレッドでは発生しないため、Windows フォームでの使用はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="9ffe8-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> は Windows フォームで使用する方が適しています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="9ffe8-131">サーバーベースのタイマー機能については、イベントを発生させ、追加機能を持つ <xref:System.Timers.Timer?displayProperty=nameWithType>を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-132">次の例では、シグネチャが <xref:System.Threading.TimerCallback> デリゲートと同じである `CheckStatus` メソッドを含む `StatusChecker` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="9ffe8-133">`CheckStatus` メソッドの `state` 引数は、アプリケーションスレッドと、コールバックデリゲートを実行するスレッドプールスレッドを同期するために使用される <xref:System.Threading.AutoResetEvent> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="9ffe8-134">`StatusChecker` クラスには、次の2つの状態変数も含まれています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="9ffe8-135">コールバックメソッドが呼び出された回数を示します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="9ffe8-136">コールバックメソッドを呼び出すことができる最大回数を決定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="9ffe8-137">アプリケーションスレッドは、1秒間待機し、250ミリ秒ごとに `CheckStatus` コールバックメソッドを実行するタイマーを作成します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="9ffe8-138">アプリケーションスレッドは、<xref:System.Threading.AutoResetEvent> オブジェクトがシグナル状態になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="9ffe8-139">`CheckStatus` のコールバックメソッドが `maxCount` 回実行されると、`AutoResetEvent.Set` メソッドを呼び出して、<xref:System.Threading.AutoResetEvent> オブジェクトの状態をシグナル状態に設定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="9ffe8-140">これが初めて発生すると、アプリケーションスレッドは <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> メソッドを呼び出して、コールバックメソッドが0.5 秒ごとに実行されるようになります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="9ffe8-141">この場合、<xref:System.Threading.AutoResetEvent> オブジェクトがシグナル状態になるまで、再度ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="9ffe8-142">この場合、タイマーは <xref:System.Threading.Timer.Dispose%2A> メソッドを呼び出すことによって破棄され、アプリケーションは終了します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9ffe8-143">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-143">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-144">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-144">Timers</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="9ffe8-145">マネージド スレッド プール</span><span class="sxs-lookup"><span data-stu-id="9ffe8-145">The Managed Thread Pool</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9ffe8-146"><see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-146">Initializes a new instance of the <see langword="Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9ffe8-147">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-147">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <summary><span data-ttu-id="9ffe8-148">状態オブジェクトとして新しく作成した <see cref="T:System.Threading.Timer" /> を使用して、無制限の期間および無制限の期限を指定して <see cref="T:System.Threading.Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-148">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-149"><xref:System.Threading.Timer> オブジェクト自体を状態オブジェクトとして使用する場合は、このコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-149">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="9ffe8-150">タイマーを作成したら、<xref:System.Threading.Timer.Change%2A> メソッドを使用して、間隔と期限を設定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-150">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="9ffe8-151">このコンストラクターは、最初のコールバックから、<xref:System.Threading.Timer> オブジェクトが状態オブジェクトに割り当てられる前に最初のコールバックが発生しないようにするために、コールバック間の無限の時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-151">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="9ffe8-152">`callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-152">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="9ffe8-153">タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-153">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-154">次のコード例では、タイマー自体を状態オブジェクトとして使用して、新しいタイマーを作成します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-154">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="9ffe8-155"><xref:System.Threading.Timer.Change%2A> メソッドは、タイマーを開始するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-155">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="9ffe8-156">タイマーのコールバックが発生したときに、状態オブジェクトを使用してタイマーをオフにします。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-156">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9ffe8-157">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-157">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="9ffe8-158">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-158">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="9ffe8-159"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-159">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="9ffe8-160">タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-160">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="9ffe8-161">0 を指定して、タイマーをすぐに開始します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-161">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-162"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-162">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="9ffe8-163">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-163">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-164">時間間隔を指定するために 32 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-164">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-165">`callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-165">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-166">`dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-166">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="9ffe8-167">`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-167">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-168"><xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-168">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="9ffe8-169">`period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> で `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合、`callback` が1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-169">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-170">`callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-170">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="9ffe8-171">タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-171">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-172">次のコード例は、`TimerCallback` デリゲートを作成し、`Timer` クラスの新しいインスタンスを初期化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-172">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-173"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-173">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ffe8-174"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-174">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-175">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-175">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9ffe8-176">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-176">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="9ffe8-177">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-177">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="9ffe8-178"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-178">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="9ffe8-179">タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="9ffe8-180">0 を指定して、タイマーをすぐに開始します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-180">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-181"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-181">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="9ffe8-182">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-182">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-183">時間間隔を計るために 64 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-183">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-184">`callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-184">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-185">`dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-185">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="9ffe8-186">`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-186">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-187"><xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-187">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="9ffe8-188">`period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> で `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合、`callback` が1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-188">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-189">`callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-189">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="9ffe8-190">タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-190">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-191"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-191">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9ffe8-192"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-192">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-193">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-193">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9ffe8-194">実行するメソッドを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-194">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="9ffe8-195">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-195">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="9ffe8-196"><paramref name="callback" /> パラメーターがそのメソッドを呼び出す前に遅延する時間。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-196">The amount of time to delay before the <paramref name="callback" /> parameter invokes its methods.</span></span> <span data-ttu-id="9ffe8-197">-1 ミリ秒を指定して、タイマーが開始されないようにします。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-197">Specify negative one (-1) milliseconds to prevent the timer from starting.</span></span> <span data-ttu-id="9ffe8-198">0 を指定して、タイマーをすぐに開始します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-198">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-199"><paramref name="callback" /> によって参照されるメソッドの呼び出し時間間隔。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-199">The time interval between invocations of the methods referenced by <paramref name="callback" />.</span></span> <span data-ttu-id="9ffe8-200">-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-200">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-201">時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-201">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-202">`callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-202">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-203">`dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-203">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="9ffe8-204">`dueTime` が負の 1 (-1) ミリ秒の場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-204">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-205"><xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-205">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="9ffe8-206">`period` がゼロ (0) または負の 1 (-1) ミリ秒で、`dueTime` が正の場合、`callback` は一度だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-206">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-207">`callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-207">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="9ffe8-208">タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-208">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-209">次のコード例は、`TimerCallback` デリゲートを作成し、`Timer` クラスの新しいインスタンスを初期化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-209">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-210"><paramref name="dueTime" /> または <paramref name="period" /> の値のミリ秒数が負の値で <see cref="F:System.Threading.Timeout.Infinite" /> と等しくないか、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-210">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ffe8-211"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-211">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-212">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-212">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9ffe8-213">実行するメソッドを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-213">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="9ffe8-214">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-214">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="9ffe8-215"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-215">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="9ffe8-216">タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-216">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="9ffe8-217">0 を指定して、タイマーをすぐに開始します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-217">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-218"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-218">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="9ffe8-219">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-219">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-220">時間間隔を計るために 32 ビット符号なし整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-220">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-221">`callback` パラメーターによって指定されたデリゲートは、`dueTime` が経過した後に1回呼び出され、その後 `period` 時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-221">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-222">`dueTime` がゼロ (0) の場合、`callback` は直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-222">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="9ffe8-223">`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、`callback` は呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを呼び出すことによって再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-223">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-224"><xref:System.Threading.Timer> クラスの解決策は、Windows 7 および Windows 8 システムで約15ミリ秒というシステムクロックと同じであるため、`callback` デリゲートは、システムクロックの `period` 解像度ではなく、システム時計の解像度で定義された間隔で実行されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-224">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="9ffe8-225">`period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> で `dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合、`callback` が1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> メソッドを使用して再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-225">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="9ffe8-226">`callback` に対して指定されたメソッドは、<xref:System.Threading.ThreadPool> スレッドで呼び出されるため、再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-226">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="9ffe8-227">タイマー間隔がメソッドの実行に必要な時間よりも少ない場合、またはすべてのスレッドプールスレッドが使用中で、メソッドが複数回キューに登録されている場合、メソッドは2つのスレッドプールスレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-227">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-228"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-228">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ffe8-229"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-229">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-230">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-230">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static long ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Timer.ActiveCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long ActiveCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int64" Usage="System.Threading.Timer.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ffe8-231">現在アクティブなタイマーの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-231">Gets the number of timers that are currently active.</span></span> <span data-ttu-id="9ffe8-232">アクティブなタイマーは、将来のある時点でティックするように登録されており、まだキャンセルされていません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-232">An active timer is registered to tick at some point in the future, and has not yet been canceled.</span></span></summary>
        <value><span data-ttu-id="9ffe8-233">現在アクティブなタイマーの数。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-233">The number of timers that are currently active.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9ffe8-234">タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-234">Changes the start time and the interval between method invocations for a timer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="9ffe8-235"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-235">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="9ffe8-236">タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-236">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="9ffe8-237">0 を指定して、タイマーをすぐに再開します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-237">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-238"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-238">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="9ffe8-239">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-239">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-240">時間間隔を計るために 32 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-240">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="9ffe8-241">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-241"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-242">コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-242">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-243">`dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-243">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="9ffe8-244">`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-244">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="9ffe8-245">`period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>で、`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの定期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-245">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="9ffe8-246"><xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-246">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-247">次のコード例では、`Timer` を開始し、呼び出しの回数を設定した後でその期間を変更する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-247">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9ffe8-248"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-248">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-249"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-249">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-250">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-250">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="9ffe8-251"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-251">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="9ffe8-252">タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-252">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="9ffe8-253">0 を指定して、タイマーをすぐに再開します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-253">Specify zero (0) to restart the timer immediately.</span></span>  <span data-ttu-id="9ffe8-254">この値は 4294967294 以下であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-254">This value must be less than or equal to 4294967294.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-255"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-255">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="9ffe8-256">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-256">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-257">時間間隔を計るために 64 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-257">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="9ffe8-258">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-258"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-259">コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-259">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-260">`dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-260">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="9ffe8-261">`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-261">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="9ffe8-262">`period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>で、`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの定期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-262">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="9ffe8-263"><xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-263">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9ffe8-264"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-264">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-265"><paramref name="dueTime" /> または <paramref name="period" /> が -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-265"><paramref name="dueTime" /> or <paramref name="period" /> is less than -1.</span></span>
        
<span data-ttu-id="9ffe8-266">または</span><span class="sxs-lookup"><span data-stu-id="9ffe8-266">-or-</span></span>

<span data-ttu-id="9ffe8-267"><paramref name="dueTime" /> または <paramref name="period" /> が 4294967294 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-267"><paramref name="dueTime" /> or <paramref name="period" /> is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-268">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-268">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="9ffe8-269"><see cref="T:System.TimeSpan" /> は、<see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間を表します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-269">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="9ffe8-270">タイマーが再開されないようにする -1 を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-270">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span></span> <span data-ttu-id="9ffe8-271">0 を指定して、タイマーをすぐに再開します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-271">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-272"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す時間間隔。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-272">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="9ffe8-273">-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-273">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-274">時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-274">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="9ffe8-275">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-275"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-276">コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-276">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-277">`dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-277">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="9ffe8-278">`dueTime` が負の 1 (-1) ミリ秒の場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-278">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="9ffe8-279">`period` がゼロ (0) または負の 1 (-1) ミリ秒で、`dueTime` が正の場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの周期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に0より大きい値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-279">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="9ffe8-280"><xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-280">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-281">次のコード例では、`Timer` を開始し、呼び出しの回数を設定した後でその期間を変更する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-281">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9ffe8-282"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-282">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9ffe8-283"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが -1 未満です (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-283">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9ffe8-284"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-284">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-285">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-285">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="9ffe8-286"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-286">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="9ffe8-287">タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-287">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="9ffe8-288">0 を指定して、タイマーをすぐに再開します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-288">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="9ffe8-289"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-289">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="9ffe8-290">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-290">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="9ffe8-291">時間間隔を計るために 32 ビット符号なし整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-291">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="9ffe8-292">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-292"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-293">コールバックメソッドは `dueTime` が経過した後に1回呼び出され、その後、`period` で指定された時間間隔が経過するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-293">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="9ffe8-294">`dueTime` がゼロ (0) の場合、コールバックメソッドは直ちに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-294">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="9ffe8-295">`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>場合、コールバックメソッドは呼び出されません。タイマーは無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`dueTime`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-295">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="9ffe8-296">`period` がゼロ (0) または <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>で、`dueTime` が <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ない場合は、コールバックメソッドが1回だけ呼び出されます。タイマーの定期的な動作は無効になっていますが、<xref:System.Threading.Timer.Change%2A> を呼び出し、`period`に正の値を指定することによって、再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-296">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="9ffe8-297"><xref:System.Threading.Timer.Change%2A> メソッドは、<xref:System.Threading.TimerCallback> デリゲートから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-297">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9ffe8-298"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-298">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-299">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-299">Timers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9ffe8-300"><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-300">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ffe8-301"><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-301">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-302">`Dispose` を呼び出すと、<xref:System.Threading.Timer> によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-302">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="9ffe8-303">`Dispose`の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-303">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ffe8-304"><xref:System.Threading.Timer.Dispose> メソッドのオーバーロードが呼び出された後にコールバックが発生する可能性があります。これは、タイマーがスレッドプールスレッドによって実行されるコールバックをキューに置いているためです。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-304">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="9ffe8-305"><xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドオーバーロードを使用して、すべてのコールバックが完了するまで待機することができます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-305">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ffe8-306">次のコード例は、`Timer`によって保持されているリソースを解放する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-306">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-307">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-307">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><span data-ttu-id="9ffe8-308"><see langword="Timer" /> が破棄されたことが通知される <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-308">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span></span></param>
        <summary><span data-ttu-id="9ffe8-309"><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放し、タイマーが破棄されたときに通知します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-309">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span></span></summary>
        <returns><span data-ttu-id="9ffe8-310">関数が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-310"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ffe8-311">`Dispose` を呼び出すと、<xref:System.Threading.Timer> によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-311">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="9ffe8-312">`Dispose`の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-312">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="9ffe8-313">このメソッドが完了すると、`notifyObject` パラメーターによって指定された <xref:System.Threading.WaitHandle> が通知されます。タイマーが破棄されたことが確実になるまでブロックできるようにする場合は、<xref:System.Threading.Timer.Dispose%2A> メソッドのこのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-313">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="9ffe8-314">現在キューに置かれているすべてのコールバックが完了するまで、タイマーは破棄されません。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-314">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ffe8-315">コールバックで <xref:System.Threading.Timer.Change%2A> メソッドを使用して `dueTime` パラメーターを0に設定すると、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドのオーバーロードが呼び出されたときに競合状態が発生する可能性があります。 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドのオーバーロードで、コールバックがキューに登録されていないことが検出される前に、タイマーが新しいコールバックをキューに入れた場合、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> はブロックし続けそれ以外の場合は、新しいコールバックがキューに置かれている間にタイマーが破棄され、新しいコールバックが <xref:System.Threading.Timer.Change%2A> メソッドを呼び出すと <xref:System.ObjectDisposedException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-315">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ffe8-316"><paramref name="notifyObject" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-316">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="9ffe8-317">タイマー</span><span class="sxs-lookup"><span data-stu-id="9ffe8-317">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ffe8-318"><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-318">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <returns><span data-ttu-id="9ffe8-319">タイマーに関連付けられているすべての作業が終わったときに完了する <see cref="T:System.Threading.Tasks.ValueTask" />。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-319">A <see cref="T:System.Threading.Tasks.ValueTask" /> that completes when all work associated with the timer has ceased.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ffe8-320">オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</span><span class="sxs-lookup"><span data-stu-id="9ffe8-320">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
