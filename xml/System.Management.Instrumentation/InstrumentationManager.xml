<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57abe6c0a1c40391727af378b18227de23dd9702" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76945827" /></Metadata><TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type InstrumentationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="389e6-101">分離プロバイダーで使用される有効期間とモデルを管理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="389e6-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span></span>  
  
<span data-ttu-id="389e6-102">注: WMI .NET ライブラリは最終的な状態と見なされます。これらのライブラリに影響を与えるセキュリティ以外に関連する問題については、さらなる開発、機能拡張、または更新は利用できません。</span><span class="sxs-lookup"><span data-stu-id="389e6-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="389e6-103">[MI API](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) は新しい開発すべてに使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="389e6-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="389e6-104">分離プロバイダーは、アプリケーションによってホストされます。</span><span class="sxs-lookup"><span data-stu-id="389e6-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="389e6-105">アプリケーションでは、publish/revoke または callback メソッドの2つのメソッドを使用して、WMI クラスのインスタンスを使用できるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="389e6-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="389e6-106">コールバックメソッドは、<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> メソッドと <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="389e6-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="389e6-107">パブリッシュ/失効モデルでは、コールバックメソッドで自分で記述する必要がある多くのメソッドに対して、WMI インフラストラクチャによって既定の動作が提供されます。</span><span class="sxs-lookup"><span data-stu-id="389e6-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="389e6-108">これには、列挙メソッドとバインドメソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="389e6-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="389e6-109">このモデルでは、アプリケーションによってインスタンスが作成され、公開されます。</span><span class="sxs-lookup"><span data-stu-id="389e6-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="389e6-110">アプリケーションは、クラスの主要なプロパティが尊重されることを保証する役割を担います。</span><span class="sxs-lookup"><span data-stu-id="389e6-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="389e6-111">また、アプリケーションはインスタンスの削除も行います。</span><span class="sxs-lookup"><span data-stu-id="389e6-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="389e6-112">コールバックモデルでは、WMI インフラストラクチャは、列挙、バインド、およびプロバイダーの機能を実装するために必要なその他のメソッドを処理するメソッドをアプリケーションに提供することを想定しています。</span><span class="sxs-lookup"><span data-stu-id="389e6-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="389e6-113">この機能のためにアプリケーションを呼び出します。存在しない場合、または適切に実装されていない場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="389e6-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="389e6-114">アプリケーションは <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> を呼び出すことによって WMI クラスの型をインフラストラクチャに登録し、<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>を呼び出すことによって公開される WMI クラスを必要としないことを示します。</span><span class="sxs-lookup"><span data-stu-id="389e6-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="389e6-115">次の例では、パブリッシュ/取り消しモデルを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="389e6-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="389e6-116">Router クラスの2つのインスタンスが作成され、発行されます。</span><span class="sxs-lookup"><span data-stu-id="389e6-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="389e6-117">これらは後で失効します。</span><span class="sxs-lookup"><span data-stu-id="389e6-117">They are later revoked.</span></span>  
  
```csharp
public class Sample_InstanceProvider  
{  
    public int Main (string[] args)   
    {  
        var r_one = new Router();
        r_one.Name = "one";  
        InstrumentationManager.Publish(r_one);  
        var r_two = new Router ();  
        r_two.Name = "two";  
        InstrumentationManager.Publish(r_two);  
        // ....  
        InstrumentationManager.Revoke(r_one);  
        InstrumentationManager.Revoke(r_two);  
        return 0;  
    }  
}  
```  
  
 <span data-ttu-id="389e6-118">次の例では、登録のコールバックメソッドを使用して、RouterNew クラスを公開しています。</span><span class="sxs-lookup"><span data-stu-id="389e6-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```csharp
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish obj" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C#" Value="public static void Publish (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish value" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="389e6-119">公開するプロバイダーを実装するクラスのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="389e6-119">An instance of the class that implements the provider to publish.</span></span></param>
        <param name="value"><span data-ttu-id="389e6-120">公開するプロバイダーを実装するクラスのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="389e6-120">An instance of the class that implements the provider to publish.</span></span></param>
        <summary><span data-ttu-id="389e6-121">WMI インフラストラクチャ内で使用可能なプロバイダーのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="389e6-121">Makes an instance of a provider available within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member RegisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="389e6-122">登録するアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="389e6-122">The assembly to register.</span></span></param>
        <summary><span data-ttu-id="389e6-123">アセンブリを WMI インフラストラクチャに登録します。</span><span class="sxs-lookup"><span data-stu-id="389e6-123">Registers an assembly with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member RegisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="389e6-124">クラスの型。</span><span class="sxs-lookup"><span data-stu-id="389e6-124">The type of the class.</span></span></param>
        <summary><span data-ttu-id="389e6-125">クラスを WMI インフラストラクチャに登録します。</span><span class="sxs-lookup"><span data-stu-id="389e6-125">Registers a class with the WMI infrastructure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp
static int Main(string[] args)
{
   InstrumentationManager.RegisterType(typeof(MySampleProvider));
   return 0;
}
```
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke obj" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke value" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="389e6-126">失効するプロバイダーを実装するクラスのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="389e6-126">An instance of the class that implements the provider to revoke.</span></span></param>
        <param name="value"><span data-ttu-id="389e6-127">失効するプロバイダーを実装するクラスのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="389e6-127">An instance of the class that implements the provider to revoke.</span></span></param>
        <summary><span data-ttu-id="389e6-128">現在利用可能なプロバイダーのインスタンスを実行し、WMI インフラストラクチャ内で利用できなくします。</span><span class="sxs-lookup"><span data-stu-id="389e6-128">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member UnregisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="389e6-129">登録を解除する登録済みのセンブリ。</span><span class="sxs-lookup"><span data-stu-id="389e6-129">The registered assembly to unregister.</span></span></param>
        <summary><span data-ttu-id="389e6-130">WMI インフラストラクチャに現在登録されているアセンブリの登録を解除します。</span><span class="sxs-lookup"><span data-stu-id="389e6-130">Unregisters an assembly currently registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member UnregisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="389e6-131">登録を解除する登録済みの型。</span><span class="sxs-lookup"><span data-stu-id="389e6-131">The registered type to unregister.</span></span></param>
        <summary><span data-ttu-id="389e6-132">WMI インフラストラクチャに登録されたクラスの登録を解除します。</span><span class="sxs-lookup"><span data-stu-id="389e6-132">Unregisters a class registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
