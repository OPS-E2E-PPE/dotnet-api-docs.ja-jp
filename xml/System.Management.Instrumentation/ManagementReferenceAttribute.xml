<Type Name="ManagementReferenceAttribute" FullName="System.Management.Instrumentation.ManagementReferenceAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1048d5bd8be408a2598358cdb7bb2665fdfcc46f" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82367204" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManagementReferenceAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementReferenceAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementReferenceAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementReferenceAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementReferenceAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ManagementReferenceAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f96fa-101">ManagementReferenceAttribute は、別の管理オブジェクトまたはクラスへの参照として、クラスのメンバー、プロパティまたはメソッド パラメーターをマークします。</span><span class="sxs-lookup"><span data-stu-id="f96fa-101">The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.</span></span>  
  
<span data-ttu-id="f96fa-102">注: WMI .NET ライブラリは最終的な状態と見なされます。これらのライブラリに影響を与えるセキュリティ以外に関連する問題については、さらなる開発、機能拡張、または更新は利用できません。</span><span class="sxs-lookup"><span data-stu-id="f96fa-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="f96fa-103">[MI API](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) は新しい開発すべてに使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f96fa-103">The [MI APIs](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96fa-104">次の例に示すように、この属性を使用してアソシエーションクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="f96fa-104">You can use this attribute to create association classes as demonstrated in the following example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f96fa-105">この例では、<xref:System.Management.Instrumentation.ManagementQualifierAttribute> と共に <xref:System.Management.Instrumentation.ManagementReferenceAttribute> 属性を使用して、他の2つの WMI クラスをリンクする関連付け WMI クラスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f96fa-105">This example demonstrates how to use the <xref:System.Management.Instrumentation.ManagementReferenceAttribute> attribute together with the <xref:System.Management.Instrumentation.ManagementQualifierAttribute> to create an association WMI class that links two other WMI classes.</span></span> <span data-ttu-id="f96fa-106">この例は、ルート/assoc 名前空間の3つの WMI クラスを公開する分離プロバイダーです。</span><span class="sxs-lookup"><span data-stu-id="f96fa-106">The example is a decoupled provider that exposes three WMI classes in the root/assoc namespace.</span></span> <span data-ttu-id="f96fa-107">最初の2つのクラス (数字の発音と番号) は、最後のクラス LetterPhonetic によってリンクされています。</span><span class="sxs-lookup"><span data-stu-id="f96fa-107">The first two classes, NumberPhonetic and NumberLetter, are linked by the last class, LetterPhonetic.</span></span>  
  
 <span data-ttu-id="f96fa-108">この例をコンパイルするには、次のように、両方に参照を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="f96fa-108">To compile the example, you will need to include references to both System.Management.Instrumentation and System.Configuration.Install.</span></span> <span data-ttu-id="f96fa-109">生成された実行可能ファイルに対して installutil.exe を実行し、実装されている WMI クラスを使用するためにプログラムが実行されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f96fa-109">You must run installutil.exe against the resulting executable and ensure that the program is running in order to use the implemented WMI classes.</span></span>  
  
```  
using System;  
using System.Collections;  
using System.Management.Instrumentation;  
  
[assembly: WmiConfiguration("root/assoc", HostingModel = ManagementHostingModel.Decoupled)]  
  
[System.ComponentModel.RunInstaller(true)]  
public class TheInstaller : DefaultManagementInstaller  
{ }  
  
namespace AssocExample  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            InstrumentationManager.RegisterType(typeof(NumberPhonetic));  
            InstrumentationManager.RegisterType(typeof(NumberLetter));  
            InstrumentationManager.RegisterType(typeof(LetterPhonetic));  
  
            Console.WriteLine("Press enter to exit");  
            Console.ReadLine();  
  
            InstrumentationManager.UnregisterType(typeof(NumberPhonetic));  
            InstrumentationManager.UnregisterType(typeof(NumberLetter));  
            InstrumentationManager.UnregisterType(typeof(LetterPhonetic));  
  
        }  
    }  
  
  [ManagementEntity]  
    public class NumberPhonetic  
    {  
        [ManagementKey]  
        public int Number;  
  
        [ManagementProbe]  
        public string Name;  
  
        [ManagementBind]  
        public NumberPhonetic(int Number)  
        {  
           this.Number = Number;  
           if(Number == 1)  
           {  
              Name = "alpha";  
           }  
           else if(Number == 2)  
           {  
              Name = "bravo";  
           }  
           else  
           {  
              throw new InstanceNotFoundException();  
           }  
        }  
  
        [ManagementEnumerator]  
        static public IEnumerable EnumerateInstances()  
        {  
            for (int i = 1; i < 3; i++)  
            {  
                yield return new NumberPhonetic(i);  
            }  
        }  
  
    }  
  
    [ManagementEntity]  
    public class NumberLetter  
    {  
        [ManagementKey]  
        public int Number;  
  
        [ManagementProbe]  
        public string Letter;  
  
        [ManagementBind]  
        public NumberLetter(int Number)  
        {  
           this.Number = Number;  
           if(Number == 1)  
           {  
              Letter = "A";  
           }  
           else if(Number == 2)  
           {  
              Letter = "B";  
           }  
           else  
           {  
              throw new InstanceNotFoundException();  
           }  
        }  
  
        [ManagementEnumerator]  
        static public IEnumerable EnumerateInstances()  
        {  
            for (int i = 1; i < 3; i++)  
            {  
                yield return new NumberLetter(i);  
            }  
        }  
  
    }  
  
    [ManagementEntity]  
    [ManagementQualifier("Association", Flavor = ManagementQualifierFlavors.DisableOverride)]  
    public class LetterPhonetic  
    {  
        [ManagementReference(Type = "NumberLetter")]  
        [ManagementKey]  
        public string LetterNumber;  
  
        [ManagementReference(Type = "NumberPhonetic")]  
        [ManagementKey]  
        public string PhoneticNumber;  
  
        [ManagementEnumerator]  
        static public IEnumerable EnumerateInstances()  
        {  
            ArrayList insts = new ArrayList();  
            for (int i = 1; i < 3; i++)  
            {  
                LetterPhonetic inst = new LetterPhonetic();  
                inst.LetterNumber = "Letter = " + i;  
                inst.PhoneticNumber = "Phonetic = " + i;  
                insts.Add(inst);  
            }  
            return insts;  
        }  
  
    }  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementReferenceAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementReferenceAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f96fa-110"><see cref="T:System.Management.Instrumentation.ManagementReferenceAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="f96fa-110">Initializes a new instance of the <see cref="T:System.Management.Instrumentation.ManagementReferenceAttribute" /> class.</span></span> <span data-ttu-id="f96fa-111">これはパラメーターなしのコンストラクターです。</span><span class="sxs-lookup"><span data-stu-id="f96fa-111">This is the parameterless constructor.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Type { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : string with get, set" Usage="System.Management.Instrumentation.ManagementReferenceAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f96fa-112">参照先の型の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f96fa-112">Gets or sets the name of the referenced type.</span></span></summary>
        <value><span data-ttu-id="f96fa-113">参照先の型の名前を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="f96fa-113">A string containing the name of the referenced type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96fa-114">既定の型は object です。</span><span class="sxs-lookup"><span data-stu-id="f96fa-114">The default type is object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Management.Instrumentation.ManagementQualifierAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>
