<Type Name="ManagementEntityAttribute" FullName="System.Management.Instrumentation.ManagementEntityAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d09b1de8e7708f47c4eeefde1c00d8faccde852f" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82480759" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManagementEntityAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEntityAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEntityAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEntityAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEntityAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ManagementEntityAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ManagementEntity 属性は、クラスが WMI プロバイダーを通じて公開される管理情報を提供することを示します。  
  
注: WMI .NET ライブラリは最終的な状態と見なされます。これらのライブラリに影響を与えるセキュリティ以外に関連する問題については、さらなる開発、機能拡張、または更新は利用できません。 [MI API](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) は新しい開発すべてに使用する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この属性でマークされたクラスは、パブリックである必要があります。  
  
   
  
## Examples  
 次の例では、ManagementEntity 属性を使用してクラスをマークする方法を示します。  
  
```  
// Use the ManagementEntity attribute on the class to specify that this // class contains management information that is available from  
// provider.  
  
    [ManagementEntity(Name = "MortgageCalc")]  
    public class MortgageCalcWMIProvider  
    {  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEntityAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEntityAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Management.Instrumentation.ManagementEntityAttribute" /> クラスの新しいインスタンスを初期化します。 これはパラメーターなしのコンストラクターです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、name パラメーターを受け取りません。 <xref:System.Management.Instrumentation.ManagementEntityAttribute.Name> パラメーターを使用して名前を指定しなかった場合、関連付けられている WMI クラスの名前は、既定で属性付きクラスの名前になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="External">
      <MemberSignature Language="C#" Value="public bool External { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool External" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberSignature Language="VB.NET" Value="Public Property External As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool External { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.External : bool with get, set" Usage="System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラスが、現在のアセンブリの外部で実装されるプロバイダーの WMI クラスを表すかどうかを指定する値を取得または設定します。</summary>
        <value>ブール値。クラスが外部 WMI クラスを表す場合は true。それ以外の場合は false。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、既存の抽象 WMI クラスを拡張するクラスを実装するプロバイダーを実装するときに使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>WMI クラスの名前を取得または設定します。</summary>
        <value>WMI クラスの名前が格納された文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定して WMI クラスの名前を指定しない場合、WMI クラスの既定値は属性付きクラスの名前になります。  
  
   
  
## Examples  
 次の例では、Name パラメーターを使用して、MortgageCalcWMIProvider クラスによって表される WMI クラスの名前を設定します。 名前は MortgageCalculator に設定されます。 Name パラメーターが使用されていない場合C#は、対応するクラス名 (この場合は MortgageCalcWMIProvider) が WMI クラス名として使用されます。  
  
```  
[ManagementEntity(Name = "MortgageCalculator")]  
public class MortgageCalcWMIProvider  
{  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Singleton">
      <MemberSignature Language="C#" Value="public bool Singleton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Singleton" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberSignature Language="VB.NET" Value="Public Property Singleton As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Singleton { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Singleton : bool with get, set" Usage="System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられるクラスがシングルトン WMI クラスを表すかどうかを指定します。</summary>
        <value>ブール値。クラスがシングルトン WMI クラスを表す場合は true。それ以外の場合は false。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シングルトン WMI クラスは、1つのインスタンスだけにすることができます。 WMI クラスの1つのインスタンスのみが作成されるようにロジックをコーディングすることもできますが、このパラメーター属性を使用すると、タスクを簡単かつ一貫したものにすることができます。  
  
 シングルトン WMI クラスを使用する場合、クライアントアプリケーションは特殊な構文を使用する必要があります。 詳細については、MSDN オンラインライブラリの「 [http://www.msdn.com](https://www.msdn.com/)」の「インスタンスオブジェクトパスの記述」を参照してください。  
  
   
  
## Examples  
 次のコードスニペットは、シングルトンパラメーターを使用して、 C#クラスがシングルトン WMI クラスに対応していることを示す方法を示しています。  
  
```  
[ManagementEntity(Singleton=true)]  
public class SingletonSample  
```  
  
 シングルトンクラスを実装するプロバイダーの完全な作業例については、「[方法: 基本的な分離プロバイダーを作成](https://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300)する」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
