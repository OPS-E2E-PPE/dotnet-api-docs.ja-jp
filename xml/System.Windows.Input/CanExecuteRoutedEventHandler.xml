<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c23ce5e4e5f8cabe9dbfcc860cb524d68d330f4" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82497555" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="d3bf0-101">ハンドラーを起動しているコマンドの対象。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-101">The command target that is invoking the handler.</span></span></param>
    <param name="e"><span data-ttu-id="d3bf0-102">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-102">The event data.</span></span></param>
    <summary><span data-ttu-id="d3bf0-103"><see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> イベントを処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3bf0-104"><xref:System.Windows.Input.CanExecuteRoutedEventHandler> は、イベントソースに関連付けられているコマンドをコマンドターゲットで実行できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="d3bf0-105">コマンドにターゲットを指定するコマンドソースがある場合は、`sender`を使用してターゲット情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="d3bf0-106"><xref:System.Windows.Input.ICommandSource.CommandTarget%2A> が設定されていない場合、キーボードフォーカスを持つ要素はターゲットになり、`sender`を通じて取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="d3bf0-107">コマンドがターゲットで実行できると判断された場合は、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> プロパティを `true`に設定する必要があります。それ以外の場合は、`false`に設定します。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="d3bf0-108">コマンド、ソース、およびターゲットを決定するためにイベントデータに依存する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="d3bf0-109">ハンドラーの使用を既知のコマンド呼び出しに限定することができますが、これは、コマンドの構造がコマンドルーティングに大きく依存しており、イベントルート内の連続する潜在的なターゲットで同じコマンドを実行する場合には実行が困難です。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3bf0-110">次の例は、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> を `true`に設定する <xref:System.Windows.Input.CanExecuteRoutedEventHandler> を示しています。</span><span class="sxs-lookup"><span data-stu-id="d3bf0-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>
