<Type Name="ManipulationStartingEventArgs" FullName="System.Windows.Input.ManipulationStartingEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df332edae31d60deb3cfcd4b95c5c87701f2562a" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82496515" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManipulationStartingEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationStartingEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationStartingEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationStartingEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationStartingEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type ManipulationStartingEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="be02d-101"><see cref="E:System.Windows.UIElement.ManipulationStarting" /> イベントのデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="be02d-101">Provides data for the <see cref="E:System.Windows.UIElement.ManipulationStarting" />, event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-102"><xref:System.Windows.Input.ManipulationStartingEventArgs> を使用すると、操作の動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="be02d-102">The <xref:System.Windows.Input.ManipulationStartingEventArgs> enable you to specify the behavior of a manipulation.</span></span>  <span data-ttu-id="be02d-103"><xref:System.Windows.Input.ManipulationStartingEventArgs> を使用して、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="be02d-103">Use the <xref:System.Windows.Input.ManipulationStartingEventArgs> to do the following:</span></span>  
  
-   <span data-ttu-id="be02d-104"><xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> プロパティを設定して、要素を基準とした相対的な位置を指定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-104">Specify that the position should be relative to an element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="be02d-105"><xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> プロパティを設定して、単一指操作を有効にするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-105">Specify whether single-finger manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="be02d-106"><xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> プロパティを <xref:System.Windows.Input.ManipulationModes> 列挙体に設定して、有効にする操作の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-106">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="be02d-107"><xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> プロパティを設定して、1本の指による回転の中心を指定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-107">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="be02d-108">操作をキャンセルするには、[<xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType>] プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-108">Cancel the manipulation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> property to `true`.</span></span>  
  
 <span data-ttu-id="be02d-109">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-109">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="be02d-110">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-110">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; bool" Usage="manipulationStartingEventArgs.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be02d-111">操作を取り消し、タッチをマウス イベントに昇格させます。</span><span class="sxs-lookup"><span data-stu-id="be02d-111">Cancels the manipulation and promotes touch to mouse events.</span></span></summary>
        <returns><span data-ttu-id="be02d-112">タッチがマウス イベントに正常に昇格された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="be02d-112"><see langword="true" /> if touch was successfully promoted to mouse events, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-113">メソッドが成功した場合、既定の <xref:System.Windows.Input.TouchDevice> は、前のタッチダウンイベントをマウスダウンイベントとして送信し、今後の操作イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="be02d-113">If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch down events as mouse down events and future manipulation events do not occur.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="manipulationStartingEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleTouchEnabled">
      <MemberSignature Language="C#" Value="public bool IsSingleTouchEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleTouchEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSingleTouchEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSingleTouchEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleTouchEnabled : bool with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be02d-114">1 本の指で操作を開始できるかどうかを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-114">Gets or sets whether one finger can start a manipulation.</span></span></summary>
        <value><span data-ttu-id="be02d-115">1 本の指で操作を開始できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="be02d-115"><see langword="true" /> one finger can start a manipulation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="be02d-116">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="be02d-116">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-117">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-117">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="be02d-118">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-118">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationContainer : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be02d-119">すべての操作イベントおよび計算の基準となるコンテナーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-119">Gets or sets the container that all manipulation events and calculations are relative to.</span></span></summary>
        <value><span data-ttu-id="be02d-120">すべての操作イベントおよび計算の基準となるコンテナー。</span><span class="sxs-lookup"><span data-stu-id="be02d-120">The container that all manipulation events and calculations are relative to.</span></span> <span data-ttu-id="be02d-121">既定値は、イベントが発生した要素です。</span><span class="sxs-lookup"><span data-stu-id="be02d-121">The default is the element on which the event occurred.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-122"><xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> プロパティを設定することによって、別の要素に対して相対的な位置を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="be02d-122">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="be02d-123">たとえば、操作イベントを受け取る要素の親に対して相対的に操作の位置を設定できます。</span><span class="sxs-lookup"><span data-stu-id="be02d-123">For example, you can make the manipulation positions relative to the parent of the element that receives the manipulation events.</span></span> <span data-ttu-id="be02d-124"><xref:System.Windows.UIElement.ManipulationStarting> イベントハンドラーは、<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>を設定できる唯一の場所です。</span><span class="sxs-lookup"><span data-stu-id="be02d-124">The <xref:System.Windows.UIElement.ManipulationStarting> event handler is the only place in which you can set the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>.</span></span>  
  
 <span data-ttu-id="be02d-125">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-125">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="be02d-126">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-126">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Manipulators : seq&lt;System.Windows.Input.IManipulator&gt;" Usage="System.Windows.Input.ManipulationStartingEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be02d-127">操作用のタッチ接触点を表すオブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="be02d-127">Gets a collection of objects that represents the touch contacts for the manipulation.</span></span></summary>
        <value><span data-ttu-id="be02d-128">操作用のタッチ接触点を表すオブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="be02d-128">A collection of objects that represents the touch contacts for the manipulation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationModes Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ManipulationModes Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As ManipulationModes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationModes Mode { System::Windows::Input::ManipulationModes get(); void set(System::Windows::Input::ManipulationModes value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Input.ManipulationModes with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationModes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be02d-129">使用可能な操作の種類を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-129">Gets or sets which types of manipulations are possible.</span></span></summary>
        <value><span data-ttu-id="be02d-130">列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="be02d-130">One of the enumeration values.</span></span> <span data-ttu-id="be02d-131">既定値は、<see cref="F:System.Windows.Input.ManipulationModes.All" /> です。</span><span class="sxs-lookup"><span data-stu-id="be02d-131">The default is <see cref="F:System.Windows.Input.ManipulationModes.All" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-132">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-132">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="be02d-133">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-133">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="be02d-134">プロパティが <see cref="T:System.Windows.Input.ManipulationModes" /> 列挙値の 1 つまたは複数の値以外に設定されています。</span><span class="sxs-lookup"><span data-stu-id="be02d-134">The property is set to a value other than one or more of the <see cref="T:System.Windows.Input.ManipulationModes" /> enumerations value</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Pivot">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationPivot Pivot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationPivot Pivot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Pivot" />
      <MemberSignature Language="VB.NET" Value="Public Property Pivot As ManipulationPivot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationPivot ^ Pivot { System::Windows::Input::ManipulationPivot ^ get(); void set(System::Windows::Input::ManipulationPivot ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pivot : System.Windows.Input.ManipulationPivot with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.Pivot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationPivot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be02d-135">シングルポイント操作のピボットを記述するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-135">Gets or sets an object that describes the pivot for a single-point manipulation.</span></span></summary>
        <value><span data-ttu-id="be02d-136">シングルポイント操作のピボットを記述するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="be02d-136">An object that describes the pivot for a single-point manipulation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-137"><xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> プロパティを設定すると、操作中にユーザーが1本の指を使用したときに、操作に回転データが格納されます。</span><span class="sxs-lookup"><span data-stu-id="be02d-137">When you set the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> property, the manipulation will contain rotation data when the user uses one finger during a manipulation.</span></span>  <span data-ttu-id="be02d-138">これは、1本の指を使用して、テーブル上の紙などのオブジェクトを回転できる実際の状況をシミュレートするためのものです。</span><span class="sxs-lookup"><span data-stu-id="be02d-138">This is to simulate real-world situations where you can use one finger to rotate an object, such as a piece of paper on a table.</span></span>  <span data-ttu-id="be02d-139"><xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> が `null`場合は、2本の指を使用して回転させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="be02d-139">If the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> is `null`, the user must use two fingers to cause rotation.</span></span>  
  
 <span data-ttu-id="be02d-140">操作の詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-140">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="be02d-141">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-141">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be02d-142">次の例では、<xref:System.Windows.UIElement.ManipulationStarting> イベントのイベントハンドラーを示し、<xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="be02d-142">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="be02d-143">この例をテストするには、「[チュートリアル: 初めてのタッチアプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)」の手順に従って、手順 4. のコードをこのコードで置き換えます。</span><span class="sxs-lookup"><span data-stu-id="be02d-143">To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) and replace the code in step 4 with this code.</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationPivot](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#manipulationpivot)]
 [!code-vb[BasicManipulation#ManipulationPivot](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#manipulationpivot)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationParameter">
      <MemberSignature Language="C#" Value="public void SetManipulationParameter (System.Windows.Input.Manipulations.ManipulationParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetManipulationParameter(class System.Windows.Input.Manipulations.ManipulationParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.SetManipulationParameter(System.Windows.Input.Manipulations.ManipulationParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetManipulationParameter (parameter As ManipulationParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetManipulationParameter(System::Windows::Input::Manipulations::ManipulationParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.SetManipulationParameter : System.Windows.Input.Manipulations.ManipulationParameters2D -&gt; unit" Usage="manipulationStartingEventArgs.SetManipulationParameter parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.ManipulationParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="be02d-144">追加するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="be02d-144">The parameter to add.</span></span></param>
        <summary><span data-ttu-id="be02d-145">指定された要素の現在の操作にパラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="be02d-145">Adds parameters to the current manipulation of the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be02d-146">通常は、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="be02d-146">You typically do not need to call this method.</span></span>  <span data-ttu-id="be02d-147">代わりに、<xref:System.Windows.Input.ManipulationStartingEventArgs> のプロパティを使用してください。</span><span class="sxs-lookup"><span data-stu-id="be02d-147">Use the properties on the <xref:System.Windows.Input.ManipulationStartingEventArgs> instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
