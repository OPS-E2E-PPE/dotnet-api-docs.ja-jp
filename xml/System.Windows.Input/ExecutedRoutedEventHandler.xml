<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9357176d2fdcfba537bb84fb4230c8a1f5306cf2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83903175" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="45681-101">イベント ハンドラーがアタッチされているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="45681-101">The object where the event handler is attached.</span></span></param>
    <param name="e"><span data-ttu-id="45681-102">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="45681-102">The event data.</span></span></param>
    <summary><span data-ttu-id="45681-103"><see cref="E:System.Windows.Input.CommandBinding.Executed" /> と <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> のルーティング イベントだけでなく、関連する添付イベントも処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="45681-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45681-104">このデリゲートには、<xref:System.Windows.Input.RoutedCommand>の実装ロジックが含まれています。</span><span class="sxs-lookup"><span data-stu-id="45681-104">This delegate contains the implementation logic for a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="45681-105">コマンドから実装ロジックを分離すると、さまざまなソースと型からコマンドを呼び出すことができ、コマンドロジックを一元化できます。</span><span class="sxs-lookup"><span data-stu-id="45681-105">Separating the implementation logic from the command allows the command to be invoked from different sources and types, and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="45681-106">このデリゲートは、<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> および <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>にも使用されます。これは、コマンドのインフラストラクチャの多くを実装する <xref:System.Windows.Input.CommandManager> クラスの添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="45681-106">This delegate is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="45681-107">ただし、ほとんどの実用的なハンドラーは、<xref:System.Windows.Input.CommandManager> レベルで動作するのではなく、特定の <xref:System.Windows.Input.CommandBinding>からの <xref:System.Windows.Input.CommandBinding.Executed> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="45681-107">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="45681-108"><xref:System.Windows.Input.ExecutedRoutedEventArgs>内では、実行されたコマンドの結果として発生するルーティングイベントのイベントハンドラーを記述するときに、通常、次のプロパティが対象となります。</span><span class="sxs-lookup"><span data-stu-id="45681-108">Within <xref:System.Windows.Input.ExecutedRoutedEventArgs>, the following properties are generally of interest when you write an event handler for a routed event that results from an executed command:</span></span>  
  
-   <span data-ttu-id="45681-109"><xref:System.Windows.RoutedEventArgs.Source%2A> は、コマンドが実行された対象を報告します。</span><span class="sxs-lookup"><span data-stu-id="45681-109"><xref:System.Windows.RoutedEventArgs.Source%2A> reports the target where the command was executed.</span></span> <span data-ttu-id="45681-110">コマンドが実行された後は、ルーティングイベントを発生させたオブジェクトとして、ルーティングイベントの用語で <xref:System.Windows.RoutedEventArgs.Source%2A> の方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="45681-110">Once the command is executed, you can also think of the <xref:System.Windows.RoutedEventArgs.Source%2A> more generally in routed event terms, as the object that raised a routed event.</span></span>  
  
-   <span data-ttu-id="45681-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> は、実行されたコマンドを報告します。</span><span class="sxs-lookup"><span data-stu-id="45681-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> reports the command that executed.</span></span> <span data-ttu-id="45681-112">このプロパティは、コマンドバインドを使用する場合や、複数のコマンドを処理する可能性があるハンドラーを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="45681-112">This property is useful if you use command bindings and if you write handlers that potentially handle multiple commands.</span></span>  
  
-   <span data-ttu-id="45681-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> は、実行中のコマンドによって渡されたコマンド固有のパラメーターを報告します。</span><span class="sxs-lookup"><span data-stu-id="45681-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> reports any command-specific parameters that were passed by the executing command.</span></span> <span data-ttu-id="45681-114">すべてのコマンドがコマンド固有のパラメーターを使用したり、使用したりするわけではありません。</span><span class="sxs-lookup"><span data-stu-id="45681-114">Not all commands use or expect command-specific parameters.</span></span>  
  
-   <span data-ttu-id="45681-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> は、実行されたコマンドからのルーティングイベントが、ルート上の別の要素によって既に処理されているかどうかを報告します。</span><span class="sxs-lookup"><span data-stu-id="45681-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> reports whether the routed event that resulted from the executed command was already handled by a different element along the route.</span></span> <span data-ttu-id="45681-116">ルーティングイベントハンドラーの場合、<xref:System.Windows.RoutedEventArgs.Handled%2A> を `true`に設定するためにイベントを処理するときに意味のある作業を行うハンドラーを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="45681-116">For routed event handlers, it is a recommended practice to have handlers that do meaningful work when handling the event to set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true`.</span></span> <span data-ttu-id="45681-117">これにより、イベントの一般的なハンドラーが、ルートに沿ってもう一度イベントを処理するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="45681-117">This prevents typical handlers for the event from handling the event again further along the route.</span></span> <span data-ttu-id="45681-118">ルーティングイベントの処理の詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="45681-118">For more information on handling routed events, see [Marking Routed Events as Handled, and Class Handling](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling).</span></span>  
  
 <span data-ttu-id="45681-119">このデリゲートは、<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> および <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>のハンドラーも表します。これは、コマンドのインフラストラクチャの多くを実装する <xref:System.Windows.Input.CommandManager> クラスの添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="45681-119">This delegate also represents handlers for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="45681-120">ただし、ほとんどの実用的なハンドラーは、<xref:System.Windows.Input.CommandManager> レベルで動作するのではなく、特定の <xref:System.Windows.Input.CommandBinding>からの <xref:System.Windows.Input.CommandBinding.Executed> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="45681-120">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="45681-121">コマンド実行の詳細については、「[コマンド実行の概要](/dotnet/framework/wpf/advanced/commanding-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="45681-121">For more information on commanding, see [Commanding Overview](/dotnet/framework/wpf/advanced/commanding-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45681-122">この例では、コマンドの実行時にターゲットにビジュアルプロパティを設定する <xref:System.Windows.Input.ExecutedRoutedEventHandler> を作成します。</span><span class="sxs-lookup"><span data-stu-id="45681-122">This example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that sets a visual property on the target when the command is executed.</span></span> <span data-ttu-id="45681-123">この例には、同じコマンドの <xref:System.Windows.Input.CanExecuteRoutedEventHandler> も含まれています。</span><span class="sxs-lookup"><span data-stu-id="45681-123">The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.</span></span>  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>
