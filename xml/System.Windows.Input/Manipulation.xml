<Type Name="Manipulation" FullName="System.Windows.Input.Manipulation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53bdc76714790933901d15debcfc0d5b715a3fdb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968985" /></Metadata><TypeSignature Language="C#" Value="public static class Manipulation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Manipulation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulation" />
  <TypeSignature Language="VB.NET" Value="Public Class Manipulation" />
  <TypeSignature Language="C++ CLI" Value="public ref class Manipulation abstract sealed" />
  <TypeSignature Language="F#" Value="type Manipulation = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b9e33-101">操作に関する情報を取得および更新するメソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b9e33-101">Contains methods to get and update information about a manipulation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9e33-102">操作は、オブジェクトに適用される物理的なアクションとしてタッチが解釈されると発生します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-102">A manipulation occurs when touch is interpreted as a physical action that is applied to an object.</span></span> <span data-ttu-id="b9e33-103">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] では、操作イベントによって、平行移動、拡大縮小、または回転の各操作として入力が解釈されます。</span><span class="sxs-lookup"><span data-stu-id="b9e33-103">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], manipulation events interpret input as a translation, expansion, or rotation manipulation.</span></span> <span data-ttu-id="b9e33-104">通常は、<xref:System.Windows.UIElement>で定義されている操作イベントを使用して操作を行います。</span><span class="sxs-lookup"><span data-stu-id="b9e33-104">You usually interact with manipulations through the manipulation events that are defined on the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="b9e33-105">ただし、<xref:System.Windows.Input.Manipulation> クラスは、操作を操作するために使用できる静的メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-105">However, the <xref:System.Windows.Input.Manipulation> class defines static methods that you can use to interact with manipulations.</span></span>  
  
 <span data-ttu-id="b9e33-106">操作の詳細については、「[入力の概要](/dotnet/framework/wpf/advanced/input-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b9e33-106">For more information about manipulations, see [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span> <span data-ttu-id="b9e33-107">操作に応答するアプリケーションの例については、「[チュートリアル: 初めてのタッチアプリケーションの作成](/dotnet/framework/wpf/advanced/walkthrough-creating-your-first-touch-application)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b9e33-107">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](/dotnet/framework/wpf/advanced/walkthrough-creating-your-first-touch-application).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddManipulator">
      <MemberSignature Language="C#" Value="public static void AddManipulator (System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddManipulator(class System.Windows.UIElement element, class System.Windows.Input.IManipulator manipulator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddManipulator (element As UIElement, manipulator As IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddManipulator(System::Windows::UIElement ^ element, System::Windows::Input::IManipulator ^ manipulator);" />
      <MemberSignature Language="F#" Value="static member AddManipulator : System.Windows.UIElement * System.Windows.Input.IManipulator -&gt; unit" Usage="System.Windows.Input.Manipulation.AddManipulator (element, manipulator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="manipulator" Type="System.Windows.Input.IManipulator" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-108">マニピュレーターを関連付ける要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-108">The element to associate the manipulator with.</span></span></param>
        <param name="manipulator"><span data-ttu-id="b9e33-109">操作を作成するか、または操作に追加する、入力の位置を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b9e33-109">The object that provides the position of the input that creates or is added to a manipulation.</span></span></param>
        <summary><span data-ttu-id="b9e33-110"><see cref="T:System.Windows.Input.IManipulator" /> オブジェクトを指定した要素に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="b9e33-110">Associates a <see cref="T:System.Windows.Input.IManipulator" /> object with the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9e33-111">`element` 既に操作が関連付けられている場合は、既存の操作に `manipulator` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="b9e33-111">If `element` already has a manipulation associated with it, `manipulator` is added to the existing manipulation.</span></span> <span data-ttu-id="b9e33-112">それ以外の場合は、新しい操作が作成されます。</span><span class="sxs-lookup"><span data-stu-id="b9e33-112">Otherwise, a new manipulation is created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b9e33-113"><paramref name="element" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b9e33-113"><paramref name="element" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b9e33-114">または</span><span class="sxs-lookup"><span data-stu-id="b9e33-114">-or-</span></span> 
 <span data-ttu-id="b9e33-115"><paramref name="manipulator" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b9e33-115"><paramref name="manipulator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b9e33-116">要素の <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> プロパティが <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b9e33-116">The <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> property on element is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompleteManipulation">
      <MemberSignature Language="C#" Value="public static void CompleteManipulation (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompleteManipulation(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.CompleteManipulation(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CompleteManipulation (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompleteManipulation(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member CompleteManipulation : System.Windows.UIElement -&gt; unit" Usage="System.Windows.Input.Manipulation.CompleteManipulation element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-117">操作を完了する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-117">The element on which to complete manipulation.</span></span></param>
        <summary><span data-ttu-id="b9e33-118">指定された要素でアクティブな操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-118">Completes the active manipulation on the specified element.</span></span> <span data-ttu-id="b9e33-119">呼び出されると、操作の入力は追跡されなくなり、指定された要素で慣性による処理が停止します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-119">When called, manipulation input is no longer tracked and inertia on the specified element stops.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9e33-120"><xref:System.Windows.Input.Manipulation.CompleteManipulation%2A> メソッドが呼び出されると、<xref:System.Windows.UIElement.ManipulationCompleted> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-120">When the <xref:System.Windows.Input.Manipulation.CompleteManipulation%2A> method is called, the <xref:System.Windows.UIElement.ManipulationCompleted> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManipulationContainer">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement GetManipulationContainer (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.IInputElement GetManipulationContainer(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.GetManipulationContainer(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManipulationContainer (element As UIElement) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::IInputElement ^ GetManipulationContainer(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member GetManipulationContainer : System.Windows.UIElement -&gt; System.Windows.IInputElement" Usage="System.Windows.Input.Manipulation.GetManipulationContainer element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-121">アクティブな操作が存在する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-121">The element on which there is an active manipulation.</span></span></param>
        <summary><span data-ttu-id="b9e33-122">操作の座標を定義するコンテナーを取得します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-122">Gets the container that defines the coordinates for the manipulation.</span></span></summary>
        <returns><span data-ttu-id="b9e33-123">座標空間を定義するコンテナー。</span><span class="sxs-lookup"><span data-stu-id="b9e33-123">The container that defines the coordinate space.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManipulationMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ManipulationModes GetManipulationMode (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Input.ManipulationModes GetManipulationMode(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.GetManipulationMode(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManipulationMode (element As UIElement) As ManipulationModes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::ManipulationModes GetManipulationMode(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member GetManipulationMode : System.Windows.UIElement -&gt; System.Windows.Input.ManipulationModes" Usage="System.Windows.Input.Manipulation.GetManipulationMode element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationModes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-124">操作モードを取得する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-124">The element for which to get the manipulation mode.</span></span></param>
        <summary><span data-ttu-id="b9e33-125">指定された要素の <see cref="T:System.Windows.Input.ManipulationModes" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-125">Gets the <see cref="T:System.Windows.Input.ManipulationModes" /> for the specified element.</span></span></summary>
        <returns><span data-ttu-id="b9e33-126">列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="b9e33-126">One of the enumeration values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManipulationPivot">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ManipulationPivot GetManipulationPivot (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Input.ManipulationPivot GetManipulationPivot(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.GetManipulationPivot(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManipulationPivot (element As UIElement) As ManipulationPivot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::ManipulationPivot ^ GetManipulationPivot(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member GetManipulationPivot : System.Windows.UIElement -&gt; System.Windows.Input.ManipulationPivot" Usage="System.Windows.Input.Manipulation.GetManipulationPivot element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationPivot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-127">操作が存在する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-127">The element on which there is a manipulation.</span></span></param>
        <summary><span data-ttu-id="b9e33-128">1 つのユーザー入力ポイントで回転がどのように行われるかを指定するオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-128">Returns an object that describes how a rotation occurs with one point of user input.</span></span></summary>
        <returns><span data-ttu-id="b9e33-129">1 つのユーザー入力ポイントで回転がどのように行われるかを指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b9e33-129">An object that describes how a rotation occurs with one point of user input.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationActive">
      <MemberSignature Language="C#" Value="public static bool IsManipulationActive (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsManipulationActive(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.IsManipulationActive(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsManipulationActive (element As UIElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsManipulationActive(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member IsManipulationActive : System.Windows.UIElement -&gt; bool" Usage="System.Windows.Input.Manipulation.IsManipulationActive element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-130">チェックする要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-130">The element to check.</span></span></param>
        <summary><span data-ttu-id="b9e33-131">操作が指定した要素に関連付けられているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-131">Gets a value that indicates whether a manipulation is associated with the specified element.</span></span></summary>
        <returns><span data-ttu-id="b9e33-132">操作が指定された要素に関連付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b9e33-132"><see langword="true" /> if a manipulation is associated with the specified element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveManipulator">
      <MemberSignature Language="C#" Value="public static void RemoveManipulator (System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveManipulator(class System.Windows.UIElement element, class System.Windows.Input.IManipulator manipulator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveManipulator (element As UIElement, manipulator As IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveManipulator(System::Windows::UIElement ^ element, System::Windows::Input::IManipulator ^ manipulator);" />
      <MemberSignature Language="F#" Value="static member RemoveManipulator : System.Windows.UIElement * System.Windows.Input.IManipulator -&gt; unit" Usage="System.Windows.Input.Manipulation.RemoveManipulator (element, manipulator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="manipulator" Type="System.Windows.Input.IManipulator" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-133">関連付けられたマニピュレーターを削除する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-133">The element to remove the associated manipulator from.</span></span></param>
        <param name="manipulator"><span data-ttu-id="b9e33-134">入力の位置を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b9e33-134">The object that provides the position of the input.</span></span></param>
        <summary><span data-ttu-id="b9e33-135">指定された <see cref="T:System.Windows.Input.IManipulator" /> オブジェクトと要素との間の関連付けを削除します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-135">Removes the association between the specified <see cref="T:System.Windows.Input.IManipulator" /> object and the element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationContainer">
      <MemberSignature Language="C#" Value="public static void SetManipulationContainer (System.Windows.UIElement element, System.Windows.IInputElement container);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationContainer(class System.Windows.UIElement element, class System.Windows.IInputElement container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationContainer (element As UIElement, container As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationContainer(System::Windows::UIElement ^ element, System::Windows::IInputElement ^ container);" />
      <MemberSignature Language="F#" Value="static member SetManipulationContainer : System.Windows.UIElement * System.Windows.IInputElement -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationContainer (element, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="container" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-136">操作が関連付けられた要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-136">The element with which the manipulation is associated.</span></span></param>
        <param name="container"><span data-ttu-id="b9e33-137">座標空間を定義するコンテナー。</span><span class="sxs-lookup"><span data-stu-id="b9e33-137">The container that defines the coordinate space.</span></span></param>
        <summary><span data-ttu-id="b9e33-138">指定された要素の操作の座標を定義する要素を設定します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-138">Sets the element that defines the coordinates for the manipulation of the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationMode">
      <MemberSignature Language="C#" Value="public static void SetManipulationMode (System.Windows.UIElement element, System.Windows.Input.ManipulationModes mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationMode(class System.Windows.UIElement element, valuetype System.Windows.Input.ManipulationModes mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationMode (element As UIElement, mode As ManipulationModes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationMode(System::Windows::UIElement ^ element, System::Windows::Input::ManipulationModes mode);" />
      <MemberSignature Language="F#" Value="static member SetManipulationMode : System.Windows.UIElement * System.Windows.Input.ManipulationModes -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationMode (element, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="mode" Type="System.Windows.Input.ManipulationModes" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-139">操作モードを設定する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-139">The element on which to set the manipulation mode.</span></span></param>
        <param name="mode"><span data-ttu-id="b9e33-140">新しい操作モード。</span><span class="sxs-lookup"><span data-stu-id="b9e33-140">The new manipulation mode.</span></span></param>
        <summary><span data-ttu-id="b9e33-141">指定された要素の操作モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-141">Sets the mode of manipulation for the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationParameter">
      <MemberSignature Language="C#" Value="public static void SetManipulationParameter (System.Windows.UIElement element, System.Windows.Input.Manipulations.ManipulationParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationParameter(class System.Windows.UIElement element, class System.Windows.Input.Manipulations.ManipulationParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationParameter (element As UIElement, parameter As ManipulationParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationParameter(System::Windows::UIElement ^ element, System::Windows::Input::Manipulations::ManipulationParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="static member SetManipulationParameter : System.Windows.UIElement * System.Windows.Input.Manipulations.ManipulationParameters2D -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationParameter (element, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.ManipulationParameters2D" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-142">パラメーターが追加された操作を持つ要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-142">The element that has the manipulation that the parameter is added to.</span></span></param>
        <param name="parameter"><span data-ttu-id="b9e33-143">追加するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="b9e33-143">The parameter to add.</span></span></param>
        <summary><span data-ttu-id="b9e33-144">指定された要素の操作にパラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-144">Adds parameters to the manipulation of the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationPivot">
      <MemberSignature Language="C#" Value="public static void SetManipulationPivot (System.Windows.UIElement element, System.Windows.Input.ManipulationPivot pivot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetManipulationPivot(class System.Windows.UIElement element, class System.Windows.Input.ManipulationPivot pivot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetManipulationPivot (element As UIElement, pivot As ManipulationPivot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetManipulationPivot(System::Windows::UIElement ^ element, System::Windows::Input::ManipulationPivot ^ pivot);" />
      <MemberSignature Language="F#" Value="static member SetManipulationPivot : System.Windows.UIElement * System.Windows.Input.ManipulationPivot -&gt; unit" Usage="System.Windows.Input.Manipulation.SetManipulationPivot (element, pivot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="pivot" Type="System.Windows.Input.ManipulationPivot" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-145">アクティブな操作を持つ要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-145">The element that has an active manipulation.</span></span></param>
        <param name="pivot"><span data-ttu-id="b9e33-146">ピボットを記述するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b9e33-146">An object that describes the pivot.</span></span></param>
        <summary><span data-ttu-id="b9e33-147">指定された要素の単一ポイント操作のピボットを設定します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-147">Sets the pivot of the single-point manipulation of the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartInertia">
      <MemberSignature Language="C#" Value="public static void StartInertia (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartInertia(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulation.StartInertia(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartInertia (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartInertia(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="static member StartInertia : System.Windows.UIElement -&gt; unit" Usage="System.Windows.Input.Manipulation.StartInertia element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b9e33-148">慣性による処理を開始する要素。</span><span class="sxs-lookup"><span data-stu-id="b9e33-148">The element on which to begin inertia.</span></span></param>
        <summary><span data-ttu-id="b9e33-149">指定された要素で、操作を停止して慣性による処理を開始します。</span><span class="sxs-lookup"><span data-stu-id="b9e33-149">Stops the manipulation and begins inertia on the specified element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
