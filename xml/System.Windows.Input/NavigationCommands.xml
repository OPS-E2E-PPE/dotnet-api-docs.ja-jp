<Type Name="NavigationCommands" FullName="System.Windows.Input.NavigationCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa419c833967316ff0ad7d35bc4f4cbfbe4fc078" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83922719" /></Metadata><TypeSignature Language="C#" Value="public static class NavigationCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NavigationCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.NavigationCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class NavigationCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class NavigationCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type NavigationCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>一連の標準的なナビゲーション関連コマンドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.NavigationCommands> クラスは、ブラウザーやドキュメントのナビゲーションなど、ナビゲーション関連のコマンドの標準セットを公開します。  
  
 コマンドとコマンドの詳細については、「コマンドの[概要](/dotnet/framework/wpf/advanced/commanding-overview)」を参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Documents.EditingCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="BrowseBack">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseBack" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseBack" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BrowseBack As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ BrowseBack { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BrowseBack : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.BrowseBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Browse Back" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> Alt + ← 
 </description></item><item><term> UI テキスト 
 </term><description> 戻る 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、履歴内の前のページに戻るための目的を示します。  
  
 <xref:System.Windows.Controls.Frame> と <xref:System.Windows.Navigation.NavigationWindow> は <xref:System.Windows.Input.NavigationCommands.BrowseBack%2A>に応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_BrowseBack"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.BrowseBack"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.BrowseBack%2A> を <xref:System.Windows.Controls.Frame>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.Frame> は、バックスタックにジャーナルエントリがある場合に <xref:System.Windows.Controls.Frame> をさかのぼって <xref:System.Windows.Input.NavigationCommands.BrowseBack%2A> コマンドに応答する実装を提供します。  
  
 [!code-xaml[NavigationCommandsSnippets#BrowseBackMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#BrowseBackMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#BrowseBackMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#BrowseBackMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="BrowseForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BrowseForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ BrowseForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BrowseForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.BrowseForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Browse Forward" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> Alt + → 
 </description></item><item><term> UI テキスト 
 </term><description> 転送 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、履歴内の次のページに進むことを目的としています。  
  
 <xref:System.Windows.Controls.Frame> と <xref:System.Windows.Navigation.NavigationWindow> は <xref:System.Windows.Input.NavigationCommands.BrowseForward%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_BrowseForward"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.BrowseForward"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.BrowseForward%2A> を <xref:System.Windows.Controls.Frame>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.Frame> は、転送スタックにジャーナルエントリがある場合、<xref:System.Windows.Controls.Frame> を前方に移動して <xref:System.Windows.Input.NavigationCommands.BrowseForward%2A> コマンドに応答する実装を提供します。  
  
 [!code-xaml[NavigationCommandsSnippets#BrowseForwardMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#BrowseForwardMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#BrowseForwardMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#BrowseForwardMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="BrowseHome">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseHome { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseHome" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseHome" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BrowseHome As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ BrowseHome { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BrowseHome : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.BrowseHome" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Browse Home" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> Alt + Home 
 </description></item><item><term> UI テキスト 
 </term><description> ホーム 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、[ホーム] に移動することを示します。  
  
 特定の [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスの <xref:System.Windows.Input.NavigationCommands.BrowseHome%2A> コマンドに応答するための実装はありません。 そのため、この例に示すように、適切な実装を指定する必要があります。  
  
<a name="xamlAttributeUsage_BrowseHome"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.BrowseHome"/>  
```  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.Frame>と共に <xref:System.Windows.Input.NavigationCommands.BrowseHome%2A> コマンドに応答するコードを実装する方法を示しています。  
  
 [!code-xaml[NavigationCommandsSnippets#BrowseHomeMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup1)]  
[!code-xaml[NavigationCommandsSnippets#BrowseHomeMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup2)]  
[!code-xaml[NavigationCommandsSnippets#BrowseHomeMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup3)]  
[!code-xaml[NavigationCommandsSnippets#BrowseHomeMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup4)]  
  
 [!code-csharp[NavigationCommandsSnippets#BrowseHomeCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml.cs#browsehomecodebehind)]
 [!code-vb[NavigationCommandsSnippets#BrowseHomeCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationCommandsSnippets/visualbasic/browsehome.xaml.vb#browsehomecodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="BrowseStop">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseStop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseStop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BrowseStop As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ BrowseStop { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BrowseStop : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.BrowseStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Browse Stop" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> Alt + Esc 
 </description></item><item><term> UI テキスト 
 </term><description> Stop 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、ブラウザーの読み込みを停止することを示します。  
  
 <xref:System.Windows.Controls.Frame> と <xref:System.Windows.Navigation.NavigationWindow> は <xref:System.Windows.Input.NavigationCommands.BrowseStop%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_BrowseStop"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.BrowseStop"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.BrowseStop%2A> を <xref:System.Windows.Controls.Frame>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.Frame> は、現在の <xref:System.Windows.Controls.Frame> ナビゲーションを停止することによって <xref:System.Windows.Input.NavigationCommands.BrowseStop%2A> コマンドに応答する実装を提供します。  
  
 [!code-xaml[NavigationCommandsSnippets#BrowseStopMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#BrowseStopMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#BrowseStopMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#BrowseStopMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseZoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseZoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseZoom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.DecreaseZoom" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseZoom As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseZoom { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseZoom : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.DecreaseZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Decrease Zoom" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> ズームの倍率を下げる 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、ズームを減らすことを目的としています。  
  
 <xref:System.Windows.Controls.DocumentViewer>、<xref:System.Windows.Controls.FlowDocumentReader>、<xref:System.Windows.Controls.FlowDocumentScrollViewer>、および <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Input.NavigationCommands.DecreaseZoom%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_DecreaseZoom"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.DecreaseZoom"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.DecreaseZoom%2A> を <xref:System.Windows.Controls.FlowDocumentPageViewer>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.FlowDocumentPageViewer> は、ズーム比率を下げることで <xref:System.Windows.Input.NavigationCommands.DecreaseZoom%2A> コマンドに応答する実装を提供します。  
  
 [!code-xaml[NavigationCommandsSnippets#DecreaseZoomMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup1)]  
[!code-xaml[NavigationCommandsSnippets#DecreaseZoomMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup2)]  
[!code-xaml[NavigationCommandsSnippets#DecreaseZoomMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup3)]  
[!code-xaml[NavigationCommandsSnippets#DecreaseZoomMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup4)]  
[!code-xaml[NavigationCommandsSnippets#DecreaseZoomMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Favorites">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Favorites { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Favorites" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Favorites" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Favorites As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Favorites { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Favorites : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.Favorites" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Favorites" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> CTRL + I 
 </description></item><item><term> UI テキスト 
 </term><description> お気に入り 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、の管理とお気に入りへの移動の目的を示します。  
  
 特定の [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスの <xref:System.Windows.Input.NavigationCommands.Favorites%2A> コマンドに応答するための実装はありません。 そのため、この例に示すように、適切な実装を指定する必要があります。  
  
<a name="xamlAttributeUsage_Favorites"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.Favorites"/>  
```  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.Frame>と共に <xref:System.Windows.Input.NavigationCommands.Favorites%2A> コマンドに応答するコードを実装する方法を示しています。  
  
 [!code-xaml[NavigationCommandsSnippets#FavoritesMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#FavoritesMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#FavoritesMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#FavoritesMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup4)]  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="FirstPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand FirstPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand FirstPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.FirstPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FirstPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ FirstPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.FirstPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="First Page" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> [先頭ページ] 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、最初のページに進むことを目的としています。  
  
 <xref:System.Windows.Controls.DocumentViewer>、<xref:System.Windows.Controls.FlowDocumentReader>、<xref:System.Windows.Controls.FlowDocumentScrollViewer>、および <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Input.NavigationCommands.FirstPage%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_FirstPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.FirstPage"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.FirstPage%2A> を <xref:System.Windows.Controls.FlowDocumentPageViewer>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.FlowDocumentPageViewer> には、最初のページに移動して <xref:System.Windows.Input.NavigationCommands.FirstPage%2A> コマンドに応答する実装が用意されています。  
  
 [!code-xaml[NavigationCommandsSnippets#FirstPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup1)]  
[!code-xaml[NavigationCommandsSnippets#FirstPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup2)]  
[!code-xaml[NavigationCommandsSnippets#FirstPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup3)]  
[!code-xaml[NavigationCommandsSnippets#FirstPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup4)]  
[!code-xaml[NavigationCommandsSnippets#FirstPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="GoToPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand GoToPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand GoToPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.GoToPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GoToPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ GoToPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GoToPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.GoToPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Go To Page" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> ページへ移動 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、ズームを変更することを示します。  
  
 <xref:System.Windows.Controls.DocumentViewer> と <xref:System.Windows.Controls.FlowDocumentPageViewer> は <xref:System.Windows.Input.NavigationCommands.GoToPage%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_GoToPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.GoToPage"/>  
```  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.FlowDocumentPageViewer>と共に <xref:System.Windows.Input.NavigationCommands.GoToPage%2A> コマンドを使用する方法を示しています。 <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Controls.TextBox> コントロールのテキスト値によって指定されたページに移動することによって、<xref:System.Windows.Input.NavigationCommands.GoToPage%2A> コマンドに応答する実装を提供します。  
  
 [!code-xaml[NavigationCommandsSnippets#GoToPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup1)]  
[!code-xaml[NavigationCommandsSnippets#GoToPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup2)]  
[!code-xaml[NavigationCommandsSnippets#GoToPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup3)]  
[!code-xaml[NavigationCommandsSnippets#GoToPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup4)]  
[!code-xaml[NavigationCommandsSnippets#GoToPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseZoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseZoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseZoom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.IncreaseZoom" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseZoom As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseZoom { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseZoom : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.IncreaseZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Increase Zoom" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> ズームの倍率を上げる 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、ズームを拡大する目的を示します。  
  
 <xref:System.Windows.Controls.DocumentViewer>、<xref:System.Windows.Controls.FlowDocumentReader>、<xref:System.Windows.Controls.FlowDocumentScrollViewer>、および <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Input.NavigationCommands.IncreaseZoom%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_IncreaseZoom"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.IncreaseZoom"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.IncreaseZoom%2A> を <xref:System.Windows.Controls.FlowDocumentPageViewer>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.FlowDocumentPageViewer> は、ズーム比率を下げることで <xref:System.Windows.Input.NavigationCommands.IncreaseZoom%2A> コマンドに応答する実装を提供します。  
  
 [!code-xaml[NavigationCommandsSnippets#IncreaseZoomMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup1)]  
[!code-xaml[NavigationCommandsSnippets#IncreaseZoomMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup2)]  
[!code-xaml[NavigationCommandsSnippets#IncreaseZoomMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup3)]  
[!code-xaml[NavigationCommandsSnippets#IncreaseZoomMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup4)]  
[!code-xaml[NavigationCommandsSnippets#IncreaseZoomMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="LastPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand LastPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand LastPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.LastPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LastPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ LastPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LastPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.LastPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Last Page" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> [最終ページ] 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、最後のページに進むことを目的としています。  
  
 <xref:System.Windows.Controls.DocumentViewer>、<xref:System.Windows.Controls.FlowDocumentReader>、<xref:System.Windows.Controls.FlowDocumentScrollViewer>、および <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Input.NavigationCommands.LastPage%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_LastPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.LastPage"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.LastPage%2A> を <xref:System.Windows.Controls.FlowDocumentPageViewer>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.FlowDocumentPageViewer> には、最後のページに移動して <xref:System.Windows.Input.NavigationCommands.LastPage%2A> コマンドに応答する実装が用意されています。  
  
 [!code-xaml[NavigationCommandsSnippets#LastPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup1)]  
[!code-xaml[NavigationCommandsSnippets#LastPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup2)]  
[!code-xaml[NavigationCommandsSnippets#LastPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup3)]  
[!code-xaml[NavigationCommandsSnippets#LastPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup4)]  
[!code-xaml[NavigationCommandsSnippets#LastPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="NavigateJournal">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand NavigateJournal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand NavigateJournal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.NavigateJournal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NavigateJournal As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ NavigateJournal { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NavigateJournal : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.NavigateJournal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Navigate Journal" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> ジャーナルのナビゲーション 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、履歴内を移動することを示します。  
  
 <xref:System.Windows.Controls.Frame> と <xref:System.Windows.Navigation.NavigationWindow> は <xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_NavigateJournal"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.NavigateJournal"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> を <xref:System.Windows.Controls.Frame>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.Frame> は、<xref:System.Windows.Controls.Frame>の前方または後方スタックにある指定されたジャーナルエントリに移動して、<xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> コマンドに応答する実装を提供します。 履歴エントリは、<xref:System.Windows.Navigation.JournalEntryUnifiedViewConverter> によって最上位の `Navigate Journal` <xref:System.Windows.Controls.MenuItem>に提供されます。 各ジャーナルエントリは、<xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> コマンドを使用する子 <xref:System.Windows.Controls.MenuItem> にバインドされます。  
  
 [!code-xaml[NavigationCommandsSnippets#NavigateJournalMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#NavigateJournalMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#NavigateJournalMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#NavigateJournalMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="NextPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand NextPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand NextPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.NextPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NextPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ NextPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.NextPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Next Page" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> [次のページ] 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、次のページに進むことを目的としています。  
  
 <xref:System.Windows.Controls.DocumentViewer>、<xref:System.Windows.Controls.FlowDocumentReader>、<xref:System.Windows.Controls.FlowDocumentScrollViewer>、および <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Input.NavigationCommands.NextPage%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_NextPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.NextPage"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.NextPage%2A> を <xref:System.Windows.Controls.FlowDocumentPageViewer>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.FlowDocumentPageViewer> には、次のページに移動して <xref:System.Windows.Input.NavigationCommands.NextPage%2A> コマンドに応答する実装が用意されています。  
  
 [!code-xaml[NavigationCommandsSnippets#NextPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup1)]  
[!code-xaml[NavigationCommandsSnippets#NextPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup2)]  
[!code-xaml[NavigationCommandsSnippets#NextPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup3)]  
[!code-xaml[NavigationCommandsSnippets#NextPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup4)]  
[!code-xaml[NavigationCommandsSnippets#NextPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviousPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand PreviousPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand PreviousPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.PreviousPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PreviousPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ PreviousPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.PreviousPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Previous Page" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> [前のページ] 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、前のページに進むことを目的としています。  
  
 <xref:System.Windows.Controls.DocumentViewer>、<xref:System.Windows.Controls.FlowDocumentReader>、<xref:System.Windows.Controls.FlowDocumentScrollViewer>、および <xref:System.Windows.Controls.FlowDocumentPageViewer> は、<xref:System.Windows.Input.NavigationCommands.PreviousPage%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_PreviousPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.PreviousPage"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.PreviousPage%2A> を <xref:System.Windows.Controls.FlowDocumentPageViewer>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.FlowDocumentPageViewer> には、前のページに移動して <xref:System.Windows.Input.NavigationCommands.PreviousPage%2A> コマンドに応答する実装が用意されています。  
  
 [!code-xaml[NavigationCommandsSnippets#PreviousPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup1)]  
[!code-xaml[NavigationCommandsSnippets#PreviousPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup2)]  
[!code-xaml[NavigationCommandsSnippets#PreviousPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup3)]  
[!code-xaml[NavigationCommandsSnippets#PreviousPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup4)]  
[!code-xaml[NavigationCommandsSnippets#PreviousPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Refresh { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Refresh" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Refresh As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Refresh { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.Refresh" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Refresh" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> F5 
 </description></item><item><term> UI テキスト 
 </term><description> 更新 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、現在のページを更新することを示します。  
  
 <xref:System.Windows.Controls.Frame> と <xref:System.Windows.Navigation.NavigationWindow> は <xref:System.Windows.Input.NavigationCommands.Refresh%2A> コマンドに応答するためのサポートを実装しますが、使用する必要はありません。多くの場合、そのコマンドへの応答としての実装は、アプリケーションライターの役割です。  
  
<a name="xamlAttributeUsage_Refresh"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.Refresh"/>  
```  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.NavigationCommands.Refresh%2A> を <xref:System.Windows.Controls.Frame>と組み合わせて使用する方法を示します。 <xref:System.Windows.Controls.Frame> には、現在の <xref:System.Windows.Controls.Frame> コンテンツを再読み込みすることによって <xref:System.Windows.Input.NavigationCommands.Refresh%2A> コマンドに応答する実装が用意されています。  
  
 [!code-xaml[NavigationCommandsSnippets#RefreshMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#RefreshMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#RefreshMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#RefreshMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Search { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Search" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Search" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Search As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Search { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Search : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.Search" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Search" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> F3 
 </description></item><item><term> UI テキスト 
 </term><description> 検索 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、検索する目的を示します。  
  
 特定の [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスの <xref:System.Windows.Input.NavigationCommands.Search%2A> コマンドに応答するための実装はありません。 そのため、この例に示すように、適切な実装を指定する必要があります。  
  
<a name="xamlAttributeUsage_Search"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.Search"/>  
```  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.FlowDocumentPageViewer>と共に <xref:System.Windows.Input.NavigationCommands.Search%2A> コマンドに応答するコードを実装する方法を示しています。  
  
 [!code-xaml[NavigationCommandsSnippets#SearchMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup1)]  
[!code-xaml[NavigationCommandsSnippets#SearchMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup2)]  
[!code-xaml[NavigationCommandsSnippets#SearchMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup3)]  
[!code-xaml[NavigationCommandsSnippets#SearchMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup4)]  
[!code-xaml[NavigationCommandsSnippets#SearchMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup5)]  
  
 [!code-csharp[NavigationCommandsSnippets#SearchCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml.cs#searchcodebehind)]
 [!code-vb[NavigationCommandsSnippets#SearchCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationCommandsSnippets/visualbasic/search.xaml.vb#searchcodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Zoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Zoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Zoom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Zoom" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zoom As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Zoom { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Zoom : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Input.NavigationCommands.Zoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Zoom" /> コマンドを表す値を取得します。</summary>
        <value>[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ルーティング コマンド。  
  
 <list type="table"><listheader><term> 既定値 
 </term><description></description></listheader><item><term> キー ジェスチャ 
 </term><description> 該当なし 
 </description></item><item><term> UI テキスト 
 </term><description> Zoom 
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコマンドは、ズームレベルを設定する目的を示します。  
  
 特定の [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスの <xref:System.Windows.Input.NavigationCommands.Zoom%2A> コマンドに応答するための実装はありません。 そのため、この例に示すように、適切な実装を指定する必要があります。  
  
<a name="xamlAttributeUsage_Zoom"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="NavigationCommands.Zoom"/>  
```  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.FlowDocumentPageViewer>と共に <xref:System.Windows.Input.NavigationCommands.Zoom%2A> コマンドに応答するコードを実装する方法を示しています。  
  
 [!code-xaml[NavigationCommandsSnippets#ZoomMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup1)]  
[!code-xaml[NavigationCommandsSnippets#ZoomMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup2)]  
[!code-xaml[NavigationCommandsSnippets#ZoomMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup3)]  
[!code-xaml[NavigationCommandsSnippets#ZoomMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup4)]  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
