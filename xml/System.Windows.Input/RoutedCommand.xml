<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2bd45de42d655189107beb75a4dbe8e9590efb95" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75176952" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1a81a-101"><see cref="T:System.Windows.Input.ICommand" /> を実装し、要素ツリーを通じてルーティングされるコマンドを定義します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-102"><xref:System.Windows.Input.RoutedCommand.Execute%2A>と<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッド、<xref:System.Windows.Input.RoutedCommand>コマンドのアプリケーション ロジックを含まない場合は、一般的な<xref:System.Windows.Input.ICommand>ではなく、これらのメソッドは、オブジェクトを参照して、要素ツリーを走査するイベントを発生させますただし、<xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="1a81a-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="1a81a-103"><xref:System.Windows.Input.CommandBinding> にアタッチされているイベントハンドラーには、コマンドロジックが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1a81a-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="1a81a-104"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドは、<xref:System.Windows.Input.CommandManager.PreviewExecuted> イベントと <xref:System.Windows.Input.CommandManager.Executed> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="1a81a-105"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドは、<xref:System.Windows.Input.CommandManager.PreviewCanExecute> イベントと <xref:System.Windows.Input.CommandManager.CanExecute> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="1a81a-106">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="1a81a-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="1a81a-107">\<*オブジェクト\*\*プロパティ*= "*pre>*</span><span class="sxs-lookup"><span data-stu-id="1a81a-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="1a81a-108">または</span><span class="sxs-lookup"><span data-stu-id="1a81a-108">-or-</span></span>
  
 <span data-ttu-id="1a81a-109">\<*オブジェクト*の*プロパティ*= "*prewhere-object classname*.*pre(commandname*) "/></span><span class="sxs-lookup"><span data-stu-id="1a81a-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="1a81a-110">または</span><span class="sxs-lookup"><span data-stu-id="1a81a-110">-or-</span></span>
  
 <span data-ttu-id="1a81a-111">\<*オブジェクト\*\*プロパティ*= "{ *customclassname*.*customCommandName*} "/></span><span class="sxs-lookup"><span data-stu-id="1a81a-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="1a81a-112">XAML の値</span><span class="sxs-lookup"><span data-stu-id="1a81a-112">XAML Values</span></span>  
 <span data-ttu-id="1a81a-113">*Pre未定義クラス名*</span><span class="sxs-lookup"><span data-stu-id="1a81a-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="1a81a-114">定義済みのコマンドクラスの1つ。</span><span class="sxs-lookup"><span data-stu-id="1a81a-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="1a81a-115">*事前に宣言した Commandname*</span><span class="sxs-lookup"><span data-stu-id="1a81a-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="1a81a-116">定義済みのコマンドの1つ。</span><span class="sxs-lookup"><span data-stu-id="1a81a-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="1a81a-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="1a81a-117">*customClassName*</span></span>  
 <span data-ttu-id="1a81a-118">カスタムコマンドを格納しているカスタムクラス。</span><span class="sxs-lookup"><span data-stu-id="1a81a-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="1a81a-119">通常、カスタムクラスには `xlmns` プレフィックスマッピングが必要です。「 [WPF xaml の Xaml 名前空間と名前空間のマッピング」を](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a81a-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="1a81a-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="1a81a-120">*customCommandName*</span></span>  
 <span data-ttu-id="1a81a-121">カスタムコマンド。</span><span class="sxs-lookup"><span data-stu-id="1a81a-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a81a-122"><see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a81a-123"><see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="1a81a-124">シリアル化のための宣言名。</span><span class="sxs-lookup"><span data-stu-id="1a81a-124">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="1a81a-125">このコマンドを登録するタイプ。</span><span class="sxs-lookup"><span data-stu-id="1a81a-125">The type which is registering the command.</span></span></param>
        <summary><span data-ttu-id="1a81a-126">指定した名前および所有者タイプで、<see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1a81a-127"><paramref name="name" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-127"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a81a-128"><paramref name="ownerType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-128"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="1a81a-129">シリアル化のための宣言名。</span><span class="sxs-lookup"><span data-stu-id="1a81a-129">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="1a81a-130">このコマンドを登録する型。</span><span class="sxs-lookup"><span data-stu-id="1a81a-130">The type that is registering the command.</span></span></param>
        <param name="inputGestures"><span data-ttu-id="1a81a-131">このコマンドに関連付けられた、既定の入力ジェスチャ。</span><span class="sxs-lookup"><span data-stu-id="1a81a-131">Default input gestures associated with this command.</span></span></param>
        <summary><span data-ttu-id="1a81a-132">指定した名前、所有者型、およびジェスチャのコレクションを使用して、<see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1a81a-133"><paramref name="name" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-133"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a81a-134"><paramref name="name" /> の長さが 0 です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-134">the length of <paramref name="name" /> is zero</span></span> 
<span data-ttu-id="1a81a-135">または</span><span class="sxs-lookup"><span data-stu-id="1a81a-135">-or-</span></span> 
 <span data-ttu-id="1a81a-136"><paramref name="ownerType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-136"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="1a81a-137">ユーザー定義のデータ型。</span><span class="sxs-lookup"><span data-stu-id="1a81a-137">A user defined data type.</span></span></param>
        <param name="target"><span data-ttu-id="1a81a-138">コマンドのターゲット。</span><span class="sxs-lookup"><span data-stu-id="1a81a-138">The command target.</span></span></param>
        <summary><span data-ttu-id="1a81a-139">現在の状態でこの <see cref="T:System.Windows.Input.RoutedCommand" /> を実行できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span></span></summary>
        <returns><span data-ttu-id="1a81a-140">現在のコマンドの対象に対してコマンドを実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1a81a-140"><see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-141">現在のコマンドターゲットに対して <xref:System.Windows.Input.RoutedCommand> を実行できるかどうかを判断する実際のロジックは、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドに含まれていません。 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> と、要素ツリーを通じて、<xref:System.Windows.Input.CommandManager.CanExecute> を持つオブジェクトを検索するために使用する <xref:System.Windows.Input.CommandBinding>イベントを生成 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> ます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="1a81a-142">その <xref:System.Windows.Input.RoutedCommand> の <xref:System.Windows.Input.CommandBinding> が見つかった場合、<xref:System.Windows.Input.CommandBinding> にアタッチされている <xref:System.Windows.Input.CanExecuteRoutedEventHandler> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="1a81a-143">これらのハンドラーは、<xref:System.Windows.Input.RoutedCommand> が実行できるかどうかを判断するためのプログラミングロジックを提供します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="1a81a-144"><xref:System.Windows.Input.CommandManager.PreviewCanExecute> イベントと <xref:System.Windows.Input.CommandManager.PreviewExecuted> イベントが <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>で発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="1a81a-145"><xref:System.Windows.Input.ICommandSource.CommandTarget%2A> が <xref:System.Windows.Input.ICommandSource>に設定されていない場合、キーボードフォーカスを持つ要素で <xref:System.Windows.Input.CommandManager.PreviewCanExecute> イベントと <xref:System.Windows.Input.CommandManager.CanExecute> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a81a-146">次の例は、<xref:System.Windows.Input.ICommandSource>のカスタム実装の <xref:System.Windows.Input.ICommand.CanExecuteChanged> イベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="1a81a-147">この例の `this.Command` は、<xref:System.Windows.Input.ICommandSource>の <xref:System.Windows.Input.ICommandSource.Command%2A> プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="1a81a-148">コマンドが `null`されていない場合、コマンドは <xref:System.Windows.Input.RoutedCommand>にキャストされます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="1a81a-149">コマンドが <xref:System.Windows.Input.RoutedCommand>の場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A> と <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を渡す <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="1a81a-150">コマンドが <xref:System.Windows.Input.RoutedCommand>でない場合は、<xref:System.Windows.Input.ICommand> にキャストされ、<xref:System.Windows.Input.ICommand.CanExecute%2A> メソッドが <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を渡して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="1a81a-151"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドが `true`を返すと、コントロールが有効になります。それ以外の場合、コントロールは無効になります。</span><span class="sxs-lookup"><span data-stu-id="1a81a-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1a81a-152"><paramref name="target" /> が <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1a81a-152"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a81a-153">コマンド ソースに対する変更がコマンド マネージャーによって検出されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-153">Occurs when changes to the command source are detected by the command manager.</span></span> <span data-ttu-id="1a81a-154">これらの変更は、多くの場合、現在のコマンドの対象に対してコマンドを実行するかどうかに影響します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-154">These changes often affect whether the command should execute on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-155"><xref:System.Windows.Input.RoutedCommand> は、<xref:System.Windows.Input.CommandManager>によって発生する <xref:System.Windows.Input.CommandManager.RequerySuggested> イベントをリッスンします。</span><span class="sxs-lookup"><span data-stu-id="1a81a-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="1a81a-156"><xref:System.Windows.Input.CommandManager.RequerySuggested> イベントは、キーボードフォーカスの変更など、コマンドを実行する必要があるかどうかを変更する条件が満たされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="1a81a-157">コマンドが <xref:System.Windows.Input.CommandManager.RequerySuggested> イベントを受け取ると、<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="1a81a-158">一般に、コマンドソースはこのイベントをリッスンし、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドを使用して <xref:System.Windows.Input.RoutedCommand> に対してクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="1a81a-159">コマンドのバインドの一部として、コマンドを実行できない場合は、ほとんどのコマンドソースがそれ自体を無効にします。</span><span class="sxs-lookup"><span data-stu-id="1a81a-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="1a81a-160">この例として、コマンドを実行できないときに、<xref:System.Windows.Controls.MenuItem> がグレーになる場合があります。</span><span class="sxs-lookup"><span data-stu-id="1a81a-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="1a81a-161">場合によっては、<xref:System.Windows.Input.CommandManager> は、実行するコマンドの機能を変更する条件の変更を認識しません。</span><span class="sxs-lookup"><span data-stu-id="1a81a-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="1a81a-162">このような場合は、<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> メソッドを呼び出すことによって、<xref:System.Windows.Input.CommandManager> が <xref:System.Windows.Input.CommandManager.RequerySuggested> イベントを発生させるように強制することができます。これにより、<xref:System.Windows.Input.RoutedCommand> で <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a81a-163">次の例は、<xref:System.Windows.Input.ICommandSource>のカスタム実装の <xref:System.Windows.Input.ICommand.CanExecuteChanged> イベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="1a81a-164">この例の `this.Command` は、<xref:System.Windows.Input.ICommandSource>の <xref:System.Windows.Input.ICommandSource.Command%2A> プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="1a81a-165">コマンドが `null`されていない場合、コマンドは <xref:System.Windows.Input.RoutedCommand>にキャストされます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="1a81a-166">コマンドが <xref:System.Windows.Input.RoutedCommand>の場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A> と <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を渡す <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="1a81a-167">コマンドが <xref:System.Windows.Input.RoutedCommand>でない場合は、<xref:System.Windows.Input.ICommand> にキャストされ、<xref:System.Windows.Input.ICommand.CanExecute%2A> メソッドが <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を渡して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="1a81a-168"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドが `true`を返すと、コントロールが有効になります。それ以外の場合、コントロールは無効になります。</span><span class="sxs-lookup"><span data-stu-id="1a81a-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="1a81a-169">ハンドラーに渡されるユーザー定義パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1a81a-169">User defined parameter to be passed to the handler.</span></span></param>
        <param name="target"><span data-ttu-id="1a81a-170">コマンド ハンドラーの検索を開始する要素。</span><span class="sxs-lookup"><span data-stu-id="1a81a-170">Element at which to begin looking for command handlers.</span></span></param>
        <summary><span data-ttu-id="1a81a-171">現在のコマンドの対象で <see cref="T:System.Windows.Input.RoutedCommand" /> を実行します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-172"><xref:System.Windows.Input.RoutedCommand> を実行する実際のロジックは、<xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドに含まれていません。</span><span class="sxs-lookup"><span data-stu-id="1a81a-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="1a81a-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> は、<xref:System.Windows.Input.CommandManager.PreviewExecuted> イベントと <xref:System.Windows.Input.CommandManager.Executed> イベントを発生させます。このイベントは、要素ツリーを通じて、<xref:System.Windows.Input.CommandBinding>を持つオブジェクトを検索します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="1a81a-174">その <xref:System.Windows.Input.RoutedCommand> の <xref:System.Windows.Input.CommandBinding> が見つかった場合、<xref:System.Windows.Input.CommandBinding> にアタッチされている <xref:System.Windows.Input.ExecutedRoutedEventHandler> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="1a81a-175">これらのハンドラーは、<xref:System.Windows.Input.RoutedCommand>を実行するプログラミングロジックを提供します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="1a81a-176"><xref:System.Windows.Input.CommandManager.PreviewExecuted> イベントと <xref:System.Windows.Input.CommandManager.Executed> イベントが <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>で発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="1a81a-177"><xref:System.Windows.Input.ICommandSource.CommandTarget%2A> が <xref:System.Windows.Input.ICommandSource>に設定されていない場合、キーボードフォーカスを持つ要素で <xref:System.Windows.Input.CommandManager.PreviewExecuted> イベントと <xref:System.Windows.Input.CommandManager.Executed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a81a-178">次の例は <xref:System.Windows.Input.ICommandSource> sample のカスタム実装からのものです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="1a81a-179">この例の `this.Command` は、<xref:System.Windows.Input.ICommandSource>の Command プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="1a81a-180">コマンドが null でない場合、コマンドは <xref:System.Windows.Input.RoutedCommand>にキャストされます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="1a81a-181"><xref:System.Windows.Input.RoutedCommand>の場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A> と <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を渡す <xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="1a81a-182">コマンドが <xref:System.Windows.Input.RoutedCommand>でない場合は、<xref:System.Windows.Input.ICommand> にキャストされ、<xref:System.Windows.Input.ICommand.Execute%2A> メソッドが <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を渡して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1a81a-183"><paramref name="target" /> が <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1a81a-183"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a81a-184">このコマンドに関連付けられている <see cref="T:System.Windows.Input.InputGesture" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span></span></summary>
        <value><span data-ttu-id="1a81a-185">入力ジェスチャ。</span><span class="sxs-lookup"><span data-stu-id="1a81a-185">The input gestures.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a81a-186">次の例は、新しい <xref:System.Windows.Input.MouseGesture> を <xref:System.Windows.Input.RoutedCommand>に追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="1a81a-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a81a-187">コマンドの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-187">Gets the name of the command.</span></span></summary>
        <value><span data-ttu-id="1a81a-188">コマンドの名前。</span><span class="sxs-lookup"><span data-stu-id="1a81a-188">The name of the command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-189">このプロパティは、[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]の <xref:System.Windows.Input.RoutedCommand> を参照するときに使用できます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a81a-190">このコマンドに登録された型を取得します。</span><span class="sxs-lookup"><span data-stu-id="1a81a-190">Gets the type that is registered with the command.</span></span></summary>
        <value><span data-ttu-id="1a81a-191">コマンドの所有者の型。</span><span class="sxs-lookup"><span data-stu-id="1a81a-191">The type of the command owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="1a81a-192">コマンドにより使用されるデータです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-192">Data used by the command.</span></span>  <span data-ttu-id="1a81a-193">コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="1a81a-194">このメンバーの説明については、<see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a81a-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="1a81a-195">このコマンドを実行できる場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1a81a-195"><see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-196">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1a81a-197">これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="1a81a-198">コマンドにより使用されるデータです。</span><span class="sxs-lookup"><span data-stu-id="1a81a-198">Data used by the command.</span></span>  <span data-ttu-id="1a81a-199">コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="1a81a-200">このメンバーの説明については、<see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a81a-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a81a-201">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1a81a-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1a81a-202">これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1a81a-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a81a-203">関連項目</span><span class="sxs-lookup"><span data-stu-id="1a81a-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
