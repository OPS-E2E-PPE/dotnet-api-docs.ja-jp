<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5398d07f5cc946557f3affd7e3b0eef8b5ce6779" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83922889" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> および <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> ルーティング イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、コマンドソース (<xref:System.Windows.Controls.MenuItem>など) は、<xref:System.Windows.Input.RoutedCommand> で <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドを呼び出して、現在のコマンドターゲットでコマンドを実行できるかどうかを判断します。  イベントハンドラーから <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> が `false` に設定されている場合、コマンドソースはそれ自体を無効にします。  たとえば、<xref:System.Windows.Controls.MenuItem> がコマンドのコマンドソースとして機能していて、コマンドを現在のコマンドターゲットで実行できない場合、<xref:System.Windows.Controls.MenuItem> はグレーで表示されます。  
  
 <xref:System.Windows.Input.ICommand.CanExecuteChanged> イベントは、実行するコマンドの機能が変更された場合に、コマンドソースに通知します。  
  
   
  
## Examples  
 次の例では、コマンドターゲットがコントロールである場合にのみ `true` を返す <xref:System.Windows.Input.CanExecuteRoutedEventHandler> を作成します。  まず、<xref:System.Windows.RoutedEventArgs.Source%2A> が <xref:System.Windows.Controls.Control>にキャストされます。  <xref:System.Windows.RoutedEventArgs.Source%2A> が <xref:System.Windows.Controls.Control>の場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> は `true`に設定されます。それ以外の場合は、`false`に設定されます。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントに関連付けられている <see cref="T:System.Windows.Input.RoutedCommand" /> をコマンド ターゲットに対して実行できるかどうかを示す値を取得または設定します。</summary>
        <value>イベントに関連付けられているコマンドをコマンド ターゲットに対して実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.MenuItem> や <xref:System.Windows.Controls.Button>などの多くのコマンドソースは、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> が `true`されている場合に <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> が `false` され、有効になっていると無効になります。  
  
   
  
## Examples  
 次の例では、コマンドターゲットがコントロールである場合にのみ true を返す <xref:System.Windows.Input.CanExecuteRoutedEventHandler> を作成します。  最初に <xref:System.Windows.RoutedEventArgs.Source%2A> イベントデータが <xref:System.Windows.Controls.Control>にキャストされます。  <xref:System.Windows.Controls.Control>の場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> は `true`に設定されます。それ以外の場合は、`false`に設定されます。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントに関連付けられているコマンドを取得します。</summary>
        <value>コマンド。 コマンドがカスタム コマンドである場合を除き、これは通常 <see cref="T:System.Windows.Input.RoutedCommand" /> です。 既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コマンドの詳細については、「[コマンドの概要](/dotnet/framework/wpf/advanced/commanding-overview)」を参照してください。  
  
   
  
## Examples  
 次の例では、複数のコマンドを処理する <xref:System.Windows.Input.CanExecuteRoutedEventHandler> を作成します。  <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> プロパティが <xref:System.Windows.Input.MediaCommands.Play%2A> コマンドと同じで、メソッド `IsPlaying` が `false`を返す場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> が `true`に設定されます。それ以外の場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> は `false`に設定されます。  <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> プロパティが <xref:System.Windows.Input.MediaCommands.Stop%2A> コマンドと同じで、メソッド `IsPlaying` が `true`を返す場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> が `true`に設定されます。それ以外の場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> は `false`に設定されます。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンドを呼び出した入力ルーティング イベントのルーティングを要素ツリーで続行するかどうかを決定します。</summary>
        <value>要素ツリーでルーティング イベントのルーティングを続行する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。   既定値は <see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンド固有のデータを取得します。</summary>
        <value>コマンドのデータ。  既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Command パラメーターは、実行時に特定の情報をコマンドに渡すために使用されます。  データの型は、コマンドで定義されます。  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> は `null`できます。 多くのコマンドでは、コマンドパラメーターは処理されません。  
  
   
  
## Examples  
 次の例は、カスタムコマンドのコマンドソースとして <xref:System.Windows.Controls.Button> を使用する方法を示しています。  <xref:System.Windows.Controls.Button> の <xref:System.Windows.Input.ICommandSource.Command%2A> プロパティは `customCommand` と呼ばれるカスタム <xref:System.Windows.Input.RoutedCommand> に設定され、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A> コントロールの <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> プロパティの値を渡すために使用されます。<xref:System.Windows.Controls.Slider>  これは、データバインディングを使用して、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A> を <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> プロパティにバインドすることで実現されます。  バインディング式のコンバーターは、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>にバインドする前に <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> を <xref:System.Int32> に変換するカスタム <xref:System.Windows.Data.IValueConverter> です。  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
