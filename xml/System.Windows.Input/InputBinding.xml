<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="697417fa3ee8b000496b692c1ccf139a3699c1bd" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75177043" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="33c28-101"><see cref="T:System.Windows.Input.InputGesture" /> とコマンドの間のバインディングを表します。</span><span class="sxs-lookup"><span data-stu-id="33c28-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span></span> <span data-ttu-id="33c28-102">コマンドは、<see cref="T:System.Windows.Input.RoutedCommand" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="33c28-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-103">ユーザー入力が <xref:System.Windows.Input.InputBinding>を作成することによってコマンドを呼び出すように指定することができます。</span><span class="sxs-lookup"><span data-stu-id="33c28-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="33c28-104">ユーザーが指定された入力を実行すると、<xref:System.Windows.Input.InputBinding.Command%2A> プロパティに設定されている <xref:System.Windows.Input.ICommand> が実行されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="33c28-105"><xref:System.Windows.Input.InputBinding.Command%2A>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および <xref:System.Windows.Input.InputBinding.CommandTarget%2A> プロパティにバインドを作成することによって、オブジェクトで定義されているコマンドを <xref:System.Windows.Input.InputBinding> が呼び出すように指定できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="33c28-106">これにより、カスタムコマンドを定義し、ユーザー入力に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="33c28-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="33c28-107">詳細については、「例」の2番目の例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="33c28-108"><xref:System.Windows.Input.InputBinding> は、<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> を <xref:System.Windows.Input.CommandManager>に登録することによって、特定のオブジェクトまたはクラスレベルで定義できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="33c28-109"><xref:System.Windows.Input.InputBinding> クラス自体は、パブリックのパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしていません (パラメーターなしのコンストラクターは存在しますが、保護されています)。</span><span class="sxs-lookup"><span data-stu-id="33c28-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="33c28-110">ただし、派生クラスはパブリックコンストラクターを公開できるため、XAML の使用法を使用して <xref:System.Windows.Input.InputBinding> から継承された派生クラスのプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="33c28-111">XAML でインスタンス化でき、XAML でプロパティを設定できる2つの既存の <xref:System.Windows.Input.InputBinding>派生クラスは <xref:System.Windows.Input.KeyBinding> と <xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="33c28-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="33c28-112">XAML で設定されている [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プログラミングの一般的なプロパティは、値が <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> プロパティであるため、1つ以上の <xref:System.Windows.Input.InputBinding> オブジェクトを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="33c28-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="33c28-113">XAML オブジェクト要素の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="33c28-114">\<*inputBindingDerivedClass.../*></span><span class="sxs-lookup"><span data-stu-id="33c28-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="33c28-115">XAML の値</span><span class="sxs-lookup"><span data-stu-id="33c28-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="33c28-116"><xref:System.Windows.Input.KeyBinding> や <xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートする <xref:System.Windows.Input.InputBinding> の派生クラス。</span><span class="sxs-lookup"><span data-stu-id="33c28-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="33c28-117">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33c28-118">次の例では、<xref:System.Windows.Input.KeyBinding> を使用して、<xref:System.Windows.Input.KeyGesture> を <xref:System.Windows.Input.ApplicationCommands.Open%2A> コマンドにバインドする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="33c28-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="33c28-119">キージェスチャを実行すると、Open コマンドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="33c28-120">次の例は、カスタムコマンドを <xref:System.Windows.Input.InputBinding> オブジェクトにバインドする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="33c28-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="33c28-121">これらの例では、ユーザーが次のいずれかの操作を実行して背景色を変更できるようにするアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="33c28-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="33c28-122">ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="33c28-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="33c28-123">CTRL + C キーを押します。</span><span class="sxs-lookup"><span data-stu-id="33c28-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="33c28-124"><xref:System.Windows.Controls.StackPanel> (<xref:System.Windows.Controls.ListBox>の外側) を右クリックします。</span><span class="sxs-lookup"><span data-stu-id="33c28-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="33c28-125">最初の例では、`SimpleDelegateCommand`という名前のクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="33c28-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="33c28-126">このクラスは、コマンドを作成するオブジェクトがコマンドの実行時に発生するアクションを定義できるように、デリゲートを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="33c28-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="33c28-127">また `SimpleDelegateCommand` では、コマンドを呼び出すキーとマウスの入力を指定するプロパティも定義されています。</span><span class="sxs-lookup"><span data-stu-id="33c28-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="33c28-128">`GestureKey` と `GestureModifier` キーボード入力を指定します。`MouseGesture` マウス入力を指定します。</span><span class="sxs-lookup"><span data-stu-id="33c28-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="33c28-129">次の例では、`SimpleDelegateCommand`である `ColorChangeCommand`を作成して初期化します。</span><span class="sxs-lookup"><span data-stu-id="33c28-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="33c28-130">また、この例では、コマンドが呼び出されたときに実行されるメソッドを定義し、`GestureKey`、`GestureModifier`、および `MouseGesture` の各プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="33c28-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="33c28-131">アプリケーションは、<xref:System.Windows.Window>のコンストラクターなどで、プログラムの開始時に `InitializeCommand` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="33c28-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="33c28-132">最後に、次の例では、ユーザーインターフェイスを作成します。</span><span class="sxs-lookup"><span data-stu-id="33c28-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="33c28-133">この例では、<xref:System.Windows.Controls.Button> と <xref:System.Windows.Controls.ListBox>を含む <xref:System.Windows.Controls.StackPanel> に、<xref:System.Windows.Input.KeyBinding> と <xref:System.Windows.Input.MouseBinding> を追加します。</span><span class="sxs-lookup"><span data-stu-id="33c28-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="33c28-134">ユーザーが <xref:System.Windows.Controls.ListBox>内の項目を選択すると、背景の色を選択した色に変更できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="33c28-135">どちらの場合も、`CommandParameter` プロパティは <xref:System.Windows.Controls.ListBox>内で選択されている項目にバインドされ、`Command` プロパティは `ColorChangeCommand`にバインドされます。</span><span class="sxs-lookup"><span data-stu-id="33c28-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="33c28-136"><xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>、<xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>、および <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> の各プロパティは、`SimpleDelegateCommand` クラスの対応するプロパティにバインドされます。</span><span class="sxs-lookup"><span data-stu-id="33c28-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33c28-137"><see cref="T:System.Windows.Input.InputBinding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="33c28-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33c28-138"><see cref="T:System.Windows.Input.InputBinding" /> から派生したクラスの基本の初期化を行います。</span><span class="sxs-lookup"><span data-stu-id="33c28-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-139"><xref:System.Windows.Input.InputBinding> は技術的には抽象クラスではありませんが、パラメーターなしのコンストラクターは意図的に保護されたアクセスです。</span><span class="sxs-lookup"><span data-stu-id="33c28-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the parameterless constructor is deliberately protected access.</span></span> <span data-ttu-id="33c28-140">これにより、XAML の "抽象" クラス <xref:System.Windows.Input.InputBinding> する効果があります。</span><span class="sxs-lookup"><span data-stu-id="33c28-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="33c28-141">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] には、<xref:System.Windows.Input.InputBinding>型のオブジェクトを想定する XAML 使用がある既存のプロパティがありますが、XAML で <xref:System.Windows.Input.InputBinding> インスタンスを指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="33c28-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="33c28-142">代わりに、デバイス固有の <xref:System.Windows.Input.InputBinding> 派生クラスの1つを値として指定できます (たとえば、<xref:System.Windows.Input.KeyBinding> または <xref:System.Windows.Input.MouseBinding>)。</span><span class="sxs-lookup"><span data-stu-id="33c28-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="33c28-143">XAML の使用をサポートするカスタム <see cref="T:System.Windows.Input.InputBinding" /> を実装する場合は、このコンストラクターを使用して基本の初期化を行います。</span><span class="sxs-lookup"><span data-stu-id="33c28-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="33c28-144"><paramref name="gesture" /> に関連付けるコマンド。</span><span class="sxs-lookup"><span data-stu-id="33c28-144">The command to associate with <paramref name="gesture" />.</span></span></param>
        <param name="gesture"><span data-ttu-id="33c28-145"><paramref name="command" /> に関連付ける入力ジェスチャ。</span><span class="sxs-lookup"><span data-stu-id="33c28-145">The input gesture to associate with <paramref name="command" />.</span></span></param>
        <summary><span data-ttu-id="33c28-146">コマンドおよび入力ジェスチャを指定して、<see cref="T:System.Windows.Input.InputBinding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="33c28-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-147">既存の入力バインドクラスを使用するソフトウェア開発者は、カスタムコマンドを定義する場合でも、通常、このコンストラクターは使用しません。</span><span class="sxs-lookup"><span data-stu-id="33c28-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="33c28-148">代わりに、派生クラスのコンストラクター (<xref:System.Windows.Input.KeyBinding> と <xref:System.Windows.Input.MouseBinding>) を使用するか、このコンストラクターをカスタムクラスの基本インスタンス化として使用します。</span><span class="sxs-lookup"><span data-stu-id="33c28-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="33c28-149"><xref:System.Windows.Input.InputBinding> クラスではさまざまな入力デバイスがサポートされていますが、実際には、入力バインドが表すデバイスを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="33c28-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="33c28-150">入力バインドで設定できる <xref:System.Windows.Input.InputBinding.Gesture%2A> 値は1つだけです。ジェスチャはデバイス固有です。</span><span class="sxs-lookup"><span data-stu-id="33c28-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33c28-151">次の例は、このコンストラクターを使用して、<xref:System.Windows.Input.KeyGesture> を <xref:System.Windows.Input.RoutedCommand>に関連付ける方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="33c28-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcommand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="33c28-152"><paramref name="command" /> または <paramref name="gesture" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="33c28-152"><paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="33c28-153">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="33c28-153">The object to clone.</span></span></param>
        <summary><span data-ttu-id="33c28-154">指定されたオブジェクトのプロパティの基本 (アニメーション化されていない) 値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="33c28-154">Copies the base (non-animated) values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="33c28-155">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="33c28-155">The object to clone.</span></span></param>
        <summary><span data-ttu-id="33c28-156">指定されたオブジェクトのプロパティの現在の値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="33c28-156">Copies the current values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-157">この入力バインドに関連付けられる <see cref="T:System.Windows.Input.ICommand" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="33c28-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="33c28-158">関連付けられているコマンド。</span><span class="sxs-lookup"><span data-stu-id="33c28-158">The associated command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-159"><xref:System.Windows.Input.InputBinding> クラスは、パブリックなパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしません (パラメーターなしのコンストラクターがありますが、保護されています)。</span><span class="sxs-lookup"><span data-stu-id="33c28-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public parameterless constructor (it has a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="33c28-160">ただし、派生クラスはパブリックコンストラクターを公開できるため、<xref:System.Windows.Input.InputBinding>から継承されたプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="33c28-161">XAML でインスタンス化でき、XAML 使用法を使用してプロパティを設定できる2つの既存の <xref:System.Windows.Input.InputBinding> 派生クラスが <xref:System.Windows.Input.KeyBinding> および <xref:System.Windows.Input.MouseBinding>ます。</span><span class="sxs-lookup"><span data-stu-id="33c28-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="33c28-162"><xref:System.Windows.Input.ICommand> は、特定の既存の <xref:System.Windows.Input.ICommand> 実装が文字列形式で値を指定できるようにする型コンバーターを参照します。</span><span class="sxs-lookup"><span data-stu-id="33c28-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="33c28-163">この型変換の動作によって、このプロパティの属性値の形式が設定されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="33c28-164">また、<xref:System.Windows.Input.InputBinding.Command%2A>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および <xref:System.Windows.Input.InputBinding.CommandTarget%2A> プロパティを、オブジェクトで定義されている <xref:System.Windows.Input.ICommand> にバインドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="33c28-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="33c28-165">これにより、カスタムコマンドを定義し、ユーザー入力に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="33c28-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="33c28-166">詳細については、<xref:System.Windows.Input.InputBinding>の2番目の例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="33c28-167">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="33c28-168"><`inputBindingDerivedClass` `Command`= "<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="33c28-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="33c28-169">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="33c28-170">XAML の値</span><span class="sxs-lookup"><span data-stu-id="33c28-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="33c28-171"><xref:System.Windows.Input.KeyBinding> や <xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートする <xref:System.Windows.Input.InputBinding> の派生クラス。</span><span class="sxs-lookup"><span data-stu-id="33c28-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="33c28-172">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="33c28-173">オブジェクト要素構文をサポートする <xref:System.Windows.Input.ICommand> のオブジェクト実装 (パブリックなパラメーターなしのコンストラクターがある)。</span><span class="sxs-lookup"><span data-stu-id="33c28-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public parameterless constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33c28-174">次の例では、<xref:System.Windows.Input.KeyBinding> を使用して、<xref:System.Windows.Input.KeyGesture> を <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> コマンドにバインドする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="33c28-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="33c28-175">キージェスチャを実行すると、Open コマンドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="33c28-176"><see cref="P:System.Windows.Input.InputBinding.Command" /> 値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="33c28-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-177">特定のコマンドのコマンド固有のデータを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="33c28-177">Gets or sets the command-specific data for a particular command.</span></span></summary>
        <value><span data-ttu-id="33c28-178">コマンド固有のデータ。</span><span class="sxs-lookup"><span data-stu-id="33c28-178">The command-specific data.</span></span> <span data-ttu-id="33c28-179">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="33c28-179">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-180"><xref:System.Windows.Input.InputBinding.CommandParameter%2A> プロパティは、実行時に特定の情報をコマンドに渡すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="33c28-181">データの型は、コマンドで定義されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="33c28-182">多くのコマンドでは、コマンドパラメーターは想定されていません。これらのコマンドでは、渡されたコマンドパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="33c28-183">入力バインドに関連付けられているコマンドが <xref:System.Windows.Input.RoutedCommand>である場合は、コマンドの処理時に <xref:System.Windows.Input.ExecutedRoutedEventArgs> および <xref:System.Windows.Input.CanExecuteRoutedEventArgs> イベントデータを使用して、入力バインディングの <xref:System.Windows.Input.InputBinding.CommandParameter%2A> が <xref:System.Windows.Input.RoutedCommand> ハンドラーに渡されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="33c28-184">Command パラメーターのデータ型と目的は、各コマンドに対して異なる方法で定義され、`null`できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="33c28-185"><xref:System.Windows.Input.InputBinding.Command%2A>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および <xref:System.Windows.Input.InputBinding.CommandTarget%2A> プロパティを、オブジェクトで定義されている <xref:System.Windows.Input.ICommand> にバインドできます。</span><span class="sxs-lookup"><span data-stu-id="33c28-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="33c28-186">これにより、カスタムコマンドを定義し、ユーザー入力に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="33c28-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="33c28-187">詳細については、<xref:System.Windows.Input.InputBinding>の2番目の例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="33c28-188"><xref:System.Windows.Input.InputBinding> クラスは、パブリックなパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしません (パラメーターなしのコンストラクターがありますが、保護されています)。</span><span class="sxs-lookup"><span data-stu-id="33c28-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public parameterless constructor (it has a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="33c28-189">ただし、派生クラスはパブリックコンストラクターを公開できるため、<xref:System.Windows.Input.InputBinding> から継承されたプロパティを XAML 使用法で設定できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="33c28-190">XAML でインスタンス化でき、XAML でプロパティを設定できる2つの既存の <xref:System.Windows.Input.InputBinding> 派生クラスは <xref:System.Windows.Input.KeyBinding> と <xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="33c28-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="33c28-191">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="33c28-192">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="33c28-193">XAML の値</span><span class="sxs-lookup"><span data-stu-id="33c28-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="33c28-194"><xref:System.Windows.Input.KeyBinding> や <xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートする <xref:System.Windows.Input.InputBinding> の派生クラス。</span><span class="sxs-lookup"><span data-stu-id="33c28-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="33c28-195">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="33c28-196">特定のコマンドによって処理される文字列。</span><span class="sxs-lookup"><span data-stu-id="33c28-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="33c28-197">文字列は、XAML で簡単に設定できるため、コマンドパラメーターに使用される共通の型です。</span><span class="sxs-lookup"><span data-stu-id="33c28-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="33c28-198">期待される文字列形式とその目的については、入力バインディングが関連付けられている特定のコマンドに関するドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="33c28-199">多くのコマンドではパラメーターは想定されていません。</span><span class="sxs-lookup"><span data-stu-id="33c28-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="33c28-200">特定のコマンドによって処理されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="33c28-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="33c28-201">既存のすべての [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] コマンドは、文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="33c28-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="33c28-202">したがって、このプロパティ要素の構文は、カスタムコマンドのシナリオにのみ関連します。</span><span class="sxs-lookup"><span data-stu-id="33c28-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="33c28-203">この構文をサポートするには、`commandParameterObject` オブジェクトでオブジェクト要素構文もサポートする必要があります (パラメーターなしのパブリックコンストラクターを持つ必要があります)。</span><span class="sxs-lookup"><span data-stu-id="33c28-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public parameterless constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-204"><see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="33c28-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-205"><see cref="P:System.Windows.Input.InputBinding.Command" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="33c28-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-206">コマンドの対象要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="33c28-206">Gets or sets the target element of the command.</span></span></summary>
        <value><span data-ttu-id="33c28-207">コマンドの対象。</span><span class="sxs-lookup"><span data-stu-id="33c28-207">The target of the command.</span></span> <span data-ttu-id="33c28-208">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="33c28-208">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-209">Windows Presentation Foundation のコマンドシステムでは、<xref:System.Windows.Input.ICommandSource> オブジェクトの <xref:System.Windows.Input.InputBinding.CommandTarget%2A> プロパティは、<xref:System.Windows.Input.ICommand> が <xref:System.Windows.Input.RoutedCommand>の場合にのみ適用できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="33c28-210"><xref:System.Windows.Input.InputBinding.CommandTarget%2A> で <xref:System.Windows.Input.ICommandSource> が設定されていて、対応するコマンドが <xref:System.Windows.Input.RoutedCommand> ではない場合、コマンド ターゲットは無視されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="33c28-211"><xref:System.Windows.Input.RoutedCommand>と共に使用する場合、コマンドターゲットは、<xref:System.Windows.Input.CommandManager.Executed> イベントと <xref:System.Windows.Input.CommandManager.CanExecute> イベントが発生する対象のオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="33c28-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="33c28-212"><xref:System.Windows.Input.InputBinding.CommandTarget%2A> プロパティが設定されていない場合、キーボードフォーカスを持つ要素がターゲットとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="33c28-213"><xref:System.Windows.Input.InputBinding> クラス自体は、パブリックのパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしていません (パラメーターなしのコンストラクターは存在しますが、保護されています)。</span><span class="sxs-lookup"><span data-stu-id="33c28-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="33c28-214">ただし、派生クラスはパブリックコンストラクターを公開できるため、XAML の使用法を使用して <xref:System.Windows.Input.InputBinding> から継承されるプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="33c28-215">XAML でインスタンス化でき、XAML でプロパティを設定できる2つの既存の <xref:System.Windows.Input.InputBinding> 派生クラスは <xref:System.Windows.Input.KeyBinding> と <xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="33c28-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="33c28-216">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="33c28-217">XAML の値</span><span class="sxs-lookup"><span data-stu-id="33c28-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="33c28-218"><xref:System.Windows.Input.KeyBinding> や <xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートする <xref:System.Windows.Input.InputBinding> の派生クラス。</span><span class="sxs-lookup"><span data-stu-id="33c28-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="33c28-219">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="33c28-220">既存の名前付き要素へのオブジェクト参照を返すことができるバインディング構文の型を使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="33c28-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="33c28-221">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-222"><see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="33c28-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33c28-223"><see cref="T:System.Windows.Input.InputBinding" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="33c28-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <returns><span data-ttu-id="33c28-224">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="33c28-224">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33c28-225">この入力バインドに関連付けられる <see cref="T:System.Windows.Input.InputGesture" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="33c28-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="33c28-226">関連付けられたジェスチャ。</span><span class="sxs-lookup"><span data-stu-id="33c28-226">The associated gesture.</span></span> <span data-ttu-id="33c28-227">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="33c28-227">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33c28-228">入力ジェスチャは、コマンドを呼び出すアクションです。</span><span class="sxs-lookup"><span data-stu-id="33c28-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="33c28-229">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] での入力ジェスチャの例としては <xref:System.Windows.Input.KeyGesture> と <xref:System.Windows.Input.MouseGesture>があります。</span><span class="sxs-lookup"><span data-stu-id="33c28-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="33c28-230"><xref:System.Windows.Input.KeyGesture> は、<xref:System.Windows.Input.Key> と一連の <xref:System.Windows.Input.ModifierKeys>を組み合わせたものです。</span><span class="sxs-lookup"><span data-stu-id="33c28-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="33c28-231"><xref:System.Windows.Input.MouseGesture> は、<xref:System.Windows.Input.MouseAction> と一連の <xref:System.Windows.Input.ModifierKeys>を組み合わせたものです。</span><span class="sxs-lookup"><span data-stu-id="33c28-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="33c28-232"><xref:System.Windows.Input.InputBinding> クラス自体は、パブリックのパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしていません (パラメーターなしのコンストラクターは存在しますが、保護されています)。</span><span class="sxs-lookup"><span data-stu-id="33c28-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="33c28-233">ただし、派生クラスはパブリックコンストラクターを公開できるため、XAML の使用法を使用して <xref:System.Windows.Input.InputBinding> から継承されるプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="33c28-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="33c28-234">XAML でインスタンス化でき、XAML でプロパティを設定できる2つの既存の <xref:System.Windows.Input.InputBinding> 派生クラスは <xref:System.Windows.Input.KeyBinding> と <xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="33c28-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="33c28-235">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="33c28-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`= "<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="33c28-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
<span data-ttu-id="33c28-237">または</span><span class="sxs-lookup"><span data-stu-id="33c28-237">-or-</span></span>
  
 <span data-ttu-id="33c28-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`= "<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="33c28-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
<span data-ttu-id="33c28-239">または</span><span class="sxs-lookup"><span data-stu-id="33c28-239">-or-</span></span>
  
 <span data-ttu-id="33c28-240"><`inputBindingDerivedClass` `Gesture`= "<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="33c28-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="33c28-241">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="33c28-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="33c28-242">XAML の値</span><span class="sxs-lookup"><span data-stu-id="33c28-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="33c28-243"><xref:System.Windows.Input.KeyBinding> や <xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートする <xref:System.Windows.Input.InputBinding> の派生クラス。</span><span class="sxs-lookup"><span data-stu-id="33c28-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="33c28-244">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="33c28-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="33c28-245">オブジェクト要素構文をサポートする <xref:System.Windows.Input.InputGesture> のカスタム派生クラス。</span><span class="sxs-lookup"><span data-stu-id="33c28-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33c28-246">次の例では、<xref:System.Windows.Input.KeyBinding> を使用して、<xref:System.Windows.Input.KeyGesture> を <xref:System.Windows.Input.RoutedCommand>にバインドする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="33c28-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="33c28-247"><xref:System.Windows.Input.KeyGesture> ALT + L キーを押すと、<xref:System.Windows.Input.ApplicationCommands.Close%2A> コマンドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="33c28-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="33c28-248">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="33c28-248">The object to clone.</span></span></param>
        <summary><span data-ttu-id="33c28-249">基本プロパティ値 (アニメーション化されていない値) を使用して、このインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</span><span class="sxs-lookup"><span data-stu-id="33c28-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="33c28-250">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="33c28-250">The object to clone.</span></span></param>
        <summary><span data-ttu-id="33c28-251">現在のインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</span><span class="sxs-lookup"><span data-stu-id="33c28-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span></span> <span data-ttu-id="33c28-252">オブジェクトに、アニメーション化された依存関係プロパティが存在する場合、現在アニメーション化されている値がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="33c28-252">If the object has animated dependency properties, their current animated values are copied.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
