<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a028337c0e7cb9d49349dcd2048c6f2b3f89e3b" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83946522" /></Metadata><TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Sockets" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4ad81-101">TCP ネットワーク クライアントからの接続をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-101">Listens for connections from TCP network clients.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-102"><xref:System.Net.Sockets.TcpListener> クラスは、ブロック同期モードで受信接続要求をリッスンして受け入れる単純なメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="4ad81-103"><xref:System.Net.Sockets.TcpClient> または <xref:System.Net.Sockets.Socket> のいずれかを使用して、<xref:System.Net.Sockets.TcpListener>に接続することができます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="4ad81-104"><xref:System.Net.IPEndPoint>、ローカル IP アドレスとポート番号、またはポート番号のみを使用して、<xref:System.Net.Sockets.TcpListener> を作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="4ad81-105">基になるサービスプロバイダーでこれらの値を割り当てる場合は、ローカル IP アドレスには <xref:System.Net.IPAddress.Any> を指定し、ローカルポート番号には0を指定します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="4ad81-106">これを選択した場合は、ソケットが接続された後に、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティを使用して、割り当てられた情報を識別できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="4ad81-107"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドを使用して、受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="4ad81-108"><xref:System.Net.Sockets.TcpListener.Start%2A> は、<xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを呼び出すか、<xref:System.Net.Sockets.SocketOptionName.MaxConnections>をキューに配置するまで、着信接続をキューに入れます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="4ad81-109"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> または <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> のいずれかを使用して、着信接続要求キューから接続をプルします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="4ad81-110">これら2つのメソッドはブロックします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-110">These two methods will block.</span></span> <span data-ttu-id="4ad81-111">ブロックを回避するには、最初に <xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドを使用して、接続要求がキューで利用可能かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="4ad81-112"><xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを呼び出して、<xref:System.Net.Sockets.TcpListener>を閉じます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-113"><xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドは、受け入れられた接続を閉じません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="4ad81-114">ユーザーは、これらを個別に終了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-115">次のコード例では、<xref:System.Net.Sockets.TcpListener>を作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="4ad81-116">クライアントの例については、「<xref:System.Net.Sockets.TcpClient>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4ad81-117"><see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-117">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use TcpListener(IPAddress localaddr, int port).")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="4ad81-118">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="4ad81-118">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="4ad81-119">指定したポートを待機する <see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-119">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-120">このコンストラクターは今後は使用しません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-120">This constructor is obsolete.</span></span> <span data-ttu-id="4ad81-121"><xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> コンストラクターまたは <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-121">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="4ad81-122">このコンストラクターを使用すると、受信接続の試行をリッスンするポート番号を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-122">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="4ad81-123">このコンストラクターを使用すると、基になるサービスプロバイダーによって最も適切なネットワークアドレスが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-123">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="4ad81-124">使用されるローカルポートを気にしない場合は、ポート番号に0を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-124">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="4ad81-125">この場合、サービスプロバイダーによって、使用可能な一時的なポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-125">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="4ad81-126">この方法を使用する場合は、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティを使用して、どのローカルネットワークアドレスとポート番号が割り当てられているかを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-126">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="4ad81-127"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドを呼び出して、着信接続の試行のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-127">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-128">次のコード例では、ローカルポート番号を使用して <xref:System.Net.Sockets.TcpListener> を作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-128">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4ad81-129"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-129"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="4ad81-130">リスナー <see cref="T:System.Net.Sockets.Socket" /> のバインド先のローカル エンドポイントを表す <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-130">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="4ad81-131">指定したローカル エンドポイントを使用して、<see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-131">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-132">このコンストラクターを使用すると、受信接続の試行をリッスンするローカル IP アドレスとポート番号を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-132">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="4ad81-133">このコンストラクターを使用する前に、目的のローカル IP アドレスとポート番号を使用して <xref:System.Net.IPEndPoint> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-133">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="4ad81-134">この <xref:System.Net.IPEndPoint> を `localEP` パラメーターとしてコンストラクターに渡します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-134">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="4ad81-135">どのローカルアドレスが割り当てられているか気にしない場合は、address パラメーターとして <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> を使用して <xref:System.Net.IPEndPoint> を作成することができ、基になるサービスプロバイダーによって最も適切なネットワークアドレスが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-135">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="4ad81-136">これは、複数のネットワークインターフェイスがある場合に、アプリケーションの簡素化に役立つ可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-136">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="4ad81-137">使用されるローカルポートを気にしない場合は、ポート番号に0を使用して <xref:System.Net.IPEndPoint> を作成できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-137">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="4ad81-138">この場合、サービスプロバイダーによって、使用可能な一時的なポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-138">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="4ad81-139">この方法を使用する場合は、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティを使用して、どのローカルネットワークアドレスとポート番号が割り当てられているかを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-139">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="4ad81-140"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドを呼び出して、着信接続の試行のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-140">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-141">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-141">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-142">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-142">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-143">ローカルエンドポイントを使用して <xref:System.Net.Sockets.TcpListener> クラスのインスタンスを作成するコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-143">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4ad81-144"><paramref name="localEP" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-144"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr"><span data-ttu-id="4ad81-145">ローカル IP アドレスを表す <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-145">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span></span></param>
        <param name="port"><span data-ttu-id="4ad81-146">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="4ad81-146">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="4ad81-147">指定したローカル IP アドレスとポート番号で受信接続の試行を待機する、<see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-147">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-148">このコンストラクターを使用すると、受信接続の試行をリッスンするローカル IP アドレスとポート番号を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-148">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="4ad81-149">このコンストラクターを呼び出す前に、まず目的のローカルアドレスを使用して <xref:System.Net.IPAddress> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-149">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="4ad81-150">この <xref:System.Net.IPAddress> を `localaddr` パラメーターとしてコンストラクターに渡します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-150">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="4ad81-151">どのローカルアドレスが割り当てられてもかまわない場合は、`localaddr` パラメーターに <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> を指定すると、基になるサービスプロバイダーによって最も適切なネットワークアドレスが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-151">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="4ad81-152">これは、複数のネットワークインターフェイスがある場合に、アプリケーションの簡素化に役立つ可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-152">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="4ad81-153">使用されるローカルポートを気にしない場合は、ポート番号に0を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-153">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="4ad81-154">この場合、サービスプロバイダーは1024と5000の間の使用可能なポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-154">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="4ad81-155">この方法を使用する場合は、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティを使用して、どのローカルネットワークアドレスとポート番号が割り当てられているかを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-155">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="4ad81-156"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドを呼び出して、着信接続の試行のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-156">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-157">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-157">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-158">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-158">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-159">次のコード例では、ローカル IP アドレスとポート番号を使用して、<xref:System.Net.Sockets.TcpListener> クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-159">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4ad81-160"><paramref name="localaddr" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-160"><paramref name="localaddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4ad81-161"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-161"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-162">保留中の接続要求を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-162">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="4ad81-163">データの送受信に使用する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-163">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-164"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> は、データの送受信に使用できる <xref:System.Net.Sockets.Socket> を返すブロッキングメソッドです。</span><span class="sxs-lookup"><span data-stu-id="4ad81-164"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="4ad81-165">ブロックを回避するには、<xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドを使用して、接続要求を受信接続キューで使用できるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-165">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="4ad81-166">返される <xref:System.Net.Sockets.Socket> は、リモートホストの IP アドレスとポート番号で初期化されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-166">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="4ad81-167"><xref:System.Net.Sockets.Socket> クラスで使用できる任意の <xref:System.Net.Sockets.Socket.Send%2A> および <xref:System.Net.Sockets.Socket.Receive%2A> メソッドを使用して、リモートホストと通信できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-167">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="4ad81-168"><xref:System.Net.Sockets.Socket>の使用が終了したら、必ずその <xref:System.Net.Sockets.Socket.Close%2A> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-168">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="4ad81-169">アプリケーションが比較的単純な場合は、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドではなく、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-169">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4ad81-170"><xref:System.Net.Sockets.TcpClient> には、同期モードのブロックでネットワーク経由でデータを送受信するための簡単な方法が用意されています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-170"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-171">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-171">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-172">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-172">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-173">次のコード例では、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドを使用して <xref:System.Net.Sockets.Socket>を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-173">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="4ad81-174">この <xref:System.Net.Sockets.Socket> は、新しく接続されたクライアントとの通信に使用されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-174">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-175">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-175">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-176">保留中の接続要求を非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-176">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4ad81-177">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4ad81-177">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="4ad81-178">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、データの送受信に使用される <see cref="T:System.Net.Sockets.Socket" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-178">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-179">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-179">This operation will not block.</span></span> <span data-ttu-id="4ad81-180">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、ソケット接続が受け入れられた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-180">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="4ad81-181"><xref:System.Threading.Tasks.Task%601> で返される <xref:System.Net.Sockets.Socket> は、リモートホストの IP アドレスとポート番号で初期化されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-181">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="4ad81-182"><xref:System.Net.Sockets.Socket> クラスで使用できる任意の <xref:System.Net.Sockets.Socket.Send%2A> および <xref:System.Net.Sockets.Socket.Receive%2A> メソッドを使用して、リモートホストと通信できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-182">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="4ad81-183"><xref:System.Net.Sockets.Socket>の使用が終了したら、必ずその <xref:System.Net.Sockets.Socket.Close%2A> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-183">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="4ad81-184">アプリケーションが比較的単純な場合は、<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> メソッドではなく、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-184">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="4ad81-185"><xref:System.Net.Sockets.TcpClient> には、同期モードのブロックでネットワーク経由でデータを送受信するための簡単な方法が用意されています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-185"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-186">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-186">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-187">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-187">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-188">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-188">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-189">保留中の接続要求を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-189">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="4ad81-190">データの送受信に使用する <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-190">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-191"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> は、データの送受信に使用できる <xref:System.Net.Sockets.TcpClient> を返すブロッキングメソッドです。</span><span class="sxs-lookup"><span data-stu-id="4ad81-191"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="4ad81-192">ブロックを回避する必要がある場合は、<xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドを使用して、接続要求を受信接続キューで使用できるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-192">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="4ad81-193"><xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> メソッドを使用して、返された <xref:System.Net.Sockets.TcpClient>の基になる <xref:System.Net.Sockets.NetworkStream> を取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-193">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="4ad81-194"><xref:System.Net.Sockets.NetworkStream> には、リモートホストとの間で送受信を行うためのメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-194">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="4ad81-195"><xref:System.Net.Sockets.TcpClient>を使用する場合は、必ず <xref:System.Net.Sockets.TcpClient.Close%2A> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-195">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="4ad81-196"><xref:System.Net.Sockets.TcpClient> プランよりも柔軟性を高める場合は、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-196">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-197">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-197">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-198">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-198">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-199">次のコード例では、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを使用して <xref:System.Net.Sockets.TcpClient>を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-199">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="4ad81-200">この <xref:System.Net.Sockets.TcpClient> は、新しく接続されたクライアントとの通信に使用されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-200">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-201">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-201">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-202"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-202">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="4ad81-203">このコードを取得したら、<see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets Version 2 API エラー コード</see>のマニュアルからエラーの詳細情報を確認できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-203">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-204">保留中の接続要求を非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-204">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4ad81-205">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4ad81-205">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="4ad81-206">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、データの送受信に使用される <see cref="T:System.Net.Sockets.TcpClient" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-206">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-207">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-207">This operation will not block.</span></span> <span data-ttu-id="4ad81-208">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、TCP 接続が受け入れられた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-208">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="4ad81-209"><xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Threading.Tasks.Task%601>内の返された <xref:System.Net.Sockets.TcpClient> の基になる <xref:System.Net.Sockets.NetworkStream> を取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-209">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="4ad81-210"><xref:System.Net.Sockets.NetworkStream> には、リモートホストとの間で送受信を行うためのメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-210">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="4ad81-211"><xref:System.Net.Sockets.TcpClient>を使用する場合は、必ず <xref:System.Net.Sockets.TcpClient.Close%2A> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-211">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="4ad81-212"><xref:System.Net.Sockets.TcpClient> プランよりも柔軟性を高める場合は、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> または <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-212">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-213">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-213">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-214">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-214">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-215">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-215">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-216"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-216">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="4ad81-217">このコードを取得したら、<see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets Version 2 API エラー コード</see>のマニュアルからエラーの詳細情報を確認できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-217">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4ad81-218"><see cref="T:System.Net.Sockets.TcpListener" /> がクライアント接続をアクティブに待機しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-218">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span></span></summary>
        <value><span data-ttu-id="4ad81-219"><see cref="T:System.Net.Sockets.TcpListener" /> がアクティブに待機している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-219"><see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-220"><xref:System.Net.Sockets.TcpListener> から派生するクラスは、このプロパティを使用して、<xref:System.Net.Sockets.Socket> が受信接続の試行を現在リッスンしているかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-220">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="4ad81-221"><xref:System.Net.Sockets.TcpClient.Active%2A> プロパティを使用すると、重複する <xref:System.Net.Sockets.TcpListener.Start%2A> 試行を回避できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-221">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="4ad81-222">NAT トラバーサルを有効にするか無効にするかを指定するブール値。</span><span class="sxs-lookup"><span data-stu-id="4ad81-222">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="4ad81-223"><see cref="T:System.Net.Sockets.TcpListener" /> インスタンスのネットワーク アドレス変換 (NAT: Network Address Translation) トラバーサルを有効または無効にします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-223">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-224"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> メソッドは、<xref:System.Net.Sockets.TcpListener> インスタンスの NAT トラバーサルを有効または無効にするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-224">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="4ad81-225">NAT トラバーサルは、Teredo、6to4、または ISATAP トンネルを使用して提供される場合があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-225">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="4ad81-226">`allowed` パラメーターが false の場合、関連付けられているソケットの <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> オプションは <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-226">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="4ad81-227">これにより、<xref:System.Net.Sockets.TcpListener> インスタンスの NAT トラバーサルが明示的に無効になります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-227">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="4ad81-228">`allowed` パラメーターが true の場合、関連付けられているソケットの <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> オプションは <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-228">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="4ad81-229">これにより、システムに配置されているファイアウォールルールに応じて、<xref:System.Net.Sockets.TcpListener> の NAT トラバーサルが許可される場合があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-229">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="4ad81-230"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> メソッドは、(ソケットがバインドされる前に) 受信接続要求のリッスンを開始するために、<xref:System.Net.Sockets.TcpListener.Start%2A> メソッドを呼び出す前に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-230">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="4ad81-231"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドの後で <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> メソッドを呼び出すと、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-231">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="4ad81-232">Teredo アドレスは、プレフィックスが2001::/32 の IPv6 アドレスです。</span><span class="sxs-lookup"><span data-stu-id="4ad81-232">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="4ad81-233">Teredo アドレスは、通常の DNS 名前解決を通じて返すことも、ローカルインターフェイスに割り当てられた IPv6 アドレスとして列挙することもできます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-233">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-234"><see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> メソッドが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> メソッドの呼び出し後に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-234">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4ad81-235">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="4ad81-235">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="4ad81-236">受け入れ操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4ad81-236">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="4ad81-237">このオブジェクトは、操作の完了時に <paramref name="callback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-237">This object is passed to the <paramref name="callback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="4ad81-238">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-238">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="4ad81-239"><see cref="T:System.IAsyncResult" /> の非同期の作成を参照する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-239">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-240">非同期 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 操作は、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-240">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="4ad81-241">通常、メソッドは `callback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-241">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="4ad81-242">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-242">This method does not block until the operation completes.</span></span> <span data-ttu-id="4ad81-243">操作が完了するまでブロックするには、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-243">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="4ad81-244">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-244">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-245">返された <xref:System.Net.Sockets.Socket> の <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> プロパティを呼び出して、リモートホストのネットワークアドレスとポート番号を識別できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-245">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-246"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> プロパティを使用して特定のエラーコードを取得し、エラーの詳細については、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-246">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-247">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-247">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-248">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-248">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-249">次のコード例は、<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> メソッドを使用してソケットを作成および接続する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-249">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4ad81-250">コールバックデリゲートは、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> メソッドを呼び出して、非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-250">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-251">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-251">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4ad81-252"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-252">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4ad81-253">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="4ad81-253">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="4ad81-254">受け入れ操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4ad81-254">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="4ad81-255">このオブジェクトは、操作の完了時に <paramref name="callback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-255">This object is passed to the <paramref name="callback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="4ad81-256">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-256">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="4ad81-257"><see cref="T:System.IAsyncResult" /> の非同期の作成を参照する <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-257">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-258">非同期 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 操作は、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-258">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="4ad81-259">通常、メソッドは `callback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-259">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="4ad81-260">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-260">This method does not block until the operation completes.</span></span> <span data-ttu-id="4ad81-261">操作が完了するまでブロックするには、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-261">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="4ad81-262">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-262">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-263"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> プロパティを使用して特定のエラーコードを取得し、エラーの詳細については、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-263">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-264">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-264">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-265">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-265">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-266">次のコード例は、<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> メソッドを使用してソケットを作成および接続する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-266">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4ad81-267">コールバックデリゲートは、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> メソッドを呼び出して、非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-267">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-268">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-268">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4ad81-269"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-269">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="4ad81-270">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="4ad81-270">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="4ad81-271">指定したポートをリッスンする新しい <see cref="T:System.Net.Sockets.TcpListener" /> インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-271">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></summary>
        <returns><span data-ttu-id="4ad81-272">指定されたポートをリッスンする <see cref="T:System.Net.Sockets.TcpListener" /> の新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="4ad81-272">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="4ad81-273"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-273">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="4ad81-274">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> を作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-274">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="4ad81-275"><see cref="T:System.Net.Sockets.Socket" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-275">A <see cref="T:System.Net.Sockets.Socket" />.</span></span>  
  
<span data-ttu-id="4ad81-276">データの送受信に使用する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-276">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-277">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-277">This method blocks until the operation is complete.</span></span> <span data-ttu-id="4ad81-278">この操作を同期的に実行するには、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-278">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-279">返された <xref:System.Net.Sockets.Socket> の <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> プロパティを呼び出して、リモートホストのネットワークアドレスとポート番号を識別できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-279">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-280"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> プロパティを使用して特定のエラーコードを取得し、エラーの詳細については、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-280">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-281">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-281">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-282">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-282">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-283">次のコード例は、<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> メソッドを使用してソケットを作成および接続する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-283">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4ad81-284">コールバックデリゲートは、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> メソッドを呼び出して、非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-284">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4ad81-285">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-285">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4ad81-286"><paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-286">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4ad81-287"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> パラメーターが作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="4ad81-287">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-288"><see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-288">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-289"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-289">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="4ad81-290"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-290">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="4ad81-291">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.TcpClient" /> を作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-291">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="4ad81-292"><see cref="T:System.Net.Sockets.TcpClient" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-292">A <see cref="T:System.Net.Sockets.TcpClient" />.</span></span>  
  
<span data-ttu-id="4ad81-293">データの送受信に使用する <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-293">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-294">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-294">This method blocks until the operation is complete.</span></span> <span data-ttu-id="4ad81-295">この操作を同期的に実行するには、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-295">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-296">基になるソケット (<xref:System.Net.Sockets.TcpClient.Client%2A>) の <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> プロパティを呼び出して、リモートホストのネットワークアドレスとポート番号を識別できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-296">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-297"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> プロパティを使用して特定のエラーコードを取得し、エラーの詳細については、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-297">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-298">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-298">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-299">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-299">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-300">次のコード例は、<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> メソッドを使用してソケットを作成および接続する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-300">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4ad81-301">コールバックデリゲートは、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> メソッドを呼び出して、非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-301">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4ad81-302"><see cref="T:System.Net.Sockets.TcpListener" /> で、1 つの基になるソケットだけに特定のポートの待機を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-302">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span></span></summary>
        <value><span data-ttu-id="4ad81-303"><see cref="T:System.Net.Sockets.TcpListener" /> で、1 つの <see cref="T:System.Net.Sockets.TcpListener" /> だけに特定のポートの待機を許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-303"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4ad81-304">既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-304">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-305">既定では、複数のリスナーが特定のポートをリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-305">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="4ad81-306">ただし、ポートに送信されたネットワークトラフィックに対して操作を実行できるリスナーは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="4ad81-306">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="4ad81-307">複数のリスナーが特定のポートにバインドしようとすると、特定の IP アドレスを持つ1つのリスナーが、そのポートに送信されたネットワークトラフィックを処理します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-307">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="4ad81-308"><xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> プロパティを使用して、複数のリスナーが特定のポートをリッスンしないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-308">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="4ad81-309"><xref:System.Net.Sockets.TcpListener.Start%2A>を呼び出す前にこのプロパティを設定するか、<xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを呼び出して、このプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-309">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-310">次のコード例では、<xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> プロパティを取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-310">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-311"><see cref="T:System.Net.Sockets.TcpListener" />が開始されました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-311">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span></span> <span data-ttu-id="4ad81-312"><see cref="M:System.Net.Sockets.TcpListener.Stop" /> メソッドを呼び出して、<see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> プロパティを設定してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-312">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-313">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-313">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4ad81-314">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-314">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-315"><see cref="T:System.Net.Sockets.TcpListener" /> クラスによって使用されていたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-315">Frees resources used by the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="4ad81-316"><xref:System.Net.Sockets.TcpListener> クラスのファイナライザーは、<xref:System.Net.Sockets.TcpListener> インスタンスに関連付けられているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-316">The <xref:System.Net.Sockets.TcpListener> class finalizer free resources associated with the <xref:System.Net.Sockets.TcpListener> instance.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4ad81-317">現在の <see cref="T:System.Net.Sockets.TcpListener" /> の基になる <see cref="T:System.Net.EndPoint" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-317">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span></span></summary>
        <value><span data-ttu-id="4ad81-318"><see cref="T:System.Net.EndPoint" /> をバインドする対象の <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-318">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-319">ソケット接続が確立された後、受信クライアント接続要求をリッスンするために使用されているローカルネットワークインターフェイスとポート番号を特定するには、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-319">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="4ad81-320">まず、この <xref:System.Net.EndPoint> を <xref:System.Net.IPEndPoint>にキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-320">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="4ad81-321">その後、<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> プロパティを呼び出してローカル IP アドレスを取得し、<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> プロパティを呼び出してローカルポート番号を取得できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-321">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-322">次のコード例では、<xref:System.Net.Sockets.TcpListener> が受信接続要求をリッスンしているローカル IP アドレスとポート番号を表示します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-322">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-323">保留中の接続要求があるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-323">Determines if there are pending connection requests.</span></span></summary>
        <returns><span data-ttu-id="4ad81-324">接続が保留中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-324"><see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-325">この非ブロッキングメソッドは、保留中の接続要求があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-325">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="4ad81-326"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドと <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドは、<xref:System.Net.Sockets.TcpListener.Start%2A> メソッドが受信接続要求をキューに入れるまで実行をブロックするため、<xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドを使用して、接続が使用可能かどうかを確認してから、その受け入れを試行することができます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-326">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-327"><xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドを確認するコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-327">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="4ad81-328">接続要求が受け入れを待機している場合は、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドの呼び出しが行われます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-328">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-329">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-329">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Server { get; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Server As Socket" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4ad81-330">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-330">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="4ad81-331">基になる <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="4ad81-331">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-332"><xref:System.Net.Sockets.TcpListener> は、受信クライアント接続要求をリッスンするための <xref:System.Net.Sockets.Socket> を作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-332"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="4ad81-333"><xref:System.Net.Sockets.TcpListener> から派生するクラスは、このプロパティを使用してこの <xref:System.Net.Sockets.Socket>を取得できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-333">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="4ad81-334">によって提供さ <xref:System.Net.Sockets.TcpListener> れるアクセス権を超えてアクセスする必要がある場合は、<xref:System.Net.Sockets.TcpListener.Server%2A> プロパティによって返される基になる <xref:System.Net.Sockets.Socket> を使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-334">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-335"><xref:System.Net.Sockets.TcpListener.Server%2A> プロパティは、受信クライアント接続要求をリッスンするために使用された <xref:System.Net.Sockets.Socket> のみを返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-335">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="4ad81-336"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドを使用して、保留中の接続要求を受け入れ、データを送受信するための <xref:System.Net.Sockets.Socket> を取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-336">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="4ad81-337"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを使用して、保留中の接続要求を受け入れ、データを送受信するための <xref:System.Net.Sockets.TcpClient> を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-337">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-338">次のコード例は、<xref:System.Net.Sockets.TcpListener.Server%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-338">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="4ad81-339">基になる <xref:System.Net.Sockets.Socket> が取得され、接続が閉じられた後もデータがネットワークバッファーに残っている場合は、<xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> オプションが10秒後にタイムアウトするように構成されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-339">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4ad81-340">受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-340">Starts listening for incoming connection requests.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-341">受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-341">Starts listening for incoming connection requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-342"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドは、基になる <xref:System.Net.Sockets.Socket>を初期化し、ローカルエンドポイントにバインドして、受信接続の試行をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-342">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="4ad81-343">接続要求を受信すると、<xref:System.Net.Sockets.TcpListener.Start%2A> メソッドによって要求がキューに追加され、<xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドが呼び出されるまで、追加の要求のリッスンが続行されます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-343">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="4ad81-344">接続の最大数を既にキューに入れた後に <xref:System.Net.Sockets.TcpListener> が接続要求を受信すると、クライアントで <xref:System.Net.Sockets.SocketException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-344">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="4ad81-345">着信接続キューから接続を削除するには、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドまたは <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-345">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4ad81-346"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドは、キューから接続を削除し、データの送受信に使用できる <xref:System.Net.Sockets.TcpClient> を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-346">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="4ad81-347"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドは、同じ操作を実行するために使用できる <xref:System.Net.Sockets.Socket> を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-347">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="4ad81-348">アプリケーションで同期 i/o のみが必要な場合は、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-348">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="4ad81-349">動作制御の詳細については、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-349">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="4ad81-350">これらのメソッドはいずれも、キューで接続要求が使用できるようになるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-350">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="4ad81-351"><xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを使用して <xref:System.Net.Sockets.TcpListener> を終了し、リッスンを停止します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-351">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="4ad81-352">受け入れられた接続を個別に閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-352">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-353">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-353">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-354">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-354">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-355">次のコード例は、<xref:System.Net.Sockets.TcpListener.Start%2A> を使用して、受信クライアント接続の試行をリッスンする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-355">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-356"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-356">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="4ad81-357">このコードを取得したら、<see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets Version 2 API エラー コード</see>のマニュアルからエラーの詳細情報を確認できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-357">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="4ad81-358">保留中の接続のキューの最大長。</span><span class="sxs-lookup"><span data-stu-id="4ad81-358">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="4ad81-359">最大数の保留中の接続がある状態で、受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-359">Starts listening for incoming connection requests with a maximum number of pending connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-360"><xref:System.Net.Sockets.TcpListener.Start%2A> メソッドは、基になる <xref:System.Net.Sockets.Socket>を初期化し、ローカルエンドポイントにバインドして、受信接続の試行をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-360">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="4ad81-361">接続要求を受信すると、<xref:System.Net.Sockets.TcpListener.Start%2A> が要求をキューに置いて、<xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを呼び出すまで、追加の要求のリッスンを続行します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-361">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="4ad81-362">接続の最大数を既にキューに入れた後に <xref:System.Net.Sockets.TcpListener> が接続要求を受信した場合、クライアントで <xref:System.Net.Sockets.SocketException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-362">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="4ad81-363">着信接続キューから接続を削除するには、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドまたは <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-363">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4ad81-364"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドは、キューから接続を削除し、データの送受信に使用できる <xref:System.Net.Sockets.TcpClient> を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-364">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="4ad81-365"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドは、同じ操作を実行するために使用できる <xref:System.Net.Sockets.Socket> を返します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-365">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="4ad81-366">アプリケーションで同期 i/o のみが必要な場合は、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-366">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="4ad81-367">動作制御の詳細については、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドを使用してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-367">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4ad81-368">これらのメソッドはいずれも、キューで接続要求が使用できるようになるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-368">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="4ad81-369"><xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを使用して <xref:System.Net.Sockets.TcpListener> を終了し、リッスンを停止します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-369">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="4ad81-370">受け入れられた接続を個別に閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-370">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-371"><xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> プロパティを使用して特定のエラー コードを取得してください。エラーの詳細については、[Windows Socket Version 2 API のエラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)に関するドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-371">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-372">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-372">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-373">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-373">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-374">次のコード例は、<xref:System.Net.Sockets.TcpListener.Start%2A> を使用して、受信クライアント接続の試行をリッスンする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-374">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-375">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="4ad81-375">An error occurred while accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4ad81-376"><paramref name="backlog" /> パラメーターが 0 未満か、または使用できる接続の最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-376">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4ad81-377">基になる <see cref="T:System.Net.Sockets.Socket" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="4ad81-377">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ad81-378">リスナーを閉じます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-378">Closes the listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad81-379"><xref:System.Net.Sockets.TcpListener.Stop%2A> リスナーを閉じます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-379"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="4ad81-380">キュー内のすべての未承認の接続要求は失われます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-380">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="4ad81-381">接続が受け入れられるのを待機しているリモートホストは、<xref:System.Net.Sockets.SocketException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="4ad81-381">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="4ad81-382">受け入れられた接続を個別に閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ad81-382">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ad81-383">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-383">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4ad81-384">詳細については、「 [.NET Framework のネットワークトレース](/dotnet/framework/network-programming/network-tracing)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4ad81-384">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad81-385">次のコード例は、<xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを使用して、基になる <xref:System.Net.Sockets.Socket>を閉じる方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4ad81-385">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="4ad81-386"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-386">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="4ad81-387">このコードを取得したら、<see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets Version 2 API エラー コード</see>のマニュアルからエラーの詳細情報を確認できます。</span><span class="sxs-lookup"><span data-stu-id="4ad81-387">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="4ad81-388"><see cref="M:System.Net.Sockets.TcpListener.Stop" /> メソッドは、基になる <see cref="T:System.Net.Sockets.Socket" />も閉じ、<see cref="T:System.Net.Sockets.TcpListener" />の新しい <see cref="T:System.Net.Sockets.Socket" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="4ad81-388">The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />.</span></span> <span data-ttu-id="4ad81-389"><see cref="M:System.Net.Sockets.TcpListener.Stop" /> メソッドを呼び出す前に基になる <see cref="T:System.Net.Sockets.Socket" /> のプロパティを設定した場合、それらのプロパティは新しい <see cref="T:System.Net.Sockets.Socket" />に引き継がれません。</span><span class="sxs-lookup"><span data-stu-id="4ad81-389">If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</span></span></para></block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>
