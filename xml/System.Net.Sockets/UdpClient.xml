<Type Name="UdpClient" FullName="System.Net.Sockets.UdpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69c6df4a843f63e13697f0a8989c0ae3f19eb3d1" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73339082" /></Metadata><TypeSignature Language="C#" Value="public class UdpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7ca99-101">ユーザー データグラム プロトコル (UDP) のネットワーク サービスを提供します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-101">Provides User Datagram Protocol (UDP) network services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-102"><xref:System.Net.Sockets.UdpClient> クラスは、ブロック同期モードでコネクションレス UDP データグラムを送受信するための単純なメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-102">The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode.</span></span> <span data-ttu-id="7ca99-103">UDP はコネクションレストランスポートプロトコルであるため、データを送受信する前にリモートホスト接続を確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-103">Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data.</span></span> <span data-ttu-id="7ca99-104">ただし、次の2つの方法のいずれかで既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-104">You do, however, have the option of establishing a default remote host in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="7ca99-105">パラメーターとしてリモートホスト名とポート番号を使用して、<xref:System.Net.Sockets.UdpClient> クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-105">Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters.</span></span>  
  
-   <span data-ttu-id="7ca99-106"><xref:System.Net.Sockets.UdpClient> クラスのインスタンスを作成し、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-106">Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span>  
  
 <span data-ttu-id="7ca99-107"><xref:System.Net.Sockets.UdpClient> に用意されているいずれかの送信方法を使用して、リモートデバイスにデータを送信できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-107">You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device.</span></span> <span data-ttu-id="7ca99-108"><xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドを使用して、リモートホストからデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-108">Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-109">既定のリモートホストを既に指定している場合は、ホスト名または <xref:System.Net.IPEndPoint> を使用して <xref:System.Net.Sockets.UdpClient.Send%2A> を呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-109">Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host.</span></span> <span data-ttu-id="7ca99-110">この場合、<xref:System.Net.Sockets.UdpClient> によって例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-110">If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.</span></span>  
  
 <span data-ttu-id="7ca99-111"><xref:System.Net.Sockets.UdpClient> メソッドを使用すると、マルチキャストデータグラムを送受信することもできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-111"><xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams.</span></span> <span data-ttu-id="7ca99-112"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドを使用して、マルチキャストグループに <xref:System.Net.Sockets.UdpClient> をサブスクライブします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-112">Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group.</span></span> <span data-ttu-id="7ca99-113"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドを使用して、マルチキャストグループからの <xref:System.Net.Sockets.UdpClient> の登録を解除します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-113">Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-114">次の例では、ポート11000で `www.contoso.com` ホスト名を使用して <xref:System.Net.Sockets.UdpClient> 接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-114">The following example establishes a <xref:System.Net.Sockets.UdpClient> connection using the host name `www.contoso.com` on port 11000.</span></span> <span data-ttu-id="7ca99-115">小さい文字列のメッセージは、2つの異なるリモートホストコンピューターに送信されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-115">A small string message is sent to two separate remote host machines.</span></span> <span data-ttu-id="7ca99-116"><xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドは、メッセージが受信されるまで実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-116">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received.</span></span> <span data-ttu-id="7ca99-117"><xref:System.Net.Sockets.UdpClient.Receive%2A>に渡された <xref:System.Net.IPEndPoint> を使用すると、応答しているホストの id が明らかになります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-117">Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.</span></span>  
  
 [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="7ca99-118">発信接続を確立するか、受信要求を受け入れる。</span><span class="sxs-lookup"><span data-stu-id="7ca99-118">To establish an outgoing connection or accept an incoming request.</span></span></permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md"><span data-ttu-id="7ca99-119">TCP-UDP</span><span class="sxs-lookup"><span data-stu-id="7ca99-119">TCP-UDP</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-120"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ca99-121"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-121">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-122">このコンストラクターは、新しい <xref:System.Net.Sockets.UdpClient> を作成し、基になるサービスプロバイダーが最も適切なローカル IPv4 アドレスとポート番号を割り当てることができるようにします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-122">This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number.</span></span> <span data-ttu-id="7ca99-123">このコンストラクターが使用されている場合、<xref:System.Net.Sockets.UdpClient> インスタンスは IPv4 のアドレスファミリで設定され、IPv6 ターゲットを使用した connect メソッドの呼び出しで変更または上書きすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-123">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-124"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-124">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-125">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-125">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-126">このコンストラクターは、ソケットバインドを実行しないため、マルチキャストグループへの参加には適していません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-126">This constructor is not suitable for joining a multicast group because it does not perform socket binding.</span></span> <span data-ttu-id="7ca99-127">また、IPv4 アドレスの種類でのみ機能します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-127">Also, it works only with IPv4 address types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-128">次の例は、パラメーターなしのコンストラクターを使用して <xref:System.Net.Sockets.UdpClient> クラスのインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-128">The following example demonstrates how to use the parameterless constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-129">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-129">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="7ca99-130">通信を開始するローカル ポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-130">The local port number from which you intend to communicate.</span></span></param>
        <summary><span data-ttu-id="7ca99-131"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル ポート番号にバインドします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-131">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the local port number provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-132">このコンストラクターは、基になる <xref:System.Net.Sockets.Socket> を作成し、通信元のポート番号にバインドします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-132">This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.</span></span> <span data-ttu-id="7ca99-133">ローカルポート番号の設定にのみ関心がある場合は、このコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-133">Use this constructor if you are only interested in setting the local port number.</span></span> <span data-ttu-id="7ca99-134">基になるサービスプロバイダーによって、ローカル IP アドレスが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-134">The underlying service provider will assign the local IP address.</span></span> <span data-ttu-id="7ca99-135">コンストラクターに0を渡すと、基になるサービスプロバイダーによってポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-135">If you pass 0 to the constructor, the underlying service provider will assign a port number.</span></span> <span data-ttu-id="7ca99-136">このコンストラクターが使用されている場合、<xref:System.Net.Sockets.UdpClient> インスタンスは IPv4 のアドレスファミリで設定され、IPv6 ターゲットを使用した connect メソッドの呼び出しで変更または上書きすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-136">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-137"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-137">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-138">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-138">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-139">このコンストラクターは、IPv4 アドレスの種類でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-139">This constructor works only with IPv4 address types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-140">次の例では、ローカルポート番号を使用して <xref:System.Net.Sockets.UdpClient> クラスのインスタンスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-140">The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ca99-141"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MaxPort" /> より大きい値か <see cref="F:System.Net.IPEndPoint.MinPort" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-141">The <paramref name="port" /> parameter is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" /> or less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-142">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-142">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="7ca99-143">UDP 接続のバインド先のローカル エンドポイントを表す <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-143">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which you bind the UDP connection.</span></span></param>
        <summary><span data-ttu-id="7ca99-144"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル エンドポイントにバインドします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-144">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-145">このコンストラクターは、新しい <xref:System.Net.Sockets.UdpClient> を作成し、`localEP` パラメーターによって指定された <xref:System.Net.IPEndPoint> にバインドします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-145">This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="7ca99-146">このコンストラクターを呼び出す前に、データを送受信する IP アドレスとポート番号を使用して <xref:System.Net.IPEndPoint> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-146">Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="7ca99-147">データの送受信に使用するローカル IP アドレスとポート番号を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-147">You do not need to specify a local IP address and port number for sending and receiving data.</span></span> <span data-ttu-id="7ca99-148">そうしないと、基になるサービスプロバイダーによって、最も適切なローカル IP アドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-148">If you do not, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="7ca99-149">このコンストラクターを使用する場合、<xref:System.Net.Sockets.UdpClient> インスタンスは、`localEP` パラメーターで指定されたアドレスファミリを使用して設定されます。これは、別のアドレスファミリを持つ connect メソッドの呼び出しで変更または上書きすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-149">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-150"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-150">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-151">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-151">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-152">次の例は、ローカルエンドポイントを使用して <xref:System.Net.Sockets.UdpClient> クラスのインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-152">The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-153"><paramref name="localEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-153"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-154">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-154">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family"><span data-ttu-id="7ca99-155">ソケットのアドレッシング スキームを指定する <see cref="T:System.Net.Sockets.AddressFamily" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="7ca99-155">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values that specifies the addressing scheme of the socket.</span></span></param>
        <summary><span data-ttu-id="7ca99-156"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-156">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-157">`family` パラメーターは、リスナーが IP バージョン4アドレス (IPv4) または IP version 6 (IPv6) アドレスを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-157">The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</span></span> <span data-ttu-id="7ca99-158">IPv4 アドレスを使用するには、<xref:System.Net.Sockets.AddressFamily.InterNetwork> 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-158">To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value.</span></span> <span data-ttu-id="7ca99-159">IPv6 アドレスを使用するには、<xref:System.Net.Sockets.AddressFamily.InterNetworkV6> 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-159">To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value.</span></span> <span data-ttu-id="7ca99-160">それ以外の値を渡すと、メソッドによって <xref:System.ArgumentException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-160">Passing any other value will cause the method to throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="7ca99-161">このコンストラクターを使用する場合、<xref:System.Net.Sockets.UdpClient> インスタンスは、`family` パラメーターで指定されたアドレスファミリを使用して設定されます。これは、別のアドレスファミリを持つ connect メソッドの呼び出しで変更または上書きすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-161">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-162"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-162">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-163">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-163">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-164"><xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> は、ソケットバインドを実行しないため、マルチキャストグループへの参加には適していません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-164">The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> is not suitable for joining a multicast group because it does not perform socket binding.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-165"><paramref name="family" /> が、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> でも <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> でもありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-165"><paramref name="family" /> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-166">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-166">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port, System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer, family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port, System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int * System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (port, family)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="7ca99-167">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="7ca99-167">The port on which to listen for incoming connection attempts.</span></span></param>
        <param name="family"><span data-ttu-id="7ca99-168">ソケットのアドレッシング スキームを指定する <see cref="T:System.Net.Sockets.AddressFamily" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="7ca99-168">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values that specifies the addressing scheme of the socket.</span></span></param>
        <summary><span data-ttu-id="7ca99-169"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル ポート番号にバインドします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-169">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the local port number provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-170">このコンストラクターは、基になる <xref:System.Net.Sockets.Socket> を作成し、通信元のポート番号にバインドします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-170">This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.</span></span>  
  
 <span data-ttu-id="7ca99-171">`family` パラメーターは、リスナーが IP バージョン4アドレス (IPv4) または IP version 6 (IPv6) アドレスを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-171">The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</span></span> <span data-ttu-id="7ca99-172">IPv4 アドレスを使用するには、<xref:System.Net.Sockets.AddressFamily.InterNetwork> 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-172">To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value.</span></span> <span data-ttu-id="7ca99-173">IPv6 アドレスを使用するには、<xref:System.Net.Sockets.AddressFamily.InterNetworkV6> 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-173">To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value.</span></span> <span data-ttu-id="7ca99-174">それ以外の値を渡すと、メソッドによって <xref:System.ArgumentException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-174">Passing any other value will cause the method to throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="7ca99-175">このコンストラクターを使用する場合、<xref:System.Net.Sockets.UdpClient> インスタンスは、`family` パラメーターで指定されたアドレスファミリを使用して設定されます。これは、別のアドレスファミリを持つ connect メソッドの呼び出しで変更または上書きすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-175">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-176"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-176">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-177">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-177">Once you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-178">次のコード例は、マルチキャストグループで使用する UDP クライアントを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-178">The following code example shows how to create a UDP client to use in a multicast group.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-179"><paramref name="family" /> が、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> でも <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> でもありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-179"><paramref name="family" /> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ca99-180"><paramref name="port" /> は <see cref="F:System.Net.IPEndPoint.MaxPort" /> を超えているか、または <see cref="F:System.Net.IPEndPoint.MinPort" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-180"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" /> or less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-181">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-181">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : string * int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="7ca99-182">接続先のリモート DNS ホスト名。</span><span class="sxs-lookup"><span data-stu-id="7ca99-182">The name of the remote DNS host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="7ca99-183">接続先のリモート ポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-183">The remote port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="7ca99-184"><see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-184">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and establishes a default remote host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-185">このコンストラクターは、新しい <xref:System.Net.Sockets.UdpClient> を初期化し、`hostname` と `port` パラメーターを使用してリモートホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-185">This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters.</span></span> <span data-ttu-id="7ca99-186">既定のリモートホストの確立は任意です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-186">Establishing a default remote host is optional.</span></span> <span data-ttu-id="7ca99-187">このコンストラクターを使用する場合は、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドを呼び出すたびにリモートホストを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-187">If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-188">既定のリモートホストを指定すると、そのホストのみに制限されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-188">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="7ca99-189"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出すことにより、既定のリモートホストをいつでも変更できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-189">You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-190"><xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しでリモートホストを指定する場合は、このコンストラクターを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-190">If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-191"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-191">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-192">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-192">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-193">次の例は、ホスト名とポート番号を使用して <xref:System.Net.Sockets.UdpClient> クラスのインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-193">The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-194"><paramref name="hostname" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-194"><paramref name="hostname" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ca99-195"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-195"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-196">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-196">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.UdpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-197">既定のリモート ホストが確立されたかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-197">Gets or sets a value indicating whether a default remote host has been established.</span></span></summary>
        <value><span data-ttu-id="7ca99-198">接続がアクティブである場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-198"><see langword="true" /> if a connection is active; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-199"><xref:System.Net.Sockets.UdpClient> から派生するクラスは、このプロパティを使用して、既定のリモートホストが確立されているかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-199">Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established.</span></span> <span data-ttu-id="7ca99-200">既定のリモートホストを確立するには、適切なコンストラクターを使用するか、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-200">You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-201">既定のリモートホストを確立した場合、<xref:System.Net.Sockets.UdpClient.Send%2A>の呼び出しでリモートホストを指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-201">If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.UdpClient" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="udpClient.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="7ca99-202">NAT トラバーサルを有効にするか無効にするかを指定するブール値。</span><span class="sxs-lookup"><span data-stu-id="7ca99-202">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="7ca99-203"><see cref="T:System.Net.Sockets.UdpClient" /> インスタンスのネットワーク アドレス変換 (NAT: Network Address Translation) トラバーサルを有効または無効にします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-203">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.UdpClient" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-204"><xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> メソッドは、<xref:System.Net.Sockets.UdpClient> インスタンスの NAT トラバーサルを有効または無効にするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-204">The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.</span></span> <span data-ttu-id="7ca99-205">NAT トラバーサルは、Teredo、6to4、または ISATAP トンネルを使用して提供される場合があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-205">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="7ca99-206">`allowed` パラメーターが false の場合、関連付けられているソケットの <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> オプションは <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-206">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="7ca99-207">これにより、<xref:System.Net.Sockets.UdpClient> インスタンスの NAT トラバーサルが明示的に無効になります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-207">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.</span></span>  
  
 <span data-ttu-id="7ca99-208">`allowed` パラメーターが true の場合、関連付けられているソケットの <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> オプションは <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-208">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="7ca99-209">これにより、システムに配置されているファイアウォールルールに応じて、<xref:System.Net.Sockets.UdpClient> の NAT トラバーサルが許可される場合があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-209">This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="7ca99-210">Teredo アドレスは、プレフィックスが2001::/32 の IPv6 アドレスです。</span><span class="sxs-lookup"><span data-stu-id="7ca99-210">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="7ca99-211">Teredo アドレスは、通常の DNS 名前解決を通じて返すことも、ローカルインターフェイスに割り当てられた IPv6 アドレスとして列挙することもできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-211">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.UdpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-212">読み取りが可能なネットワークから受信したデータの量を取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-212">Gets the amount of data received from the network that is available to read.</span></span></summary>
        <value><span data-ttu-id="7ca99-213">ネットワークから受信したデータのバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-213">The number of bytes of data received from the network.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-214"><xref:System.Net.Sockets.UdpClient.Available%2A> プロパティは、読み取り用にネットワークバッファーにキューに格納されるデータの量を決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-214">The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="7ca99-215">データが使用可能な場合は、<xref:System.Net.Sockets.NetworkStream.Read%2A> を呼び出してデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-215">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="7ca99-216">使用できるデータがない場合、<xref:System.Net.Sockets.UdpClient.Available%2A> プロパティは0を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-216">If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.</span></span>  
  
 <span data-ttu-id="7ca99-217">リモートホストが接続をシャットダウンするか、接続を閉じた場合、<xref:System.Net.Sockets.UdpClient.Available%2A> プロパティによって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-217">If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-218"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得し、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントでエラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-218">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-219">次のコード例は、<xref:System.Net.Sockets.UdpClient.Available%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-219">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Available%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-220">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-220">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-221"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-221">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginReceive (requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestCallback"><span data-ttu-id="7ca99-222">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="7ca99-222">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7ca99-223">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-223">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="7ca99-224">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-224">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="7ca99-225">データグラムをリモート ホストから非同期的に受信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-225">Receives a datagram from a remote host asynchronously.</span></span></summary>
        <returns><span data-ttu-id="7ca99-226">非同期の受信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-226">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous receive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-227">非同期 <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> 操作は、<xref:System.Net.Sockets.UdpClient.EndReceive%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-227">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method.</span></span> <span data-ttu-id="7ca99-228">通常、メソッドは `requestCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-228">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="7ca99-229">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-229">This method does not block until the operation is complete.</span></span> <span data-ttu-id="7ca99-230">操作が完了するまでブロックするには、<xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-230">To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="7ca99-231">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-231">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-232">次のコード例では、<xref:System.Net.Sockets.UdpClient.BeginReceive%2A> を使用して、サーバー応答を非同期的に受信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-232">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> to asynchronously receive a server response.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-233">データグラムをリモート ホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-233">Sends a datagram to a remote host asynchronously.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="7ca99-234">送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-234">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-235">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-235">The number of bytes to send.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="7ca99-236">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="7ca99-236">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7ca99-237">送信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-237">A user-defined object that contains information about the send operation.</span></span> <span data-ttu-id="7ca99-238">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-238">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="7ca99-239">データグラムをリモート ホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-239">Sends a datagram to a remote host asynchronously.</span></span> <span data-ttu-id="7ca99-240">送信先は、<see cref="Overload:System.Net.Sockets.UdpClient.Connect" /> の呼び出しであらかじめ指定されています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-240">The destination was specified previously by a call to <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />.</span></span></summary>
        <returns><span data-ttu-id="7ca99-241">非同期の送信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-241">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-242">非同期 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 操作は、<xref:System.Net.Sockets.UdpClient.EndSend%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-242">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="7ca99-243">通常、メソッドは `requestCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-243">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="7ca99-244">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-244">This method does not block until the operation completes.</span></span> <span data-ttu-id="7ca99-245">操作が完了するまでブロックするには、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-245">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="7ca99-246">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-246">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-247">次のコード例では、<xref:System.Net.Sockets.UdpClient.BeginSend%2A> を使用して、サーバー要求を非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-247">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, endPoint, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="7ca99-248">送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-248">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-249">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-249">The number of bytes to send.</span></span></param>
        <param name="endPoint"><span data-ttu-id="7ca99-250">データの送信先を表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-250">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="7ca99-251">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="7ca99-251">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7ca99-252">送信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-252">A user-defined object that contains information about the send operation.</span></span> <span data-ttu-id="7ca99-253">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-253">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="7ca99-254">データグラムを送信先に非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-254">Sends a datagram to a destination asynchronously.</span></span> <span data-ttu-id="7ca99-255">送信先は、<see cref="T:System.Net.EndPoint" /> で指定されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-255">The destination is specified by a <see cref="T:System.Net.EndPoint" />.</span></span></summary>
        <returns><span data-ttu-id="7ca99-256">非同期の送信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-256">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-257">非同期 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 操作は、<xref:System.Net.Sockets.UdpClient.EndSend%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-257">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="7ca99-258">通常、メソッドは `requestCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-258">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="7ca99-259">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-259">This method does not block until the operation is complete.</span></span> <span data-ttu-id="7ca99-260">操作が完了するまでブロックするには、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-260">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="7ca99-261">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-261">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-262">次のコード例では、<xref:System.Net.Sockets.UdpClient.BeginSend%2A> を使用して、サーバー要求を非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-262">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, string hostname, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, hostname As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, hostname, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="7ca99-263">送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-263">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-264">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-264">The number of bytes to send.</span></span></param>
        <param name="hostname"><span data-ttu-id="7ca99-265">送信先のホスト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-265">The destination host.</span></span></param>
        <param name="port"><span data-ttu-id="7ca99-266">送信先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-266">The destination port number.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="7ca99-267">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="7ca99-267">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="7ca99-268">送信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-268">A user-defined object that contains information about the send operation.</span></span> <span data-ttu-id="7ca99-269">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-269">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="7ca99-270">データグラムを送信先に非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-270">Sends a datagram to a destination asynchronously.</span></span> <span data-ttu-id="7ca99-271">送信先は、ホスト名とポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-271">The destination is specified by the host name and port number.</span></span></summary>
        <returns><span data-ttu-id="7ca99-272">非同期の送信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-272">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-273">非同期 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 操作は、<xref:System.Net.Sockets.UdpClient.EndSend%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-273">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="7ca99-274">通常、メソッドは `requestCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-274">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="7ca99-275">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-275">This method does not block until the operation is complete.</span></span> <span data-ttu-id="7ca99-276">操作が完了するまでブロックするには、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-276">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="7ca99-277">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-277">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-278">次のコード例では、<xref:System.Net.Sockets.UdpClient.BeginSend%2A> を使用して、サーバー要求を非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-278">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Client { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Property Client As Socket" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-279">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-279">Gets or sets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="7ca99-280">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-280">The underlying Network <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-281"><xref:System.Net.Sockets.UdpClient> は、ネットワーク経由でデータを送受信するために使用される <xref:System.Net.Sockets.Socket> を作成します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-281"><xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network.</span></span> <span data-ttu-id="7ca99-282"><xref:System.Net.Sockets.UdpClient> から派生するクラスは、このプロパティを使用してこの <xref:System.Net.Sockets.Socket>を取得または設定できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-282">Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="7ca99-283"><xref:System.Net.Sockets.UdpClient.Client%2A> から返される基になる <xref:System.Net.Sockets.Socket> を使用します。 <xref:System.Net.Sockets.UdpClient> が提供するアクセス権を超えてアクセスする必要がある場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-283">Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides.</span></span> <span data-ttu-id="7ca99-284">また、<xref:System.Net.Sockets.UdpClient.Client%2A> を使用して、基になる <xref:System.Net.Sockets.Socket> を既存の <xref:System.Net.Sockets.Socket>に設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-284">You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="7ca99-285">これは、既存の <xref:System.Net.Sockets.Socket>を使用して <xref:System.Net.Sockets.UdpClient> のシンプルさを活用する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-285">This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-286">次の例は、<xref:System.Net.Sockets.UdpClient.Client%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-286">The following example demonstrates the use of the <xref:System.Net.Sockets.UdpClient.Client%2A> property.</span></span> <span data-ttu-id="7ca99-287">この例では、基になる <xref:System.Net.Sockets.Socket>に対してブロードキャストが有効になっています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-287">In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="udpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ca99-288">UDP 接続を終了します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-288">Closes the UDP connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-289"><xref:System.Net.Sockets.UdpClient.Close%2A> は、基になる <xref:System.Net.Sockets.Socket> を無効にし、<xref:System.Net.Sockets.UdpClient>に関連付けられているすべてのマネージリソースとアンマネージリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-289">The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-290"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-290">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-291">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-291">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-292">次の例は、<xref:System.Net.Sockets.UdpClient.Close%2A> メソッドを呼び出すことによって <xref:System.Net.Sockets.UdpClient> を終了する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-292">The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the <xref:System.Net.Sockets.UdpClient.Close%2A> method.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-293">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-293">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-294">既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-294">Establishes a default remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (endPoint As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="udpClient.Connect endPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="endPoint"><span data-ttu-id="7ca99-295">データ送信先のネットワーク エンドポイントを指定する <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-295">An <see cref="T:System.Net.IPEndPoint" /> that specifies the network endpoint to which you intend to send data.</span></span></param>
        <summary><span data-ttu-id="7ca99-296">指定されたネットワーク エンドポイントを使用して、既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-296">Establishes a default remote host using the specified network endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-297"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドは、`endPoint` パラメーターで指定された値を使用して、既定のリモートホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-297">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter.</span></span> <span data-ttu-id="7ca99-298">確立した後、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドを呼び出すたびに、リモートホストを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-298">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="7ca99-299">既定のリモートホストの確立は任意です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-299">Establishing a default remote host is optional.</span></span> <span data-ttu-id="7ca99-300">既定のリモートホストを指定すると、そのホストのみに制限されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-300">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="7ca99-301">データグラムを別のリモートホストに送信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドに対して別の呼び出しを行うか、既定のリモートホストを使用せずに別の <xref:System.Net.Sockets.UdpClient> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-301">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span> <span data-ttu-id="7ca99-302">既定のリモートホストを確立していて、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しでリモートホストを指定した場合は、<xref:System.Net.Sockets.UdpClient.Send%2A> によって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-302">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-303"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-303">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-304">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-304">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-305"><xref:System.Net.Sockets.Socket.Connect%2A> メソッドを呼び出すと、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-305">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="7ca99-306"><xref:System.Net.Sockets.UdpClient>から継承する場合を除き、この方法を使用して既定のリモートホストをブロードキャストアドレスに設定することはできません。また、クライアントメソッドを使用して基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-306">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7ca99-307">ただし、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しで <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> を指定する場合は、既定のブロードキャストアドレスである255.255.255.255 にデータをブロードキャストできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-307">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-308">アプリケーションでブロードキャストアドレスをより細かく制御する必要がある場合は、<xref:System.Net.Sockets.Socket> クラスを使用するように戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-308">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-309">UDP プロトコルはコネクションレスであるため、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-309">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="7ca99-310">掛けデータグラムを受信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-310">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-311">次の例では、<xref:System.Net.IPEndPoint> を使用して、既定のリモートホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-311">The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-312">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-312">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-313"><paramref name="endPoint" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-313"><paramref name="endPoint" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-314"><see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-314">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress addr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress addr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ addr, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.Connect (addr, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addr" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addr"><span data-ttu-id="7ca99-315">データ送信先のリモート ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-315">The <see cref="T:System.Net.IPAddress" /> of the remote host to which you intend to send data.</span></span></param>
        <param name="port"><span data-ttu-id="7ca99-316">データ送信先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-316">The port number to which you intend send data.</span></span></param>
        <summary><span data-ttu-id="7ca99-317">指定した IP アドレスとポート番号を使用して、既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-317">Establishes a default remote host using the specified IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-318"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドは、`addr` パラメーターと `port` パラメーターで指定された値を使用して、既定のリモートホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-318">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters.</span></span> <span data-ttu-id="7ca99-319">確立した後、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドを呼び出すたびに、リモートホストを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-319">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="7ca99-320">既定のリモートホストの確立は任意です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-320">Establishing a default remote host is optional.</span></span> <span data-ttu-id="7ca99-321">既定のリモートホストを指定すると、そのホストのみに制限されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-321">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="7ca99-322">データグラムを別のリモートホストに送信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドに対して別の呼び出しを行うか、既定のリモートホストを使用せずに別の <xref:System.Net.Sockets.UdpClient> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-322">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span> <span data-ttu-id="7ca99-323">既定のリモートホストを確立していて、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しでリモートホストを指定した場合は、<xref:System.Net.Sockets.UdpClient.Send%2A> によって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-323">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-324"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-324">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-325">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-325">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-326"><xref:System.Net.Sockets.Socket.Connect%2A> メソッドを呼び出すと、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-326">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="7ca99-327"><xref:System.Net.Sockets.UdpClient>から継承する場合を除き、この方法を使用して既定のリモートホストをブロードキャストアドレスに設定することはできません。また、クライアントメソッドを使用して基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-327">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7ca99-328">ただし、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しで <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> を指定する場合は、既定のブロードキャストアドレスである255.255.255.255 にデータをブロードキャストできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-328">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-329">アプリケーションでブロードキャストアドレスをより細かく制御する必要がある場合は、<xref:System.Net.Sockets.Socket> クラスを使用するように戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-329">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-330">UDP プロトコルはコネクションレスであるため、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-330">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="7ca99-331">掛けデータグラムを受信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-331">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-332">次の例では、IP アドレスとポート番号を使用して、リモートホストと接続します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-332">The following example uses an IP address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-333"><see cref="T:System.Net.Sockets.UdpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-333"><see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-334"><paramref name="addr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-334"><paramref name="addr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ca99-335"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-335"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-336">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-336">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="udpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="7ca99-337">データ送信先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="7ca99-337">The DNS name of the remote host to which you intend send data.</span></span></param>
        <param name="port"><span data-ttu-id="7ca99-338">データ送信先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-338">The port number on the remote host to which you intend to send data.</span></span></param>
        <summary><span data-ttu-id="7ca99-339">指定したホスト名とポート番号を使用して、既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-339">Establishes a default remote host using the specified host name and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-340"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドは、`port` パラメーターと `hostname` パラメーターで指定された値を使用して、既定のリモートホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-340">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters.</span></span> <span data-ttu-id="7ca99-341">確立した後、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドを呼び出すたびに、リモートホストを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-341">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="7ca99-342">既定のリモートホストの確立は任意です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-342">Establishing a default remote host is optional.</span></span> <span data-ttu-id="7ca99-343">既定のリモートホストを指定すると、そのホストのみに制限されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-343">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="7ca99-344">データグラムを別のリモートホストに送信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドに対して別の呼び出しを行うか、既定のリモートホストを使用せずに別の <xref:System.Net.Sockets.UdpClient> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-344">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span>  
  
 <span data-ttu-id="7ca99-345">既定のリモートホストを確立していて、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しでリモートホストを指定した場合は、<xref:System.Net.Sockets.UdpClient.Send%2A> によって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-345">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-346"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-346">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-347">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-347">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-348"><xref:System.Net.Sockets.Socket.Connect%2A> メソッドを呼び出すと、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-348">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="7ca99-349"><xref:System.Net.Sockets.UdpClient>から継承する場合を除き、この方法を使用して既定のリモートホストをブロードキャストアドレスに設定することはできません。また、クライアントメソッドを使用して基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-349">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7ca99-350">ただし、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドの呼び出しで <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> を指定する場合は、既定のブロードキャストアドレスである255.255.255.255 にデータをブロードキャストできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-350">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-351">アプリケーションでブロードキャストアドレスをより細かく制御する必要がある場合は、<xref:System.Net.Sockets.Socket> クラスを使用するように戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-351">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-352">UDP プロトコルはコネクションレスであるため、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-352">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="7ca99-353">掛けデータグラムを受信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-353">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-354">次の例では、ホスト名とポート番号を使用して、リモートホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-354">The following example uses the host name and port number to connect to a remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-355"><see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-355">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ca99-356"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-356"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-357">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-357">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ca99-358"><see cref="T:System.Net.Sockets.UdpClient" /> によって使用されているマネージド リソースおよびアンマネージド リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-358">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="udpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="7ca99-359">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-359"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="7ca99-360"><see cref="T:System.Net.Sockets.UdpClient" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-360">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-361">このメソッドは、パブリック `Dispose()` メソッドと <xref:System.Object.Finalize%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-361">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="7ca99-362">`Dispose()` は、`disposing` パラメーターを `true` に設定して、protected `Dispose(Boolean)` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-362">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="7ca99-363"><xref:System.Object.Finalize%2A> は、`disposing` が `false` に設定された `Dispose` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-363"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="7ca99-364">`disposing` パラメーターが true の場合、このメソッドは、この <xref:System.Net.Sockets.UdpClient> が参照するすべてのマネージオブジェクトによって保持されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-364">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references.</span></span> <span data-ttu-id="7ca99-365">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-365">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7ca99-366">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-366">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="7ca99-367">をオーバーライドする場合は <see langword="Dispose(Boolean)" /> 以前に <see langword="Dispose" />を呼び出したときに破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-367">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="7ca99-368"><see langword="Dispose(Boolean)" />を実装する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-368">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="7ca99-369"><see langword="Dispose" /> と <see cref="M:System.Object.Finalize" />の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-369">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.UdpClient.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-370"><see cref="T:System.Boolean" /> でインターネット プロトコル (IP) データグラムの断片化を許可するかどうかを指定する <see cref="T:System.Net.Sockets.UdpClient" /> 値を、取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-370">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> allows Internet Protocol (IP) datagrams to be fragmented.</span></span></summary>
        <value><span data-ttu-id="7ca99-371"><see cref="T:System.Net.Sockets.UdpClient" /> がデータグラムの断片化を許可するかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-371"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7ca99-372">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-372">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-373">データグラムのサイズが、転送メディアの最大転送単位 (MTU) を超えると、断片化が必要になります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-373">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="7ca99-374">送信ホストまたは中間ルーターによって、データグラムが断片化されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-374">Datagrams may be fragmented by the sending host or by an intermediate router.</span></span> <span data-ttu-id="7ca99-375">データグラムをフラグメント化する必要があり、<xref:System.Net.Sockets.Socket.DontFragment%2A> オプションが設定されている場合、データグラムは破棄され、インターネット制御メッセージプロトコル (ICMP) のエラーメッセージがデータグラムの送信者に送り返されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-375">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-376">次のコード例は、<xref:System.Net.Sockets.Socket.DontFragment%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-376">The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7ca99-377">このプロパティは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> フラグまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> フラグを使用するソケットに対してのみ設定できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-377">This property can be set only for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DropMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-378">マルチキャスト グループへの参加を取り消します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-378">Leaves a multicast group.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.DropMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="7ca99-379">参加を取り消すマルチキャスト グループの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-379">The <see cref="T:System.Net.IPAddress" /> of the multicast group to leave.</span></span></param>
        <summary><span data-ttu-id="7ca99-380">マルチキャスト グループへの参加を取り消します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-380">Leaves a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-381"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドは、指定された <xref:System.Net.IPAddress>によって識別されるマルチキャストグループからの <xref:System.Net.Sockets.UdpClient> を引き出さします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-381">The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="7ca99-382"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドを呼び出した後、基になる <xref:System.Net.Sockets.Socket> はインターネットグループ管理プロトコル (IGMP) パケットをルーターに送信し、マルチキャストグループからルーターを削除します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-382">After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</span></span> <span data-ttu-id="7ca99-383">グループから <xref:System.Net.Sockets.UdpClient> 引き出さした後は、そのグループに送信されたデータグラムを受信できなくなります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-383">After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-384"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-384">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-385">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-385">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-386">次の例では、マルチキャストアドレスを指定してマルチキャストグループを削除する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-386">The following example demonstrates how to drop a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-387">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-387">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-388">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-388">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-389">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-389">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-390"><paramref name="multicastAddr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-390"><paramref name="multicastAddr" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr, int32 ifindex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress, ifindex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr, int ifindex);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.DropMulticastGroup (multicastAddr, ifindex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="ifindex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="7ca99-391">参加を取り消すマルチキャスト グループの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-391">The <see cref="T:System.Net.IPAddress" /> of the multicast group to leave.</span></span></param>
        <param name="ifindex"><span data-ttu-id="7ca99-392">参加を取り消すマルチキャスト グループのローカル アドレス。</span><span class="sxs-lookup"><span data-stu-id="7ca99-392">The local address of the multicast group to leave.</span></span></param>
        <summary><span data-ttu-id="7ca99-393">マルチキャスト グループへの参加を取り消します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-393">Leaves a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-394"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドは、指定された <xref:System.Net.IPAddress>によって識別されるマルチキャストグループからの <xref:System.Net.Sockets.UdpClient> を引き出さします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-394">The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="7ca99-395"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドを呼び出した後、基になる <xref:System.Net.Sockets.Socket> はインターネットグループ管理プロトコル (IGMP) パケットをルーターに送信し、マルチキャストグループからルーターを削除します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-395">After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</span></span> <span data-ttu-id="7ca99-396">グループから <xref:System.Net.Sockets.UdpClient> 引き出さした後は、そのグループに送信されたデータグラムを受信できなくなります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-396">After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-397"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-397">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-398">このコードを取得した後、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-398">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-399">次のコード例は、マルチキャストアドレスを指定してマルチキャストグループを削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-399">The following code example demonstrates how to drop a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-400">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-400">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-401">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-401">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-402">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-402">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-403"><paramref name="multicastAddr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-403"><paramref name="multicastAddr" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-404"><see cref="T:System.Boolean" /> がブロードキャスト パケットの送受信を許可するかどうかを指定する <see cref="T:System.Net.Sockets.UdpClient" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-404">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> may send or receive broadcast packets.</span></span></summary>
        <value><span data-ttu-id="7ca99-405"><see cref="T:System.Net.Sockets.UdpClient" /> がブロードキャストパケットを許可するかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-405"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows broadcast packets; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7ca99-406">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-406">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-407">ブロードキャストは特定のサブネットに限定されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-407">Broadcasting is limited to a specific subnet.</span></span> <span data-ttu-id="7ca99-408">パケットを255.255.255.255 に送信することで、ローカルサブネットにブロードキャストできます。または、ホスト部分ですべてのビットが設定されたインターネットプロトコル (IP) アドレスのネットワーク部分である、ダイレクトブロードキャストアドレスを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-408">You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="7ca99-409">たとえば、IP アドレスが 192.168.1.40 (クラス C アドレスで、最初の3つのオクテットがネットワークの部分で、ホストの部分が最後のオクテットである) の場合、転送先のブロードキャストアドレスは192.168.1.255 になります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-409">For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-410">次のコード例は、<xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-410">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EndReceive(class System.IAsyncResult asyncResult, class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EndReceive(IAsyncResult ^ asyncResult, System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult * IPEndPoint -&gt; byte[]" Usage="udpClient.EndReceive (asyncResult, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="7ca99-411"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-411">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="7ca99-412">指定したリモート エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="7ca99-412">The specified remote endpoint.</span></span></param>
        <summary><span data-ttu-id="7ca99-413">保留中の非同期受信を終了します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-413">Ends a pending asynchronous receive.</span></span></summary>
        <returns><span data-ttu-id="7ca99-414">成功した場合は、データグラム データを格納するバイトの配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-414">If successful, an array of bytes that contains datagram data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-415">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-415">This method blocks until the operation is complete.</span></span>  
  
 <span data-ttu-id="7ca99-416">この操作を同期的に実行するには、<xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-416">To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-417">次のコード例では、<xref:System.Net.Sockets.UdpClient.BeginSend%2A> を使用して、サーバー応答の非同期受信を完了します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-417">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-418"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-418"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-419"><paramref name="asyncResult" /> メソッドへの呼び出しで <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="7ca99-419"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-420"><see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> が、非同期の読み取りのために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-420"><see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-421">基になる <see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-421">An error occurred when attempting to access the underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-422">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-422">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="udpClient.EndSend asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="7ca99-423"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-423">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" />.</span></span></param>
        <summary><span data-ttu-id="7ca99-424">保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-424">Ends a pending asynchronous send.</span></span></summary>
        <returns><span data-ttu-id="7ca99-425">正常に完了した場合は、<see cref="T:System.Net.Sockets.UdpClient" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-425">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-426">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-426">This method blocks until the operation is complete.</span></span>  
  
 <span data-ttu-id="7ca99-427">この操作を同期的に実行するには、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-427">To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-428">次のコード例では、<xref:System.Net.Sockets.UdpClient.BeginSend%2A> を使用して、サーバー要求の非同期送信を完了します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-428">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-429"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-429"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-430"><paramref name="asyncResult" /> メソッドへの呼び出しで <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="7ca99-430"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-431"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> が、非同期の読み取りのために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-431"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-432">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-432">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-433">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-433">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-434"><see cref="T:System.Boolean" /> で 1 つのクライアントだけがポートを使用できるかどうかを指定する <see cref="T:System.Net.Sockets.UdpClient" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-434">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> allows only one client to use a port.</span></span></summary>
        <value><span data-ttu-id="7ca99-435"><see langword="true" /> で、1 つのクライアントだけが特定のポートを使用できる場合は <see cref="T:System.Net.Sockets.UdpClient" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-435"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7ca99-436">既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-436">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-437">既定では、複数のクライアントが特定のポートを使用できます。ただし、ポートに送信されたネットワークトラフィックに対して操作を実行できるのは、1つのクライアントだけです。</span><span class="sxs-lookup"><span data-stu-id="7ca99-437">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="7ca99-438">複数のクライアントが特定のポートを使用できないようにするには、<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-438">You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="7ca99-439">基になるソケットがクライアントポートにバインドされる前に、このプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-439">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="7ca99-440"><xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>、<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>、<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>、または <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>を呼び出すと、クライアントポートがコンストラクターの副作用としてバインドされます。その後、<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> プロパティを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-440">If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-441">次のコード例では、<xref:System.Net.Sockets.UdpClient>を作成し、<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> プロパティを取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-441">The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-442">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-442">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-443">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-443">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!UdpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="udpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="JoinMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-444"><see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-444">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="7ca99-445">参加対象のグループのマルチキャスト <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-445">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span></span></param>
        <summary><span data-ttu-id="7ca99-446"><see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-446">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-447"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドは、指定された <xref:System.Net.IPAddress>を使用して、<xref:System.Net.Sockets.UdpClient> をマルチキャストグループにサブスクライブします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-447">The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="7ca99-448"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドを呼び出した後、基になる <xref:System.Net.Sockets.Socket> は、マルチキャストグループのメンバーシップを要求するインターネットグループ管理プロトコル (IGMP) パケットをルーターに送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-448">After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</span></span> <span data-ttu-id="7ca99-449">マルチキャストアドレス範囲は、224.0.0.0 ~ 239.255.255.255 です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-449">The multicast address range is 224.0.0.0 to 239.255.255.255.</span></span> <span data-ttu-id="7ca99-450">この範囲外のアドレスを指定した場合、または要求を作成したルーターがマルチキャストを有効にしていない場合は、<xref:System.Net.Sockets.UdpClient> によって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-450">If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-451"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-451">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-452">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-452">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="7ca99-453"><xref:System.Net.Sockets.UdpClient> がマルチキャストグループのメンバーとしてルーターに一覧表示されると、指定した <xref:System.Net.IPAddress>に送信された掛けデータグラムを受信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-453">Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-454">マルチキャストポート番号を使用して <xref:System.Net.Sockets.UdpClient> を作成する必要があります。そうしないと、掛けデータグラムを受信できなくなります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-454">You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams.</span></span> <span data-ttu-id="7ca99-455"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドを呼び出す前に <xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。そうしないと、<xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドが機能しません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-455">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work.</span></span> <span data-ttu-id="7ca99-456">マルチキャスト IP アドレスにデータグラムを送信するために、マルチキャストグループに属している必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-456">You do not need to belong to a multicast group to send datagrams to a multicast IP address.</span></span>  
  
 <span data-ttu-id="7ca99-457">マルチキャストグループに参加する前に、ソケットがポートまたはエンドポイントにバインドされていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-457">Before joining a multicast group, make sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="7ca99-458">これを行うには、パラメーターとしてポートまたはエンドポイントを受け入れるコンストラクターのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-458">You do that by calling one of the constructors that accept a port or an endpoint as a parameter.</span></span>  
  
 <span data-ttu-id="7ca99-459">掛けデータグラムの受信を停止するには、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドを呼び出し、取り消すグループの <xref:System.Net.IPAddress> を指定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-459">To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-460">IPv6 の場合、選択できるマルチキャストアドレス範囲がいくつかあります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-460">In the IPv6 case, there are several multicast address ranges you can choose from.</span></span> <span data-ttu-id="7ca99-461">IETF RFC 2375 を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-461">Please, refer to the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-462">特定のローカルポートを使用せずに構築された <xref:System.Net.Sockets.UdpClient> で <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> を呼び出すことはできません (つまり、<xref:System.Net.Sockets.UdpClient.%23ctor> または <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> コンストラクターを使用します)。</span><span class="sxs-lookup"><span data-stu-id="7ca99-462">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-463">次のコード例は、マルチキャストアドレスを指定してマルチキャストグループを結合する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-463">The following code example demonstrates how to join a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-464">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-464">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-465">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-465">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-466">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-466">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(int32 ifindex, class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (ifindex As Integer, multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(int ifindex, System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : int * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (ifindex, multicastAddr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifindex" Type="System.Int32" />
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ifindex"><span data-ttu-id="7ca99-467">マルチキャスト グループを結合するローカル IP アドレスが関連付けられているインターフェイス インデックス。</span><span class="sxs-lookup"><span data-stu-id="7ca99-467">The interface index associated with the local IP address on which to join the multicast group.</span></span></param>
        <param name="multicastAddr"><span data-ttu-id="7ca99-468">参加対象のグループのマルチキャスト <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-468">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span></span></param>
        <summary><span data-ttu-id="7ca99-469"><see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-469">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-470">マルチキャストグループに参加する前に、ソケットがポートまたはエンドポイントにバインドされていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-470">Before joining a multicast group, be sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="7ca99-471">これを行うには、パラメーターとしてポートまたはエンドポイントを受け入れるコンストラクターのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-471">You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</span></span>  
  
 <span data-ttu-id="7ca99-472">`infindex` パラメーターは、同じリンク上でハードウェアインターフェイスを識別するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-472">The `infindex` parameter is used to identify a hardware interface on the same link.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-473">選択できるマルチキャストアドレス範囲がいくつかあります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-473">There are several multicast address ranges to choose from.</span></span> <span data-ttu-id="7ca99-474">IETF RFC 2375 を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-474">Refer to the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-475">特定のローカルポートを使用せずに構築された <xref:System.Net.Sockets.UdpClient> で <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> を呼び出すことはできません (つまり、<xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> または <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> コンストラクターを使用します)。</span><span class="sxs-lookup"><span data-stu-id="7ca99-475">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> constructor).</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-476">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-476">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-477">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-477">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, int32 timeToLive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, timeToLive As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, int timeToLive);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, timeToLive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="timeToLive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="7ca99-478">参加するマルチキャスト グループの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-478">The <see cref="T:System.Net.IPAddress" /> of the multicast group to join.</span></span></param>
        <param name="timeToLive"><span data-ttu-id="7ca99-479">ルーター ホップ数で計測した有効期間 (TTL)。</span><span class="sxs-lookup"><span data-stu-id="7ca99-479">The Time to Live (TTL), measured in router hops.</span></span></param>
        <summary><span data-ttu-id="7ca99-480">指定された有効期間 (TTL: Time to Live) で <see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-480">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group with the specified Time to Live (TTL).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-481"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドは、指定された <xref:System.Net.IPAddress>を使用して、<xref:System.Net.Sockets.UdpClient> をマルチキャストグループにサブスクライブします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-481">The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="7ca99-482"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドを呼び出した後、基になる <xref:System.Net.Sockets.Socket> は、マルチキャストグループのメンバーシップを要求するインターネットグループ管理プロトコル (IGMP) パケットをルーターに送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-482">After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</span></span> <span data-ttu-id="7ca99-483">マルチキャストアドレス範囲は、224.0.0.0 ~ 239.255.255.255 です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-483">The multicast address range is 224.0.0.0 to 239.255.255.255.</span></span> <span data-ttu-id="7ca99-484">この範囲外のアドレスを指定した場合、または要求を作成したルーターがマルチキャストを有効にしていない場合は、<xref:System.Net.Sockets.UdpClient> によって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-484">If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-485"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-485">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-486">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-486">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="7ca99-487">`timeToLive` パラメーターは、掛けデータグラムに許可するルーターホップの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-487">The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded.</span></span> <span data-ttu-id="7ca99-488"><xref:System.Net.Sockets.UdpClient> がマルチキャストグループのメンバーとしてルーターに一覧表示されると、指定した <xref:System.Net.IPAddress>に送信された掛けデータグラムを受信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-488">Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-489">マルチキャストポート番号を使用して <xref:System.Net.Sockets.UdpClient> を作成する必要があります。そうしないと、掛けデータグラムを受信できなくなります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-489">You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams.</span></span> <span data-ttu-id="7ca99-490"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドを呼び出す前に <xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。そうしないと、receive メソッドが機能しません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-490">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work.</span></span> <span data-ttu-id="7ca99-491">マルチキャスト IP アドレスにデータグラムを送信するために、マルチキャストグループに属している必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-491">You do not need to belong to a multicast group to send datagrams to a multicast IP address.</span></span>  
  
 <span data-ttu-id="7ca99-492">マルチキャストグループに参加する前に、ソケットがポートまたはエンドポイントにバインドされていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-492">Before joining a multicast group make sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="7ca99-493">これを行うには、をパラメーターとして受け取るコンストラクターのいずれかをポートまたはエンドポイントとして呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-493">You do that by calling one of the constructors that accept as parameter a port or an endpoint.</span></span>  
  
 <span data-ttu-id="7ca99-494">掛けデータグラムの受信を停止するには、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> メソッドを呼び出し、取り消すグループの <xref:System.Net.IPAddress> を指定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-494">To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-495">特定のローカルポートを使用せずに構築された <xref:System.Net.Sockets.UdpClient> で <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> を呼び出すことはできません (つまり、<xref:System.Net.Sockets.UdpClient.%23ctor> または <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> コンストラクターを使用します)。</span><span class="sxs-lookup"><span data-stu-id="7ca99-495">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-496">次の例では、2つのパラメーター、マルチキャストアドレス、および TTL を表す数値を指定して、マルチキャストグループを結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-496">The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ca99-497">提供される TTL の値が 0 から 255 ではありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-497">The TTL provided is not between 0 and 255</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-498">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-498">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-499">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-499">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-500"><paramref name="multicastAddr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-500"><paramref name="multicastAddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ca99-501">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-501">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, class System.Net.IPAddress localAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, localAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, System::Net::IPAddress ^ localAddress);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, localAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localAddress" Type="System.Net.IPAddress" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="7ca99-502">参加対象のグループのマルチキャスト <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-502">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span></span></param>
        <param name="localAddress"><span data-ttu-id="7ca99-503">ローカル <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-503">The local <see cref="T:System.Net.IPAddress" />.</span></span></param>
        <summary><span data-ttu-id="7ca99-504"><see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-504">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-505">マルチキャストグループに参加する前に、ソケットがポートまたはエンドポイントにバインドされていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-505">Before you join a multicast group, be sure that the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="7ca99-506">これを行うには、パラメーターとしてポートまたはエンドポイントを受け入れるコンストラクターのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-506">You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-507">選択できるマルチキャストアドレス範囲がいくつかあります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-507">There are several multicast address ranges to choose from.</span></span> <span data-ttu-id="7ca99-508">IETF RFC 2375 で確認できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-508">You can find them in the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-509">特定のローカルポートを使用せずに構築された <xref:System.Net.Sockets.UdpClient> で <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> を呼び出すことはできません (つまり、<xref:System.Net.Sockets.UdpClient.%23ctor> または <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> コンストラクターを使用します)。</span><span class="sxs-lookup"><span data-stu-id="7ca99-509">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-510">次のコード例は、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-510">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-511">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-511">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-512">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-512">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-513">発信マルチキャスト パケットが送信元アプリケーションに配信されるかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-513">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether outgoing multicast packets are delivered to the sending application.</span></span></summary>
        <value><span data-ttu-id="7ca99-514"><see cref="T:System.Net.Sockets.UdpClient" /> が発信マルチキャストパケットを受信するかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-514"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-515">マルチキャストは、インターネット上の多対多通信のためのスケーラブルな方法です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-515">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="7ca99-516">プロセスがマルチキャストアドレスをサブスクライブしている場合、そのプロセスによって送信されたパケットは、マルチキャストアドレスをサブスクライブしている他のすべてのプロセスによって受信されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-516">If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-517">次のコード例は、<xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-517">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public byte[] Receive (ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Receive(class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Receive(System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Receive : IPEndPoint -&gt; byte[]" Usage="udpClient.Receive remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="7ca99-518">データの送信元のリモート ホストを表す <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-518">An <see cref="T:System.Net.IPEndPoint" /> that represents the remote host from which the data was sent.</span></span></param>
        <summary><span data-ttu-id="7ca99-519">リモート ホストが送信した UDP データグラムを返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-519">Returns a UDP datagram that was sent by a remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-520">データグラム データを格納する <see cref="T:System.Byte" /> 型の配列</span><span class="sxs-lookup"><span data-stu-id="7ca99-520">An array of type <see cref="T:System.Byte" /> that contains datagram data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-521"><xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドは、データグラムがリモートホストから到着するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-521">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host.</span></span> <span data-ttu-id="7ca99-522">データが使用可能な場合、<xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドは、最初にエンキューされたデータグラムを読み取り、データ部分をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-522">When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array.</span></span> <span data-ttu-id="7ca99-523">このメソッドは、`remoteEP` パラメーターに送信者の <xref:System.Net.IPAddress> とポート番号を設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-523">This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.</span></span>  
  
 <span data-ttu-id="7ca99-524"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドで既定のリモートホストを指定した場合、<xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドはそのホストからのデータグラムのみを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-524">If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only.</span></span> <span data-ttu-id="7ca99-525">他のすべてのデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-525">All other datagrams will be discarded.</span></span>  
  
 <span data-ttu-id="7ca99-526"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-526">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-527">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-527">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-528">掛けデータグラムを受信する場合は、<xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドを呼び出す前に <xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-528">If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span> <span data-ttu-id="7ca99-529">データグラムの受信に使用する <xref:System.Net.Sockets.UdpClient> は、マルチキャストポート番号を使用して作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-529">The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-530"><xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-530">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span> <span data-ttu-id="7ca99-531"><xref:System.Net.Sockets.UdpClient.Receive%2A> メソッドは、メッセージを受信するまで実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-531">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until it receives a message.</span></span> <span data-ttu-id="7ca99-532"><xref:System.Net.Sockets.UdpClient.Receive%2A>に渡された <xref:System.Net.IPEndPoint> を使用すると、応答しているホストの id が明らかになります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-532">Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-533">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-533">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-534">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-534">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.ReceiveAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync () As Task(Of UdpReceiveResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::UdpReceiveResult&gt; ^ ReceiveAsync();" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;" Usage="udpClient.ReceiveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ca99-535">リモート ホストが送信した UDP データグラムを非同期的に返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-535">Returns a UDP datagram asynchronously that was sent by a remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-536">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7ca99-536">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-537">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-537">This operation will not block.</span></span> <span data-ttu-id="7ca99-538">返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、UDP パケットが受信された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-538">The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.</span></span>  
  
 <span data-ttu-id="7ca99-539"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドで既定のリモートホストを指定した場合、このメソッドはそのホストからのデータグラムのみを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-539">If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only.</span></span> <span data-ttu-id="7ca99-540">他のすべてのデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-540">All other datagrams will be discarded.</span></span>  
  
 <span data-ttu-id="7ca99-541"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-541">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-542">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-542">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7ca99-543">掛けデータグラムを受信する場合は、このメソッドを呼び出す前に <xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-543">If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method.</span></span> <span data-ttu-id="7ca99-544">データグラムの受信に使用する <xref:System.Net.Sockets.UdpClient> は、マルチキャストポート番号を使用して作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-544">The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-545">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-545">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-546">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-546">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-547">UDP データグラムをリモート ホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-547">Sends a UDP datagram to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int -&gt; int" Usage="udpClient.Send (dgram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram"><span data-ttu-id="7ca99-548">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-548">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-549">データグラム内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-549">The number of bytes in the datagram.</span></span></param>
        <summary><span data-ttu-id="7ca99-550">UDP データグラムをリモート ホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-550">Sends a UDP datagram to a remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-551">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-551">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-552">このオーバーロードは、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドで確立されたリモートホストにデータグラムを送信し、送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-552">This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent.</span></span> <span data-ttu-id="7ca99-553">このオーバーロードを呼び出す前に <xref:System.Net.Sockets.UdpClient.Connect%2A> を呼び出さない場合、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドは <xref:System.Net.Sockets.SocketException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-553">If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-554"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-554">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-555">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-555">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-556">データグラムを別のリモートホストに送信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出して、目的のリモートホストを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-556">If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host.</span></span> <span data-ttu-id="7ca99-557">他の <xref:System.Net.Sockets.UdpClient.Send%2A> メソッドオーバーロードのいずれかを使用して、ブロードキャストアドレスにデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-557">Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-558"><xref:System.Net.Sockets.UdpClient.Send%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-558">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-559">このオーバーロードを使用する前に、既定のリモートホストを確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-559">You must establish a default remote host prior to using this overload.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-560"><paramref name="dgram" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-560"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-561"><see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-561">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-562"><see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-562">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-563">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-563">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.IPEndPoint -&gt; int" Usage="udpClient.Send (dgram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram"><span data-ttu-id="7ca99-564">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-564">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send, represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-565">データグラム内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-565">The number of bytes in the datagram.</span></span></param>
        <param name="endPoint"><span data-ttu-id="7ca99-566">データグラムの送信先のホストとポートを表す <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-566">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram.</span></span></param>
        <summary><span data-ttu-id="7ca99-567">指定したリモート エンドポイントにあるホストに UDP データグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-567">Sends a UDP datagram to the host at the specified remote endpoint.</span></span></summary>
        <returns><span data-ttu-id="7ca99-568">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-568">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-569"><xref:System.Net.Sockets.UdpClient.Send%2A> メソッドは、指定されたエンドポイントにデータグラムを送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-569">The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="7ca99-570">このオーバーロードを呼び出す前に、まず、データグラムが配信されるリモートホストの IP アドレスとポート番号を使用して <xref:System.Net.IPEndPoint> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-570">Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered.</span></span> <span data-ttu-id="7ca99-571"><xref:System.Net.IPEndPoint>の <xref:System.Net.IPAddress.Address%2A> プロパティに <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> を指定することで、既定のブロードキャストアドレス255.255.255.255 にデータグラムを送信できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-571">You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="7ca99-572">この <xref:System.Net.IPEndPoint>を作成したら、それを `endPoint` パラメーターとして <xref:System.Net.Sockets.UdpClient.Send%2A> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-572">After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter.</span></span>  
  
 <span data-ttu-id="7ca99-573">データグラムを他のブロードキャストアドレスに送信する場合は、<xref:System.Net.Sockets.UdpClient.Client%2A> メソッドを使用して、基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-573">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ca99-574"><xref:System.Net.Sockets.Socket> クラスを使用してに戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-574">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-575"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを使用してリモートホストを既に確立している場合は、このメソッドに `endPoint` パラメーターを指定しないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-575">Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-576">この操作を行うと、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドによって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-576">If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-577"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-577">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-578">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-578">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-579"><xref:System.Net.Sockets.UdpClient.Send%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-579">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-580">この例では、<xref:System.Net.IPEndPoint> を使用してターゲットホストを指定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-580">This example uses an <xref:System.Net.IPEndPoint> to specify the target host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-581"><paramref name="dgram" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-581"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-582"><see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-582"><see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-583"><see cref="T:System.Net.Sockets.UdpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-583"><see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-584">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-584">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, hostname As String, port As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * string * int -&gt; int" Usage="udpClient.Send (dgram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram"><span data-ttu-id="7ca99-585">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-585">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-586">データグラム内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-586">The number of bytes in the datagram.</span></span></param>
        <param name="hostname"><span data-ttu-id="7ca99-587">データグラム送信先のリモート ホストの名前。</span><span class="sxs-lookup"><span data-stu-id="7ca99-587">The name of the remote host to which you intend to send the datagram.</span></span></param>
        <param name="port"><span data-ttu-id="7ca99-588">通信先のリモート ポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-588">The remote port number with which you intend to communicate.</span></span></param>
        <summary><span data-ttu-id="7ca99-589">指定したリモート ホストの指定したポートに UDP データグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-589">Sends a UDP datagram to a specified port on a specified remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-590">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-590">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-591"><xref:System.Net.Sockets.UdpClient.Send%2A> メソッドは、`hostname` および `port` パラメーターで指定された値にデータグラムを送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-591">The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="7ca99-592">`hostname` パラメーター値に "255.255.255.255" を指定することで、既定のブロードキャストアドレスにデータグラムを送信できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-592">You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the `hostname` parameter value.</span></span>  
  
 <span data-ttu-id="7ca99-593">データグラムを他のブロードキャストアドレスに送信する場合は、<xref:System.Net.Sockets.UdpClient.Client%2A> メソッドを使用して、基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-593">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ca99-594"><xref:System.Net.Sockets.Socket> クラスを使用してに戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-594">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ca99-595"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを使用してリモートホストを既に確立している場合は、この方法でホスト名またはポート番号を指定しないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-595">Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-596">この操作を行うと、<xref:System.Net.Sockets.UdpClient.Send%2A> メソッドによって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-596">If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-597"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-597">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-598">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-598">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-599"><xref:System.Net.Sockets.UdpClient.Send%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-599">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="7ca99-600">この例では、ホスト名とポート番号を使用して、ターゲットホストを識別します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-600">This example uses a host name and a port number to identify the target host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-601"><paramref name="dgram" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-601"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-602"><see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-602">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-603"><see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-603">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-604">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-604">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ca99-605">UDP データグラムをリモート ホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-605">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="7ca99-606">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-606">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-607">データグラム内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-607">The number of bytes in the datagram.</span></span></param>
        <summary><span data-ttu-id="7ca99-608">UDP データグラムをリモート ホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-608">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-609"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-609">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-610">このオーバーロードは、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドで確立されたリモートホストにデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-610">This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-611">このオーバーロードを呼び出す前に <xref:System.Net.Sockets.UdpClient.Connect%2A> を呼び出さない場合、メソッドは <xref:System.Net.Sockets.SocketException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-611">If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-612"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-612">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-613">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-613">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="7ca99-614">データグラムを別のリモートホストに送信する場合は、<xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを呼び出して、目的のリモートホストを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-614">If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host.</span></span> <span data-ttu-id="7ca99-615">他の <xref:System.Net.Sockets.UdpClient.SendAsync%2A> メソッドオーバーロードのいずれかを使用して、ブロードキャストアドレスにデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-615">Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-616"><paramref name="dgram" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-616"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-617"><see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-617">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-618"><see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-618">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-619">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-619">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * System.Net.IPEndPoint -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="7ca99-620">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-620">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-621">データグラム内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-621">The number of bytes in the datagram.</span></span></param>
        <param name="endPoint"><span data-ttu-id="7ca99-622">データグラムの送信先のホストとポートを表す <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="7ca99-622">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram.</span></span></param>
        <summary><span data-ttu-id="7ca99-623">UDP データグラムをリモート ホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-623">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-624"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-624">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-625">このメソッドは、指定されたエンドポイントにデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-625">This method sends datagrams to the specified endpoint.</span></span> <span data-ttu-id="7ca99-626">このオーバーロードを呼び出す前に、まず、データグラムが配信されるリモートホストの IP アドレスとポート番号を使用して <xref:System.Net.IPEndPoint> を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-626">Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered.</span></span> <span data-ttu-id="7ca99-627"><xref:System.Net.IPEndPoint>の <xref:System.Net.IPAddress.Address%2A> プロパティに <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> を指定することで、既定のブロードキャストアドレス255.255.255.255 にデータグラムを送信できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-627">You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="7ca99-628">この <xref:System.Net.IPEndPoint>を作成したら、このメソッドに `endPoint` パラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-628">After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.</span></span>  
  
 <span data-ttu-id="7ca99-629">データグラムを他のブロードキャストアドレスに送信する場合は、<xref:System.Net.Sockets.UdpClient.Client%2A> メソッドを使用して、基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-629">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ca99-630"><xref:System.Net.Sockets.Socket> クラスを使用してに戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-630">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7ca99-631"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを使用してリモートホストを既に確立している場合は、このメソッドに `endPoint` パラメーターを指定しないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-631">Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-632">このメソッドを実行すると、<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-632">If you do, this method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-633"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-633">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-634">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-634">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-635"><paramref name="dgram" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-635"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-636"><see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-636"><see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-637"><see cref="T:System.Net.Sockets.UdpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-637"><see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-638">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-638">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * string * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="7ca99-639">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="7ca99-639">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="7ca99-640">データグラム内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="7ca99-640">The number of bytes in the datagram.</span></span></param>
        <param name="hostname"><span data-ttu-id="7ca99-641">データグラム送信先のリモート ホストの名前。</span><span class="sxs-lookup"><span data-stu-id="7ca99-641">The name of the remote host to which you intend to send the datagram.</span></span></param>
        <param name="port"><span data-ttu-id="7ca99-642">通信先のリモート ポート番号。</span><span class="sxs-lookup"><span data-stu-id="7ca99-642">The remote port number with which you intend to communicate.</span></span></param>
        <summary><span data-ttu-id="7ca99-643">UDP データグラムをリモート ホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-643">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
        <returns><span data-ttu-id="7ca99-644"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-644">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-645">このメソッドは、`hostname` および `port` パラメーターで指定された値にデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-645">This method sends datagrams to the values specified by the `hostname` and `port` parameters.</span></span> <span data-ttu-id="7ca99-646">`hostname` パラメーター値に "255.255.255.255" を指定することで、既定のブロードキャストアドレスにデータグラムを送信できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-646">You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the `hostname` parameter value.</span></span>  
  
 <span data-ttu-id="7ca99-647">データグラムを他のブロードキャストアドレスに送信する場合は、<xref:System.Net.Sockets.UdpClient.Client%2A> メソッドを使用して、基になる <xref:System.Net.Sockets.Socket>を取得し、socket オプションを <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>に設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-647">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ca99-648"><xref:System.Net.Sockets.Socket> クラスを使用してに戻すこともできます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-648">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7ca99-649"><xref:System.Net.Sockets.UdpClient.Connect%2A> メソッドを使用してリモートホストを既に確立している場合は、この方法でホスト名またはポート番号を指定しないでください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-649">Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="7ca99-650">このメソッドを実行すると、<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-650">If you do, this method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="7ca99-651"><xref:System.Net.Sockets.SocketException>を受け取った場合は、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> を使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-651">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="7ca99-652">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-652">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ca99-653"><paramref name="dgram" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7ca99-653"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7ca99-654"><see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-654">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7ca99-655"><see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-655">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="7ca99-656">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7ca99-656">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ca99-657"><see cref="T:System.Net.Sockets.UdpClient" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-657">Releases all resources used by the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7ca99-658"><xref:System.Net.Sockets.UdpClient>の使用が終了したら、IDisposable を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-658">Call IDisposable.Dispose when you are finished using the <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="7ca99-659">IDisposable メソッドは、<xref:System.Net.Sockets.UdpClient> を使用できない状態のままにします。</span><span class="sxs-lookup"><span data-stu-id="7ca99-659">The IDisposable.Dispose method leaves the <xref:System.Net.Sockets.UdpClient> in an unusable state.</span></span> <span data-ttu-id="7ca99-660">IDisposable を呼び出した後、ガベージコレクターが <xref:System.Net.Sockets.UdpClient> 占有していたメモリを再利用できるように、<xref:System.Net.Sockets.UdpClient> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7ca99-660">After calling IDisposable.Dispose, you must release all references to the <xref:System.Net.Sockets.UdpClient> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.UdpClient> was occupying.</span></span> <span data-ttu-id="7ca99-661">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-661">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE] 
> <span data-ttu-id="7ca99-662"><xref:System.Net.Sockets.UdpClient>への最後の参照を解放する前に、必ず IDisposable を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="7ca99-662">Always call IDisposable.Dispose before you release your last reference to the <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="7ca99-663">そうしないと、ガベージ コレクターが <xref:System.Net.Sockets.UdpClient> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="7ca99-663">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.UdpClient> object's `Finalize` method.</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.UdpClient.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ca99-664"><see cref="T:System.Net.Sockets.UdpClient" /> によって送信されたインターネット プロトコル (IP) パケットの有効期間 (TTL) の値を指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7ca99-664">Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></summary>
        <value><span data-ttu-id="7ca99-665">TTL 値。</span><span class="sxs-lookup"><span data-stu-id="7ca99-665">The TTL value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ca99-666">TTL 値は、ルーターがパケットを破棄する前にパケットが通過できるルーターの最大数を示します。 ICMP (インターネット制御メッセージプロトコル) エラーメッセージが送信側に返されます。</span><span class="sxs-lookup"><span data-stu-id="7ca99-666">The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ca99-667">次のコード例は、<xref:System.Net.Sockets.UdpClient.Ttl%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="7ca99-667">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Ttl%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
