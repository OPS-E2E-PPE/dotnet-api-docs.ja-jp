<Type Name="SocketType" FullName="System.Net.Sockets.SocketType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="22efa407a36a1d3b5f48d68462a6b232acfd6e7b" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75170452" /></Metadata><TypeSignature Language="C#" Value="public enum SocketType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SocketType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.SocketType" />
  <TypeSignature Language="VB.NET" Value="Public Enum SocketType" />
  <TypeSignature Language="C++ CLI" Value="public enum class SocketType" />
  <TypeSignature Language="F#" Value="type SocketType = " />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="a6d3e-101"><see cref="T:System.Net.Sockets.Socket" /> クラスのインスタンスが表すソケットの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-101">Specifies the type of socket that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class represents.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6d3e-102"><xref:System.Net.Sockets.Socket> がデータを送受信できるようにするには、まず、<xref:System.Net.Sockets.AddressFamily>、<xref:System.Net.Sockets.SocketType>、および <xref:System.Net.Sockets.ProtocolType>を使用してデータを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-102">Before a <xref:System.Net.Sockets.Socket> can send and receive data, it must first be created using an <xref:System.Net.Sockets.AddressFamily>, a <xref:System.Net.Sockets.SocketType>, and a <xref:System.Net.Sockets.ProtocolType>.</span></span> <span data-ttu-id="a6d3e-103"><xref:System.Net.Sockets.SocketType> 列挙体には、開く <xref:System.Net.Sockets.Socket> の種類を定義するためのオプションがいくつか用意されています。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-103">The <xref:System.Net.Sockets.SocketType> enumeration provides several options for defining the type of <xref:System.Net.Sockets.Socket> that you intend to open.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a6d3e-104"><xref:System.Net.Sockets.SocketType> は、<xref:System.Net.Sockets.AddressFamily>内で使用されている <xref:System.Net.Sockets.ProtocolType> を暗黙的に示すことがあります。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-104"><xref:System.Net.Sockets.SocketType> sometimes implicitly indicates which <xref:System.Net.Sockets.ProtocolType> is used within an <xref:System.Net.Sockets.AddressFamily>.</span></span> <span data-ttu-id="a6d3e-105">たとえば、<xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> が <xref:System.Net.Sockets.SocketType.Dgram?displayProperty=nameWithType>場合、<xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> は常に <xref:System.Net.Sockets.ProtocolType.Udp?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-105">For example, when the <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> is <xref:System.Net.Sockets.SocketType.Dgram?displayProperty=nameWithType>, the <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> is always <xref:System.Net.Sockets.ProtocolType.Udp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a6d3e-106"><xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> が <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType>場合、<xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> は常に <xref:System.Net.Sockets.ProtocolType.Tcp?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-106">When the <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> is <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType>, the <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> is always <xref:System.Net.Sockets.ProtocolType.Tcp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a6d3e-107">互換性のない組み合わせで <xref:System.Net.Sockets.Socket> を作成しようとすると、<xref:System.Net.Sockets.Socket> によって <xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-107">If you try to create a <xref:System.Net.Sockets.Socket> with an incompatible combination, <xref:System.Net.Sockets.Socket> throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6d3e-108">次の例では、<xref:System.Net.Sockets.Socket> コンストラクターのパラメーターとして <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-108">The following example uses <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType> as a parameter to the <xref:System.Net.Sockets.Socket> constructor.</span></span>  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.AddressFamily" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.Sockets.Socket" />
  </Docs>
  <Members>
    <Member MemberName="Dgram">
      <MemberSignature Language="C#" Value="Dgram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Dgram = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Dgram" />
      <MemberSignature Language="VB.NET" Value="Dgram" />
      <MemberSignature Language="C++ CLI" Value="Dgram" />
      <MemberSignature Language="F#" Value="Dgram = 2" Usage="System.Net.Sockets.SocketType.Dgram" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6d3e-109">データグラムをサポートしています。これはコネクションレスで、固定 (通常は短い) 最大長の、信頼性のないメッセージです。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-109">Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length.</span></span> <span data-ttu-id="a6d3e-110">メッセージが喪失または複製されたり、正しい順序で受信されなかったりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-110">Messages might be lost or duplicated and might arrive out of order.</span></span> <span data-ttu-id="a6d3e-111"><see cref="T:System.Net.Sockets.Socket" /> 型の <see cref="F:System.Net.Sockets.SocketType.Dgram" /> はデータの送受信に先立って接続する必要がなく、複数のピアと通信できます。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-111">A <see cref="T:System.Net.Sockets.Socket" /> of type <see cref="F:System.Net.Sockets.SocketType.Dgram" /> requires no connection prior to sending and receiving data, and can communicate with multiple peers.</span></span> <span data-ttu-id="a6d3e-112"><see cref="F:System.Net.Sockets.SocketType.Dgram" /> はデータグラム プロトコル (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) と <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span><span class="sxs-lookup"><span data-stu-id="a6d3e-112"><see cref="F:System.Net.Sockets.SocketType.Dgram" /> uses the Datagram Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) and the <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span></span> <span data-ttu-id="a6d3e-113">アドレス ファミリを使用します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-113">address family.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C#" Value="Raw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Raw = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Raw" />
      <MemberSignature Language="VB.NET" Value="Raw" />
      <MemberSignature Language="C++ CLI" Value="Raw" />
      <MemberSignature Language="F#" Value="Raw = 3" Usage="System.Net.Sockets.SocketType.Raw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6d3e-114">基になるトランスポート プロトコルへのアクセスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-114">Supports access to the underlying transport protocol.</span></span> <span data-ttu-id="a6d3e-115"><see cref="F:System.Net.Sockets.SocketType.Raw" /> を使用すると、インターネット コントロール メッセージ プロトコル (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) やインターネット グループ管理プロトコル (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />) などのプロトコルを使用して通信を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-115">Using <see cref="F:System.Net.Sockets.SocketType.Raw" />, you can communicate using protocols like Internet Control Message Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) and Internet Group Management Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />).</span></span> <span data-ttu-id="a6d3e-116">ユーザーのアプリケーションが送信時に完全な IP ヘッダーを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-116">Your application must provide a complete IP header when sending.</span></span> <span data-ttu-id="a6d3e-117">受信データグラムは IP ヘッダーとオプションをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-117">Received datagrams return with the IP header and options intact.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Rdm">
      <MemberSignature Language="C#" Value="Rdm" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Rdm = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Rdm" />
      <MemberSignature Language="VB.NET" Value="Rdm" />
      <MemberSignature Language="C++ CLI" Value="Rdm" />
      <MemberSignature Language="F#" Value="Rdm = 4" Usage="System.Net.Sockets.SocketType.Rdm" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6d3e-118">コネクションレスでメッセージ指向の、配信の信頼性が高いメッセージをサポートし、データ内のメッセージ境界を維持します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-118">Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data.</span></span> <span data-ttu-id="a6d3e-119">Rdm (Reliably Delivered Messages) メッセージは複製されず、順番に到着します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-119">Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order.</span></span> <span data-ttu-id="a6d3e-120">また、メッセージが失われたときには送信元に通知されます。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-120">Furthermore, the sender is notified if messages are lost.</span></span> <span data-ttu-id="a6d3e-121"><see cref="T:System.Net.Sockets.Socket" /> を使用して <see cref="F:System.Net.Sockets.SocketType.Rdm" /> を初期化した場合には、データの送受信の前にリモート ホストに接続しておく必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-121">If you initialize a <see cref="T:System.Net.Sockets.Socket" /> using <see cref="F:System.Net.Sockets.SocketType.Rdm" />, you do not require a remote host connection before sending and receiving data.</span></span> <span data-ttu-id="a6d3e-122"><see cref="F:System.Net.Sockets.SocketType.Rdm" /> では複数のピアと通信できます。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-122">With <see cref="F:System.Net.Sockets.SocketType.Rdm" />, you can communicate with multiple peers.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Seqpacket">
      <MemberSignature Language="C#" Value="Seqpacket" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Seqpacket = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Seqpacket" />
      <MemberSignature Language="VB.NET" Value="Seqpacket" />
      <MemberSignature Language="C++ CLI" Value="Seqpacket" />
      <MemberSignature Language="F#" Value="Seqpacket = 5" Usage="System.Net.Sockets.SocketType.Seqpacket" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6d3e-123">ネットワーク全体に、順序付きバイト ストリームの、コネクション指向で信頼性の高い双方向転送を提供します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-123">Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network.</span></span> <span data-ttu-id="a6d3e-124"><see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> はデータを複製せず、データ ストリーム内の境界を維持します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-124"><see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> does not duplicate data, and it preserves boundaries within the data stream.</span></span> <span data-ttu-id="a6d3e-125"><see cref="T:System.Net.Sockets.Socket" /> 型の <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> は単一のピアと通信し、通信を開始する前にリモート ホスト接続を確立しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-125">A <see cref="T:System.Net.Sockets.Socket" /> of type <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> communicates with a single peer and requires a remote host connection before communication can begin.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Stream">
      <MemberSignature Language="C#" Value="Stream" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Stream = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Stream" />
      <MemberSignature Language="VB.NET" Value="Stream" />
      <MemberSignature Language="C++ CLI" Value="Stream" />
      <MemberSignature Language="F#" Value="Stream = 1" Usage="System.Net.Sockets.SocketType.Stream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6d3e-126">データの複製および境界の維持を行うことなく、信頼性が高く双方向の、接続ベースのバイト ストリームをサポートします。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-126">Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries.</span></span> <span data-ttu-id="a6d3e-127">この種類の <see cref="T:System.Net.Sockets.Socket" /> は、単一のピアと通信し、通信を開始する前にリモート ホスト接続を確立しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-127">A <see cref="T:System.Net.Sockets.Socket" /> of this type communicates with a single peer and requires a remote host connection before communication can begin.</span></span> <span data-ttu-id="a6d3e-128"><see cref="F:System.Net.Sockets.SocketType.Stream" /> は伝送制御プロトコル (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) および <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span><span class="sxs-lookup"><span data-stu-id="a6d3e-128"><see cref="F:System.Net.Sockets.SocketType.Stream" /> uses the Transmission Control Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) and the <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span></span> <span data-ttu-id="a6d3e-129">アドレス ファミリを使用します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-129">address family.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Unknown = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Unknown" />
      <MemberSignature Language="VB.NET" Value="Unknown" />
      <MemberSignature Language="C++ CLI" Value="Unknown" />
      <MemberSignature Language="F#" Value="Unknown = -1" Usage="System.Net.Sockets.SocketType.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6d3e-130">不明な <see cref="T:System.Net.Sockets.Socket" /> 型を指定します。</span><span class="sxs-lookup"><span data-stu-id="a6d3e-130">Specifies an unknown <see cref="T:System.Net.Sockets.Socket" /> type.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
