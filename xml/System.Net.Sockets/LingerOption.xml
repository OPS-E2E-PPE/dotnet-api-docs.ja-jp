<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15183cf5828863670b75c5537a933a05c911a1ca" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75111601" /></Metadata><TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <TypeSignature Language="F#" Value="type LingerOption = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Net.Sockets.Socket" /> メソッドまたは <see cref="M:System.Net.Sockets.Socket.Close" /> メソッドを呼び出した後で <see cref="M:System.Net.Sockets.TcpClient.Close" /> の接続を維持するかどうかを指定します。また、送信するデータが残っている場合は、接続を維持する時間を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが <xref:System.Net.Sockets.Socket> または <xref:System.Net.Sockets.TcpClient> メソッドを呼び出した後でも、送信ネットワークバッファーにデータを使用できる可能性があります。 終了後に <xref:System.Net.Sockets.Socket> が未送信データの送信を試行する時間を指定する場合は、`enable` パラメーターを `true`に設定し、`seconds` パラメーターを目的の時間に設定して <xref:System.Net.Sockets.LingerOption> を作成します。 `seconds` パラメーターは、<xref:System.Net.Sockets.Socket> を接続したままにしてタイムアウトするまでの時間を示すために使用されます。<xref:System.Net.Sockets.Socket> を閉じた後も常に接続したままにしない場合は、`enable` パラメーターを `true` に設定し、`seconds` パラメーターを0に設定して <xref:System.Net.Sockets.LingerOption> インスタンスを作成します。 この場合、<xref:System.Net.Sockets.Socket> は直ちに終了し、未送信のデータは失われます。 作成した後、<xref:System.Net.Sockets.LingerOption> を <xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType> メソッドに渡します。 <xref:System.Net.Sockets.TcpClient>を使用してデータを送受信する場合は、<xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> プロパティで <xref:System.Net.Sockets.LingerOption> インスタンスを設定します。  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、<xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていない場合の <xref:System.Net.Sockets.Socket> の既定の動作であり、<xref:System.Net.Sockets.TcpClient.LingerState%2A> プロパティが設定されていない場合は <xref:System.Net.Sockets.TcpClient> になります。  
  
   
  
## Examples  
 次の例では、<xref:System.Net.Sockets.Socket.Close%2A> メソッドを呼び出した後、1秒間を待機するように、以前に作成した <xref:System.Net.Sockets.Socket> を設定します。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.LingerOption : bool * int -&gt; System.Net.Sockets.LingerOption" Usage="new System.Net.Sockets.LingerOption (enable, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable"><see langword="true" /> メソッドが呼び出された後も接続を維持する場合は <see cref="M:System.Net.Sockets.Socket.Close" />。それ以外の場合は <see langword="false" />。</param>
        <param name="seconds"><see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出された後、接続を維持する秒数。</param>
        <summary><see cref="T:System.Net.Sockets.LingerOption" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.Socket>を閉じた後も、送信ネットワークバッファーにデータが残っている可能性があります。 `enable` パラメーターを使用して、close メソッドが呼び出された後に、<xref:System.Net.Sockets.Socket> が未送信データの転送を続行するかどうかを指定します。 `seconds` パラメーターを使用して、<xref:System.Net.Sockets.Socket> がタイムアウト前に送信されなかったデータの転送を試行する時間を指定します。`enable` パラメーターに `true` を指定し、`seconds` パラメーターに0を指定した場合、<xref:System.Net.Sockets.Socket> は、送信ネットワークバッファーにデータが残っていない状態になるまでデータの送信を試みます。 `enable` パラメーターに `false` を指定した場合、<xref:System.Net.Sockets.Socket> は直ちに終了し、未送信のデータは失われます。  
  
 次の表では、T:System.Net.Sockets.LingerOption インスタンスが作成され、<xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType> または <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> プロパティに設定されている場合に、`enable` パラメーターと `seconds` パラメーターの使用可能な値に基づいて、<xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType> および <xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType> メソッドの動作について説明します。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false` (無効)、既定値|タイムアウトは適用されません (既定)。|既定の IP プロトコルのタイムアウトが経過するまで、接続指向のソケット (TCP など) の保留中のデータを送信しようとします。|  
|`true` (有効)|0以外のタイムアウト|指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。|  
|`true` (有効)|ゼロタイムアウト。|保留中のデータを破棄します。 接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。|  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、<xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていない場合のソケットの既定の動作です。  
  
 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティに格納されている <xref:System.Net.Sockets.LingerOption.LingerTime%2A> プロパティが既定の IP プロトコルタイムアウトよりも大きい値に設定されている場合でも、既定の IP プロトコルタイムアウトは適用され、上書きされます。  
  
   
  
## Examples  
 次の例では、<xref:System.Net.Sockets.Socket.Close%2A> メソッドを呼び出した後、1秒間を待機するように、以前に作成した <xref:System.Net.Sockets.Socket> を設定します。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.Socket" /> を閉じた後も接続を維持するかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" /> が呼び出された後も <see cref="T:System.Net.Sockets.Socket" /> が接続を維持する場合は <see cref="M:System.Net.Sockets.Socket.Close" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティを使用して、終了後も <xref:System.Net.Sockets.Socket> を終了するかどうかを決定できます。 この値を `true` または `false` に変更し、変更された <xref:System.Net.Sockets.LingerOption> を <xref:System.Net.Sockets.Socket.SetSocketOption%2A> メソッドに渡すか、<xref:System.Net.Sockets.TcpClient.LingerState%2A> または <xref:System.Net.Sockets.Socket.LingerState%2A> property.to disable を設定するか、残留を有効にします。  
  
 次の表では、<xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティと <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティに格納されている <xref:System.Net.Sockets.LingerOption.LingerTime%2A> プロパティの使用可能な値の動作について説明します。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false` (無効)、既定値|タイムアウトは適用されません (既定)。|既定の IP プロトコルのタイムアウトが経過するまで、接続指向のソケット (TCP など) の保留中のデータを送信しようとします。|  
|`true` (有効)|0以外のタイムアウト|指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。|  
|`true` (有効)|ゼロタイムアウト。|保留中のデータを破棄します。 接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。|  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、<xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていない場合のソケットの既定の動作です。  
  
 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティに格納されている <xref:System.Net.Sockets.LingerOption.LingerTime%2A> プロパティが既定の IP プロトコルタイムアウトよりも大きい値に設定されている場合でも、既定の IP プロトコルタイムアウトは適用され、上書きされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LingerTime : int with get, set" Usage="System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信するデータが残っている場合に、<see cref="M:System.Net.Sockets.Socket.Close" /> メソッドを呼び出した後で接続を維持する時間を取得または設定します。</summary>
        <value><see cref="M:System.Net.Sockets.Socket.Close" /> が呼び出された後、接続を維持する秒数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値は、終了した <xref:System.Net.Sockets.Socket> が、タイムアウト前に未送信データの転送を試行する期間を決定する場合に使用します。この値は、必要なタイムアウト期間 (秒単位) に設定することもできます。  
  
 <xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティが `true`で、<xref:System.Net.Sockets.LingerOption.LingerTime%2A> を0に設定した場合、<xref:System.Net.Sockets.Socket> は送信ネットワークバッファーに送信する保留中のデータを破棄します。 この値を変更する場合は、変更された <xref:System.Net.Sockets.LingerOption> インスタンスを <xref:System.Net.Sockets.Socket.SetSocketOption%2A> メソッドに渡すか、<xref:System.Net.Sockets.TcpClient.LingerState%2A> または <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティを設定する必要があります。  
  
 次の表では、<xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティと <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティに格納されている <xref:System.Net.Sockets.LingerOption.LingerTime%2A> プロパティの使用可能な値の動作について説明します。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false` (無効)、既定値|タイムアウトは適用されません (既定)。|既定の IP プロトコルのタイムアウトが経過するまで、接続指向のソケット (TCP など) の保留中のデータを送信しようとします。|  
|`true` (有効)|0以外のタイムアウト|指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。|  
|`true` (有効)|ゼロタイムアウト。|保留中のデータを破棄します。 接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。|  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、<xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていない場合のソケットの既定の動作です。  
  
 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティに格納されている <xref:System.Net.Sockets.LingerOption.LingerTime%2A> プロパティが既定の IP プロトコルタイムアウトよりも大きい値に設定されている場合でも、既定の IP プロトコルタイムアウトは適用され、上書きされます。  
  
   
  
## Examples  
 次の例では、このプロパティの値を表示します。  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
