<Type Name="DynamicValidator" FullName="System.Web.DynamicData.DynamicValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093526ae1ddd9d10164ae4dd5f1b95d47674f63b" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78776943" /></Metadata><TypeSignature Language="C#" Value="public class DynamicValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type DynamicValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), "DynamicValidator.bmp")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), "DynamicValidator.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="53d59-101">データ モデルでスローされる例外を強制してキャッチし、エラーを表示します。</span><span class="sxs-lookup"><span data-stu-id="53d59-101">Enforces and catches exceptions that are thrown in a data model and displays the error.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53d59-102"><xref:System.Web.DynamicData.DynamicValidator> コントロールは、データフィールドまたはデータエンティティと共に使用できます。</span><span class="sxs-lookup"><span data-stu-id="53d59-102">The <xref:System.Web.DynamicData.DynamicValidator> control can be used with data fields or data entities.</span></span> <span data-ttu-id="53d59-103">データモデルの機能拡張メソッドで、LINQ to SQL クラスまたはエンティティでスローされた例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="53d59-103">It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model.</span></span> <span data-ttu-id="53d59-104"><xref:System.Web.DynamicData.DynamicValidator> コントロールは、ユーザー入力を受け入れるコントロールに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="53d59-104">The <xref:System.Web.DynamicData.DynamicValidator> control is associated with the controls that accept user input.</span></span> <span data-ttu-id="53d59-105">たとえば、製品テーブル内の在庫フィールドに対するユーザー入力を受け付けるテキストボックスに関連付けられている <xref:System.Web.DynamicData.DynamicValidator> コントロールは、入力がデータモデルの許容単位より大きいか小さい場合にスローされる例外をキャッチして表示します。</span><span class="sxs-lookup"><span data-stu-id="53d59-105">For example, a <xref:System.Web.DynamicData.DynamicValidator> control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.</span></span>  
  
 <span data-ttu-id="53d59-106">既定では、ASP.NET 動的データでは、ページ内のデータモデルのすべての例外が表示されません。これは、一部のデータベース例外に機密情報が含まれている可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="53d59-106">By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information.</span></span> <span data-ttu-id="53d59-107">動的データ <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> 値のみを表示します。</span><span class="sxs-lookup"><span data-stu-id="53d59-107">Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only.</span></span> <span data-ttu-id="53d59-108">アプリケーションで他の例外を表示する場合は、<xref:System.Web.DynamicData.DynamicValidator> コントロールを作成し、表示する例外を指定して、例外を <xref:System.Web.DynamicData.DynamicValidator> コントロールにアタッチします。</span><span class="sxs-lookup"><span data-stu-id="53d59-108">If you want your application to display other exceptions, you can create a <xref:System.Web.DynamicData.DynamicValidator> control, provide the exceptions that you want to display, and attach the exceptions to the <xref:System.Web.DynamicData.DynamicValidator> control.</span></span> <span data-ttu-id="53d59-109">データモデルでスローされた例外は、アプリケーションのすべてのページに表示されます。</span><span class="sxs-lookup"><span data-stu-id="53d59-109">The exceptions that are thrown in the data model will be displayed in all pages in the application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53d59-110">次の例は、すべてのページに他の例外を表示する <xref:System.Web.DynamicData.DynamicValidator> コントロールクラスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="53d59-110">The following example shows how to create a <xref:System.Web.DynamicData.DynamicValidator> control class that displays other exceptions in all pages.</span></span>  
  
```vb  
''' <summary>   
''' Display other exceptions in all pages.   
''' </summary>   
Public Class MyDynamicValidator   
    Inherits DynamicValidator   
  
    Protected Overloads Overrides Sub ValidateException(ByVal exception As Exception)   
        ' If it's not an exception that DynamicValidator displays find   
        ' the innermost exception.   
        If Not (TypeOf exception Is IDynamicValidatorException) AndAlso _  
                Not (TypeOf exception Is ValidationException) Then   
            While exception.InnerException IsNot Nothing   
                exception = exception.InnerException   
            End While   
  
            ' Wrap it in a ValidationException so that the base code   
            ' does not ignore it.   
            If ExceptionShouldBeDisplayedInPage(exception) Then   
                exception = New ValidationException(Nothing, exception)   
            End If   
        End If   
  
        ' Call the base class for the exception that is modified.  
        MyBase.ValidateException(exception)   
    End Sub   
  
    Private Function ExceptionShouldBeDisplayedInPage(ByVal e As Exception) _  
            As Boolean   
        ' Add code to find the exception and   
        ' decide whether it should be shown in the page.  
  
        Return True   
    End Function   
End Class  
```  
  
```csharp  
/// <summary>  
/// Display other exceptions in all pages.   
/// </summary>  
public class MyDynamicValidator : DynamicValidator {  
  
    protected override void ValidateException(Exception exception) {  
        // If it's not an exception that DynamicValidator displays find   
        // the innermost exception.  
        if (!(exception is IDynamicValidatorException) && !(exception   
              is ValidationException)) {  
            while (exception.InnerException != null) {  
                exception = exception.InnerException;  
            }  
  
            // Wrap it in a ValidationException so that the base code   
            // does not ignore it.  
            if (ExceptionShouldBeDisplayedInPage(exception)) {  
                exception = new ValidationException(null, exception);  
            }  
        }  
  
        // Call the base class on the exception that is modified.  
        base.ValidateException(exception);  
    }  
  
    private bool ExceptionShouldBeDisplayedInPage(Exception e) {  
        // Add your code to find the exception and  
        // decides whether it should be shown in the page.  
  
           return true;  
    }  
}  
```  
  
 <span data-ttu-id="53d59-111">次の例では、web.config ファイルでタグの再マップを使用して、すべての Web ページに例外を表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="53d59-111">The following example shows how to use tag remapping in the web.config file to display the exception in all the Web pages.</span></span>  
  
```xml  
<pages>  
  <tagMapping>  
    <add tagType="System.Web.DynamicData.DynamicValidator"   
        mappedTagType="MyDynamicValidator"/>  
  </tagMapping>  
</pages>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53d59-112"><see cref="T:System.Web.DynamicData.DynamicValidator" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="53d59-112">Initializes a new instance of the <see cref="T:System.Web.DynamicData.DynamicValidator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicValidator.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53d59-113">検証する列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="53d59-113">Gets or sets the column to validate.</span></span></summary>
        <value><span data-ttu-id="53d59-114">検証する列。データ エンティティが検証される場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="53d59-114">The column to validate, or <see langword="null" /> if a data entity is validated.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnName : string" Usage="System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53d59-115">検証する列の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="53d59-115">Gets the name of the column to validate.</span></span></summary>
        <value><span data-ttu-id="53d59-116">検証する列の名前。データ エンティティが検証される場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="53d59-116">The name of the column to validate, or <see langword="null" /> if a data entity is validated.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="dynamicValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53d59-117">指定した <see cref="T:System.Web.DynamicData.DynamicValidator" /> コントロールのプロパティが有効かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="53d59-117">Indicates whether the properties of the specified <see cref="T:System.Web.DynamicData.DynamicValidator" /> control are valid.</span></span></summary>
        <returns><span data-ttu-id="53d59-118">指定した検証コントロールのプロパティが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53d59-118"><see langword="true" />, if the properties of the specified validation control are valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53d59-119">このメソッドは、基本クラスからオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="53d59-119">This method is overridden from the base class.</span></span> <span data-ttu-id="53d59-120">検証しようとしたコントロールに検証プロパティがない場合、基底クラスの呼び出しは失敗します。</span><span class="sxs-lookup"><span data-stu-id="53d59-120">The call to the base class fails if the control you try to validate does not have a validation property.</span></span> <span data-ttu-id="53d59-121">たとえば、コントロールが <xref:System.Web.UI.WebControls.GridView>である場合、基本クラスは失敗します。</span><span class="sxs-lookup"><span data-stu-id="53d59-121">For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="dynamicValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53d59-122">検証する入力コントロールの値が有効であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="53d59-122">Determines whether the value in the input control to validate is valid.</span></span></summary>
        <returns><span data-ttu-id="53d59-123">評価される検証コントロールが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53d59-123"><see langword="true" /> if the validation control that is evaluated is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="dynamicValidator.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="53d59-124">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="53d59-124">The event data.</span></span></param>
        <summary><span data-ttu-id="53d59-125"><see langword="Init" /> イベントを発生させ、<see cref="T:System.Web.DynamicData.DynamicValidator" /> コントロールを初期化します。</span><span class="sxs-lookup"><span data-stu-id="53d59-125">Raises the <see langword="Init" /> event to initialize the <see cref="T:System.Web.DynamicData.DynamicValidator" /> control.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateException">
      <MemberSignature Language="C#" Value="protected virtual void ValidateException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateException (exception As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member ValidateException : Exception -&gt; unit&#xA;override this.ValidateException : Exception -&gt; unit" Usage="dynamicValidator.ValidateException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="53d59-126">スローされる例外。</span><span class="sxs-lookup"><span data-stu-id="53d59-126">The exception that is thrown.</span></span></param>
        <summary><span data-ttu-id="53d59-127">データ モデルで例外が発生した場合は、検証例外を設定します。</span><span class="sxs-lookup"><span data-stu-id="53d59-127">Sets up a validation exception if an exception occurs in the data model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53d59-128">このメソッドは、例外がスローされたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53d59-128">This method is called when an exception is thrown.</span></span> <span data-ttu-id="53d59-129">検証例外に関連付けられた内部例外が含まれている場合、列固有の検証コントロールは失敗しますが、検証以外の例外が発生した場合、グローバル検証コントロールは失敗します。</span><span class="sxs-lookup"><span data-stu-id="53d59-129">A column-specific validator fails when a validation exception contains an associated inner exception, but a global validator fail when a non-validation exception occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53d59-130">例外が <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>の場合にのみ、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="53d59-130">Only use this method if the exception is a <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>.</span></span> <span data-ttu-id="53d59-131">データベースエラーが原因で例外が発生した場合、このメソッドを使用すると、機微なデータベースエラーが表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="53d59-131">If the exception is caused by a database error, using this method can display a sensitive database error</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationException">
      <MemberSignature Language="C#" Value="protected virtual Exception ValidationException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ValidationException" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ValidationException As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Exception ^ ValidationException { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationException : Exception with get, set" Usage="System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53d59-132">検証中に発生する検証例外を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="53d59-132">Gets or sets validation exception that occurs during validation.</span></span></summary>
        <value><span data-ttu-id="53d59-133">スローされる検証例外。</span><span class="sxs-lookup"><span data-stu-id="53d59-133">The validation exception that is thrown.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53d59-134">このプロパティは、値が編集されたとき、またはデータモデルに新しい値が挿入されたときにエラーが発生した場合にスローされる検証例外を表します。</span><span class="sxs-lookup"><span data-stu-id="53d59-134">This property represents the validation exception that is thrown if an error occurs when a value is edited or when a new value is inserted into the data model.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
