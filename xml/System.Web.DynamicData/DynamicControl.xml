<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b1f62672c7e824b7bd8ba349be1632ad21e81cf" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78777398" /></Metadata><TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <TypeSignature Language="F#" Value="type DynamicControl = class&#xA;    inherit Control&#xA;    interface IAttributeAccessor&#xA;    interface IFieldTemplateHost&#xA;    interface IFieldFormattingOptions" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Dynamic Data 機能を使用して、テンプレート宣言されたデータ バインド コントロール内のフィールドに対して定義されたコンテンツを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 このトピックの内容:

-   [はじめに](#introduction)

-   [宣言型の構文](#declarative_syntax)

<a name="introduction"></a>
## <a name="introduction"></a>はじめに
 <xref:System.Web.DynamicData.DynamicControl> コントロールは、<xref:System.Web.UI.WebControls.FormView> や <xref:System.Web.UI.WebControls.ListView>などの、テンプレート化されたデータバインドコントロールによって、カスタムページの ASP.NET 動的データ機能を使用するデータフィールドを表示するために使用されます。 また、<xref:System.Web.UI.WebControls.GridView> または <xref:System.Web.UI.WebControls.DetailsView> コントロールの <xref:System.Web.UI.WebControls.TemplateField> フィールドで <xref:System.Web.DynamicData.DynamicControl> コントロールを使用することもできます。

 <xref:System.Web.DynamicData.DynamicControl> コントロールは、<xref:System.Web.DynamicData.DynamicField> フィールドと同様の機能を提供します。 ただし、<xref:System.Web.DynamicData.DynamicControl> コントロールはテンプレート内でのみ使用されるため、データの表示方法をより柔軟に制御できます。これは、フィールドの周囲に他の HTML 要素を追加できるためです。 <xref:System.Web.DynamicData.DynamicControl> コントロールを使用する場合は、次の動的データの機能を利用できます。

-   データ型に基づいてフィールドテンプレートを使用して、フィールドの適切なコントロールを自動的に表示します。 フィールドテンプレートは、アプリケーション全体に対してグローバルに変更できます。

-   データベーススキーマに基づいて組み込みのデータ検証を提供します。 データモデルをカスタマイズして、検証の種類を追加することもできます。

-   データモデルの属性を使用するか、<xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティを使用して、個々のフィールドのデータ表示をカスタマイズします。

 <xref:System.Web.DynamicData.DynamicControl> コントロールに表示するフィールドを指定するには、<xref:System.Web.DynamicData.DynamicControl.DataField%2A> プロパティをフィールド名に設定します。 カスタム書式指定文字列をフィールド値に適用するには、<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> プロパティを設定します。 既定では、書式設定文字列は、データバインドコントロールが読み取り専用モードの場合にのみ、フィールド値に適用されます。 データバインドコントロールが編集モードのときに表示される値に書式設定文字列を適用するには、<xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> プロパティを `true`に設定します。 フィールド値が `null`場合は、<xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> プロパティを設定することによって、カスタムキャプションを表示できます。 また、<xref:System.Web.DynamicData.DynamicControl> コントロールは、<xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A> プロパティを `true`に設定することによって、空の文字列 ("") フィールド値を null 値に自動的に変換することもできます。

 <xref:System.Web.DynamicData.DynamicControl> コントロールは、さまざまな表示モードをサポートしています。 <xref:System.Web.DynamicData.DynamicControl> コントロールを表示するモードを指定するには、<xref:System.Web.DynamicData.DynamicControl.Mode%2A> プロパティを設定します。 次の表は、それぞれのモードを示しています。

 表示モードの <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly> ます。 これにより、ユーザーはレコードまたはデータフィールドの値を変更できなくなります。 任意のテンプレートで使用できます。

 編集モードの <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit> ます。 これにより、ユーザーは既存のレコードの値を更新できます。 これは、編集テンプレート (通常は `EditItemTemplate`という名前) で使用されます。

 挿入モードの <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>。 これにより、ユーザーは新しいレコードの値を入力できます。 これは、挿入テンプレート (通常は `InsertItemTemplate`という名前) で使用されます。

 データバインドコントロールの <xref:System.Web.DynamicData.DynamicControl> コントロールを非表示にするには、<xref:System.Web.UI.Control.Visible%2A> プロパティを `false`に設定します。

<a name="declarative_syntax"></a>
## <a name="declarative-syntax"></a>宣言型の構文

```
<asp:DynamicControl
    ApplyFormatInEditMode="True|False"
    ConvertEmptyStringToNull="True|False"
    CssClass="string"
    DataField="string"
    DataFormatString="string"
    EnableViewState="True|False"
    HtmlEncode="True|False"
    ID="string"
    Mode="Edit|Insert|ReadOnly"
    NullDisplayText="string"
    OnDataBinding="DataBinding event handler"
    OnDisposed="Disposed event handler"
    OnInit="Init event handler"
    OnLoad="Load event handler"
    OnPreRender="PreRender event handler"
    OnUnload="Unload event handler"
    runat="server"
    UIHint="string"
    ValidationGroup="string"
    Visible="True|False"
>
</asp:DynamicControl>
```



## Examples
 この機能の実行時のコード例については、「 [run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl)」を参照してください。

 次の例では、<xref:System.Web.UI.WebControls.ListView> コントロールの <xref:System.Web.DynamicData.DynamicControl> コントロールを使用して、データベーステーブルの値を表示、挿入、削除、および編集する方法を示します。 挿入操作を機能させるために、`rowguid` 列および `ModifiedDate` 列の <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> プロパティは `true`に設定されることに注意してください。

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]

 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
    <related type="Article" href="https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512">ASP.NET 動的データの概要</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12">ASP.NET 動的データスキャフォールディング</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.DynamicControl : System.Web.UI.WebControls.DataBoundControlMode -&gt; System.Web.DynamicData.DynamicControl" Usage="new System.Web.DynamicData.DynamicControl mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">コントロールのモードを指定する列挙値の 1 つ。</param>
        <summary>指定したモードで、<see cref="T:System.Web.DynamicData.DynamicControl" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyFormatInEditMode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィールドが編集モードである場合に、<see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" /> プロパティで指定した書式指定文字列をフィールド値に適用するかどうかを示す値を取得または設定します。</summary>
        <value>書式指定文字列が適用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl> コントロールには、ユーザーがフィールドの読み取り、編集、または挿入を行うことができるさまざまな表示モードがあります。 既定では、<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> プロパティによって指定された書式設定文字列は、<xref:System.Web.DynamicData.DynamicControl> コントロールが読み取り専用モードの場合にのみ、フィールド値に適用されます。 データバインドコントロールが編集モードのときに表示される値に書式設定文字列を適用するには、<xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> プロパティを `true`に設定します。

> [!NOTE]
>  <xref:System.Web.DynamicData.DynamicControl> コントロールは、データソースでフィールドが更新されたときに、書式設定を自動的に削除しません。 格納されている値の一部として書式設定が不要な場合は、プログラムによって書式設定を削除する必要があります。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicControl.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに関連付ける列オブジェクトを取得または設定します。</summary>
        <value>コントロールに関連付けられている列オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl.Column%2A> プロパティを使用して、特定の列に関するメタデータ情報を取得できます。 <xref:System.Web.DynamicData.DynamicControl.Column%2A> プロパティは、<xref:System.Web.DynamicData.DynamicControl.DataField%2A> プロパティに指定されたフィールド名に基づいて、<xref:System.Web.DynamicData.DynamicControl> コントロールによって自動的に設定されます。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertEmptyStringToNull : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースのデータ フィールドを更新するときに、空の文字列値 ("") を null 値に自動的に変換するかどうかを示す値を取得または設定します。</summary>
        <value>空の文字列値を null 値に自動的に変換する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 データソースコントロールの <xref:System.Web.UI.WebControls.Parameter> オブジェクトには、<xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>という名前のプロパティもあります。 このプロパティは、同じ関数を実行します。 両方のプロパティが適切に設定されていることを確認します。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms366709(v=vs.100)">データソースコントロールを使用した Null データベース値の処理</related>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CssClass : string with get, set" Usage="System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールのコンテンツの表示スタイルを指定するカスケード スタイル シート (CSS: Cascading Style Sheet) クラスを取得または設定します。</summary>
        <value>CSS クラスの名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールがバインドされるデータ フィールドの名前を取得または設定します。</summary>
        <value><see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールがバインドされるデータ フィールドの名前。 既定値は空の文字列 ("") です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl> コントロールにバインドするデータフィールドを指定するには、<xref:System.Web.DynamicData.DynamicControl.DataField%2A> プロパティを使用します。 データフィールドは、列名、または外部キー列のリレーションシップ名にすることができます。

 既定では、指定されたデータフィールドは、フィールドのデータ型に関連付けられているフィールドテンプレートを使用して、<xref:System.Web.DynamicData.DynamicControl> コントロールによって表示されます。 [データ] フィールドに表示されるフィールドテンプレートを変更するには、[<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>] プロパティを設定します。 また、<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> プロパティを設定して、表示されるテキストの書式を設定することもできます。

 **メモ**データフィールドの表示と動作をグローバルに変更する場合は、<xref:System.Web.DynamicData.DynamicControl> コントロールの特定のインスタンスで属性を設定するのではなく、データモデルに属性を適用する必要があります。 詳細については、「 [ASP.NET 動的データ](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)」を参照してください。



## Examples
 次の例では、<xref:System.Web.DynamicData.DynamicControl.DataField%2A> プロパティを使用して、<xref:System.Web.DynamicData.DynamicControl> コントロールに表示するフィールドを指定する方法を示します。

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFormatString : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィールドの値の表示形式を指定する文字列を取得または設定します。</summary>
        <value>フィールドの値の表示形式を指定する書式指定文字列。 既定値は空の文字列 ("") です。この値は、フィールド値に適用される特定の書式が設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl> コントロールに表示される値のカスタム表示形式を指定するには、<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> プロパティを使用します。 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> プロパティが設定されていない場合、フィールド値は特殊な書式設定なしで表示されます。

 既定では、書式設定文字列は、<xref:System.Web.DynamicData.DynamicControl.Mode%2A> プロパティが <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>に設定されている場合にのみ、フィールド値に適用されます。 編集モード中に書式設定文字列をフィールド値に適用するには、<xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> プロパティを `true`に設定します。

 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> プロパティを使用して指定する表示形式は、<xref:System.Web.DynamicData.DynamicControl> コントロールのこのインスタンスに固有です。 データモデルに <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> を適用し、コンストラクターで <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType> 名前付きパラメーターを設定することによって、アプリケーション全体でデータフィールドの表示形式を変更することもできます。 詳細については、「 [ASP.NET 動的データ](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)」を参照してください。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールに対して作成されたフィールド テンプレートを取得します。</summary>
        <value><see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールに対して作成されたフィールド テンプレート。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string -&gt; string&#xA;override this.GetAttribute : string -&gt; string" Usage="dynamicControl.GetAttribute key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IAttributeAccessor.GetAttribute(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">属性の名前。</param>
        <summary>指定したキーを使用して属性値を取得します。</summary>
        <returns>属性の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Attributes コレクションが `null`場合、このメソッドは空の文字列を返します。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのデータを表示する前に HTML エンコードするかどうかを示す値を取得または設定します。</summary>
        <value>コントロールのデータを表示する前に HTML エンコードする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A> プロパティを使用して、フィールド値を表示する前にそれぞれの文字列形式に HTML エンコードするかどうかを指定します。

> [!NOTE]
>  HTML エンコードフィールド値は、クロスサイトスクリプティング攻撃や悪意のあるコンテンツが表示されないようにするために役立ちます。 このプロパティは、可能な場合は常に有効にする必要があります。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.DataBoundControlMode with get, set" Usage="System.Web.DynamicData.DynamicControl.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>レンダリング モードを取得または設定します。</summary>
        <value>コントロールのレンダリング モードを指定する列挙値の 1 つ。 既定値は、<see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl.Mode%2A> プロパティを使用して、<xref:System.Web.DynamicData.DynamicControl> コントロールを表示するために使用する表示モードを指定します。 次の表は、それぞれのモードを示しています。

|モード|説明|
|----------|-----------------|
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|表示モードの場合。 これにより、ユーザーはレコードまたはデータフィールドの値を変更できなくなります。 任意のテンプレートで使用できます。 これが既定値です。|
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|編集モードの場合。 これにより、ユーザーは既存のレコードの値を更新できます。 これは `EditItemTemplate` テンプレートで使用されます。|
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|挿入モードの場合。 これにより、ユーザーは新しいレコードの値を入力できます。 これは `InsertItemTemplate` テンプレートで使用されます。|

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullDisplayText : string with get, set" Usage="System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィールド値が <see langword="null" /> の場合にデータ フィールドに表示されるキャプションを取得または設定します。</summary>
        <value>フィールド値が <see langword="null" /> の場合にデータ フィールドに表示されるキャプション。 既定値は空の文字列 ("") です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 フィールド値は、データソースに null として格納されることがあります。 <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> プロパティを設定することによって、null 値を持つフィールドに表示するカスタムキャプションを指定できます。 このプロパティが設定されていない場合、null フィールド値は空の文字列 ("") として表示されます。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="dynamicControl.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary><see cref="E:System.Web.UI.Control.Init" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。

 <xref:System.Web.DynamicData.DynamicControl.OnInit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.DynamicData.DynamicControl.DataField" /> プロパティが設定されていません。</exception>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取るように、基本クラスの <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> メソッドを呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicControl.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">クライアントのブラウザーに <see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールのコンテンツを表示するために使用するオブジェクト。</param>
        <summary>指定した <see cref="T:System.Web.DynamicData.DynamicControl" /> オブジェクトを使用して、<see cref="T:System.Web.UI.HtmlTextWriter" /> コントロールのコンテンツをクライアントのブラウザーに表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl.Render%2A> メソッドは、主にコントロールの開発者が <xref:System.Web.DynamicData.DynamicControl> コントロールを拡張するために使用します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetAttribute : string * string -&gt; unit&#xA;override this.SetAttribute : string * string -&gt; unit" Usage="dynamicControl.SetAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IAttributeAccessor.SetAttribute(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">設定する属性名です。</param>
        <param name="value">属性に代入する値。</param>
        <summary>指定した属性を、指定した値に設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System::Web::DynamicData::IFieldTemplateHost::FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions : System.Web.DynamicData.IFieldFormattingOptions" Usage="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />」をご覧ください。</summary>
        <value>フィールド テンプレートに適用される書式指定オプション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Table : System.Web.DynamicData.MetaTable" Usage="System.Web.DynamicData.DynamicControl.Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに関連付けられているテーブル オブジェクトを取得します。</summary>
        <value>コントロールに関連付けられているテーブル オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DynamicData.DynamicControl> コントロールを含むデータバインドコントロールに関連付けられているテーブルに関するメタデータ情報にアクセスするには、<xref:System.Web.DynamicData.DynamicControl.Table%2A> プロパティを使用します。

 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><see cref="T:System.Web.DynamicData.DynamicControl" /> コントロールは、<see cref="T:System.Web.DynamicData.IDynamicDataSource" /> インターフェイスを実装するデータ ソース コントロールにバインドされていないデータ バインド コントロール内にあります。</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UIHint : string with get, set" Usage="System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ フィールドの表示に使用するフィールド テンプレートの名前を取得または設定します。</summary>
        <value>データ フィールドの表示に使用するフィールド テンプレートの名前。 既定値は空の文字列 ("") です。これは、データ フィールドの型、またはデータ モデルに適用されるメタデータ情報に基づいて、フィールド テンプレートが表示されることを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 データフィールドの UI を表示するために使用するフィールドテンプレートを指定するには、<xref:System.Web.DynamicData.DynamicControl.UIHint%2A> プロパティを使用します。 既定では、フィールドテンプレートはユーザーコントロールであり、その名前には、編集操作と挿入操作に使用されるフィールドテンプレートを識別するためのサフィックスが含まれています。 サフィックスはそれぞれ _edit、_insert ます。 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> プロパティに値を設定する場合は、サフィックスなしで名前を設定します。 動的データは、<xref:System.Web.DynamicData.DynamicControl.Mode%2A> プロパティ値を評価することによって正しいモードを識別し、正しいフィールドテンプレートを表示します。

 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> プロパティが設定されていない場合は、既定で動的データによってフィールドの種類に基づいてフィールドテンプレートが表示されます。 詳細については、「 [ASP.NET 動的データスキャフォールディング](https://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12)」を参照してください。

 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> プロパティを使用して指定するフィールドテンプレートは、<xref:System.Web.DynamicData.DynamicControl> コントロールのこのインスタンスに固有です。 データモデルに <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> を適用することで、アプリケーション全体でデータフィールドによって使用されるフィールドテンプレートを変更することもできます。 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> プロパティを設定すると、データモデルに適用されるメタデータが上書きされます。 メタデータ属性の詳細については、「 [ASP.NET 動的データ](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)」を参照してください。



## Examples
 この機能の実行時のコード例については、「 [run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint)」を参照してください。

 次の例は、別のフィールドテンプレートを使用してコンテンツを表示するデータフィールドを指定する方法を示しています。 2番目の例は、<xref:System.Web.DynamicData.DynamicControl.UIHint%2A> プロパティによって指定されたカスタムフィールドテンプレートを示しています。

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <related type="Article" href="https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512">ASP.NET 動的データモデルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの検証グループ名を取得または設定します。</summary>
        <value>コントロールの検証グループ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 検証グループを使用すると、ページ上の検証コントロールを特定のカテゴリに割り当てることができます。 各検証グループは、ページ上の他の検証グループとは別に検証できます。 <xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A> プロパティを使用して、ページがサーバーにポストバックされるときに <xref:System.Web.DynamicData.DynamicControl> コントロールによって検証される検証グループの名前を指定します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
